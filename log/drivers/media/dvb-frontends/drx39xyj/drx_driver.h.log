commit 868c9a17e22c89d241f12501e21ae4f104ce036c
Author: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>
Date:   Mon Feb 18 14:28:55 2019 -0500

    media: dvb-frontends: fix several typos
    
    Use codespell to fix lots of typos over frontends.
    
    Manually verified to avoid false-positives.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 1ec20eecc433..15f7e58c5a30 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -94,7 +94,7 @@ int drxbsp_i2c_term(void);
 * \param r_count   The number of bytes to read
 * \param r_data    The array to read the data from
 * \return int Return status.
-* \retval 0 Succes.
+* \retval 0 Success.
 * \retval -EIO Failure.
 * \retval -EINVAL Parameter 'wcount' is not zero but parameter
 *                                       'wdata' contains NULL.
@@ -986,7 +986,7 @@ struct drx_filter_info {
 * \struct struct drx_channel * \brief The set of parameters describing a single channel.
 *
 * Used by DRX_CTRL_SET_CHANNEL and DRX_CTRL_GET_CHANNEL.
-* Only certain fields need to be used for a specfic standard.
+* Only certain fields need to be used for a specific standard.
 *
 */
 struct drx_channel {
@@ -1606,7 +1606,7 @@ struct drx_version_list {
 		DRX_AUD_I2S_MATRIX_B_MONO,
 					/*< B sound only, stereo or mono     */
 		DRX_AUD_I2S_MATRIX_STEREO,
-					/*< A+B sound, transparant           */
+					/*< A+B sound, transparent           */
 		DRX_AUD_I2S_MATRIX_MONO	/*< A+B mixed to mono sum, (L+R)/2   */};
 
 /*
@@ -1870,7 +1870,7 @@ struct drx_reg_dump {
 				      /*< current power management mode      */
 
 		/* Tuner */
-		u8 tuner_port_nr;     /*< nr of I2C port to wich tuner is    */
+		u8 tuner_port_nr;     /*< nr of I2C port to which tuner is    */
 		s32 tuner_min_freq_rf;
 				      /*< minimum RF input frequency, in kHz */
 		s32 tuner_max_freq_rf;

commit 6e6a8b5a38cb04d5ef35d4eb57836126b954e7c8
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Thu Jan 4 13:08:56 2018 -0500

    media: replace all <spaces><tab> occurrences
    
    There are a lot of places where sequences of space/tabs are
    found. Get rid of all spaces before tabs.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 855685b6b386..1ec20eecc433 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -932,7 +932,7 @@ STRUCTS
  * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
  */
 struct drxu_code_info {
-	char 			*mc_file;
+	char			*mc_file;
 };
 
 /*

commit b95b0c98f52883f9b907836f3421341af6f0145f
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Wed Nov 29 12:39:19 2017 -0500

    media: dvb_frontends: fix kernel-doc macros
    
    Now, the Kernel checks for kernel_doc format issues.
    Weird enough, it didn't get any of those troubles. Shssst!
    
    Well, let's fix it, as a preventive way to avoid having
    hundreds of new warnings on some next Linux version.
    
    Tested by adding all files under dvb-frontends that have
    "/**" on them.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index cd69e187ba7a..855685b6b386 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -46,7 +46,7 @@ struct i2c_device_addr {
 	void *user_data;		/* User data pointer */
 };
 
-/**
+/*
 * \def IS_I2C_10BIT( addr )
 * \brief Determine if I2C address 'addr' is a 10 bits address or not.
 * \param addr The I2C address.
@@ -61,7 +61,7 @@ struct i2c_device_addr {
 Exported FUNCTIONS
 ------------------------------------------------------------------------------*/
 
-/**
+/*
 * \fn drxbsp_i2c_init()
 * \brief Initialize I2C communication module.
 * \return int Return status.
@@ -70,7 +70,7 @@ Exported FUNCTIONS
 */
 int drxbsp_i2c_init(void);
 
-/**
+/*
 * \fn drxbsp_i2c_term()
 * \brief Terminate I2C communication module.
 * \return int Return status.
@@ -79,7 +79,7 @@ int drxbsp_i2c_init(void);
 */
 int drxbsp_i2c_term(void);
 
-/**
+/*
 * \fn int drxbsp_i2c_write_read( struct i2c_device_addr *w_dev_addr,
 *                                       u16 w_count,
 *                                       u8 * wData,
@@ -115,7 +115,7 @@ int drxbsp_i2c_write_read(struct i2c_device_addr *w_dev_addr,
 					struct i2c_device_addr *r_dev_addr,
 					u16 r_count, u8 *r_data);
 
-/**
+/*
 * \fn drxbsp_i2c_error_text()
 * \brief Returns a human readable error.
 * Counter part of numerical drx_i2c_error_g.
@@ -124,7 +124,7 @@ int drxbsp_i2c_write_read(struct i2c_device_addr *w_dev_addr,
 */
 char *drxbsp_i2c_error_text(void);
 
-/**
+/*
 * \var drx_i2c_error_g;
 * \brief I2C specific error codes, platform dependent.
 */
@@ -241,13 +241,13 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 						struct i2c_device_addr *r_dev_addr,
 						u16 r_count, u8 *r_data);
 
-/**************
+/*************
 *
 * This section configures the DRX Data Access Protocols (DAPs).
 *
 **************/
 
-/**
+/*
 * \def DRXDAP_SINGLE_MASTER
 * \brief Enable I2C single or I2C multimaster mode on host.
 *
@@ -262,7 +262,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 #define DRXDAP_SINGLE_MASTER 1
 #endif
 
-/**
+/*
 * \def DRXDAP_MAX_WCHUNKSIZE
 * \brief Defines maximum chunksize of an i2c write action by host.
 *
@@ -282,7 +282,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 #define  DRXDAP_MAX_WCHUNKSIZE 60
 #endif
 
-/**
+/*
 * \def DRXDAP_MAX_RCHUNKSIZE
 * \brief Defines maximum chunksize of an i2c read action by host.
 *
@@ -297,13 +297,13 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 #define  DRXDAP_MAX_RCHUNKSIZE 60
 #endif
 
-/**************
+/*************
 *
 * This section describes drxdriver defines.
 *
 **************/
 
-/**
+/*
 * \def DRX_UNKNOWN
 * \brief Generic UNKNOWN value for DRX enumerated types.
 *
@@ -313,7 +313,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 #define DRX_UNKNOWN (254)
 #endif
 
-/**
+/*
 * \def DRX_AUTO
 * \brief Generic AUTO value for DRX enumerated types.
 *
@@ -324,104 +324,104 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 #define DRX_AUTO    (255)
 #endif
 
-/**************
+/*************
 *
 * This section describes flag definitions for the device capbilities.
 *
 **************/
 
-/**
+/*
 * \brief LNA capability flag
 *
 * Device has a Low Noise Amplifier
 *
 */
 #define DRX_CAPABILITY_HAS_LNA           (1UL <<  0)
-/**
+/*
 * \brief OOB-RX capability flag
 *
 * Device has OOB-RX
 *
 */
 #define DRX_CAPABILITY_HAS_OOBRX         (1UL <<  1)
-/**
+/*
 * \brief ATV capability flag
 *
 * Device has ATV
 *
 */
 #define DRX_CAPABILITY_HAS_ATV           (1UL <<  2)
-/**
+/*
 * \brief DVB-T capability flag
 *
 * Device has DVB-T
 *
 */
 #define DRX_CAPABILITY_HAS_DVBT          (1UL <<  3)
-/**
+/*
 * \brief  ITU-B capability flag
 *
 * Device has ITU-B
 *
 */
 #define DRX_CAPABILITY_HAS_ITUB          (1UL <<  4)
-/**
+/*
 * \brief  Audio capability flag
 *
 * Device has Audio
 *
 */
 #define DRX_CAPABILITY_HAS_AUD           (1UL <<  5)
-/**
+/*
 * \brief  SAW switch capability flag
 *
 * Device has SAW switch
 *
 */
 #define DRX_CAPABILITY_HAS_SAWSW         (1UL <<  6)
-/**
+/*
 * \brief  GPIO1 capability flag
 *
 * Device has GPIO1
 *
 */
 #define DRX_CAPABILITY_HAS_GPIO1         (1UL <<  7)
-/**
+/*
 * \brief  GPIO2 capability flag
 *
 * Device has GPIO2
 *
 */
 #define DRX_CAPABILITY_HAS_GPIO2         (1UL <<  8)
-/**
+/*
 * \brief  IRQN capability flag
 *
 * Device has IRQN
 *
 */
 #define DRX_CAPABILITY_HAS_IRQN          (1UL <<  9)
-/**
+/*
 * \brief  8VSB capability flag
 *
 * Device has 8VSB
 *
 */
 #define DRX_CAPABILITY_HAS_8VSB          (1UL << 10)
-/**
+/*
 * \brief  SMA-TX capability flag
 *
 * Device has SMATX
 *
 */
 #define DRX_CAPABILITY_HAS_SMATX         (1UL << 11)
-/**
+/*
 * \brief  SMA-RX capability flag
 *
 * Device has SMARX
 *
 */
 #define DRX_CAPABILITY_HAS_SMARX         (1UL << 12)
-/**
+/*
 * \brief  ITU-A/C capability flag
 *
 * Device has ITU-A/C
@@ -439,7 +439,7 @@ MACROS
 	 DRX_VERSIONSTRING_HELP(PATCH)
 #define DRX_VERSIONSTRING_HELP(NUM) #NUM
 
-/**
+/*
 * \brief Macro to create byte array elements from 16 bit integers.
 * This macro is used to create byte arrays for block writes.
 * Block writes speed up I2C traffic between host and demod.
@@ -449,7 +449,7 @@ MACROS
 #define DRX_16TO8(x) ((u8) (((u16)x) & 0xFF)), \
 			((u8)((((u16)x)>>8)&0xFF))
 
-/**
+/*
 * \brief Macro to convert 16 bit register value to a s32
 */
 #define DRX_U16TODRXFREQ(x)   ((x & 0x8000) ? \
@@ -461,191 +461,191 @@ MACROS
 ENUM
 -------------------------------------------------------------------------*/
 
-/**
+/*
 * \enum enum drx_standard
 * \brief Modulation standards.
 */
 enum drx_standard {
-	DRX_STANDARD_DVBT = 0, /**< Terrestrial DVB-T.               */
-	DRX_STANDARD_8VSB,     /**< Terrestrial 8VSB.                */
-	DRX_STANDARD_NTSC,     /**< Terrestrial\Cable analog NTSC.   */
+	DRX_STANDARD_DVBT = 0, /*< Terrestrial DVB-T.               */
+	DRX_STANDARD_8VSB,     /*< Terrestrial 8VSB.                */
+	DRX_STANDARD_NTSC,     /*< Terrestrial\Cable analog NTSC.   */
 	DRX_STANDARD_PAL_SECAM_BG,
-				/**< Terrestrial analog PAL/SECAM B/G */
+				/*< Terrestrial analog PAL/SECAM B/G */
 	DRX_STANDARD_PAL_SECAM_DK,
-				/**< Terrestrial analog PAL/SECAM D/K */
+				/*< Terrestrial analog PAL/SECAM D/K */
 	DRX_STANDARD_PAL_SECAM_I,
-				/**< Terrestrial analog PAL/SECAM I   */
+				/*< Terrestrial analog PAL/SECAM I   */
 	DRX_STANDARD_PAL_SECAM_L,
-				/**< Terrestrial analog PAL/SECAM L
+				/*< Terrestrial analog PAL/SECAM L
 					with negative modulation        */
 	DRX_STANDARD_PAL_SECAM_LP,
-				/**< Terrestrial analog PAL/SECAM L
+				/*< Terrestrial analog PAL/SECAM L
 					with positive modulation        */
-	DRX_STANDARD_ITU_A,    /**< Cable ITU ANNEX A.               */
-	DRX_STANDARD_ITU_B,    /**< Cable ITU ANNEX B.               */
-	DRX_STANDARD_ITU_C,    /**< Cable ITU ANNEX C.               */
-	DRX_STANDARD_ITU_D,    /**< Cable ITU ANNEX D.               */
-	DRX_STANDARD_FM,       /**< Terrestrial\Cable FM radio       */
-	DRX_STANDARD_DTMB,     /**< Terrestrial DTMB standard (China)*/
+	DRX_STANDARD_ITU_A,    /*< Cable ITU ANNEX A.               */
+	DRX_STANDARD_ITU_B,    /*< Cable ITU ANNEX B.               */
+	DRX_STANDARD_ITU_C,    /*< Cable ITU ANNEX C.               */
+	DRX_STANDARD_ITU_D,    /*< Cable ITU ANNEX D.               */
+	DRX_STANDARD_FM,       /*< Terrestrial\Cable FM radio       */
+	DRX_STANDARD_DTMB,     /*< Terrestrial DTMB standard (China)*/
 	DRX_STANDARD_UNKNOWN = DRX_UNKNOWN,
-				/**< Standard unknown.                */
+				/*< Standard unknown.                */
 	DRX_STANDARD_AUTO = DRX_AUTO
-				/**< Autodetect standard.             */
+				/*< Autodetect standard.             */
 };
 
-/**
+/*
 * \enum enum drx_standard
 * \brief Modulation sub-standards.
 */
 enum drx_substandard {
-	DRX_SUBSTANDARD_MAIN = 0, /**< Main subvariant of standard   */
+	DRX_SUBSTANDARD_MAIN = 0, /*< Main subvariant of standard   */
 	DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
 	DRX_SUBSTANDARD_ATV_DK_POLAND,
 	DRX_SUBSTANDARD_ATV_DK_CHINA,
 	DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN,
-					/**< Sub-standard unknown.         */
+					/*< Sub-standard unknown.         */
 	DRX_SUBSTANDARD_AUTO = DRX_AUTO
-					/**< Auto (default) sub-standard   */
+					/*< Auto (default) sub-standard   */
 };
 
-/**
+/*
 * \enum enum drx_bandwidth
 * \brief Channel bandwidth or channel spacing.
 */
 enum drx_bandwidth {
-	DRX_BANDWIDTH_8MHZ = 0,	 /**< Bandwidth 8 MHz.   */
-	DRX_BANDWIDTH_7MHZ,	 /**< Bandwidth 7 MHz.   */
-	DRX_BANDWIDTH_6MHZ,	 /**< Bandwidth 6 MHz.   */
+	DRX_BANDWIDTH_8MHZ = 0,	 /*< Bandwidth 8 MHz.   */
+	DRX_BANDWIDTH_7MHZ,	 /*< Bandwidth 7 MHz.   */
+	DRX_BANDWIDTH_6MHZ,	 /*< Bandwidth 6 MHz.   */
 	DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,
-					/**< Bandwidth unknown. */
+					/*< Bandwidth unknown. */
 	DRX_BANDWIDTH_AUTO = DRX_AUTO
-					/**< Auto Set Bandwidth */
+					/*< Auto Set Bandwidth */
 };
 
-/**
+/*
 * \enum enum drx_mirror
 * \brief Indicate if channel spectrum is mirrored or not.
 */
 enum drx_mirror {
-	DRX_MIRROR_NO = 0,   /**< Spectrum is not mirrored.           */
-	DRX_MIRROR_YES,	     /**< Spectrum is mirrored.               */
+	DRX_MIRROR_NO = 0,   /*< Spectrum is not mirrored.           */
+	DRX_MIRROR_YES,	     /*< Spectrum is mirrored.               */
 	DRX_MIRROR_UNKNOWN = DRX_UNKNOWN,
-				/**< Unknown if spectrum is mirrored.    */
+				/*< Unknown if spectrum is mirrored.    */
 	DRX_MIRROR_AUTO = DRX_AUTO
-				/**< Autodetect if spectrum is mirrored. */
+				/*< Autodetect if spectrum is mirrored. */
 };
 
-/**
+/*
 * \enum enum drx_modulation
 * \brief Constellation type of the channel.
 */
 enum drx_modulation {
-	DRX_CONSTELLATION_BPSK = 0,  /**< Modulation is BPSK.       */
-	DRX_CONSTELLATION_QPSK,	     /**< Constellation is QPSK.    */
-	DRX_CONSTELLATION_PSK8,	     /**< Constellation is PSK8.    */
-	DRX_CONSTELLATION_QAM16,     /**< Constellation is QAM16.   */
-	DRX_CONSTELLATION_QAM32,     /**< Constellation is QAM32.   */
-	DRX_CONSTELLATION_QAM64,     /**< Constellation is QAM64.   */
-	DRX_CONSTELLATION_QAM128,    /**< Constellation is QAM128.  */
-	DRX_CONSTELLATION_QAM256,    /**< Constellation is QAM256.  */
-	DRX_CONSTELLATION_QAM512,    /**< Constellation is QAM512.  */
-	DRX_CONSTELLATION_QAM1024,   /**< Constellation is QAM1024. */
-	DRX_CONSTELLATION_QPSK_NR,   /**< Constellation is QPSK_NR  */
+	DRX_CONSTELLATION_BPSK = 0,  /*< Modulation is BPSK.       */
+	DRX_CONSTELLATION_QPSK,	     /*< Constellation is QPSK.    */
+	DRX_CONSTELLATION_PSK8,	     /*< Constellation is PSK8.    */
+	DRX_CONSTELLATION_QAM16,     /*< Constellation is QAM16.   */
+	DRX_CONSTELLATION_QAM32,     /*< Constellation is QAM32.   */
+	DRX_CONSTELLATION_QAM64,     /*< Constellation is QAM64.   */
+	DRX_CONSTELLATION_QAM128,    /*< Constellation is QAM128.  */
+	DRX_CONSTELLATION_QAM256,    /*< Constellation is QAM256.  */
+	DRX_CONSTELLATION_QAM512,    /*< Constellation is QAM512.  */
+	DRX_CONSTELLATION_QAM1024,   /*< Constellation is QAM1024. */
+	DRX_CONSTELLATION_QPSK_NR,   /*< Constellation is QPSK_NR  */
 	DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,
-					/**< Constellation unknown.    */
+					/*< Constellation unknown.    */
 	DRX_CONSTELLATION_AUTO = DRX_AUTO
-					/**< Autodetect constellation. */
+					/*< Autodetect constellation. */
 };
 
-/**
+/*
 * \enum enum drx_hierarchy
 * \brief Hierarchy of the channel.
 */
 enum drx_hierarchy {
-	DRX_HIERARCHY_NONE = 0,	/**< None hierarchical channel.     */
-	DRX_HIERARCHY_ALPHA1,	/**< Hierarchical channel, alpha=1. */
-	DRX_HIERARCHY_ALPHA2,	/**< Hierarchical channel, alpha=2. */
-	DRX_HIERARCHY_ALPHA4,	/**< Hierarchical channel, alpha=4. */
+	DRX_HIERARCHY_NONE = 0,	/*< None hierarchical channel.     */
+	DRX_HIERARCHY_ALPHA1,	/*< Hierarchical channel, alpha=1. */
+	DRX_HIERARCHY_ALPHA2,	/*< Hierarchical channel, alpha=2. */
+	DRX_HIERARCHY_ALPHA4,	/*< Hierarchical channel, alpha=4. */
 	DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN,
-				/**< Hierarchy unknown.             */
+				/*< Hierarchy unknown.             */
 	DRX_HIERARCHY_AUTO = DRX_AUTO
-				/**< Autodetect hierarchy.          */
+				/*< Autodetect hierarchy.          */
 };
 
-/**
+/*
 * \enum enum drx_priority
 * \brief Channel priority in case of hierarchical transmission.
 */
 enum drx_priority {
-	DRX_PRIORITY_LOW = 0,  /**< Low priority channel.  */
-	DRX_PRIORITY_HIGH,     /**< High priority channel. */
+	DRX_PRIORITY_LOW = 0,  /*< Low priority channel.  */
+	DRX_PRIORITY_HIGH,     /*< High priority channel. */
 	DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN
-				/**< Priority unknown.      */
+				/*< Priority unknown.      */
 };
 
-/**
+/*
 * \enum enum drx_coderate
 * \brief Channel priority in case of hierarchical transmission.
 */
 enum drx_coderate {
-		DRX_CODERATE_1DIV2 = 0,	/**< Code rate 1/2nd.      */
-		DRX_CODERATE_2DIV3,	/**< Code rate 2/3nd.      */
-		DRX_CODERATE_3DIV4,	/**< Code rate 3/4nd.      */
-		DRX_CODERATE_5DIV6,	/**< Code rate 5/6nd.      */
-		DRX_CODERATE_7DIV8,	/**< Code rate 7/8nd.      */
+		DRX_CODERATE_1DIV2 = 0,	/*< Code rate 1/2nd.      */
+		DRX_CODERATE_2DIV3,	/*< Code rate 2/3nd.      */
+		DRX_CODERATE_3DIV4,	/*< Code rate 3/4nd.      */
+		DRX_CODERATE_5DIV6,	/*< Code rate 5/6nd.      */
+		DRX_CODERATE_7DIV8,	/*< Code rate 7/8nd.      */
 		DRX_CODERATE_UNKNOWN = DRX_UNKNOWN,
-					/**< Code rate unknown.    */
+					/*< Code rate unknown.    */
 		DRX_CODERATE_AUTO = DRX_AUTO
-					/**< Autodetect code rate. */
+					/*< Autodetect code rate. */
 };
 
-/**
+/*
 * \enum enum drx_guard
 * \brief Guard interval of a channel.
 */
 enum drx_guard {
-	DRX_GUARD_1DIV32 = 0, /**< Guard interval 1/32nd.     */
-	DRX_GUARD_1DIV16,     /**< Guard interval 1/16th.     */
-	DRX_GUARD_1DIV8,      /**< Guard interval 1/8th.      */
-	DRX_GUARD_1DIV4,      /**< Guard interval 1/4th.      */
+	DRX_GUARD_1DIV32 = 0, /*< Guard interval 1/32nd.     */
+	DRX_GUARD_1DIV16,     /*< Guard interval 1/16th.     */
+	DRX_GUARD_1DIV8,      /*< Guard interval 1/8th.      */
+	DRX_GUARD_1DIV4,      /*< Guard interval 1/4th.      */
 	DRX_GUARD_UNKNOWN = DRX_UNKNOWN,
-				/**< Guard interval unknown.    */
+				/*< Guard interval unknown.    */
 	DRX_GUARD_AUTO = DRX_AUTO
-				/**< Autodetect guard interval. */
+				/*< Autodetect guard interval. */
 };
 
-/**
+/*
 * \enum enum drx_fft_mode
 * \brief FFT mode.
 */
 enum drx_fft_mode {
-	DRX_FFTMODE_2K = 0,    /**< 2K FFT mode.         */
-	DRX_FFTMODE_4K,	       /**< 4K FFT mode.         */
-	DRX_FFTMODE_8K,	       /**< 8K FFT mode.         */
+	DRX_FFTMODE_2K = 0,    /*< 2K FFT mode.         */
+	DRX_FFTMODE_4K,	       /*< 4K FFT mode.         */
+	DRX_FFTMODE_8K,	       /*< 8K FFT mode.         */
 	DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,
-				/**< FFT mode unknown.    */
+				/*< FFT mode unknown.    */
 	DRX_FFTMODE_AUTO = DRX_AUTO
-				/**< Autodetect FFT mode. */
+				/*< Autodetect FFT mode. */
 };
 
-/**
+/*
 * \enum enum drx_classification
 * \brief Channel classification.
 */
 enum drx_classification {
-	DRX_CLASSIFICATION_GAUSS = 0, /**< Gaussion noise.            */
-	DRX_CLASSIFICATION_HVY_GAUSS, /**< Heavy Gaussion noise.      */
-	DRX_CLASSIFICATION_COCHANNEL, /**< Co-channel.                */
-	DRX_CLASSIFICATION_STATIC,    /**< Static echo.               */
-	DRX_CLASSIFICATION_MOVING,    /**< Moving echo.               */
-	DRX_CLASSIFICATION_ZERODB,    /**< Zero dB echo.              */
+	DRX_CLASSIFICATION_GAUSS = 0, /*< Gaussion noise.            */
+	DRX_CLASSIFICATION_HVY_GAUSS, /*< Heavy Gaussion noise.      */
+	DRX_CLASSIFICATION_COCHANNEL, /*< Co-channel.                */
+	DRX_CLASSIFICATION_STATIC,    /*< Static echo.               */
+	DRX_CLASSIFICATION_MOVING,    /*< Moving echo.               */
+	DRX_CLASSIFICATION_ZERODB,    /*< Zero dB echo.              */
 	DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,
-					/**< Unknown classification     */
+					/*< Unknown classification     */
 	DRX_CLASSIFICATION_AUTO = DRX_AUTO
-					/**< Autodetect classification. */
+					/*< Autodetect classification. */
 };
 
-/**
+/*
 * /enum enum drx_interleave_mode
 * /brief Interleave modes
 */
@@ -673,80 +673,80 @@ enum drx_interleave_mode {
 	DRX_INTERLEAVEMODE_B52_M48,
 	DRX_INTERLEAVEMODE_B52_M0,
 	DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,
-					/**< Unknown interleave mode    */
+					/*< Unknown interleave mode    */
 	DRX_INTERLEAVEMODE_AUTO = DRX_AUTO
-					/**< Autodetect interleave mode */
+					/*< Autodetect interleave mode */
 };
 
-/**
+/*
 * \enum enum drx_carrier_mode
 * \brief Channel Carrier Mode.
 */
 enum drx_carrier_mode {
-	DRX_CARRIER_MULTI = 0,		/**< Multi carrier mode       */
-	DRX_CARRIER_SINGLE,		/**< Single carrier mode      */
+	DRX_CARRIER_MULTI = 0,		/*< Multi carrier mode       */
+	DRX_CARRIER_SINGLE,		/*< Single carrier mode      */
 	DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,
-					/**< Carrier mode unknown.    */
-	DRX_CARRIER_AUTO = DRX_AUTO	/**< Autodetect carrier mode  */
+					/*< Carrier mode unknown.    */
+	DRX_CARRIER_AUTO = DRX_AUTO	/*< Autodetect carrier mode  */
 };
 
-/**
+/*
 * \enum enum drx_frame_mode
 * \brief Channel Frame Mode.
 */
 enum drx_frame_mode {
-	DRX_FRAMEMODE_420 = 0,	 /**< 420 with variable PN  */
-	DRX_FRAMEMODE_595,	 /**< 595                   */
-	DRX_FRAMEMODE_945,	 /**< 945 with variable PN  */
+	DRX_FRAMEMODE_420 = 0,	 /*< 420 with variable PN  */
+	DRX_FRAMEMODE_595,	 /*< 595                   */
+	DRX_FRAMEMODE_945,	 /*< 945 with variable PN  */
 	DRX_FRAMEMODE_420_FIXED_PN,
-					/**< 420 with fixed PN     */
+					/*< 420 with fixed PN     */
 	DRX_FRAMEMODE_945_FIXED_PN,
-					/**< 945 with fixed PN     */
+					/*< 945 with fixed PN     */
 	DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,
-					/**< Frame mode unknown.   */
+					/*< Frame mode unknown.   */
 	DRX_FRAMEMODE_AUTO = DRX_AUTO
-					/**< Autodetect frame mode */
+					/*< Autodetect frame mode */
 };
 
-/**
+/*
 * \enum enum drx_tps_frame
 * \brief Frame number in current super-frame.
 */
 enum drx_tps_frame {
-	DRX_TPS_FRAME1 = 0,	  /**< TPS frame 1.       */
-	DRX_TPS_FRAME2,		  /**< TPS frame 2.       */
-	DRX_TPS_FRAME3,		  /**< TPS frame 3.       */
-	DRX_TPS_FRAME4,		  /**< TPS frame 4.       */
+	DRX_TPS_FRAME1 = 0,	  /*< TPS frame 1.       */
+	DRX_TPS_FRAME2,		  /*< TPS frame 2.       */
+	DRX_TPS_FRAME3,		  /*< TPS frame 3.       */
+	DRX_TPS_FRAME4,		  /*< TPS frame 4.       */
 	DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN
-					/**< TPS frame unknown. */
+					/*< TPS frame unknown. */
 };
 
-/**
+/*
 * \enum enum drx_ldpc
 * \brief TPS LDPC .
 */
 enum drx_ldpc {
-	DRX_LDPC_0_4 = 0,	  /**< LDPC 0.4           */
-	DRX_LDPC_0_6,		  /**< LDPC 0.6           */
-	DRX_LDPC_0_8,		  /**< LDPC 0.8           */
+	DRX_LDPC_0_4 = 0,	  /*< LDPC 0.4           */
+	DRX_LDPC_0_6,		  /*< LDPC 0.6           */
+	DRX_LDPC_0_8,		  /*< LDPC 0.8           */
 	DRX_LDPC_UNKNOWN = DRX_UNKNOWN,
-					/**< LDPC unknown.      */
-	DRX_LDPC_AUTO = DRX_AUTO  /**< Autodetect LDPC    */
+					/*< LDPC unknown.      */
+	DRX_LDPC_AUTO = DRX_AUTO  /*< Autodetect LDPC    */
 };
 
-/**
+/*
 * \enum enum drx_pilot_mode
 * \brief Pilot modes in DTMB.
 */
 enum drx_pilot_mode {
-	DRX_PILOT_ON = 0,	  /**< Pilot On             */
-	DRX_PILOT_OFF,		  /**< Pilot Off            */
+	DRX_PILOT_ON = 0,	  /*< Pilot On             */
+	DRX_PILOT_OFF,		  /*< Pilot Off            */
 	DRX_PILOT_UNKNOWN = DRX_UNKNOWN,
-					/**< Pilot unknown.       */
-	DRX_PILOT_AUTO = DRX_AUTO /**< Autodetect Pilot     */
+					/*< Pilot unknown.       */
+	DRX_PILOT_AUTO = DRX_AUTO /*< Autodetect Pilot     */
 };
 
-/**
+/*
  * enum drxu_code_action - indicate if firmware has to be uploaded or verified.
  * @UCODE_UPLOAD:	Upload the microcode image to device
  * @UCODE_VERIFY:	Compare microcode image with code on device
@@ -756,7 +756,7 @@ enum drxu_code_action {
 	UCODE_VERIFY
 };
 
-/**
+/*
 * \enum enum drx_lock_status * \brief Used to reflect current lock status of demodulator.
 *
 * The generic lock states have device dependent semantics.
@@ -801,7 +801,7 @@ enum drx_lock_status {
 	DRX_LOCKED
 };
 
-/**
+/*
 * \enum enum drx_uio* \brief Used to address a User IO (UIO).
 */
 enum drx_uio {
@@ -840,7 +840,7 @@ enum drx_uio {
 	DRX_UIO_MAX = DRX_UIO32
 };
 
-/**
+/*
 * \enum enum drxuio_mode * \brief Used to configure the modus oprandi of a UIO.
 *
 * DRX_UIO_MODE_FIRMWARE is an old uio mode.
@@ -850,37 +850,37 @@ enum drx_uio {
 */
 enum drxuio_mode {
 	DRX_UIO_MODE_DISABLE = 0x01,
-			    /**< not used, pin is configured as input */
+			    /*< not used, pin is configured as input */
 	DRX_UIO_MODE_READWRITE = 0x02,
-			    /**< used for read/write by application   */
+			    /*< used for read/write by application   */
 	DRX_UIO_MODE_FIRMWARE = 0x04,
-			    /**< controlled by firmware, function 0   */
+			    /*< controlled by firmware, function 0   */
 	DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE,
-					    /**< same as above        */
+					    /*< same as above        */
 	DRX_UIO_MODE_FIRMWARE1 = 0x08,
-			    /**< controlled by firmware, function 1   */
+			    /*< controlled by firmware, function 1   */
 	DRX_UIO_MODE_FIRMWARE2 = 0x10,
-			    /**< controlled by firmware, function 2   */
+			    /*< controlled by firmware, function 2   */
 	DRX_UIO_MODE_FIRMWARE3 = 0x20,
-			    /**< controlled by firmware, function 3   */
+			    /*< controlled by firmware, function 3   */
 	DRX_UIO_MODE_FIRMWARE4 = 0x40,
-			    /**< controlled by firmware, function 4   */
+			    /*< controlled by firmware, function 4   */
 	DRX_UIO_MODE_FIRMWARE5 = 0x80
-			    /**< controlled by firmware, function 5   */
+			    /*< controlled by firmware, function 5   */
 };
 
-/**
+/*
 * \enum enum drxoob_downstream_standard * \brief Used to select OOB standard.
 *
 * Based on ANSI 55-1 and 55-2
 */
 enum drxoob_downstream_standard {
 	DRX_OOB_MODE_A = 0,
-		       /**< ANSI 55-1   */
+		       /*< ANSI 55-1   */
 	DRX_OOB_MODE_B_GRADE_A,
-		       /**< ANSI 55-2 A */
+		       /*< ANSI 55-2 A */
 	DRX_OOB_MODE_B_GRADE_B
-		       /**< ANSI 55-2 B */
+		       /*< ANSI 55-2 B */
 };
 
 /*-------------------------------------------------------------------------
@@ -924,7 +924,7 @@ STRUCTS
 /*============================================================================*/
 /*============================================================================*/
 
-/**
+/*
  * struct drxu_code_info	Parameters for microcode upload and verfiy.
  *
  * @mc_file:	microcode file name
@@ -935,7 +935,7 @@ struct drxu_code_info {
 	char 			*mc_file;
 };
 
-/**
+/*
 * \struct drx_mc_version_rec_t
 * \brief Microcode version record
 * Version numbers are stored in BCD format, as usual:
@@ -963,7 +963,7 @@ struct drx_mc_version_rec {
 
 /*========================================*/
 
-/**
+/*
 * \struct drx_filter_info_t
 * \brief Parameters for loading filter coefficients
 *
@@ -971,18 +971,18 @@ struct drx_mc_version_rec {
 */
 struct drx_filter_info {
 	u8 *data_re;
-	      /**< pointer to coefficients for RE */
+	      /*< pointer to coefficients for RE */
 	u8 *data_im;
-	      /**< pointer to coefficients for IM */
+	      /*< pointer to coefficients for IM */
 	u16 size_re;
-	      /**< size of coefficients for RE    */
+	      /*< size of coefficients for RE    */
 	u16 size_im;
-	      /**< size of coefficients for IM    */
+	      /*< size of coefficients for IM    */
 };
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drx_channel * \brief The set of parameters describing a single channel.
 *
 * Used by DRX_CTRL_SET_CHANNEL and DRX_CTRL_GET_CHANNEL.
@@ -991,29 +991,29 @@ struct drx_filter_info {
 */
 struct drx_channel {
 	s32 frequency;
-				/**< frequency in kHz                 */
+				/*< frequency in kHz                 */
 	enum drx_bandwidth bandwidth;
-				/**< bandwidth                        */
-	enum drx_mirror mirror;	/**< mirrored or not on RF            */
+				/*< bandwidth                        */
+	enum drx_mirror mirror;	/*< mirrored or not on RF            */
 	enum drx_modulation constellation;
-				/**< constellation                    */
+				/*< constellation                    */
 	enum drx_hierarchy hierarchy;
-				/**< hierarchy                        */
-	enum drx_priority priority;	/**< priority                         */
-	enum drx_coderate coderate;	/**< coderate                         */
-	enum drx_guard guard;	/**< guard interval                   */
-	enum drx_fft_mode fftmode;	/**< fftmode                          */
+				/*< hierarchy                        */
+	enum drx_priority priority;	/*< priority                         */
+	enum drx_coderate coderate;	/*< coderate                         */
+	enum drx_guard guard;	/*< guard interval                   */
+	enum drx_fft_mode fftmode;	/*< fftmode                          */
 	enum drx_classification classification;
-				/**< classification                   */
+				/*< classification                   */
 	u32 symbolrate;
-				/**< symbolrate in symbols/sec        */
+				/*< symbolrate in symbols/sec        */
 	enum drx_interleave_mode interleavemode;
-				/**< interleaveMode QAM               */
-	enum drx_ldpc ldpc;		/**< ldpc                             */
-	enum drx_carrier_mode carrier;	/**< carrier                          */
+				/*< interleaveMode QAM               */
+	enum drx_ldpc ldpc;		/*< ldpc                             */
+	enum drx_carrier_mode carrier;	/*< carrier                          */
 	enum drx_frame_mode framemode;
-				/**< frame mode                       */
-	enum drx_pilot_mode pilot;	/**< pilot mode                       */
+				/*< frame mode                       */
+	enum drx_pilot_mode pilot;	/*< pilot mode                       */
 };
 
 /*========================================*/
@@ -1027,74 +1027,74 @@ enum drx_cfg_sqi_speed {
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drx_complex * A complex number.
 *
 * Used by DRX_CTRL_CONSTEL.
 */
 struct drx_complex {
 	s16 im;
-     /**< Imaginary part. */
+     /*< Imaginary part. */
 	s16 re;
-     /**< Real part.      */
+     /*< Real part.      */
 };
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drx_frequency_plan * Array element of a frequency plan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
 struct drx_frequency_plan {
 	s32 first;
-		     /**< First centre frequency in this band        */
+		     /*< First centre frequency in this band        */
 	s32 last;
-		     /**< Last centre frequency in this band         */
+		     /*< Last centre frequency in this band         */
 	s32 step;
-		     /**< Stepping frequency in this band            */
+		     /*< Stepping frequency in this band            */
 	enum drx_bandwidth bandwidth;
-		     /**< Bandwidth within this frequency band       */
+		     /*< Bandwidth within this frequency band       */
 	u16 ch_number;
-		     /**< First channel number in this band, or first
+		     /*< First channel number in this band, or first
 			    index in ch_names                         */
 	char **ch_names;
-		     /**< Optional list of channel names in this
+		     /*< Optional list of channel names in this
 			    band                                     */
 };
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drx_scan_param * Parameters for channel scan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
 struct drx_scan_param {
 	struct drx_frequency_plan *frequency_plan;
-				  /**< Frequency plan (array)*/
-	u16 frequency_plan_size;  /**< Number of bands       */
-	u32 num_tries;		  /**< Max channels tried    */
-	s32 skip;	  /**< Minimum frequency step to take
+				  /*< Frequency plan (array)*/
+	u16 frequency_plan_size;  /*< Number of bands       */
+	u32 num_tries;		  /*< Max channels tried    */
+	s32 skip;	  /*< Minimum frequency step to take
 					after a channel is found */
-	void *ext_params;	  /**< Standard specific params */
+	void *ext_params;	  /*< Standard specific params */
 };
 
 /*========================================*/
 
-/**
+/*
 * \brief Scan commands.
 * Used by scanning algorithms.
 */
 enum drx_scan_command {
-		DRX_SCAN_COMMAND_INIT = 0,/**< Initialize scanning */
-		DRX_SCAN_COMMAND_NEXT,	  /**< Next scan           */
-		DRX_SCAN_COMMAND_STOP	  /**< Stop scanning       */
+		DRX_SCAN_COMMAND_INIT = 0,/*< Initialize scanning */
+		DRX_SCAN_COMMAND_NEXT,	  /*< Next scan           */
+		DRX_SCAN_COMMAND_STOP	  /*< Stop scanning       */
 };
 
 /*========================================*/
 
-/**
+/*
 * \brief Inner scan function prototype.
 */
 typedef int(*drx_scan_func_t) (void *scan_context,
@@ -1104,77 +1104,77 @@ typedef int(*drx_scan_func_t) (void *scan_context,
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drxtps_info * TPS information, DVB-T specific.
 *
 * Used by DRX_CTRL_TPS_INFO.
 */
 	struct drxtps_info {
-		enum drx_fft_mode fftmode;	/**< Fft mode       */
-		enum drx_guard guard;	/**< Guard interval */
+		enum drx_fft_mode fftmode;	/*< Fft mode       */
+		enum drx_guard guard;	/*< Guard interval */
 		enum drx_modulation constellation;
-					/**< Constellation  */
+					/*< Constellation  */
 		enum drx_hierarchy hierarchy;
-					/**< Hierarchy      */
+					/*< Hierarchy      */
 		enum drx_coderate high_coderate;
-					/**< High code rate */
+					/*< High code rate */
 		enum drx_coderate low_coderate;
-					/**< Low cod rate   */
-		enum drx_tps_frame frame;	/**< Tps frame      */
-		u8 length;		/**< Length         */
-		u16 cell_id;		/**< Cell id        */
+					/*< Low cod rate   */
+		enum drx_tps_frame frame;	/*< Tps frame      */
+		u8 length;		/*< Length         */
+		u16 cell_id;		/*< Cell id        */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \brief Power mode of device.
 *
 * Used by DRX_CTRL_SET_POWER_MODE.
 */
 	enum drx_power_mode {
 		DRX_POWER_UP = 0,
-			 /**< Generic         , Power Up Mode   */
+			 /*< Generic         , Power Up Mode   */
 		DRX_POWER_MODE_1,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_2,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_3,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_4,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_5,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_6,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_7,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 		DRX_POWER_MODE_8,
-			 /**< Device specific , Power Up Mode   */
+			 /*< Device specific , Power Up Mode   */
 
 		DRX_POWER_MODE_9,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_10,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_11,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_12,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_13,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_14,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_15,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_MODE_16,
-			 /**< Device specific , Power Down Mode */
+			 /*< Device specific , Power Down Mode */
 		DRX_POWER_DOWN = 255
-			 /**< Generic         , Power Down Mode */
+			 /*< Generic         , Power Down Mode */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \enum enum drx_module * \brief Software module identification.
 *
 * Used by DRX_CTRL_VERSION.
@@ -1191,93 +1191,93 @@ typedef int(*drx_scan_func_t) (void *scan_context,
 		DRX_MODULE_UNKNOWN
 	};
 
-/**
+/*
 * \enum struct drx_version * \brief Version information of one software module.
 *
 * Used by DRX_CTRL_VERSION.
 */
 	struct drx_version {
 		enum drx_module module_type;
-			       /**< Type identifier of the module */
+			       /*< Type identifier of the module */
 		char *module_name;
-			       /**< Name or description of module */
-		u16 v_major;  /**< Major version number          */
-		u16 v_minor;  /**< Minor version number          */
-		u16 v_patch;  /**< Patch version number          */
-		char *v_string; /**< Version as text string        */
+			       /*< Name or description of module */
+		u16 v_major;  /*< Major version number          */
+		u16 v_minor;  /*< Minor version number          */
+		u16 v_patch;  /*< Patch version number          */
+		char *v_string; /*< Version as text string        */
 	};
 
-/**
+/*
 * \enum struct drx_version_list * \brief List element of NULL terminated, linked list for version information.
 *
 * Used by DRX_CTRL_VERSION.
 */
 struct drx_version_list {
-	struct drx_version *version;/**< Version information */
+	struct drx_version *version;/*< Version information */
 	struct drx_version_list *next;
-			      /**< Next list element   */
+			      /*< Next list element   */
 };
 
 /*========================================*/
 
-/**
+/*
 * \brief Parameters needed to confiugure a UIO.
 *
 * Used by DRX_CTRL_UIO_CFG.
 */
 	struct drxuio_cfg {
 		enum drx_uio uio;
-		       /**< UIO identifier       */
+		       /*< UIO identifier       */
 		enum drxuio_mode mode;
-		       /**< UIO operational mode */
+		       /*< UIO operational mode */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \brief Parameters needed to read from or write to a UIO.
 *
 * Used by DRX_CTRL_UIO_READ and DRX_CTRL_UIO_WRITE.
 */
 	struct drxuio_data {
 		enum drx_uio uio;
-		   /**< UIO identifier              */
+		   /*< UIO identifier              */
 		bool value;
-		   /**< UIO value (true=1, false=0) */
+		   /*< UIO value (true=1, false=0) */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \brief Parameters needed to configure OOB.
 *
 * Used by DRX_CTRL_SET_OOB.
 */
 	struct drxoob {
-		s32 frequency;	   /**< Frequency in kHz      */
+		s32 frequency;	   /*< Frequency in kHz      */
 		enum drxoob_downstream_standard standard;
-						   /**< OOB standard          */
-		bool spectrum_inverted;	   /**< If true, then spectrum
+						   /*< OOB standard          */
+		bool spectrum_inverted;	   /*< If true, then spectrum
 							 is inverted          */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \brief Metrics from OOB.
 *
 * Used by DRX_CTRL_GET_OOB.
 */
 	struct drxoob_status {
-		s32 frequency; /**< Frequency in Khz         */
-		enum drx_lock_status lock;	  /**< Lock status              */
-		u32 mer;		  /**< MER                      */
-		s32 symbol_rate_offset;	  /**< Symbolrate offset in ppm */
+		s32 frequency; /*< Frequency in Khz         */
+		enum drx_lock_status lock;	  /*< Lock status              */
+		u32 mer;		  /*< MER                      */
+		s32 symbol_rate_offset;	  /*< Symbolrate offset in ppm */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \brief Device dependent configuration data.
 *
 * Used by DRX_CTRL_SET_CFG and DRX_CTRL_GET_CFG.
@@ -1285,14 +1285,14 @@ struct drx_version_list {
 */
 	struct drx_cfg {
 		u32 cfg_type;
-			  /**< Function identifier */
+			  /*< Function identifier */
 		void *cfg_data;
-			  /**< Function data */
+			  /*< Function data */
 	};
 
 /*========================================*/
 
-/**
+/*
 * /struct DRXMpegStartWidth_t
 * MStart width [nr MCLK cycles] for serial MPEG output.
 */
@@ -1303,7 +1303,7 @@ struct drx_version_list {
 	};
 
 /* CTRL CFG MPEG output */
-/**
+/*
 * \struct struct drx_cfg_mpeg_output * \brief Configuration parameters for MPEG output control.
 *
 * Used by DRX_CFG_MPEG_OUTPUT, in combination with DRX_CTRL_SET_CFG and
@@ -1311,29 +1311,29 @@ struct drx_version_list {
 */
 
 	struct drx_cfg_mpeg_output {
-		bool enable_mpeg_output;/**< If true, enable MPEG output      */
-		bool insert_rs_byte;	/**< If true, insert RS byte          */
-		bool enable_parallel;	/**< If true, parallel out otherwise
+		bool enable_mpeg_output;/*< If true, enable MPEG output      */
+		bool insert_rs_byte;	/*< If true, insert RS byte          */
+		bool enable_parallel;	/*< If true, parallel out otherwise
 								     serial   */
-		bool invert_data;	/**< If true, invert DATA signals     */
-		bool invert_err;	/**< If true, invert ERR signal       */
-		bool invert_str;	/**< If true, invert STR signals      */
-		bool invert_val;	/**< If true, invert VAL signals      */
-		bool invert_clk;	/**< If true, invert CLK signals      */
-		bool static_clk;	/**< If true, static MPEG clockrate
+		bool invert_data;	/*< If true, invert DATA signals     */
+		bool invert_err;	/*< If true, invert ERR signal       */
+		bool invert_str;	/*< If true, invert STR signals      */
+		bool invert_val;	/*< If true, invert VAL signals      */
+		bool invert_clk;	/*< If true, invert CLK signals      */
+		bool static_clk;	/*< If true, static MPEG clockrate
 					     will be used, otherwise clockrate
 					     will adapt to the bitrate of the
 					     TS                               */
-		u32 bitrate;		/**< Maximum bitrate in b/s in case
+		u32 bitrate;		/*< Maximum bitrate in b/s in case
 					     static clockrate is selected     */
 		enum drxmpeg_str_width width_str;
-					/**< MPEG start width                 */
+					/*< MPEG start width                 */
 	};
 
 
 /*========================================*/
 
-/**
+/*
 * \struct struct drxi2c_data * \brief Data for I2C via 2nd or 3rd or etc I2C port.
 *
 * Used by DRX_CTRL_I2C_READWRITE.
@@ -1341,187 +1341,187 @@ struct drx_version_list {
 *
 */
 	struct drxi2c_data {
-		u16 port_nr;	/**< I2C port number               */
+		u16 port_nr;	/*< I2C port number               */
 		struct i2c_device_addr *w_dev_addr;
-				/**< Write device address          */
-		u16 w_count;	/**< Size of write data in bytes   */
-		u8 *wData;	/**< Pointer to write data         */
+				/*< Write device address          */
+		u16 w_count;	/*< Size of write data in bytes   */
+		u8 *wData;	/*< Pointer to write data         */
 		struct i2c_device_addr *r_dev_addr;
-				/**< Read device address           */
-		u16 r_count;	/**< Size of data to read in bytes */
-		u8 *r_data;	/**< Pointer to read buffer        */
+				/*< Read device address           */
+		u16 r_count;	/*< Size of data to read in bytes */
+		u8 *r_data;	/*< Pointer to read buffer        */
 	};
 
 /*========================================*/
 
-/**
+/*
 * \enum enum drx_aud_standard * \brief Audio standard identifier.
 *
 * Used by DRX_CTRL_SET_AUD.
 */
 	enum drx_aud_standard {
-		DRX_AUD_STANDARD_BTSC,	   /**< set BTSC standard (USA)       */
-		DRX_AUD_STANDARD_A2,	   /**< set A2-Korea FM Stereo        */
-		DRX_AUD_STANDARD_EIAJ,	   /**< set to Japanese FM Stereo     */
-		DRX_AUD_STANDARD_FM_STEREO,/**< set to FM-Stereo Radio        */
-		DRX_AUD_STANDARD_M_MONO,   /**< for 4.5 MHz mono detected     */
-		DRX_AUD_STANDARD_D_K_MONO, /**< for 6.5 MHz mono detected     */
-		DRX_AUD_STANDARD_BG_FM,	   /**< set BG_FM standard            */
-		DRX_AUD_STANDARD_D_K1,	   /**< set D_K1 standard             */
-		DRX_AUD_STANDARD_D_K2,	   /**< set D_K2 standard             */
-		DRX_AUD_STANDARD_D_K3,	   /**< set D_K3 standard             */
+		DRX_AUD_STANDARD_BTSC,	   /*< set BTSC standard (USA)       */
+		DRX_AUD_STANDARD_A2,	   /*< set A2-Korea FM Stereo        */
+		DRX_AUD_STANDARD_EIAJ,	   /*< set to Japanese FM Stereo     */
+		DRX_AUD_STANDARD_FM_STEREO,/*< set to FM-Stereo Radio        */
+		DRX_AUD_STANDARD_M_MONO,   /*< for 4.5 MHz mono detected     */
+		DRX_AUD_STANDARD_D_K_MONO, /*< for 6.5 MHz mono detected     */
+		DRX_AUD_STANDARD_BG_FM,	   /*< set BG_FM standard            */
+		DRX_AUD_STANDARD_D_K1,	   /*< set D_K1 standard             */
+		DRX_AUD_STANDARD_D_K2,	   /*< set D_K2 standard             */
+		DRX_AUD_STANDARD_D_K3,	   /*< set D_K3 standard             */
 		DRX_AUD_STANDARD_BG_NICAM_FM,
-					   /**< set BG_NICAM_FM standard      */
+					   /*< set BG_NICAM_FM standard      */
 		DRX_AUD_STANDARD_L_NICAM_AM,
-					   /**< set L_NICAM_AM standard       */
+					   /*< set L_NICAM_AM standard       */
 		DRX_AUD_STANDARD_I_NICAM_FM,
-					   /**< set I_NICAM_FM standard       */
+					   /*< set I_NICAM_FM standard       */
 		DRX_AUD_STANDARD_D_K_NICAM_FM,
-					   /**< set D_K_NICAM_FM standard     */
-		DRX_AUD_STANDARD_NOT_READY,/**< used to detect audio standard */
+					   /*< set D_K_NICAM_FM standard     */
+		DRX_AUD_STANDARD_NOT_READY,/*< used to detect audio standard */
 		DRX_AUD_STANDARD_AUTO = DRX_AUTO,
-					   /**< Automatic Standard Detection  */
+					   /*< Automatic Standard Detection  */
 		DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN
-					   /**< used as auto and for readback */
+					   /*< used as auto and for readback */
 	};
 
 /* CTRL_AUD_GET_STATUS    - struct drx_aud_status */
-/**
+/*
 * \enum enum drx_aud_nicam_status * \brief Status of NICAM carrier.
 */
 	enum drx_aud_nicam_status {
 		DRX_AUD_NICAM_DETECTED = 0,
-					  /**< NICAM carrier detected         */
+					  /*< NICAM carrier detected         */
 		DRX_AUD_NICAM_NOT_DETECTED,
-					  /**< NICAM carrier not detected     */
-		DRX_AUD_NICAM_BAD	  /**< NICAM carrier bad quality      */
+					  /*< NICAM carrier not detected     */
+		DRX_AUD_NICAM_BAD	  /*< NICAM carrier bad quality      */
 	};
 
-/**
+/*
 * \struct struct drx_aud_status * \brief Audio status characteristics.
 */
 	struct drx_aud_status {
-		bool stereo;		  /**< stereo detection               */
-		bool carrier_a;	  /**< carrier A detected             */
-		bool carrier_b;	  /**< carrier B detected             */
-		bool sap;		  /**< sap / bilingual detection      */
-		bool rds;		  /**< RDS data array present         */
+		bool stereo;		  /*< stereo detection               */
+		bool carrier_a;	  /*< carrier A detected             */
+		bool carrier_b;	  /*< carrier B detected             */
+		bool sap;		  /*< sap / bilingual detection      */
+		bool rds;		  /*< RDS data array present         */
 		enum drx_aud_nicam_status nicam_status;
-					  /**< status of NICAM carrier        */
-		s8 fm_ident;		  /**< FM Identification value        */
+					  /*< status of NICAM carrier        */
+		s8 fm_ident;		  /*< FM Identification value        */
 	};
 
 /* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
 
-/**
+/*
 * \struct DRXRDSdata_t
 * \brief Raw RDS data array.
 */
 	struct drx_cfg_aud_rds {
-		bool valid;		  /**< RDS data validation            */
-		u16 data[18];		  /**< data from one RDS data array   */
+		bool valid;		  /*< RDS data validation            */
+		u16 data[18];		  /*< data from one RDS data array   */
 	};
 
 /* DRX_CFG_AUD_VOLUME      - struct drx_cfg_aud_volume - set/get */
-/**
+/*
 * \enum DRXAudAVCDecayTime_t
 * \brief Automatic volume control configuration.
 */
 	enum drx_aud_avc_mode {
-		DRX_AUD_AVC_OFF,	  /**< Automatic volume control off   */
-		DRX_AUD_AVC_DECAYTIME_8S, /**< level volume in  8 seconds     */
-		DRX_AUD_AVC_DECAYTIME_4S, /**< level volume in  4 seconds     */
-		DRX_AUD_AVC_DECAYTIME_2S, /**< level volume in  2 seconds     */
-		DRX_AUD_AVC_DECAYTIME_20MS/**< level volume in 20 millisec    */
+		DRX_AUD_AVC_OFF,	  /*< Automatic volume control off   */
+		DRX_AUD_AVC_DECAYTIME_8S, /*< level volume in  8 seconds     */
+		DRX_AUD_AVC_DECAYTIME_4S, /*< level volume in  4 seconds     */
+		DRX_AUD_AVC_DECAYTIME_2S, /*< level volume in  2 seconds     */
+		DRX_AUD_AVC_DECAYTIME_20MS/*< level volume in 20 millisec    */
 	};
 
-/**
+/*
 * /enum DRXAudMaxAVCGain_t
 * /brief Automatic volume control max gain in audio baseband.
 */
 	enum drx_aud_avc_max_gain {
-		DRX_AUD_AVC_MAX_GAIN_0DB, /**< maximum AVC gain  0 dB         */
-		DRX_AUD_AVC_MAX_GAIN_6DB, /**< maximum AVC gain  6 dB         */
-		DRX_AUD_AVC_MAX_GAIN_12DB /**< maximum AVC gain 12 dB         */
+		DRX_AUD_AVC_MAX_GAIN_0DB, /*< maximum AVC gain  0 dB         */
+		DRX_AUD_AVC_MAX_GAIN_6DB, /*< maximum AVC gain  6 dB         */
+		DRX_AUD_AVC_MAX_GAIN_12DB /*< maximum AVC gain 12 dB         */
 	};
 
-/**
+/*
 * /enum DRXAudMaxAVCAtten_t
 * /brief Automatic volume control max attenuation in audio baseband.
 */
 	enum drx_aud_avc_max_atten {
 		DRX_AUD_AVC_MAX_ATTEN_12DB,
-					  /**< maximum AVC attenuation 12 dB  */
+					  /*< maximum AVC attenuation 12 dB  */
 		DRX_AUD_AVC_MAX_ATTEN_18DB,
-					  /**< maximum AVC attenuation 18 dB  */
-		DRX_AUD_AVC_MAX_ATTEN_24DB/**< maximum AVC attenuation 24 dB  */
+					  /*< maximum AVC attenuation 18 dB  */
+		DRX_AUD_AVC_MAX_ATTEN_24DB/*< maximum AVC attenuation 24 dB  */
 	};
-/**
+/*
 * \struct struct drx_cfg_aud_volume * \brief Audio volume configuration.
 */
 	struct drx_cfg_aud_volume {
-		bool mute;		  /**< mute overrides volume setting  */
-		s16 volume;		  /**< volume, range -114 to 12 dB    */
-		enum drx_aud_avc_mode avc_mode;  /**< AVC auto volume control mode   */
-		u16 avc_ref_level;	  /**< AVC reference level            */
+		bool mute;		  /*< mute overrides volume setting  */
+		s16 volume;		  /*< volume, range -114 to 12 dB    */
+		enum drx_aud_avc_mode avc_mode;  /*< AVC auto volume control mode   */
+		u16 avc_ref_level;	  /*< AVC reference level            */
 		enum drx_aud_avc_max_gain avc_max_gain;
-					  /**< AVC max gain selection         */
+					  /*< AVC max gain selection         */
 		enum drx_aud_avc_max_atten avc_max_atten;
-					  /**< AVC max attenuation selection  */
-		s16 strength_left;	  /**< quasi-peak, left speaker       */
-		s16 strength_right;	  /**< quasi-peak, right speaker      */
+					  /*< AVC max attenuation selection  */
+		s16 strength_left;	  /*< quasi-peak, left speaker       */
+		s16 strength_right;	  /*< quasi-peak, right speaker      */
 	};
 
 /* DRX_CFG_I2S_OUTPUT      - struct drx_cfg_i2s_output - set/get */
-/**
+/*
 * \enum enum drxi2s_mode * \brief I2S output mode.
 */
 	enum drxi2s_mode {
-		DRX_I2S_MODE_MASTER,	  /**< I2S is in master mode          */
-		DRX_I2S_MODE_SLAVE	  /**< I2S is in slave mode           */
+		DRX_I2S_MODE_MASTER,	  /*< I2S is in master mode          */
+		DRX_I2S_MODE_SLAVE	  /*< I2S is in slave mode           */
 	};
 
-/**
+/*
 * \enum enum drxi2s_word_length * \brief Width of I2S data.
 */
 	enum drxi2s_word_length {
-		DRX_I2S_WORDLENGTH_32 = 0,/**< I2S data is 32 bit wide        */
-		DRX_I2S_WORDLENGTH_16 = 1 /**< I2S data is 16 bit wide        */
+		DRX_I2S_WORDLENGTH_32 = 0,/*< I2S data is 32 bit wide        */
+		DRX_I2S_WORDLENGTH_16 = 1 /*< I2S data is 16 bit wide        */
 	};
 
-/**
+/*
 * \enum enum drxi2s_format * \brief Data wordstrobe alignment for I2S.
 */
 	enum drxi2s_format {
 		DRX_I2S_FORMAT_WS_WITH_DATA,
-				    /**< I2S data and wordstrobe are aligned  */
+				    /*< I2S data and wordstrobe are aligned  */
 		DRX_I2S_FORMAT_WS_ADVANCED
-				    /**< I2S data one cycle after wordstrobe  */
+				    /*< I2S data one cycle after wordstrobe  */
 	};
 
-/**
+/*
 * \enum enum drxi2s_polarity * \brief Polarity of I2S data.
 */
 	enum drxi2s_polarity {
-		DRX_I2S_POLARITY_RIGHT,/**< wordstrobe - right high, left low */
-		DRX_I2S_POLARITY_LEFT  /**< wordstrobe - right low, left high */
+		DRX_I2S_POLARITY_RIGHT,/*< wordstrobe - right high, left low */
+		DRX_I2S_POLARITY_LEFT  /*< wordstrobe - right low, left high */
 	};
 
-/**
+/*
 * \struct struct drx_cfg_i2s_output * \brief I2S output configuration.
 */
 	struct drx_cfg_i2s_output {
-		bool output_enable;	  /**< I2S output enable              */
-		u32 frequency;	  /**< range from 8000-48000 Hz       */
-		enum drxi2s_mode mode;	  /**< I2S mode, master or slave      */
+		bool output_enable;	  /*< I2S output enable              */
+		u32 frequency;	  /*< range from 8000-48000 Hz       */
+		enum drxi2s_mode mode;	  /*< I2S mode, master or slave      */
 		enum drxi2s_word_length word_length;
-					  /**< I2S wordlength, 16 or 32 bits  */
-		enum drxi2s_polarity polarity;/**< I2S wordstrobe polarity        */
-		enum drxi2s_format format;	  /**< I2S wordstrobe delay to data   */
+					  /*< I2S wordlength, 16 or 32 bits  */
+		enum drxi2s_polarity polarity;/*< I2S wordstrobe polarity        */
+		enum drxi2s_format format;	  /*< I2S wordstrobe delay to data   */
 	};
 
 /* ------------------------------expert interface-----------------------------*/
-/**
+/*
 * /enum enum drx_aud_fm_deemphasis * setting for FM-Deemphasis in audio demodulator.
 *
 */
@@ -1531,7 +1531,7 @@ struct drx_version_list {
 		DRX_AUD_FM_DEEMPH_OFF
 	};
 
-/**
+/*
 * /enum DRXAudDeviation_t
 * setting for deviation mode in audio demodulator.
 *
@@ -1541,7 +1541,7 @@ struct drx_version_list {
 		DRX_AUD_DEVIATION_HIGH
 	};
 
-/**
+/*
 * /enum enum drx_no_carrier_option * setting for carrier, mute/noise.
 *
 */
@@ -1550,7 +1550,7 @@ struct drx_version_list {
 		DRX_NO_CARRIER_NOISE
 	};
 
-/**
+/*
 * \enum DRXAudAutoSound_t
 * \brief Automatic Sound
 */
@@ -1560,7 +1560,7 @@ struct drx_version_list {
 		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
 	};
 
-/**
+/*
 * \enum DRXAudASSThres_t
 * \brief Automatic Sound Select Thresholds
 */
@@ -1570,7 +1570,7 @@ struct drx_version_list {
 		u16 nicam;	/* Nicam Threshold for ASS configuration */
 	};
 
-/**
+/*
 * \struct struct drx_aud_carrier * \brief Carrier detection related parameters
 */
 	struct drx_aud_carrier {
@@ -1580,7 +1580,7 @@ struct drx_version_list {
 		s32 dco;	/* frequency adjustment (A) */
 	};
 
-/**
+/*
 * \struct struct drx_cfg_aud_carriers * \brief combining carrier A & B to one struct
 */
 	struct drx_cfg_aud_carriers {
@@ -1588,7 +1588,7 @@ struct drx_version_list {
 		struct drx_aud_carrier b;
 	};
 
-/**
+/*
 * /enum enum drx_aud_i2s_src * Selection of audio source
 */
 	enum drx_aud_i2s_src {
@@ -1597,19 +1597,19 @@ struct drx_version_list {
 		DRX_AUD_SRC_STEREO_OR_A,
 		DRX_AUD_SRC_STEREO_OR_B};
 
-/**
+/*
 * \enum enum drx_aud_i2s_matrix * \brief Used for selecting I2S output.
 */
 	enum drx_aud_i2s_matrix {
 		DRX_AUD_I2S_MATRIX_A_MONO,
-					/**< A sound only, stereo or mono     */
+					/*< A sound only, stereo or mono     */
 		DRX_AUD_I2S_MATRIX_B_MONO,
-					/**< B sound only, stereo or mono     */
+					/*< B sound only, stereo or mono     */
 		DRX_AUD_I2S_MATRIX_STEREO,
-					/**< A+B sound, transparant           */
-		DRX_AUD_I2S_MATRIX_MONO	/**< A+B mixed to mono sum, (L+R)/2   */};
+					/*< A+B sound, transparant           */
+		DRX_AUD_I2S_MATRIX_MONO	/*< A+B mixed to mono sum, (L+R)/2   */};
 
-/**
+/*
 * /enum enum drx_aud_fm_matrix * setting for FM-Matrix in audio demodulator.
 *
 */
@@ -1620,7 +1620,7 @@ struct drx_version_list {
 		DRX_AUD_FM_MATRIX_SOUND_A,
 		DRX_AUD_FM_MATRIX_SOUND_B};
 
-/**
+/*
 * \struct DRXAudMatrices_t
 * \brief Mixer settings
 */
@@ -1630,22 +1630,22 @@ struct drx_cfg_aud_mixer {
 	enum drx_aud_fm_matrix matrix_fm;
 };
 
-/**
+/*
 * \enum DRXI2SVidSync_t
 * \brief Audio/video synchronization, interacts with I2S mode.
 * AUTO_1 and AUTO_2 are for automatic video standard detection with preference
 * for NTSC or Monochrome, because the frequencies are too close (59.94 & 60 Hz)
 */
 	enum drx_cfg_aud_av_sync {
-		DRX_AUD_AVSYNC_OFF,/**< audio/video synchronization is off   */
+		DRX_AUD_AVSYNC_OFF,/*< audio/video synchronization is off   */
 		DRX_AUD_AVSYNC_NTSC,
-				   /**< it is an NTSC system                 */
+				   /*< it is an NTSC system                 */
 		DRX_AUD_AVSYNC_MONOCHROME,
-				   /**< it is a MONOCHROME system            */
+				   /*< it is a MONOCHROME system            */
 		DRX_AUD_AVSYNC_PAL_SECAM
-				   /**< it is a PAL/SECAM system             */};
+				   /*< it is a PAL/SECAM system             */};
 
-/**
+/*
 * \struct struct drx_cfg_aud_prescale * \brief Prescalers
 */
 struct drx_cfg_aud_prescale {
@@ -1653,7 +1653,7 @@ struct drx_cfg_aud_prescale {
 	s16 nicam_gain;
 };
 
-/**
+/*
 * \struct struct drx_aud_beep * \brief Beep
 */
 struct drx_aud_beep {
@@ -1662,14 +1662,14 @@ struct drx_aud_beep {
 	bool mute;
 };
 
-/**
+/*
 * \enum enum drx_aud_btsc_detect * \brief BTSC detetcion mode
 */
 	enum drx_aud_btsc_detect {
 		DRX_BTSC_STEREO,
 		DRX_BTSC_MONO_AND_SAP};
 
-/**
+/*
 * \struct struct drx_aud_data * \brief Audio data structure
 */
 struct drx_aud_data {
@@ -1692,7 +1692,7 @@ struct drx_aud_data {
 	bool rds_data_present;
 };
 
-/**
+/*
 * \enum enum drx_qam_lock_range * \brief QAM lock range mode
 */
 	enum drx_qam_lock_range {
@@ -1782,7 +1782,7 @@ struct drx_aud_data {
 							     u32 wdata,	/* data to write               */
 							     u32 *rdata);	/* data to read                */
 
-/**
+/*
 * \struct struct drx_access_func * \brief Interface to an access protocol.
 */
 struct drx_access_func {
@@ -1811,85 +1811,85 @@ struct drx_reg_dump {
 /*============================================================================*/
 /*============================================================================*/
 
-/**
+/*
 * \struct struct drx_common_attr * \brief Set of common attributes, shared by all DRX devices.
 */
 	struct drx_common_attr {
 		/* Microcode (firmware) attributes */
-		char *microcode_file;   /**<  microcode filename           */
+		char *microcode_file;   /*<  microcode filename           */
 		bool verify_microcode;
-				   /**< Use microcode verify or not.          */
+				   /*< Use microcode verify or not.          */
 		struct drx_mc_version_rec mcversion;
-				   /**< Version record of microcode from file */
+				   /*< Version record of microcode from file */
 
 		/* Clocks and tuner attributes */
 		s32 intermediate_freq;
-				     /**< IF,if tuner instance not used. (kHz)*/
+				     /*< IF,if tuner instance not used. (kHz)*/
 		s32 sys_clock_freq;
-				     /**< Systemclock frequency.  (kHz)       */
+				     /*< Systemclock frequency.  (kHz)       */
 		s32 osc_clock_freq;
-				     /**< Oscillator clock frequency.  (kHz)  */
+				     /*< Oscillator clock frequency.  (kHz)  */
 		s16 osc_clock_deviation;
-				     /**< Oscillator clock deviation.  (ppm)  */
+				     /*< Oscillator clock deviation.  (ppm)  */
 		bool mirror_freq_spect;
-				     /**< Mirror IF frequency spectrum or not.*/
+				     /*< Mirror IF frequency spectrum or not.*/
 
 		/* Initial MPEG output attributes */
 		struct drx_cfg_mpeg_output mpeg_cfg;
-				     /**< MPEG configuration                  */
+				     /*< MPEG configuration                  */
 
-		bool is_opened;     /**< if true instance is already opened. */
+		bool is_opened;     /*< if true instance is already opened. */
 
 		/* Channel scan */
 		struct drx_scan_param *scan_param;
-				      /**< scan parameters                    */
+				      /*< scan parameters                    */
 		u16 scan_freq_plan_index;
-				      /**< next index in freq plan            */
+				      /*< next index in freq plan            */
 		s32 scan_next_frequency;
-				      /**< next freq to scan                  */
-		bool scan_ready;     /**< scan ready flag                    */
-		u32 scan_max_channels;/**< number of channels in freqplan     */
+				      /*< next freq to scan                  */
+		bool scan_ready;     /*< scan ready flag                    */
+		u32 scan_max_channels;/*< number of channels in freqplan     */
 		u32 scan_channels_scanned;
-					/**< number of channels scanned       */
+					/*< number of channels scanned       */
 		/* Channel scan - inner loop: demod related */
 		drx_scan_func_t scan_function;
-				      /**< function to check channel          */
+				      /*< function to check channel          */
 		/* Channel scan - inner loop: SYSObj related */
-		void *scan_context;    /**< Context Pointer of SYSObj          */
+		void *scan_context;    /*< Context Pointer of SYSObj          */
 		/* Channel scan - parameters for default DTV scan function in core driver  */
 		u16 scan_demod_lock_timeout;
-					 /**< millisecs to wait for lock      */
+					 /*< millisecs to wait for lock      */
 		enum drx_lock_status scan_desired_lock;
-				      /**< lock requirement for channel found */
+				      /*< lock requirement for channel found */
 		/* scan_active can be used by SetChannel to decide how to program the tuner,
 		   fast or slow (but stable). Usually fast during scan. */
-		bool scan_active;    /**< true when scan routines are active */
+		bool scan_active;    /*< true when scan routines are active */
 
 		/* Power management */
 		enum drx_power_mode current_power_mode;
-				      /**< current power management mode      */
+				      /*< current power management mode      */
 
 		/* Tuner */
-		u8 tuner_port_nr;     /**< nr of I2C port to wich tuner is    */
+		u8 tuner_port_nr;     /*< nr of I2C port to wich tuner is    */
 		s32 tuner_min_freq_rf;
-				      /**< minimum RF input frequency, in kHz */
+				      /*< minimum RF input frequency, in kHz */
 		s32 tuner_max_freq_rf;
-				      /**< maximum RF input frequency, in kHz */
-		bool tuner_rf_agc_pol; /**< if true invert RF AGC polarity     */
-		bool tuner_if_agc_pol; /**< if true invert IF AGC polarity     */
-		bool tuner_slow_mode; /**< if true invert IF AGC polarity     */
+				      /*< maximum RF input frequency, in kHz */
+		bool tuner_rf_agc_pol; /*< if true invert RF AGC polarity     */
+		bool tuner_if_agc_pol; /*< if true invert IF AGC polarity     */
+		bool tuner_slow_mode; /*< if true invert IF AGC polarity     */
 
 		struct drx_channel current_channel;
-				      /**< current channel parameters         */
+				      /*< current channel parameters         */
 		enum drx_standard current_standard;
-				      /**< current standard selection         */
+				      /*< current standard selection         */
 		enum drx_standard prev_standard;
-				      /**< previous standard selection        */
+				      /*< previous standard selection        */
 		enum drx_standard di_cache_standard;
-				      /**< standard in DI cache if available  */
-		bool use_bootloader; /**< use bootloader in open             */
-		u32 capabilities;   /**< capabilities flags                 */
-		u32 product_id;      /**< product ID inc. metal fix number   */};
+				      /*< standard in DI cache if available  */
+		bool use_bootloader; /*< use bootloader in open             */
+		u32 capabilities;   /*< capabilities flags                 */
+		u32 product_id;      /*< product ID inc. metal fix number   */};
 
 /*
 * Generic functions for DRX devices.
@@ -1897,16 +1897,16 @@ struct drx_reg_dump {
 
 struct drx_demod_instance;
 
-/**
+/*
 * \struct struct drx_demod_instance * \brief Top structure of demodulator instance.
 */
 struct drx_demod_instance {
-				/**< data access protocol functions       */
+				/*< data access protocol functions       */
 	struct i2c_device_addr *my_i2c_dev_addr;
-				/**< i2c address and device identifier    */
+				/*< i2c address and device identifier    */
 	struct drx_common_attr *my_common_attr;
-				/**< common DRX attributes                */
-	void *my_ext_attr;    /**< device specific attributes           */
+				/*< common DRX attributes                */
+	void *my_ext_attr;    /*< device specific attributes           */
 	/* generic demodulator data */
 
 	struct i2c_adapter	*i2c;
@@ -2195,7 +2195,7 @@ Conversion from enum values to human readable form.
 Access macros
 -------------------------------------------------------------------------*/
 
-/**
+/*
 * \brief Create a compilable reference to the microcode attribute
 * \param d pointer to demod instance
 *
@@ -2229,7 +2229,7 @@ Access macros
 #define DRX_ATTR_I2CDEVID(d)        ((d)->my_i2c_dev_addr->i2c_dev_id)
 #define DRX_ISMCVERTYPE(x) ((x) == AUX_VER_RECORD)
 
-/**************************/
+/*************************/
 
 /* Macros with device-specific handling are converted to CFG functions */
 
@@ -2285,7 +2285,7 @@ Access macros
 #define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET((d), (x), \
 	 DRX_XS_CFG_QAM_LOCKRANGE, enum drx_qam_lock_range, DRX_UNKNOWN)
 
-/**
+/*
 * \brief Macro to check if std is an ATV standard
 * \retval true std is an ATV standard
 * \retval false std is an ATV standard
@@ -2298,7 +2298,7 @@ Access macros
 			      ((std) == DRX_STANDARD_NTSC) || \
 			      ((std) == DRX_STANDARD_FM))
 
-/**
+/*
 * \brief Macro to check if std is an QAM standard
 * \retval true std is an QAM standards
 * \retval false std is an QAM standards
@@ -2308,14 +2308,14 @@ Access macros
 			      ((std) == DRX_STANDARD_ITU_C) || \
 			      ((std) == DRX_STANDARD_ITU_D))
 
-/**
+/*
 * \brief Macro to check if std is VSB standard
 * \retval true std is VSB standard
 * \retval false std is not VSB standard
 */
 #define DRX_ISVSBSTD(std) ((std) == DRX_STANDARD_8VSB)
 
-/**
+/*
 * \brief Macro to check if std is DVBT standard
 * \retval true std is DVBT standard
 * \retval false std is not DVBT standard

commit e1d00cddfb61d2c55c6df5d638a9456bd979e01c
Author: Martin Kepplinger <martink@posteo.de>
Date:   Wed May 3 10:43:09 2017 -0300

    media: dvb-frontends: drx39xyj: remove obsolete sign extend macros
    
    DRX_S9TOS16 and DRX_S24TODRXFREQ are simply not used. Furthermore,
    sign_extend32() should be used for sign extension. (Also, the comment
    describing DRX_S24TODRXFREQ was wrong). So remove these macros.
    
    Signed-off-by: Martin Kepplinger <martink@posteo.de>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 0bba34d493dc..cd69e187ba7a 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -449,19 +449,6 @@ MACROS
 #define DRX_16TO8(x) ((u8) (((u16)x) & 0xFF)), \
 			((u8)((((u16)x)>>8)&0xFF))
 
-/**
-* \brief Macro to sign extend signed 9 bit value to signed  16 bit value
-*/
-#define DRX_S9TOS16(x) ((((u16)x)&0x100) ? ((s16)((u16)(x)|0xFF00)) : (x))
-
-/**
-* \brief Macro to sign extend signed 9 bit value to signed  16 bit value
-*/
-#define DRX_S24TODRXFREQ(x) ((((u32) x) & 0x00800000UL) ? \
-				 ((s32) \
-				    (((u32) x) | 0xFF000000)) : \
-				 ((s32) x))
-
 /**
 * \brief Macro to convert 16 bit register value to a s32
 */

commit 1250a85b1b5c6b40c2ae32cd61a7029094530d31
Author: Mauro Carvalho Chehab <mchehab@s-opensource.com>
Date:   Sat Jun 24 15:46:24 2017 -0300

    media: Replace initalized ->initialized
    
    While committing a change on em28xx, I got a warning of a
    typo there. So, fix it on em28xx and on two other media drivers
    with the same typo.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 4442e478db72..0bba34d493dc 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -307,7 +307,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 * \def DRX_UNKNOWN
 * \brief Generic UNKNOWN value for DRX enumerated types.
 *
-* Used to indicate that the parameter value is unknown or not yet initalized.
+* Used to indicate that the parameter value is unknown or not yet initialized.
 */
 #ifndef DRX_UNKNOWN
 #define DRX_UNKNOWN (254)

commit 505d3085d7120a9f4cd0d6ffaa876968854b3baa
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Thu Mar 9 16:16:33 2017 -0800

    scripts/spelling.txt: add "overide" pattern and fix typo instances
    
    Fix typos and add the following to the scripts/spelling.txt:
    
      overide||override
    
    While we are here, fix the doubled "address" in the touched line
    Documentation/devicetree/bindings/regulator/ti-abb-regulator.txt.
    
    Also, fix the comment block style in the touched hunks in
    drivers/media/dvb-frontends/drx39xyj/drx_driver.h.
    
    Link: http://lkml.kernel.org/r/1481573103-11329-21-git-send-email-yamada.masahiro@socionext.com
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 7a681d8202c7..4442e478db72 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -256,8 +256,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 *
 * The actual DAP implementation may be restricted to only one of the modes.
 * A compiler warning or error will be generated if the DAP implementation
-* overides or cannot handle the mode defined below.
-*
+* overrides or cannot handle the mode defined below.
 */
 #ifndef DRXDAP_SINGLE_MASTER
 #define DRXDAP_SINGLE_MASTER 1
@@ -272,7 +271,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 *
 * This maximum size may be restricted by the actual DAP implementation.
 * A compiler warning or error will be generated if the DAP implementation
-* overides or cannot handle the chunksize defined below.
+* overrides or cannot handle the chunksize defined below.
 *
 * Beware that the DAP uses  DRXDAP_MAX_WCHUNKSIZE to create a temporary data
 * buffer. Do not undefine or choose too large, unless your system is able to
@@ -292,8 +291,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 *
 * This maximum size may be restricted by the actual DAP implementation.
 * A compiler warning or error will be generated if the DAP implementation
-* overides or cannot handle the chunksize defined below.
-*
+* overrides or cannot handle the chunksize defined below.
 */
 #ifndef DRXDAP_MAX_RCHUNKSIZE
 #define  DRXDAP_MAX_RCHUNKSIZE 60

commit 2c149601001ba25b5b4e5aa9dd481d677cae15ae
Author: Masahiro Yamada <yamada.masahiro@socionext.com>
Date:   Mon Feb 27 14:29:31 2017 -0800

    scripts/spelling.txt: add "configuartion" pattern and fix typo instances
    
    Fix typos and add the following to the scripts/spelling.txt:
    
      configuartion||configuration
    
    While we are here, fix the "ouput" as well in the touched hunk in
    drivers/media/dvb-frontends/drx39xyj/drx_driver.h.
    
    Link: http://lkml.kernel.org/r/1481573103-11329-23-git-send-email-yamada.masahiro@socionext.com
    Signed-off-by: Masahiro Yamada <yamada.masahiro@socionext.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 9076bf21cc8a..7a681d8202c7 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1317,9 +1317,9 @@ struct drx_version_list {
 		DRX_MPEG_STR_WIDTH_8
 	};
 
-/* CTRL CFG MPEG ouput */
+/* CTRL CFG MPEG output */
 /**
-* \struct struct drx_cfg_mpeg_output * \brief Configuartion parameters for MPEG output control.
+* \struct struct drx_cfg_mpeg_output * \brief Configuration parameters for MPEG output control.
 *
 * Used by DRX_CFG_MPEG_OUTPUT, in combination with DRX_CTRL_SET_CFG and
 * DRX_CTRL_GET_CFG.

commit 03fdfbfd3b5944bfd210541a83c9b222e2c20920
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Sun Mar 9 17:46:01 2014 -0300

    [media] drx-j: Prepare to use DVBv5 stats
    
    Convert the stats internally to use DVBv5. For now, it will keep
    showing everything via DVBv3 API only, as the .len value were
    not initialized.
    
    That allows testing if the new stats code didn't break anything.
    
    A latter patch will add the final bits for the DVBv5 stats to
    fully work.
    
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index e54eb35b52d9..9076bf21cc8a 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1033,30 +1033,6 @@ struct drx_channel {
 
 /*========================================*/
 
-/**
-* \struct struct drx_sig_quality * Signal quality metrics.
-*
-* Used by DRX_CTRL_SIG_QUALITY.
-*/
-struct drx_sig_quality {
-	u16 MER;     /**< in steps of 0.1 dB                        */
-	u32 pre_viterbi_ber;
-		       /**< in steps of 1/scale_factor_ber              */
-	u32 post_viterbi_ber;
-		       /**< in steps of 1/scale_factor_ber              */
-	u32 scale_factor_ber;
-		       /**< scale factor for BER                      */
-	u16 packet_error;
-		       /**< number of packet errors                   */
-	u32 post_reed_solomon_ber;
-		       /**< in steps of 1/scale_factor_ber              */
-	u32 pre_ldpc_ber;
-		       /**< in steps of 1/scale_factor_ber              */
-	u32 aver_iter;/**< in steps of 0.01                          */
-	u16 indicator;
-		       /**< indicative signal quality low=0..100=high */
-};
-
 enum drx_cfg_sqi_speed {
 	DRX_SQI_SPEED_FAST = 0,
 	DRX_SQI_SPEED_MEDIUM,

commit 9e4c509d7444e067d39d3ac96a3398721bca4f01
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Feb 27 03:34:17 2014 -0300

    [media] drx-j: Use single master mode
    
    There are no other I2C masters here. Also, the Windows driver uses
    this mode (and both drxd and drxk Kernel drivers). So, switch
    to it.
    
    That helps to compare the logs between the Linux driver and the
    Windows one.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 8419989b4c38..e54eb35b52d9 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -260,7 +260,7 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 *
 */
 #ifndef DRXDAP_SINGLE_MASTER
-#define DRXDAP_SINGLE_MASTER 0
+#define DRXDAP_SINGLE_MASTER 1
 #endif
 
 /**

commit 244c0e06bfd4e5bce46914bb11b0aac7de73831e
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Mon Jan 27 02:33:18 2014 -0300

    [media] drx-j: get rid of function wrappers
    
    On several places, the I2C functions are just wrappers to others.
    
    Get rid of it.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index f3098b6bd006..8419989b4c38 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1940,8 +1940,6 @@ struct drx_demod_instance;
 * \struct struct drx_demod_instance * \brief Top structure of demodulator instance.
 */
 struct drx_demod_instance {
-	/* type specific demodulator data */
-	struct drx_access_func *my_access_funct;
 				/**< data access protocol functions       */
 	struct i2c_device_addr *my_i2c_dev_addr;
 				/**< i2c address and device identifier    */

commit 97a8918abfb5f1f9718d3bf5da38fbf803066c37
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Mon Jan 27 02:01:40 2014 -0300

    [media] drx-j: Get rid of I2C protocol version
    
    This is not used anywere. Get rid of it.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index aabd5c56d55b..f3098b6bd006 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1825,7 +1825,6 @@ struct drx_aud_data {
 * \struct struct drx_access_func * \brief Interface to an access protocol.
 */
 struct drx_access_func {
-	struct drx_version *protocolVersion;
 	drx_write_block_func_t write_block_func;
 	drx_read_block_func_t read_block_func;
 	drx_write_reg8func_t write_reg8func;

commit a6530ce54b6081c168329e18839005b486eaf90e
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Sun Jan 26 14:54:08 2014 -0300

    [media] drx-j: get rid of tuner dummy get/set frequency
    
    Those functions will never be used with Linux DVB binding.
    
    Get rid of them.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 1aff810b57da..aabd5c56d55b 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1944,8 +1944,6 @@ struct drx_demod_instance {
 	/* type specific demodulator data */
 	struct drx_access_func *my_access_funct;
 				/**< data access protocol functions       */
-	struct tuner_instance *my_tuner;
-				/**< tuner instance,if NULL then baseband */
 	struct i2c_device_addr *my_i2c_dev_addr;
 				/**< i2c address and device identifier    */
 	struct drx_common_attr *my_common_attr;
@@ -2269,7 +2267,6 @@ Access macros
 #define DRX_ATTR_TUNERIFAGCPOL(d)    ((d)->my_common_attr->tuner_if_agc_pol)
 #define DRX_ATTR_TUNERSLOWMODE(d)    ((d)->my_common_attr->tuner_slow_mode)
 #define DRX_ATTR_TUNERSPORTNR(d)     ((d)->my_common_attr->tuner_port_nr)
-#define DRX_ATTR_TUNER(d)           ((d)->my_tuner)
 #define DRX_ATTR_I2CADDR(d)         ((d)->my_i2c_dev_addr->i2c_addr)
 #define DRX_ATTR_I2CDEVID(d)        ((d)->my_i2c_dev_addr->i2c_dev_id)
 #define DRX_ISMCVERTYPE(x) ((x) == AUX_VER_RECORD)

commit d7b0631eb2798e5892e079fc6dfe1c60f3a3f222
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Sun Jan 26 14:23:24 2014 -0300

    [media] drx-j: remove some ugly bindings from drx39xxj_dummy.c
    
    This file does an ugly binding between drxj and DVB frontend.
    
    Remove most of the functions there. We still need to get rid of
    get_frequency and set_frequency, but such patch is a little more
    complex, as it should also remove some previous tuner bindings.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index daa9027983e8..1aff810b57da 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -225,10 +225,6 @@ struct tuner_instance {
 	struct tuner_ops *my_funct;
 };
 
-int drxbsp_tuner_open(struct tuner_instance *tuner);
-
-int drxbsp_tuner_close(struct tuner_instance *tuner);
-
 int drxbsp_tuner_set_frequency(struct tuner_instance *tuner,
 					u32 mode,
 					s32 frequency);
@@ -238,9 +234,6 @@ int drxbsp_tuner_get_frequency(struct tuner_instance *tuner,
 					s32 *r_ffrequency,
 					s32 *i_ffrequency);
 
-int drxbsp_tuner_lock_status(struct tuner_instance *tuner,
-					enum tuner_lock_status *lock_stat);
-
 int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 						struct i2c_device_addr *w_dev_addr,
 						u16 w_count,
@@ -248,20 +241,6 @@ int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
 						struct i2c_device_addr *r_dev_addr,
 						u16 r_count, u8 *r_data);
 
-int drxbsp_hst_init(void);
-
-int drxbsp_hst_term(void);
-
-void *drxbsp_hst_memcpy(void *to, void *from, u32 n);
-
-int drxbsp_hst_memcmp(void *s1, void *s2, u32 n);
-
-u32 drxbsp_hst_clock(void);
-
-int drxbsp_hst_sleep(u32 n);
-
-
-
 /**************
 *
 * This section configures the DRX Data Access Protocols (DAPs).

commit b0baeb494e4e1707cdd690126fac1964581e8db2
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 24 13:00:08 2014 -0300

    [media] drx-j: get rid of drxj_ctrl()
    
    With this change, we finally got rid of all abstraction
    layers on this driver.
    
    This patch also fixes the LNA GPIO settings, as the original
    code were using a wrong control name for it.
    
    This patch exposes the several functions that aren't used.
    Some of them are related to analog demod that might be
    used some day, but others will likely never be needed, as
    they don't fit on Linux media APIs.
    
    Latter patches will clean up this mess.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index b9ba48f88523..daa9027983e8 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -782,61 +782,6 @@ enum drx_pilot_mode {
 	DRX_PILOT_AUTO = DRX_AUTO /**< Autodetect Pilot     */
 };
 
-#define DRX_CTRL_BASE          ((u32)0)
-
-#define DRX_CTRL_NOP             (DRX_CTRL_BASE +  0)/**< No Operation       */
-#define DRX_CTRL_PROBE_DEVICE    (DRX_CTRL_BASE +  1)/**< Probe device       */
-
-#define DRX_CTRL_LOAD_UCODE      (DRX_CTRL_BASE +  2)/**< Load microcode     */
-#define DRX_CTRL_VERIFY_UCODE    (DRX_CTRL_BASE +  3)/**< Verify microcode   */
-#define DRX_CTRL_SET_CHANNEL     (DRX_CTRL_BASE +  4)/**< Set channel        */
-#define DRX_CTRL_GET_CHANNEL     (DRX_CTRL_BASE +  5)/**< Get channel        */
-#define DRX_CTRL_LOCK_STATUS     (DRX_CTRL_BASE +  6)/**< Get lock status    */
-#define DRX_CTRL_SIG_QUALITY     (DRX_CTRL_BASE +  7)/**< Get signal quality */
-#define DRX_CTRL_SIG_STRENGTH    (DRX_CTRL_BASE +  8)/**< Get signal strength*/
-#define DRX_CTRL_RF_POWER        (DRX_CTRL_BASE +  9)/**< Get RF power       */
-#define DRX_CTRL_CONSTEL         (DRX_CTRL_BASE + 10)/**< Get constel point  */
-#define DRX_CTRL_SCAN_INIT       (DRX_CTRL_BASE + 11)/**< Initialize scan    */
-#define DRX_CTRL_SCAN_NEXT       (DRX_CTRL_BASE + 12)/**< Scan for next      */
-#define DRX_CTRL_SCAN_STOP       (DRX_CTRL_BASE + 13)/**< Stop scan          */
-#define DRX_CTRL_TPS_INFO        (DRX_CTRL_BASE + 14)/**< Get TPS info       */
-#define DRX_CTRL_SET_CFG         (DRX_CTRL_BASE + 15)/**< Set configuration  */
-#define DRX_CTRL_GET_CFG         (DRX_CTRL_BASE + 16)/**< Get configuration  */
-#define DRX_CTRL_VERSION         (DRX_CTRL_BASE + 17)/**< Get version info   */
-#define DRX_CTRL_I2C_BRIDGE      (DRX_CTRL_BASE + 18)/**< Open/close  bridge */
-#define DRX_CTRL_SET_STANDARD    (DRX_CTRL_BASE + 19)/**< Set demod std      */
-#define DRX_CTRL_GET_STANDARD    (DRX_CTRL_BASE + 20)/**< Get demod std      */
-#define DRX_CTRL_SET_OOB         (DRX_CTRL_BASE + 21)/**< Set OOB param      */
-#define DRX_CTRL_GET_OOB         (DRX_CTRL_BASE + 22)/**< Get OOB param      */
-#define DRX_CTRL_AUD_SET_STANDARD (DRX_CTRL_BASE + 23)/**< Set audio param    */
-#define DRX_CTRL_AUD_GET_STANDARD (DRX_CTRL_BASE + 24)/**< Get audio param    */
-#define DRX_CTRL_AUD_GET_STATUS  (DRX_CTRL_BASE + 25)/**< Read RDS           */
-#define DRX_CTRL_AUD_BEEP        (DRX_CTRL_BASE + 26)/**< Read RDS           */
-#define DRX_CTRL_I2C_READWRITE   (DRX_CTRL_BASE + 27)/**< Read/write I2C     */
-#define DRX_CTRL_PROGRAM_TUNER   (DRX_CTRL_BASE + 28)/**< Program tuner      */
-
-	/* Professional */
-#define DRX_CTRL_MB_CFG          (DRX_CTRL_BASE + 29) /**<                   */
-#define DRX_CTRL_MB_READ         (DRX_CTRL_BASE + 30) /**<                   */
-#define DRX_CTRL_MB_WRITE        (DRX_CTRL_BASE + 31) /**<                   */
-#define DRX_CTRL_MB_CONSTEL      (DRX_CTRL_BASE + 32) /**<                   */
-#define DRX_CTRL_MB_MER          (DRX_CTRL_BASE + 33) /**<                   */
-
-	/* Misc */
-#define DRX_CTRL_UIO_CFG         DRX_CTRL_SET_UIO_CFG  /**< Configure UIO     */
-#define DRX_CTRL_SET_UIO_CFG     (DRX_CTRL_BASE + 34) /**< Configure UIO     */
-#define DRX_CTRL_GET_UIO_CFG     (DRX_CTRL_BASE + 35) /**< Configure UIO     */
-#define DRX_CTRL_UIO_READ        (DRX_CTRL_BASE + 36) /**< Read from UIO     */
-#define DRX_CTRL_UIO_WRITE       (DRX_CTRL_BASE + 37) /**< Write to UIO      */
-#define DRX_CTRL_READ_EVENTS     (DRX_CTRL_BASE + 38) /**< Read events       */
-#define DRX_CTRL_HDL_EVENTS      (DRX_CTRL_BASE + 39) /**< Handle events     */
-#define DRX_CTRL_POWER_MODE      (DRX_CTRL_BASE + 40) /**< Set power mode    */
-#define DRX_CTRL_LOAD_FILTER     (DRX_CTRL_BASE + 41) /**< Load chan. filter */
-#define DRX_CTRL_VALIDATE_UCODE  (DRX_CTRL_BASE + 42) /**< Validate ucode    */
-#define DRX_CTRL_DUMP_REGISTERS  (DRX_CTRL_BASE + 43) /**< Dump registers    */
-
-#define DRX_CTRL_MAX             (DRX_CTRL_BASE + 44)	/* never to be used    */
-
 /**
  * enum drxu_code_action - indicate if firmware has to be uploaded or verified.
  * @UCODE_UPLOAD:	Upload the microcode image to device

commit b78359a6894ac3451bec3fde5d0499fba87b8b67
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 24 12:21:17 2014 -0300

    [media] drx-j: get rid of the remaining drx generic functions
    
    Get rid of drx_open and drx_close, as those are just wrapper
    functions to drxj_open/drxj_close.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 9ecf01029e90..b9ba48f88523 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -2013,28 +2013,11 @@ struct drx_reg_dump {
 
 struct drx_demod_instance;
 
-	typedef int(*drx_open_func_t) (struct drx_demod_instance *demod);
-	typedef int(*drx_close_func_t) (struct drx_demod_instance *demod);
-	typedef int(*drx_ctrl_func_t) (struct drx_demod_instance *demod,
-					     u32 ctrl,
-					     void *ctrl_data);
-
-/**
-* \struct struct drx_demod_func * \brief A stucture containing all functions of a demodulator.
-*/
-	struct drx_demod_func {
-		u32 type_id;		 /**< Device type identifier.      */
-		drx_open_func_t open_func;	 /**< Pointer to Open() function.  */
-		drx_close_func_t close_func;/**< Pointer to Close() function. */
-		drx_ctrl_func_t ctrl_func;	 /**< Pointer to Ctrl() function.  */};
-
 /**
 * \struct struct drx_demod_instance * \brief Top structure of demodulator instance.
 */
 struct drx_demod_instance {
 	/* type specific demodulator data */
-	struct drx_demod_func *my_demod_funct;
-				/**< demodulator functions                */
 	struct drx_access_func *my_access_funct;
 				/**< data access protocol functions       */
 	struct tuner_instance *my_tuner;
@@ -2460,14 +2443,6 @@ Access macros
 */
 #define DRX_ISDVBTSTD(std) ((std) == DRX_STANDARD_DVBT)
 
-/*-------------------------------------------------------------------------
-Exported FUNCTIONS
--------------------------------------------------------------------------*/
-
-	int drx_open(struct drx_demod_instance *demod);
-
-	int drx_close(struct drx_demod_instance *demod);
-
 /*-------------------------------------------------------------------------
 THE END
 -------------------------------------------------------------------------*/

commit dc5a91d49d147f47b2305ad76d67982462c5ac5f
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 24 11:14:17 2014 -0300

    [media] drx-j: get rid of drx_ctrl
    
    This function is used only as an abstraction layer to call the
    two firmware functions. Remove it.
    
    As a bonus, the drx_ctrl_function is now unused and can be
    removed.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 343ae519b5dc..9ecf01029e90 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -2468,9 +2468,6 @@ Exported FUNCTIONS
 
 	int drx_close(struct drx_demod_instance *demod);
 
-	int drx_ctrl(struct drx_demod_instance *demod,
-			     u32 ctrl, void *ctrl_data);
-
 /*-------------------------------------------------------------------------
 THE END
 -------------------------------------------------------------------------*/

commit e2b8e8d2410a7121a1fe7b0bebeab9baa82541b5
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Sun Jan 19 09:50:18 2014 -0300

    [media] drx-j: remove unused code from drx_driver.c
    
    There are several drx-j code there that are never used, as
    they don't even fit into Linux DVB subystem model.
    
    Remove them, in order to simplify the code.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 1696e0d95657..343ae519b5dc 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -2464,10 +2464,6 @@ Access macros
 Exported FUNCTIONS
 -------------------------------------------------------------------------*/
 
-	int drx_init(struct drx_demod_instance *demods[]);
-
-	int drx_term(void);
-
 	int drx_open(struct drx_demod_instance *demod);
 
 	int drx_close(struct drx_demod_instance *demod);

commit b48293db4a348e9759c1f8a41a84f2e9f559decf
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Sat Jan 18 11:13:02 2014 -0300

    [media] drx-j: dynamically load the firmware
    
    Instead of hardcoding the firmware files together with the driver,
    use request_firmware() way, loading it from userspace.
    
    The firmware files are placed at:
            http://linuxtv.org/downloads/firmware/#8
    
    And they'll be latter submitted to linux-firmware git tree.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index f5add1a72dd6..1696e0d95657 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -33,6 +33,8 @@
 
 #include <linux/kernel.h>
 #include <linux/errno.h>
+#include <linux/firmware.h>
+#include <linux/i2c.h>
 
 /*
  * This structure contains the I2C address, the device ID and a user_data pointer.
@@ -1014,13 +1016,14 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \struct struct drxu_code_info * \brief Parameters for microcode upload and verfiy.
-*
-* Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
-*/
+ * struct drxu_code_info	Parameters for microcode upload and verfiy.
+ *
+ * @mc_file:	microcode file name
+ *
+ * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
+ */
 struct drxu_code_info {
-	u8 *mc_data;
-	     /**< Pointer to microcode image. */
+	char 			*mc_file;
 };
 
 /**
@@ -1929,8 +1932,7 @@ struct drx_reg_dump {
 */
 	struct drx_common_attr {
 		/* Microcode (firmware) attributes */
-		u8 *microcode;   /**< Pointer to microcode image.           */
-				   /**< Size of microcode image in bytes.     */
+		char *microcode_file;   /**<  microcode filename           */
 		bool verify_microcode;
 				   /**< Use microcode verify or not.          */
 		struct drx_mc_version_rec mcversion;
@@ -2029,21 +2031,24 @@ struct drx_demod_instance;
 /**
 * \struct struct drx_demod_instance * \brief Top structure of demodulator instance.
 */
-	struct drx_demod_instance {
-		/* type specific demodulator data */
-		struct drx_demod_func *my_demod_funct;
-				    /**< demodulator functions                */
-		struct drx_access_func *my_access_funct;
-				    /**< data access protocol functions       */
-		struct tuner_instance *my_tuner;
-				    /**< tuner instance,if NULL then baseband */
-		struct i2c_device_addr *my_i2c_dev_addr;
-				    /**< i2c address and device identifier    */
-		struct drx_common_attr *my_common_attr;
-				    /**< common DRX attributes                */
-		void *my_ext_attr;    /**< device specific attributes           */
-		/* generic demodulator data */
-	};
+struct drx_demod_instance {
+	/* type specific demodulator data */
+	struct drx_demod_func *my_demod_funct;
+				/**< demodulator functions                */
+	struct drx_access_func *my_access_funct;
+				/**< data access protocol functions       */
+	struct tuner_instance *my_tuner;
+				/**< tuner instance,if NULL then baseband */
+	struct i2c_device_addr *my_i2c_dev_addr;
+				/**< i2c address and device identifier    */
+	struct drx_common_attr *my_common_attr;
+				/**< common DRX attributes                */
+	void *my_ext_attr;    /**< device specific attributes           */
+	/* generic demodulator data */
+
+	struct i2c_adapter	*i2c;
+	const struct firmware	*firmware;
+};
 
 /*-------------------------------------------------------------------------
 MACROS

commit 9cf5370e3150f853cd9fa5a2537d6eb69acd703b
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 17 16:02:09 2014 -0300

    [media] drx-j: remove the useless microcode_size
    
    This var is not used. Remove it from the code, as we'll now be
    converting the driver to load the firmware from an external
    file.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index c36321b9dd72..f5add1a72dd6 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1021,8 +1021,6 @@ STRUCTS
 struct drxu_code_info {
 	u8 *mc_data;
 	     /**< Pointer to microcode image. */
-	u16 mc_size;
-	     /**< Microcode image size.       */
 };
 
 /**
@@ -1932,7 +1930,6 @@ struct drx_reg_dump {
 	struct drx_common_attr {
 		/* Microcode (firmware) attributes */
 		u8 *microcode;   /**< Pointer to microcode image.           */
-		u16 microcode_size;
 				   /**< Size of microcode image in bytes.     */
 		bool verify_microcode;
 				   /**< Use microcode verify or not.          */
@@ -2351,7 +2348,6 @@ Access macros
 #define DRX_ATTR_CACHESTANDARD(d)   ((d)->my_common_attr->di_cache_standard)
 #define DRX_ATTR_CURRENTCHANNEL(d)  ((d)->my_common_attr->current_channel)
 #define DRX_ATTR_MICROCODE(d)       ((d)->my_common_attr->microcode)
-#define DRX_ATTR_MICROCODESIZE(d)   ((d)->my_common_attr->microcode_size)
 #define DRX_ATTR_VERIFYMICROCODE(d) ((d)->my_common_attr->verify_microcode)
 #define DRX_ATTR_CAPABILITIES(d)    ((d)->my_common_attr->capabilities)
 #define DRX_ATTR_PRODUCTID(d)       ((d)->my_common_attr->product_id)

commit 2f1f733386ce6dac70c0936b81b9f630ddfb1837
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 17 11:51:52 2014 -0300

    [media] drx-j: make checkpatch.pl happy
    
    Fix the remaining checkpatch.pl compliants at drxj.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 2a7846699f3c..c36321b9dd72 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -2056,275 +2056,275 @@ Conversion from enum values to human readable form.
 /* standard */
 
 #define DRX_STR_STANDARD(x) ( \
-   (x == DRX_STANDARD_DVBT)  ? "DVB-T"            : \
-   (x == DRX_STANDARD_8VSB)  ? "8VSB"             : \
-   (x == DRX_STANDARD_NTSC)  ? "NTSC"             : \
-   (x == DRX_STANDARD_PAL_SECAM_BG)  ? "PAL/SECAM B/G"    : \
-   (x == DRX_STANDARD_PAL_SECAM_DK)  ? "PAL/SECAM D/K"    : \
-   (x == DRX_STANDARD_PAL_SECAM_I)  ? "PAL/SECAM I"      : \
-   (x == DRX_STANDARD_PAL_SECAM_L)  ? "PAL/SECAM L"      : \
-   (x == DRX_STANDARD_PAL_SECAM_LP)  ? "PAL/SECAM LP"     : \
-   (x == DRX_STANDARD_ITU_A)  ? "ITU-A"            : \
-   (x == DRX_STANDARD_ITU_B)  ? "ITU-B"            : \
-   (x == DRX_STANDARD_ITU_C)  ? "ITU-C"            : \
-   (x == DRX_STANDARD_ITU_D)  ? "ITU-D"            : \
-   (x == DRX_STANDARD_FM)  ? "FM"               : \
-   (x == DRX_STANDARD_DTMB)  ? "DTMB"             : \
-   (x == DRX_STANDARD_AUTO)  ? "Auto"             : \
-   (x == DRX_STANDARD_UNKNOWN)  ? "Unknown"          : \
-					     "(Invalid)")
+	(x == DRX_STANDARD_DVBT)  ? "DVB-T"            : \
+	(x == DRX_STANDARD_8VSB)  ? "8VSB"             : \
+	(x == DRX_STANDARD_NTSC)  ? "NTSC"             : \
+	(x == DRX_STANDARD_PAL_SECAM_BG)  ? "PAL/SECAM B/G"    : \
+	(x == DRX_STANDARD_PAL_SECAM_DK)  ? "PAL/SECAM D/K"    : \
+	(x == DRX_STANDARD_PAL_SECAM_I)  ? "PAL/SECAM I"      : \
+	(x == DRX_STANDARD_PAL_SECAM_L)  ? "PAL/SECAM L"      : \
+	(x == DRX_STANDARD_PAL_SECAM_LP)  ? "PAL/SECAM LP"     : \
+	(x == DRX_STANDARD_ITU_A)  ? "ITU-A"            : \
+	(x == DRX_STANDARD_ITU_B)  ? "ITU-B"            : \
+	(x == DRX_STANDARD_ITU_C)  ? "ITU-C"            : \
+	(x == DRX_STANDARD_ITU_D)  ? "ITU-D"            : \
+	(x == DRX_STANDARD_FM)  ? "FM"               : \
+	(x == DRX_STANDARD_DTMB)  ? "DTMB"             : \
+	(x == DRX_STANDARD_AUTO)  ? "Auto"             : \
+	(x == DRX_STANDARD_UNKNOWN)  ? "Unknown"          : \
+	"(Invalid)")
 
 /* channel */
 
 #define DRX_STR_BANDWIDTH(x) ( \
-   (x == DRX_BANDWIDTH_8MHZ)  ?  "8 MHz"            : \
-   (x == DRX_BANDWIDTH_7MHZ)  ?  "7 MHz"            : \
-   (x == DRX_BANDWIDTH_6MHZ)  ?  "6 MHz"            : \
-   (x == DRX_BANDWIDTH_AUTO)  ?  "Auto"             : \
-   (x == DRX_BANDWIDTH_UNKNOWN)  ?  "Unknown"          : \
-					     "(Invalid)")
+	(x == DRX_BANDWIDTH_8MHZ)  ?  "8 MHz"            : \
+	(x == DRX_BANDWIDTH_7MHZ)  ?  "7 MHz"            : \
+	(x == DRX_BANDWIDTH_6MHZ)  ?  "6 MHz"            : \
+	(x == DRX_BANDWIDTH_AUTO)  ?  "Auto"             : \
+	(x == DRX_BANDWIDTH_UNKNOWN)  ?  "Unknown"          : \
+	"(Invalid)")
 #define DRX_STR_FFTMODE(x) ( \
-   (x == DRX_FFTMODE_2K)  ?  "2k"               : \
-   (x == DRX_FFTMODE_4K)  ?  "4k"               : \
-   (x == DRX_FFTMODE_8K)  ?  "8k"               : \
-   (x == DRX_FFTMODE_AUTO)  ?  "Auto"             : \
-   (x == DRX_FFTMODE_UNKNOWN)  ?  "Unknown"          : \
-					     "(Invalid)")
+	(x == DRX_FFTMODE_2K)  ?  "2k"               : \
+	(x == DRX_FFTMODE_4K)  ?  "4k"               : \
+	(x == DRX_FFTMODE_8K)  ?  "8k"               : \
+	(x == DRX_FFTMODE_AUTO)  ?  "Auto"             : \
+	(x == DRX_FFTMODE_UNKNOWN)  ?  "Unknown"          : \
+	"(Invalid)")
 #define DRX_STR_GUARD(x) ( \
-   (x == DRX_GUARD_1DIV32)  ?  "1/32nd"           : \
-   (x == DRX_GUARD_1DIV16)  ?  "1/16th"           : \
-   (x == DRX_GUARD_1DIV8)  ?  "1/8th"            : \
-   (x == DRX_GUARD_1DIV4)  ?  "1/4th"            : \
-   (x == DRX_GUARD_AUTO)  ?  "Auto"             : \
-   (x == DRX_GUARD_UNKNOWN)  ?  "Unknown"          : \
-					     "(Invalid)")
+	(x == DRX_GUARD_1DIV32)  ?  "1/32nd"           : \
+	(x == DRX_GUARD_1DIV16)  ?  "1/16th"           : \
+	(x == DRX_GUARD_1DIV8)  ?  "1/8th"            : \
+	(x == DRX_GUARD_1DIV4)  ?  "1/4th"            : \
+	(x == DRX_GUARD_AUTO)  ?  "Auto"             : \
+	(x == DRX_GUARD_UNKNOWN)  ?  "Unknown"          : \
+	"(Invalid)")
 #define DRX_STR_CONSTELLATION(x) ( \
-   (x == DRX_CONSTELLATION_BPSK)  ?  "BPSK"            : \
-   (x == DRX_CONSTELLATION_QPSK)  ?  "QPSK"            : \
-   (x == DRX_CONSTELLATION_PSK8)  ?  "PSK8"            : \
-   (x == DRX_CONSTELLATION_QAM16)  ?  "QAM16"           : \
-   (x == DRX_CONSTELLATION_QAM32)  ?  "QAM32"           : \
-   (x == DRX_CONSTELLATION_QAM64)  ?  "QAM64"           : \
-   (x == DRX_CONSTELLATION_QAM128)  ?  "QAM128"          : \
-   (x == DRX_CONSTELLATION_QAM256)  ?  "QAM256"          : \
-   (x == DRX_CONSTELLATION_QAM512)  ?  "QAM512"          : \
-   (x == DRX_CONSTELLATION_QAM1024)  ?  "QAM1024"         : \
-   (x == DRX_CONSTELLATION_QPSK_NR)  ?  "QPSK_NR"            : \
-   (x == DRX_CONSTELLATION_AUTO)  ?  "Auto"            : \
-   (x == DRX_CONSTELLATION_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_CONSTELLATION_BPSK)  ?  "BPSK"            : \
+	(x == DRX_CONSTELLATION_QPSK)  ?  "QPSK"            : \
+	(x == DRX_CONSTELLATION_PSK8)  ?  "PSK8"            : \
+	(x == DRX_CONSTELLATION_QAM16)  ?  "QAM16"           : \
+	(x == DRX_CONSTELLATION_QAM32)  ?  "QAM32"           : \
+	(x == DRX_CONSTELLATION_QAM64)  ?  "QAM64"           : \
+	(x == DRX_CONSTELLATION_QAM128)  ?  "QAM128"          : \
+	(x == DRX_CONSTELLATION_QAM256)  ?  "QAM256"          : \
+	(x == DRX_CONSTELLATION_QAM512)  ?  "QAM512"          : \
+	(x == DRX_CONSTELLATION_QAM1024)  ?  "QAM1024"         : \
+	(x == DRX_CONSTELLATION_QPSK_NR)  ?  "QPSK_NR"            : \
+	(x == DRX_CONSTELLATION_AUTO)  ?  "Auto"            : \
+	(x == DRX_CONSTELLATION_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 #define DRX_STR_CODERATE(x) ( \
-   (x == DRX_CODERATE_1DIV2)  ?  "1/2nd"           : \
-   (x == DRX_CODERATE_2DIV3)  ?  "2/3rd"           : \
-   (x == DRX_CODERATE_3DIV4)  ?  "3/4th"           : \
-   (x == DRX_CODERATE_5DIV6)  ?  "5/6th"           : \
-   (x == DRX_CODERATE_7DIV8)  ?  "7/8th"           : \
-   (x == DRX_CODERATE_AUTO)  ?  "Auto"            : \
-   (x == DRX_CODERATE_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_CODERATE_1DIV2)  ?  "1/2nd"           : \
+	(x == DRX_CODERATE_2DIV3)  ?  "2/3rd"           : \
+	(x == DRX_CODERATE_3DIV4)  ?  "3/4th"           : \
+	(x == DRX_CODERATE_5DIV6)  ?  "5/6th"           : \
+	(x == DRX_CODERATE_7DIV8)  ?  "7/8th"           : \
+	(x == DRX_CODERATE_AUTO)  ?  "Auto"            : \
+	(x == DRX_CODERATE_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 #define DRX_STR_HIERARCHY(x) ( \
-   (x == DRX_HIERARCHY_NONE)  ?  "None"            : \
-   (x == DRX_HIERARCHY_ALPHA1)  ?  "Alpha=1"         : \
-   (x == DRX_HIERARCHY_ALPHA2)  ?  "Alpha=2"         : \
-   (x == DRX_HIERARCHY_ALPHA4)  ?  "Alpha=4"         : \
-   (x == DRX_HIERARCHY_AUTO)  ?  "Auto"            : \
-   (x == DRX_HIERARCHY_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_HIERARCHY_NONE)  ?  "None"            : \
+	(x == DRX_HIERARCHY_ALPHA1)  ?  "Alpha=1"         : \
+	(x == DRX_HIERARCHY_ALPHA2)  ?  "Alpha=2"         : \
+	(x == DRX_HIERARCHY_ALPHA4)  ?  "Alpha=4"         : \
+	(x == DRX_HIERARCHY_AUTO)  ?  "Auto"            : \
+	(x == DRX_HIERARCHY_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 #define DRX_STR_PRIORITY(x) ( \
-   (x == DRX_PRIORITY_LOW)  ?  "Low"             : \
-   (x == DRX_PRIORITY_HIGH)  ?  "High"            : \
-   (x == DRX_PRIORITY_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_PRIORITY_LOW)  ?  "Low"             : \
+	(x == DRX_PRIORITY_HIGH)  ?  "High"            : \
+	(x == DRX_PRIORITY_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 #define DRX_STR_MIRROR(x) ( \
-   (x == DRX_MIRROR_NO)  ?  "Normal"          : \
-   (x == DRX_MIRROR_YES)  ?  "Mirrored"        : \
-   (x == DRX_MIRROR_AUTO)  ?  "Auto"            : \
-   (x == DRX_MIRROR_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_MIRROR_NO)  ?  "Normal"          : \
+	(x == DRX_MIRROR_YES)  ?  "Mirrored"        : \
+	(x == DRX_MIRROR_AUTO)  ?  "Auto"            : \
+	(x == DRX_MIRROR_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 #define DRX_STR_CLASSIFICATION(x) ( \
-   (x == DRX_CLASSIFICATION_GAUSS)  ?  "Gaussion"        : \
-   (x == DRX_CLASSIFICATION_HVY_GAUSS)  ?  "Heavy Gaussion"  : \
-   (x == DRX_CLASSIFICATION_COCHANNEL)  ?  "Co-channel"      : \
-   (x == DRX_CLASSIFICATION_STATIC)  ?  "Static echo"     : \
-   (x == DRX_CLASSIFICATION_MOVING)  ?  "Moving echo"     : \
-   (x == DRX_CLASSIFICATION_ZERODB)  ?  "Zero dB echo"    : \
-   (x == DRX_CLASSIFICATION_UNKNOWN)  ?  "Unknown"         : \
-   (x == DRX_CLASSIFICATION_AUTO)  ?  "Auto"            : \
-					     "(Invalid)")
+	(x == DRX_CLASSIFICATION_GAUSS)  ?  "Gaussion"        : \
+	(x == DRX_CLASSIFICATION_HVY_GAUSS)  ?  "Heavy Gaussion"  : \
+	(x == DRX_CLASSIFICATION_COCHANNEL)  ?  "Co-channel"      : \
+	(x == DRX_CLASSIFICATION_STATIC)  ?  "Static echo"     : \
+	(x == DRX_CLASSIFICATION_MOVING)  ?  "Moving echo"     : \
+	(x == DRX_CLASSIFICATION_ZERODB)  ?  "Zero dB echo"    : \
+	(x == DRX_CLASSIFICATION_UNKNOWN)  ?  "Unknown"         : \
+	(x == DRX_CLASSIFICATION_AUTO)  ?  "Auto"            : \
+	"(Invalid)")
 
 #define DRX_STR_INTERLEAVEMODE(x) ( \
-   (x == DRX_INTERLEAVEMODE_I128_J1) ? "I128_J1"         : \
-   (x == DRX_INTERLEAVEMODE_I128_J1_V2) ? "I128_J1_V2"      : \
-   (x == DRX_INTERLEAVEMODE_I128_J2) ? "I128_J2"         : \
-   (x == DRX_INTERLEAVEMODE_I64_J2) ? "I64_J2"          : \
-   (x == DRX_INTERLEAVEMODE_I128_J3) ? "I128_J3"         : \
-   (x == DRX_INTERLEAVEMODE_I32_J4) ? "I32_J4"          : \
-   (x == DRX_INTERLEAVEMODE_I128_J4) ? "I128_J4"         : \
-   (x == DRX_INTERLEAVEMODE_I16_J8) ? "I16_J8"          : \
-   (x == DRX_INTERLEAVEMODE_I128_J5) ? "I128_J5"         : \
-   (x == DRX_INTERLEAVEMODE_I8_J16) ? "I8_J16"          : \
-   (x == DRX_INTERLEAVEMODE_I128_J6) ? "I128_J6"         : \
-   (x == DRX_INTERLEAVEMODE_RESERVED_11) ? "Reserved 11"     : \
-   (x == DRX_INTERLEAVEMODE_I128_J7) ? "I128_J7"         : \
-   (x == DRX_INTERLEAVEMODE_RESERVED_13) ? "Reserved 13"     : \
-   (x == DRX_INTERLEAVEMODE_I128_J8) ? "I128_J8"         : \
-   (x == DRX_INTERLEAVEMODE_RESERVED_15) ? "Reserved 15"     : \
-   (x == DRX_INTERLEAVEMODE_I12_J17) ? "I12_J17"         : \
-   (x == DRX_INTERLEAVEMODE_I5_J4) ? "I5_J4"           : \
-   (x == DRX_INTERLEAVEMODE_B52_M240) ? "B52_M240"        : \
-   (x == DRX_INTERLEAVEMODE_B52_M720) ? "B52_M720"        : \
-   (x == DRX_INTERLEAVEMODE_B52_M48) ? "B52_M48"         : \
-   (x == DRX_INTERLEAVEMODE_B52_M0) ? "B52_M0"          : \
-   (x == DRX_INTERLEAVEMODE_UNKNOWN) ? "Unknown"         : \
-   (x == DRX_INTERLEAVEMODE_AUTO) ? "Auto"            : \
-					     "(Invalid)")
+	(x == DRX_INTERLEAVEMODE_I128_J1) ? "I128_J1"         : \
+	(x == DRX_INTERLEAVEMODE_I128_J1_V2) ? "I128_J1_V2"      : \
+	(x == DRX_INTERLEAVEMODE_I128_J2) ? "I128_J2"         : \
+	(x == DRX_INTERLEAVEMODE_I64_J2) ? "I64_J2"          : \
+	(x == DRX_INTERLEAVEMODE_I128_J3) ? "I128_J3"         : \
+	(x == DRX_INTERLEAVEMODE_I32_J4) ? "I32_J4"          : \
+	(x == DRX_INTERLEAVEMODE_I128_J4) ? "I128_J4"         : \
+	(x == DRX_INTERLEAVEMODE_I16_J8) ? "I16_J8"          : \
+	(x == DRX_INTERLEAVEMODE_I128_J5) ? "I128_J5"         : \
+	(x == DRX_INTERLEAVEMODE_I8_J16) ? "I8_J16"          : \
+	(x == DRX_INTERLEAVEMODE_I128_J6) ? "I128_J6"         : \
+	(x == DRX_INTERLEAVEMODE_RESERVED_11) ? "Reserved 11"     : \
+	(x == DRX_INTERLEAVEMODE_I128_J7) ? "I128_J7"         : \
+	(x == DRX_INTERLEAVEMODE_RESERVED_13) ? "Reserved 13"     : \
+	(x == DRX_INTERLEAVEMODE_I128_J8) ? "I128_J8"         : \
+	(x == DRX_INTERLEAVEMODE_RESERVED_15) ? "Reserved 15"     : \
+	(x == DRX_INTERLEAVEMODE_I12_J17) ? "I12_J17"         : \
+	(x == DRX_INTERLEAVEMODE_I5_J4) ? "I5_J4"           : \
+	(x == DRX_INTERLEAVEMODE_B52_M240) ? "B52_M240"        : \
+	(x == DRX_INTERLEAVEMODE_B52_M720) ? "B52_M720"        : \
+	(x == DRX_INTERLEAVEMODE_B52_M48) ? "B52_M48"         : \
+	(x == DRX_INTERLEAVEMODE_B52_M0) ? "B52_M0"          : \
+	(x == DRX_INTERLEAVEMODE_UNKNOWN) ? "Unknown"         : \
+	(x == DRX_INTERLEAVEMODE_AUTO) ? "Auto"            : \
+	"(Invalid)")
 
 #define DRX_STR_LDPC(x) ( \
-   (x == DRX_LDPC_0_4) ? "0.4"             : \
-   (x == DRX_LDPC_0_6) ? "0.6"             : \
-   (x == DRX_LDPC_0_8) ? "0.8"             : \
-   (x == DRX_LDPC_AUTO) ? "Auto"            : \
-   (x == DRX_LDPC_UNKNOWN) ? "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_LDPC_0_4) ? "0.4"             : \
+	(x == DRX_LDPC_0_6) ? "0.6"             : \
+	(x == DRX_LDPC_0_8) ? "0.8"             : \
+	(x == DRX_LDPC_AUTO) ? "Auto"            : \
+	(x == DRX_LDPC_UNKNOWN) ? "Unknown"         : \
+	"(Invalid)")
 
 #define DRX_STR_CARRIER(x) ( \
-   (x == DRX_CARRIER_MULTI) ? "Multi"           : \
-   (x == DRX_CARRIER_SINGLE) ? "Single"          : \
-   (x == DRX_CARRIER_AUTO) ? "Auto"            : \
-   (x == DRX_CARRIER_UNKNOWN) ? "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_CARRIER_MULTI) ? "Multi"           : \
+	(x == DRX_CARRIER_SINGLE) ? "Single"          : \
+	(x == DRX_CARRIER_AUTO) ? "Auto"            : \
+	(x == DRX_CARRIER_UNKNOWN) ? "Unknown"         : \
+	"(Invalid)")
 
 #define DRX_STR_FRAMEMODE(x) ( \
-   (x == DRX_FRAMEMODE_420)  ? "420"                : \
-   (x == DRX_FRAMEMODE_595)  ? "595"                : \
-   (x == DRX_FRAMEMODE_945)  ? "945"                : \
-   (x == DRX_FRAMEMODE_420_FIXED_PN)  ? "420 with fixed PN"  : \
-   (x == DRX_FRAMEMODE_945_FIXED_PN)  ? "945 with fixed PN"  : \
-   (x == DRX_FRAMEMODE_AUTO)  ? "Auto"               : \
-   (x == DRX_FRAMEMODE_UNKNOWN)  ? "Unknown"            : \
-					  "(Invalid)")
+	(x == DRX_FRAMEMODE_420)  ? "420"                : \
+	(x == DRX_FRAMEMODE_595)  ? "595"                : \
+	(x == DRX_FRAMEMODE_945)  ? "945"                : \
+	(x == DRX_FRAMEMODE_420_FIXED_PN)  ? "420 with fixed PN"  : \
+	(x == DRX_FRAMEMODE_945_FIXED_PN)  ? "945 with fixed PN"  : \
+	(x == DRX_FRAMEMODE_AUTO)  ? "Auto"               : \
+	(x == DRX_FRAMEMODE_UNKNOWN)  ? "Unknown"            : \
+	"(Invalid)")
 
 #define DRX_STR_PILOT(x) ( \
-   (x == DRX_PILOT_ON) ?   "On"              : \
-   (x == DRX_PILOT_OFF) ?   "Off"             : \
-   (x == DRX_PILOT_AUTO) ?   "Auto"            : \
-   (x == DRX_PILOT_UNKNOWN) ?   "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_PILOT_ON) ?   "On"              : \
+	(x == DRX_PILOT_OFF) ?   "Off"             : \
+	(x == DRX_PILOT_AUTO) ?   "Auto"            : \
+	(x == DRX_PILOT_UNKNOWN) ?   "Unknown"         : \
+	"(Invalid)")
 /* TPS */
 
 #define DRX_STR_TPS_FRAME(x)  ( \
-   (x == DRX_TPS_FRAME1)  ?  "Frame1"          : \
-   (x == DRX_TPS_FRAME2)  ?  "Frame2"          : \
-   (x == DRX_TPS_FRAME3)  ?  "Frame3"          : \
-   (x == DRX_TPS_FRAME4)  ?  "Frame4"          : \
-   (x == DRX_TPS_FRAME_UNKNOWN)  ?  "Unknown"         : \
-					     "(Invalid)")
+	(x == DRX_TPS_FRAME1)  ?  "Frame1"          : \
+	(x == DRX_TPS_FRAME2)  ?  "Frame2"          : \
+	(x == DRX_TPS_FRAME3)  ?  "Frame3"          : \
+	(x == DRX_TPS_FRAME4)  ?  "Frame4"          : \
+	(x == DRX_TPS_FRAME_UNKNOWN)  ?  "Unknown"         : \
+	"(Invalid)")
 
 /* lock status */
 
 #define DRX_STR_LOCKSTATUS(x) ( \
-   (x == DRX_NEVER_LOCK)  ?  "Never"           : \
-   (x == DRX_NOT_LOCKED)  ?  "No"              : \
-   (x == DRX_LOCKED)  ?  "Locked"          : \
-   (x == DRX_LOCK_STATE_1)  ?  "Lock state 1"    : \
-   (x == DRX_LOCK_STATE_2)  ?  "Lock state 2"    : \
-   (x == DRX_LOCK_STATE_3)  ?  "Lock state 3"    : \
-   (x == DRX_LOCK_STATE_4)  ?  "Lock state 4"    : \
-   (x == DRX_LOCK_STATE_5)  ?  "Lock state 5"    : \
-   (x == DRX_LOCK_STATE_6)  ?  "Lock state 6"    : \
-   (x == DRX_LOCK_STATE_7)  ?  "Lock state 7"    : \
-   (x == DRX_LOCK_STATE_8)  ?  "Lock state 8"    : \
-   (x == DRX_LOCK_STATE_9)  ?  "Lock state 9"    : \
-					     "(Invalid)")
+	(x == DRX_NEVER_LOCK)  ?  "Never"           : \
+	(x == DRX_NOT_LOCKED)  ?  "No"              : \
+	(x == DRX_LOCKED)  ?  "Locked"          : \
+	(x == DRX_LOCK_STATE_1)  ?  "Lock state 1"    : \
+	(x == DRX_LOCK_STATE_2)  ?  "Lock state 2"    : \
+	(x == DRX_LOCK_STATE_3)  ?  "Lock state 3"    : \
+	(x == DRX_LOCK_STATE_4)  ?  "Lock state 4"    : \
+	(x == DRX_LOCK_STATE_5)  ?  "Lock state 5"    : \
+	(x == DRX_LOCK_STATE_6)  ?  "Lock state 6"    : \
+	(x == DRX_LOCK_STATE_7)  ?  "Lock state 7"    : \
+	(x == DRX_LOCK_STATE_8)  ?  "Lock state 8"    : \
+	(x == DRX_LOCK_STATE_9)  ?  "Lock state 9"    : \
+	"(Invalid)")
 
 /* version information , modules */
 #define DRX_STR_MODULE(x) ( \
-   (x == DRX_MODULE_DEVICE)  ?  "Device"                : \
-   (x == DRX_MODULE_MICROCODE)  ?  "Microcode"             : \
-   (x == DRX_MODULE_DRIVERCORE)  ?  "CoreDriver"            : \
-   (x == DRX_MODULE_DEVICEDRIVER)  ?  "DeviceDriver"          : \
-   (x == DRX_MODULE_BSP_I2C)  ?  "BSP I2C"               : \
-   (x == DRX_MODULE_BSP_TUNER)  ?  "BSP Tuner"             : \
-   (x == DRX_MODULE_BSP_HOST)  ?  "BSP Host"              : \
-   (x == DRX_MODULE_DAP)  ?  "Data Access Protocol"  : \
-   (x == DRX_MODULE_UNKNOWN)  ?  "Unknown"               : \
-					     "(Invalid)")
+	(x == DRX_MODULE_DEVICE)  ?  "Device"                : \
+	(x == DRX_MODULE_MICROCODE)  ?  "Microcode"             : \
+	(x == DRX_MODULE_DRIVERCORE)  ?  "CoreDriver"            : \
+	(x == DRX_MODULE_DEVICEDRIVER)  ?  "DeviceDriver"          : \
+	(x == DRX_MODULE_BSP_I2C)  ?  "BSP I2C"               : \
+	(x == DRX_MODULE_BSP_TUNER)  ?  "BSP Tuner"             : \
+	(x == DRX_MODULE_BSP_HOST)  ?  "BSP Host"              : \
+	(x == DRX_MODULE_DAP)  ?  "Data Access Protocol"  : \
+	(x == DRX_MODULE_UNKNOWN)  ?  "Unknown"               : \
+	"(Invalid)")
 
 #define DRX_STR_POWER_MODE(x) ( \
-   (x == DRX_POWER_UP)  ?  "DRX_POWER_UP    "  : \
-   (x == DRX_POWER_MODE_1)  ?  "DRX_POWER_MODE_1"  : \
-   (x == DRX_POWER_MODE_2)  ?  "DRX_POWER_MODE_2"  : \
-   (x == DRX_POWER_MODE_3)  ?  "DRX_POWER_MODE_3"  : \
-   (x == DRX_POWER_MODE_4)  ?  "DRX_POWER_MODE_4"  : \
-   (x == DRX_POWER_MODE_5)  ?  "DRX_POWER_MODE_5"  : \
-   (x == DRX_POWER_MODE_6)  ?  "DRX_POWER_MODE_6"  : \
-   (x == DRX_POWER_MODE_7)  ?  "DRX_POWER_MODE_7"  : \
-   (x == DRX_POWER_MODE_8)  ?  "DRX_POWER_MODE_8"  : \
-   (x == DRX_POWER_MODE_9)  ?  "DRX_POWER_MODE_9"  : \
-   (x == DRX_POWER_MODE_10)  ?  "DRX_POWER_MODE_10" : \
-   (x == DRX_POWER_MODE_11)  ?  "DRX_POWER_MODE_11" : \
-   (x == DRX_POWER_MODE_12)  ?  "DRX_POWER_MODE_12" : \
-   (x == DRX_POWER_MODE_13)  ?  "DRX_POWER_MODE_13" : \
-   (x == DRX_POWER_MODE_14)  ?  "DRX_POWER_MODE_14" : \
-   (x == DRX_POWER_MODE_15)  ?  "DRX_POWER_MODE_15" : \
-   (x == DRX_POWER_MODE_16)  ?  "DRX_POWER_MODE_16" : \
-   (x == DRX_POWER_DOWN)  ?  "DRX_POWER_DOWN  " : \
-					     "(Invalid)")
+	(x == DRX_POWER_UP)  ?  "DRX_POWER_UP    "  : \
+	(x == DRX_POWER_MODE_1)  ?  "DRX_POWER_MODE_1"  : \
+	(x == DRX_POWER_MODE_2)  ?  "DRX_POWER_MODE_2"  : \
+	(x == DRX_POWER_MODE_3)  ?  "DRX_POWER_MODE_3"  : \
+	(x == DRX_POWER_MODE_4)  ?  "DRX_POWER_MODE_4"  : \
+	(x == DRX_POWER_MODE_5)  ?  "DRX_POWER_MODE_5"  : \
+	(x == DRX_POWER_MODE_6)  ?  "DRX_POWER_MODE_6"  : \
+	(x == DRX_POWER_MODE_7)  ?  "DRX_POWER_MODE_7"  : \
+	(x == DRX_POWER_MODE_8)  ?  "DRX_POWER_MODE_8"  : \
+	(x == DRX_POWER_MODE_9)  ?  "DRX_POWER_MODE_9"  : \
+	(x == DRX_POWER_MODE_10)  ?  "DRX_POWER_MODE_10" : \
+	(x == DRX_POWER_MODE_11)  ?  "DRX_POWER_MODE_11" : \
+	(x == DRX_POWER_MODE_12)  ?  "DRX_POWER_MODE_12" : \
+	(x == DRX_POWER_MODE_13)  ?  "DRX_POWER_MODE_13" : \
+	(x == DRX_POWER_MODE_14)  ?  "DRX_POWER_MODE_14" : \
+	(x == DRX_POWER_MODE_15)  ?  "DRX_POWER_MODE_15" : \
+	(x == DRX_POWER_MODE_16)  ?  "DRX_POWER_MODE_16" : \
+	(x == DRX_POWER_DOWN)  ?  "DRX_POWER_DOWN  " : \
+	"(Invalid)")
 
 #define DRX_STR_OOB_STANDARD(x) ( \
-   (x == DRX_OOB_MODE_A)  ?  "ANSI 55-1  " : \
-   (x == DRX_OOB_MODE_B_GRADE_A)  ?  "ANSI 55-2 A" : \
-   (x == DRX_OOB_MODE_B_GRADE_B)  ?  "ANSI 55-2 B" : \
-					     "(Invalid)")
+	(x == DRX_OOB_MODE_A)  ?  "ANSI 55-1  " : \
+	(x == DRX_OOB_MODE_B_GRADE_A)  ?  "ANSI 55-2 A" : \
+	(x == DRX_OOB_MODE_B_GRADE_B)  ?  "ANSI 55-2 B" : \
+	"(Invalid)")
 
 #define DRX_STR_AUD_STANDARD(x) ( \
-   (x == DRX_AUD_STANDARD_BTSC)  ? "BTSC"                     : \
-   (x == DRX_AUD_STANDARD_A2)  ? "A2"                       : \
-   (x == DRX_AUD_STANDARD_EIAJ)  ? "EIAJ"                     : \
-   (x == DRX_AUD_STANDARD_FM_STEREO)  ? "FM Stereo"                : \
-   (x == DRX_AUD_STANDARD_AUTO)  ? "Auto"                     : \
-   (x == DRX_AUD_STANDARD_M_MONO)  ? "M-Standard Mono"          : \
-   (x == DRX_AUD_STANDARD_D_K_MONO)  ? "D/K Mono FM"              : \
-   (x == DRX_AUD_STANDARD_BG_FM)  ? "B/G-Dual Carrier FM (A2)" : \
-   (x == DRX_AUD_STANDARD_D_K1)  ? "D/K1-Dual Carrier FM"     : \
-   (x == DRX_AUD_STANDARD_D_K2)  ? "D/K2-Dual Carrier FM"     : \
-   (x == DRX_AUD_STANDARD_D_K3)  ? "D/K3-Dual Carrier FM"     : \
-   (x == DRX_AUD_STANDARD_BG_NICAM_FM)  ? "B/G-NICAM-FM"             : \
-   (x == DRX_AUD_STANDARD_L_NICAM_AM)  ? "L-NICAM-AM"               : \
-   (x == DRX_AUD_STANDARD_I_NICAM_FM)  ? "I-NICAM-FM"               : \
-   (x == DRX_AUD_STANDARD_D_K_NICAM_FM)  ? "D/K-NICAM-FM"             : \
-   (x == DRX_AUD_STANDARD_UNKNOWN)  ? "Unknown"                  : \
-					     "(Invalid)")
+	(x == DRX_AUD_STANDARD_BTSC)  ? "BTSC"                     : \
+	(x == DRX_AUD_STANDARD_A2)  ? "A2"                       : \
+	(x == DRX_AUD_STANDARD_EIAJ)  ? "EIAJ"                     : \
+	(x == DRX_AUD_STANDARD_FM_STEREO)  ? "FM Stereo"                : \
+	(x == DRX_AUD_STANDARD_AUTO)  ? "Auto"                     : \
+	(x == DRX_AUD_STANDARD_M_MONO)  ? "M-Standard Mono"          : \
+	(x == DRX_AUD_STANDARD_D_K_MONO)  ? "D/K Mono FM"              : \
+	(x == DRX_AUD_STANDARD_BG_FM)  ? "B/G-Dual Carrier FM (A2)" : \
+	(x == DRX_AUD_STANDARD_D_K1)  ? "D/K1-Dual Carrier FM"     : \
+	(x == DRX_AUD_STANDARD_D_K2)  ? "D/K2-Dual Carrier FM"     : \
+	(x == DRX_AUD_STANDARD_D_K3)  ? "D/K3-Dual Carrier FM"     : \
+	(x == DRX_AUD_STANDARD_BG_NICAM_FM)  ? "B/G-NICAM-FM"             : \
+	(x == DRX_AUD_STANDARD_L_NICAM_AM)  ? "L-NICAM-AM"               : \
+	(x == DRX_AUD_STANDARD_I_NICAM_FM)  ? "I-NICAM-FM"               : \
+	(x == DRX_AUD_STANDARD_D_K_NICAM_FM)  ? "D/K-NICAM-FM"             : \
+	(x == DRX_AUD_STANDARD_UNKNOWN)  ? "Unknown"                  : \
+	"(Invalid)")
 #define DRX_STR_AUD_STEREO(x) ( \
-   (x == true)  ? "Stereo"           : \
-   (x == false)  ? "Mono"             : \
-					     "(Invalid)")
+	(x == true)  ? "Stereo"           : \
+	(x == false)  ? "Mono"             : \
+	"(Invalid)")
 
 #define DRX_STR_AUD_SAP(x) ( \
-   (x == true)  ? "Present"          : \
-   (x == false)  ? "Not present"      : \
-					     "(Invalid)")
+	(x == true)  ? "Present"          : \
+	(x == false)  ? "Not present"      : \
+	"(Invalid)")
 
 #define DRX_STR_AUD_CARRIER(x) ( \
-   (x == true)  ? "Present"          : \
-   (x == false)  ? "Not present"      : \
-					     "(Invalid)")
+	(x == true)  ? "Present"          : \
+	(x == false)  ? "Not present"      : \
+	"(Invalid)")
 
 #define DRX_STR_AUD_RDS(x) ( \
-   (x == true)  ? "Available"        : \
-   (x == false)  ? "Not Available"    : \
-					     "(Invalid)")
+	(x == true)  ? "Available"        : \
+	(x == false)  ? "Not Available"    : \
+	"(Invalid)")
 
 #define DRX_STR_AUD_NICAM_STATUS(x) ( \
-   (x == DRX_AUD_NICAM_DETECTED)  ? "Detected"         : \
-   (x == DRX_AUD_NICAM_NOT_DETECTED)  ? "Not detected"     : \
-   (x == DRX_AUD_NICAM_BAD)  ? "Bad"              : \
-					     "(Invalid)")
+	(x == DRX_AUD_NICAM_DETECTED)  ? "Detected"         : \
+	(x == DRX_AUD_NICAM_NOT_DETECTED)  ? "Not detected"     : \
+	(x == DRX_AUD_NICAM_BAD)  ? "Bad"              : \
+	"(Invalid)")
 
 #define DRX_STR_RDS_VALID(x) ( \
-   (x == true)  ? "Valid"            : \
-   (x == false)  ? "Not Valid"        : \
-					     "(Invalid)")
+	(x == true)  ? "Valid"            : \
+	(x == false)  ? "Not Valid"        : \
+	"(Invalid)")
 
 /*-------------------------------------------------------------------------
 Access macros
@@ -2371,29 +2371,29 @@ Access macros
 /* Macros with device-specific handling are converted to CFG functions */
 
 #define DRX_ACCESSMACRO_SET(demod, value, cfg_name, data_type)             \
-   do {                                                                    \
-      struct drx_cfg config;                                                     \
-      data_type cfg_data;                                                    \
-      config.cfg_type = cfg_name;                                            \
-      config.cfg_data = &cfg_data;                                           \
-      cfg_data = value;                                                     \
-      drx_ctrl(demod, DRX_CTRL_SET_CFG, &config);                        \
-   } while (0)
+	do {                                                               \
+		struct drx_cfg config;                                     \
+		data_type cfg_data;                                        \
+		config.cfg_type = cfg_name;                                \
+		config.cfg_data = &cfg_data;                               \
+		cfg_data = value;                                          \
+		drx_ctrl(demod, DRX_CTRL_SET_CFG, &config);                \
+	} while (0)
 
 #define DRX_ACCESSMACRO_GET(demod, value, cfg_name, data_type, error_value) \
-   do {                                                                    \
-      int cfg_status;                                               \
-      struct drx_cfg config;                                                  \
-      data_type    cfg_data;                                                 \
-      config.cfg_type = cfg_name;                                            \
-      config.cfg_data = &cfg_data;                                           \
-      cfg_status = drx_ctrl(demod, DRX_CTRL_GET_CFG, &config);            \
-      if (cfg_status == 0) {                                     \
-	 value = cfg_data;                                                  \
-      } else {                                                             \
-	 value = (data_type)error_value;                                     \
-      }                                                                    \
-   } while (0)
+	do {                                                                \
+		int cfg_status;                                             \
+		struct drx_cfg config;                                      \
+		data_type    cfg_data;                                      \
+		config.cfg_type = cfg_name;                                 \
+		config.cfg_data = &cfg_data;                                \
+		cfg_status = drx_ctrl(demod, DRX_CTRL_GET_CFG, &config);    \
+		if (cfg_status == 0) {                                      \
+			value = cfg_data;                                   \
+		} else {                                                    \
+			value = (data_type)error_value;                     \
+		}                                                           \
+	} while (0)
 
 /* Configuration functions for usage by Access (XS) Macros */
 
@@ -2408,9 +2408,9 @@ Access macros
 /* Access Macros with device-specific handling */
 
 #define DRX_SET_PRESET(d, x) \
-   DRX_ACCESSMACRO_SET((d), (x), DRX_XS_CFG_PRESET, char*)
+	DRX_ACCESSMACRO_SET((d), (x), DRX_XS_CFG_PRESET, char*)
 #define DRX_GET_PRESET(d, x) \
-   DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
+	DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
 
 #define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET((d), (x), \
 	 DRX_XS_CFG_AUD_BTSC_DETECT, enum drx_aud_btsc_detect)

commit b8cbcd354feddba18f42d8d056762c7151605013
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 17 12:20:41 2014 -0300

    [media] drx-j: get rid of some ugly macros
    
    There are several get/set macros that are bogus: they just
    call another macro and do either:
            x = FOO(d)
    or
            FOO(d) = x
    
    As checkpatch complains about that, and replacing all of them
    are as easy as running a small coccinelle script, get rid
    of all of them.
    
    Script used:
    
    @@
    expression d, x;
    @@
    -DRX_SET_MIRRORFREQSPECT(d, x);
    +DRX_ATTR_MIRRORFREQSPECT(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MIRRORFREQSPECT(d, x);
    +x = DRX_ATTR_MIRRORFREQSPECT(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_CURRENTPOWERMODE(d, x);
    +DRX_ATTR_CURRENTPOWERMODE(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_CURRENTPOWERMODE(d, x);
    +x = DRX_ATTR_CURRENTPOWERMODE(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_MICROCODE(d, x);
    +DRX_ATTR_MICROCODE(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MICROCODE(d, x);
    +x = DRX_ATTR_MICROCODE(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_MICROCODESIZE(d, x);
    +DRX_ATTR_MICROCODESIZE(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MICROCODESIZE(d, x);
    +x = DRX_ATTR_MICROCODESIZE(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_VERIFYMICROCODE(d, x);
    +DRX_ATTR_VERIFYMICROCODE(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_VERIFYMICROCODE(d, x);
    +x = DRX_ATTR_VERIFYMICROCODE(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_MCVERTYPE(d, x);
    +DRX_ATTR_MCRECORD(d).aux_type = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MCVERTYPE(d, x);
    +x = DRX_ATTR_MCRECORD(d).aux_type;
    
    @@
    expression d, x;
    @@
    -DRX_SET_MCDEV(d, x);
    +DRX_ATTR_MCRECORD(d).mc_dev_type = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MCDEV(d, x);
    +x = DRX_ATTR_MCRECORD(d).mc_dev_type;
    
    @@
    expression d, x;
    @@
    -DRX_SET_MCVERSION(d, x);
    +DRX_ATTR_MCRECORD(d).mc_version = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MCVERSION(d, x);
    +x = DRX_ATTR_MCRECORD(d).mc_version;
    
    @@
    expression d, x;
    @@
    -DRX_SET_MCPATCH(d, x);
    +DRX_ATTR_MCRECORD(d).mc_base_version = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MCPATCH(d, x);
    +x = DRX_ATTR_MCRECORD(d).mc_base_version;
    
    @@
    expression d, x;
    @@
    -DRX_SET_I2CADDR(d, x);
    +DRX_ATTR_I2CADDR(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_I2CADDR(d, x);
    +x = DRX_ATTR_I2CADDR(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_I2CDEVID(d, x);
    +DRX_ATTR_I2CDEVID(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_I2CDEVID(d, x);
    +x = DRX_ATTR_I2CDEVID(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_USEBOOTLOADER(d, x);
    +DRX_ATTR_USEBOOTLOADER(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_USEBOOTLOADER(d, x);
    +x = DRX_ATTR_USEBOOTLOADER(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_CURRENTSTANDARD(d, x);
    +DRX_ATTR_CURRENTSTANDARD(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_CURRENTSTANDARD(d, x);
    +x = DRX_ATTR_CURRENTSTANDARD(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_PREVSTANDARD(d, x);
    +DRX_ATTR_PREVSTANDARD(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_PREVSTANDARD(d, x);
    +x = DRX_ATTR_PREVSTANDARD(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_CACHESTANDARD(d, x);
    +DRX_ATTR_CACHESTANDARD(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_CACHESTANDARD(d, x);
    +x = DRX_ATTR_CACHESTANDARD(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_CURRENTCHANNEL(d, x);
    +DRX_ATTR_CURRENTCHANNEL(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_CURRENTCHANNEL(d, x);
    +x = DRX_ATTR_CURRENTCHANNEL(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_ISOPENED(d, x);
    +DRX_ATTR_ISOPENED(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_ISOPENED(d, x);
    +x = DRX_ATTR_ISOPENED(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_TUNER(d, x);
    +DRX_ATTR_TUNER(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_TUNER(d, x);
    +x = DRX_ATTR_TUNER(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_CAPABILITIES(d, x);
    +DRX_ATTR_CAPABILITIES(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_CAPABILITIES(d, x);
    +x = DRX_ATTR_CAPABILITIES(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_PRODUCTID(d, x);
    +DRX_ATTR_PRODUCTID(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_PRODUCTID(d, x);
    +x = DRX_ATTR_PRODUCTID(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_MFX(d, x);
    +DRX_ATTR_PRODUCTID(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_MFX(d, x);
    +x = DRX_ATTR_PRODUCTID(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_INTERMEDIATEFREQ(d, x);
    +DRX_ATTR_INTERMEDIATEFREQ(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_INTERMEDIATEFREQ(d, x);
    +x = DRX_ATTR_INTERMEDIATEFREQ(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_SYSCLOCKFREQ(d, x);
    +DRX_ATTR_SYSCLOCKFREQ(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_SYSCLOCKFREQ(d, x);
    +x = DRX_ATTR_SYSCLOCKFREQ(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_TUNERRFAGCPOL(d, x);
    +DRX_ATTR_TUNERRFAGCPOL(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_TUNERRFAGCPOL(d, x);
    +x = DRX_ATTR_TUNERRFAGCPOL(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_TUNERIFAGCPOL(d, x);
    +DRX_ATTR_TUNERIFAGCPOL(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_TUNERIFAGCPOL(d, x);
    +x = DRX_ATTR_TUNERIFAGCPOL(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_TUNERSLOWMODE(d, x);
    +DRX_ATTR_TUNERSLOWMODE(d) = x;
    
    @@
    expression d, x;
    @@
    -DRX_GET_TUNERSLOWMODE(d, x);
    +x = DRX_ATTR_TUNERSLOWMODE(d);
    
    @@
    expression d, x;
    @@
    -DRX_SET_TUNERPORTNR(d, x);
    +DRX_ATTR_TUNERSPORTNR(d) = x;
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 1b716228cdd4..2a7846699f3c 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -2364,341 +2364,10 @@ Access macros
 #define DRX_ATTR_TUNER(d)           ((d)->my_tuner)
 #define DRX_ATTR_I2CADDR(d)         ((d)->my_i2c_dev_addr->i2c_addr)
 #define DRX_ATTR_I2CDEVID(d)        ((d)->my_i2c_dev_addr->i2c_dev_id)
-
-/**
-* \brief Actual access macro's
-* \param d pointer to demod instance
-* \param x value to set ar to get
-*
-* SET macro's must be used to set the value of an attribute.
-* GET macro's must be used to retrieve the value of an attribute.
-*
-*/
-
-/**************************/
-
-#define DRX_SET_MIRRORFREQSPECT(d, x)                     \
-   do {                                                     \
-      DRX_ATTR_MIRRORFREQSPECT(d) = (x);                  \
-   } while (0)
-
-#define DRX_GET_MIRRORFREQSPECT(d, x)                     \
-   do {                                                     \
-      (x) = DRX_ATTR_MIRRORFREQSPECT(d);                    \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_CURRENTPOWERMODE(d, x)                    \
-   do {                                                     \
-      DRX_ATTR_CURRENTPOWERMODE(d) = (x);                 \
-   } while (0)
-
-#define DRX_GET_CURRENTPOWERMODE(d, x)                    \
-   do {                                                     \
-      (x) = DRX_ATTR_CURRENTPOWERMODE(d);                   \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_MICROCODE(d, x)                           \
-   do {                                                     \
-      DRX_ATTR_MICROCODE(d) = (x);                        \
-   } while (0)
-
-#define DRX_GET_MICROCODE(d, x)                           \
-   do {                                                     \
-      (x) = DRX_ATTR_MICROCODE(d);                          \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_MICROCODESIZE(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_MICROCODESIZE(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_MICROCODESIZE(d, x)                       \
-   do {                                                     \
-      (x) = DRX_ATTR_MICROCODESIZE(d);                        \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_VERIFYMICROCODE(d, x)                     \
-   do {                                                     \
-      DRX_ATTR_VERIFYMICROCODE(d) = (x);                    \
-   } while (0)
-
-#define DRX_GET_VERIFYMICROCODE(d, x)                     \
-   do {                                                     \
-      (x) = DRX_ATTR_VERIFYMICROCODE(d);                      \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_MCVERTYPE(d, x)                           \
-   do {                                                     \
-      DRX_ATTR_MCRECORD(d).aux_type = (x);                   \
-   } while (0)
-
-#define DRX_GET_MCVERTYPE(d, x)                           \
-   do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).aux_type;                   \
-   } while (0)
-
-/**************************/
-
 #define DRX_ISMCVERTYPE(x) ((x) == AUX_VER_RECORD)
 
 /**************************/
 
-#define DRX_SET_MCDEV(d, x)                               \
-   do {                                                     \
-      DRX_ATTR_MCRECORD(d).mc_dev_type = (x);                 \
-   } while (0)
-
-#define DRX_GET_MCDEV(d, x)                               \
-   do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mc_dev_type;                 \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_MCVERSION(d, x)                           \
-   do {                                                     \
-      DRX_ATTR_MCRECORD(d).mc_version = (x);                 \
-   } while (0)
-
-#define DRX_GET_MCVERSION(d, x)                           \
-   do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mc_version;                 \
-   } while (0)
-
-/**************************/
-#define DRX_SET_MCPATCH(d, x)                             \
-   do {                                                     \
-      DRX_ATTR_MCRECORD(d).mc_base_version = (x);             \
-   } while (0)
-
-#define DRX_GET_MCPATCH(d, x)                             \
-   do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mc_base_version;             \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_I2CADDR(d, x)                             \
-   do {                                                     \
-      DRX_ATTR_I2CADDR(d) = (x);                            \
-   } while (0)
-
-#define DRX_GET_I2CADDR(d, x)                             \
-   do {                                                     \
-      (x) = DRX_ATTR_I2CADDR(d);                              \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_I2CDEVID(d, x)                            \
-   do {                                                     \
-      DRX_ATTR_I2CDEVID(d) = (x);                           \
-   } while (0)
-
-#define DRX_GET_I2CDEVID(d, x)                            \
-   do {                                                     \
-      (x) = DRX_ATTR_I2CDEVID(d);                             \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_USEBOOTLOADER(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_USEBOOTLOADER(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_USEBOOTLOADER(d, x)                        \
-   do {                                                     \
-      (x) = DRX_ATTR_USEBOOTLOADER(d);                        \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_CURRENTSTANDARD(d, x)                     \
-   do {                                                     \
-      DRX_ATTR_CURRENTSTANDARD(d) = (x);                    \
-   } while (0)
-
-#define DRX_GET_CURRENTSTANDARD(d, x)                      \
-   do {                                                     \
-      (x) = DRX_ATTR_CURRENTSTANDARD(d);                      \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_PREVSTANDARD(d, x)                        \
-   do {                                                     \
-      DRX_ATTR_PREVSTANDARD(d) = (x);                       \
-   } while (0)
-
-#define DRX_GET_PREVSTANDARD(d, x)                         \
-   do {                                                     \
-      (x) = DRX_ATTR_PREVSTANDARD(d);                         \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_CACHESTANDARD(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_CACHESTANDARD(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_CACHESTANDARD(d, x)                        \
-   do {                                                     \
-      (x) = DRX_ATTR_CACHESTANDARD(d);                        \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_CURRENTCHANNEL(d, x)                      \
-   do {                                                     \
-      DRX_ATTR_CURRENTCHANNEL(d) = (x);                     \
-   } while (0)
-
-#define DRX_GET_CURRENTCHANNEL(d, x)                       \
-   do {                                                     \
-      (x) = DRX_ATTR_CURRENTCHANNEL(d);                       \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_ISOPENED(d, x)                            \
-   do {                                                     \
-      DRX_ATTR_ISOPENED(d) = (x);                           \
-   } while (0)
-
-#define DRX_GET_ISOPENED(d, x)                             \
-   do {                                                     \
-      (x) = DRX_ATTR_ISOPENED(d);                           \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_TUNER(d, x)                               \
-   do {                                                     \
-      DRX_ATTR_TUNER(d) = (x);                              \
-   } while (0)
-
-#define DRX_GET_TUNER(d, x)                                \
-   do {                                                     \
-      (x) = DRX_ATTR_TUNER(d);                              \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_CAPABILITIES(d, x)                        \
-   do {                                                     \
-      DRX_ATTR_CAPABILITIES(d) = (x);                       \
-   } while (0)
-
-#define DRX_GET_CAPABILITIES(d, x)                         \
-   do {                                                     \
-      (x) = DRX_ATTR_CAPABILITIES(d);                       \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_PRODUCTID(d, x)                           \
-   do {                                                     \
-      DRX_ATTR_PRODUCTID(d) |= (x << 4);                    \
-   } while (0)
-
-#define DRX_GET_PRODUCTID(d, x)                            \
-   do {                                                     \
-      (x) = (DRX_ATTR_PRODUCTID(d) >> 4);                   \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_MFX(d, x)                                 \
-   do {                                                     \
-      DRX_ATTR_PRODUCTID(d) |= (x);                         \
-   } while (0)
-
-#define DRX_GET_MFX(d, x)                                  \
-   do {                                                     \
-      (x) = (DRX_ATTR_PRODUCTID(d) & 0xF);                  \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_INTERMEDIATEFREQ(d, x)                    \
-   do {                                                     \
-      DRX_ATTR_INTERMEDIATEFREQ(d) = (x);                   \
-   } while (0)
-
-#define DRX_GET_INTERMEDIATEFREQ(d, x)                     \
-   do {                                                     \
-      (x) = DRX_ATTR_INTERMEDIATEFREQ(d);                   \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_SYSCLOCKFREQ(d, x)                        \
-   do {                                                     \
-      DRX_ATTR_SYSCLOCKFREQ(d) = (x);                       \
-   } while (0)
-
-#define DRX_GET_SYSCLOCKFREQ(d, x)                         \
-   do {                                                     \
-      (x) = DRX_ATTR_SYSCLOCKFREQ(d);                       \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_TUNERRFAGCPOL(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_TUNERRFAGCPOL(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_TUNERRFAGCPOL(d, x)                        \
-   do {                                                     \
-      (x) = DRX_ATTR_TUNERRFAGCPOL(d);                      \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_TUNERIFAGCPOL(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_TUNERIFAGCPOL(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_TUNERIFAGCPOL(d, x)                        \
-   do {                                                     \
-      (x) = DRX_ATTR_TUNERIFAGCPOL(d);                      \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_TUNERSLOWMODE(d, x)                       \
-   do {                                                     \
-      DRX_ATTR_TUNERSLOWMODE(d) = (x);                      \
-   } while (0)
-
-#define DRX_GET_TUNERSLOWMODE(d, x)                        \
-   do {                                                     \
-      (x) = DRX_ATTR_TUNERSLOWMODE(d);                      \
-   } while (0)
-
-/**************************/
-
-#define DRX_SET_TUNERPORTNR(d, x)                         \
-   do {                                                     \
-      DRX_ATTR_TUNERSPORTNR(d) = (x);                       \
-   } while (0)
-
-/**************************/
-
 /* Macros with device-specific handling are converted to CFG functions */
 
 #define DRX_ACCESSMACRO_SET(demod, value, cfg_name, data_type)             \

commit 9482354f4a17b8eb2cdc055f6de0386237a3abd2
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 17 10:18:16 2014 -0300

    [media] drx-j: Use the Linux error codes
    
    Instead of defining its own set of error codes, use the linux
    native ones.
    
    Please note that this patch made a "stupid" error code mapping, just
    replacing the codes with the closest one. In special, -EIO is being
    used on several places. I'm pretty sure this could be better assigned,
    but a change like that would require lots o time and efforts, without
    much benefit.
    
    So lets do adjstments at the error codes latter, when we have more
    time.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 975b3ba0c8e5..1b716228cdd4 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -28,30 +28,11 @@
   POSSIBILITY OF SUCH DAMAGE.
 */
 
-/**
-* \file $Id: drx_driver.h,v 1.84 2010/01/14 22:47:50 dingtao Exp $
-*
-* \brief DRX driver API
-*
-*/
 #ifndef __DRXDRIVER_H__
 #define __DRXDRIVER_H__
 
 #include <linux/kernel.h>
-/*-------------------------------------------------------------------------
-INCLUDES
--------------------------------------------------------------------------*/
-
-enum drx_status {
-	DRX_STS_READY = 3,  /**< device/service is ready     */
-	DRX_STS_BUSY = 2,   /**< device/service is busy      */
-	DRX_STS_OK = 1,	    /**< everything is OK            */
-	DRX_STS_INVALID_ARG = -1,
-				/**< invalid arguments           */
-	DRX_STS_ERROR = -2, /**< general error               */
-	DRX_STS_FUNC_NOT_AVAILABLE = -3
-				/**< unavailable functionality   */
-};
+#include <linux/errno.h>
 
 /*
  * This structure contains the I2C address, the device ID and a user_data pointer.
@@ -82,8 +63,8 @@ Exported FUNCTIONS
 * \fn drxbsp_i2c_init()
 * \brief Initialize I2C communication module.
 * \return int Return status.
-* \retval DRX_STS_OK Initialization successful.
-* \retval DRX_STS_ERROR Initialization failed.
+* \retval 0 Initialization successful.
+* \retval -EIO Initialization failed.
 */
 int drxbsp_i2c_init(void);
 
@@ -91,8 +72,8 @@ int drxbsp_i2c_init(void);
 * \fn drxbsp_i2c_term()
 * \brief Terminate I2C communication module.
 * \return int Return status.
-* \retval DRX_STS_OK Termination successful.
-* \retval DRX_STS_ERROR Termination failed.
+* \retval 0 Termination successful.
+* \retval -EIO Termination failed.
 */
 int drxbsp_i2c_term(void);
 
@@ -111,9 +92,9 @@ int drxbsp_i2c_term(void);
 * \param r_count   The number of bytes to read
 * \param r_data    The array to read the data from
 * \return int Return status.
-* \retval DRX_STS_OK Succes.
-* \retval DRX_STS_ERROR Failure.
-* \retval DRX_STS_INVALID_ARG Parameter 'wcount' is not zero but parameter
+* \retval 0 Succes.
+* \retval -EIO Failure.
+* \retval -EINVAL Parameter 'wcount' is not zero but parameter
 *                                       'wdata' contains NULL.
 *                                       Idem for 'rcount' and 'rdata'.
 *                                       Both w_dev_addr and r_dev_addr are NULL.
@@ -2738,7 +2719,7 @@ Access macros
       config.cfg_type = cfg_name;                                            \
       config.cfg_data = &cfg_data;                                           \
       cfg_status = drx_ctrl(demod, DRX_CTRL_GET_CFG, &config);            \
-      if (cfg_status == DRX_STS_OK) {                                     \
+      if (cfg_status == 0) {                                     \
 	 value = cfg_data;                                                  \
       } else {                                                             \
 	 value = (data_type)error_value;                                     \

commit e33f2193ade658a509d01178a95c32b9242b7d61
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Fri Jan 17 06:47:04 2014 -0300

    [media] drx-j: More CamelCase fixups
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index e0316f667f4c..975b3ba0c8e5 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -182,7 +182,7 @@ struct tuner_common {
 	s32 max_freq_rf;	/* Highest RF input frequency, in kHz */
 
 	u8 sub_mode;	/* Index to sub-mode in use */
-	char ***sub_modeDescriptions;	/* Pointer to description of sub-modes */
+	char ***sub_mode_descriptions;	/* Pointer to description of sub-modes */
 	u8 sub_modes;	/* Number of available sub-modes      */
 
 	/* The following fields will be either 0, NULL or false and do not need
@@ -192,7 +192,7 @@ struct tuner_common {
 	s32 r_ffrequency;	/* only valid if programmed       */
 	s32 i_ffrequency;	/* only valid if programmed       */
 
-	void *myUser_data;	/* pointer to associated demod instance */
+	void *my_user_data;	/* pointer to associated demod instance */
 	u16 my_capabilities;	/* value for storing application flags  */
 };
 
@@ -230,7 +230,7 @@ struct tuner_ops {
 	tuner_close_func_t close_func;
 	tuner_set_frequency_func_t set_frequency_func;
 	tuner_get_frequency_func_t get_frequency_func;
-	tuner_lock_status_func_t lock_statusFunc;
+	tuner_lock_status_func_t lock_status_func;
 	tune_ri2c_write_read_func_t i2c_write_read_func;
 
 };
@@ -1985,7 +1985,7 @@ struct drx_reg_dump {
 				      /**< next freq to scan                  */
 		bool scan_ready;     /**< scan ready flag                    */
 		u32 scan_max_channels;/**< number of channels in freqplan     */
-		u32 scan_channelsScanned;
+		u32 scan_channels_scanned;
 					/**< number of channels scanned       */
 		/* Channel scan - inner loop: demod related */
 		drx_scan_func_t scan_function;

commit 1bfc9e15a10ae88eb94cba17dba4d31941f5d939
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Jan 16 12:51:36 2014 -0300

    [media] drx-j: get rid of typedefs in drx_driver.h
    
    Most of the changes were done with scripts like:
            for i in drivers/media/dvb-frontends/drx39xyj/*.[ch]; do perl -ne '$var = "drx_sig_quality"; s,\b($var)_t\s+,struct \1 ,g; s,\bp_*($var)_t\s+,struct \1 *,g; s,\b($var)_t\b,struct \1,g; s,\bp_*($var)_t\b,struct \1 *,g; print $_' <$i >a && mv a $i; done
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index ca07a6c4f58d..e0316f667f4c 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -242,7 +242,6 @@ struct tuner_instance {
 	struct tuner_ops *my_funct;
 };
 
-
 int drxbsp_tuner_open(struct tuner_instance *tuner);
 
 int drxbsp_tuner_close(struct tuner_instance *tuner);
@@ -498,9 +497,9 @@ MACROS
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S24TODRXFREQ(x) ((( (u32) x) & 0x00800000UL) ? \
+#define DRX_S24TODRXFREQ(x) ((((u32) x) & 0x00800000UL) ? \
 				 ((s32) \
-				    (((u32) x) | 0xFF000000) ) : \
+				    (((u32) x) | 0xFF000000)) : \
 				 ((s32) x))
 
 /**
@@ -508,7 +507,7 @@ MACROS
 */
 #define DRX_U16TODRXFREQ(x)   ((x & 0x8000) ? \
 				 ((s32) \
-				    (((u32) x) | 0xFFFF0000) ) : \
+				    (((u32) x) | 0xFFFF0000)) : \
 				 ((s32) x))
 
 /*-------------------------------------------------------------------------
@@ -856,133 +855,141 @@ enum drx_pilot_mode {
 #define DRX_CTRL_MAX             (DRX_CTRL_BASE + 44)	/* never to be used    */
 
 /**
-* \enum drxu_code_action_t
-* \brief Used to indicate if firmware has to be uploaded or verified.
-*/
-
-	typedef enum {
-		UCODE_UPLOAD,
-		  /**< Upload the microcode image to device        */
-		UCODE_VERIFY
-		  /**< Compare microcode image with code on device */
-	} drxu_code_action_t, *pdrxu_code_action_t;
+ * enum drxu_code_action - indicate if firmware has to be uploaded or verified.
+ * @UCODE_UPLOAD:	Upload the microcode image to device
+ * @UCODE_VERIFY:	Compare microcode image with code on device
+ */
+enum drxu_code_action {
+	UCODE_UPLOAD,
+	UCODE_VERIFY
+};
 
 /**
-* \enum drx_lock_status_t
-* \brief Used to reflect current lock status of demodulator.
+* \enum enum drx_lock_status * \brief Used to reflect current lock status of demodulator.
 *
 * The generic lock states have device dependent semantics.
-*/
-	typedef enum {
+
 		DRX_NEVER_LOCK = 0,
-			      /**< Device will never lock on this signal */
+			      **< Device will never lock on this signal *
 		DRX_NOT_LOCKED,
-			      /**< Device has no lock at all             */
+			      **< Device has no lock at all             *
 		DRX_LOCK_STATE_1,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_2,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_3,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_4,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_5,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_6,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_7,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_8,
-			      /**< Generic lock state                    */
+			      **< Generic lock state                    *
 		DRX_LOCK_STATE_9,
-			      /**< Generic lock state                    */
-		DRX_LOCKED    /**< Device is in lock                     */
-	} drx_lock_status_t, *pdrx_lock_status_t;
-
-/**
-* \enum DRXUIO_t
-* \brief Used to address a User IO (UIO).
-*/
-	typedef enum {
-		DRX_UIO1,
-		DRX_UIO2,
-		DRX_UIO3,
-		DRX_UIO4,
-		DRX_UIO5,
-		DRX_UIO6,
-		DRX_UIO7,
-		DRX_UIO8,
-		DRX_UIO9,
-		DRX_UIO10,
-		DRX_UIO11,
-		DRX_UIO12,
-		DRX_UIO13,
-		DRX_UIO14,
-		DRX_UIO15,
-		DRX_UIO16,
-		DRX_UIO17,
-		DRX_UIO18,
-		DRX_UIO19,
-		DRX_UIO20,
-		DRX_UIO21,
-		DRX_UIO22,
-		DRX_UIO23,
-		DRX_UIO24,
-		DRX_UIO25,
-		DRX_UIO26,
-		DRX_UIO27,
-		DRX_UIO28,
-		DRX_UIO29,
-		DRX_UIO30,
-		DRX_UIO31,
-		DRX_UIO32,
-		DRX_UIO_MAX = DRX_UIO32
-	} DRXUIO_t, *p_drxuio_t;
-
-/**
-* \enum drxuio_mode_t
-* \brief Used to configure the modus oprandi of a UIO.
+			      **< Generic lock state                    *
+		DRX_LOCKED    **< Device is in lock                     *
+*/
+
+enum drx_lock_status {
+	DRX_NEVER_LOCK = 0,
+	DRX_NOT_LOCKED,
+	DRX_LOCK_STATE_1,
+	DRX_LOCK_STATE_2,
+	DRX_LOCK_STATE_3,
+	DRX_LOCK_STATE_4,
+	DRX_LOCK_STATE_5,
+	DRX_LOCK_STATE_6,
+	DRX_LOCK_STATE_7,
+	DRX_LOCK_STATE_8,
+	DRX_LOCK_STATE_9,
+	DRX_LOCKED
+};
+
+/**
+* \enum enum drx_uio* \brief Used to address a User IO (UIO).
+*/
+enum drx_uio {
+	DRX_UIO1,
+	DRX_UIO2,
+	DRX_UIO3,
+	DRX_UIO4,
+	DRX_UIO5,
+	DRX_UIO6,
+	DRX_UIO7,
+	DRX_UIO8,
+	DRX_UIO9,
+	DRX_UIO10,
+	DRX_UIO11,
+	DRX_UIO12,
+	DRX_UIO13,
+	DRX_UIO14,
+	DRX_UIO15,
+	DRX_UIO16,
+	DRX_UIO17,
+	DRX_UIO18,
+	DRX_UIO19,
+	DRX_UIO20,
+	DRX_UIO21,
+	DRX_UIO22,
+	DRX_UIO23,
+	DRX_UIO24,
+	DRX_UIO25,
+	DRX_UIO26,
+	DRX_UIO27,
+	DRX_UIO28,
+	DRX_UIO29,
+	DRX_UIO30,
+	DRX_UIO31,
+	DRX_UIO32,
+	DRX_UIO_MAX = DRX_UIO32
+};
+
+/**
+* \enum enum drxuio_mode * \brief Used to configure the modus oprandi of a UIO.
 *
 * DRX_UIO_MODE_FIRMWARE is an old uio mode.
 * It is replaced by the modes DRX_UIO_MODE_FIRMWARE0 .. DRX_UIO_MODE_FIRMWARE9.
 * To be backward compatible DRX_UIO_MODE_FIRMWARE is equivalent to
 * DRX_UIO_MODE_FIRMWARE0.
 */
-	typedef enum {
-		DRX_UIO_MODE_DISABLE = 0x01,
-				    /**< not used, pin is configured as input */
-		DRX_UIO_MODE_READWRITE = 0x02,
-				    /**< used for read/write by application   */
-		DRX_UIO_MODE_FIRMWARE = 0x04,
-				    /**< controlled by firmware, function 0   */
-		DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE,
-						    /**< same as above        */
-		DRX_UIO_MODE_FIRMWARE1 = 0x08,
-				    /**< controlled by firmware, function 1   */
-		DRX_UIO_MODE_FIRMWARE2 = 0x10,
-				    /**< controlled by firmware, function 2   */
-		DRX_UIO_MODE_FIRMWARE3 = 0x20,
-				    /**< controlled by firmware, function 3   */
-		DRX_UIO_MODE_FIRMWARE4 = 0x40,
-				    /**< controlled by firmware, function 4   */
-		DRX_UIO_MODE_FIRMWARE5 = 0x80
-				    /**< controlled by firmware, function 5   */
-	} drxuio_mode_t, *pdrxuio_mode_t;
-
-/**
-* \enum drxoob_downstream_standard_t
-* \brief Used to select OOB standard.
+enum drxuio_mode {
+	DRX_UIO_MODE_DISABLE = 0x01,
+			    /**< not used, pin is configured as input */
+	DRX_UIO_MODE_READWRITE = 0x02,
+			    /**< used for read/write by application   */
+	DRX_UIO_MODE_FIRMWARE = 0x04,
+			    /**< controlled by firmware, function 0   */
+	DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE,
+					    /**< same as above        */
+	DRX_UIO_MODE_FIRMWARE1 = 0x08,
+			    /**< controlled by firmware, function 1   */
+	DRX_UIO_MODE_FIRMWARE2 = 0x10,
+			    /**< controlled by firmware, function 2   */
+	DRX_UIO_MODE_FIRMWARE3 = 0x20,
+			    /**< controlled by firmware, function 3   */
+	DRX_UIO_MODE_FIRMWARE4 = 0x40,
+			    /**< controlled by firmware, function 4   */
+	DRX_UIO_MODE_FIRMWARE5 = 0x80
+			    /**< controlled by firmware, function 5   */
+};
+
+/**
+* \enum enum drxoob_downstream_standard * \brief Used to select OOB standard.
 *
 * Based on ANSI 55-1 and 55-2
 */
-	typedef enum {
-		DRX_OOB_MODE_A = 0,
-			       /**< ANSI 55-1   */
-		DRX_OOB_MODE_B_GRADE_A,
-			       /**< ANSI 55-2 A */
-		DRX_OOB_MODE_B_GRADE_B
-			       /**< ANSI 55-2 B */
-	} drxoob_downstream_standard_t, *pdrxoob_downstream_standard_t;
+enum drxoob_downstream_standard {
+	DRX_OOB_MODE_A = 0,
+		       /**< ANSI 55-1   */
+	DRX_OOB_MODE_B_GRADE_A,
+		       /**< ANSI 55-2 A */
+	DRX_OOB_MODE_B_GRADE_B
+		       /**< ANSI 55-2 B */
+};
 
 /*-------------------------------------------------------------------------
 STRUCTS
@@ -994,14 +1001,8 @@ STRUCTS
 /*============================================================================*/
 /*============================================================================*/
 
-/**
-* \enum drx_cfg_type_t
-* \brief Generic configuration function identifiers.
-*/
-	typedef u32 drx_cfg_type_t, *pdrx_cfg_type_t;
-
 #ifndef DRX_CFG_BASE
-#define DRX_CFG_BASE          ((drx_cfg_type_t)0)
+#define DRX_CFG_BASE          0
 #endif
 
 #define DRX_CFG_MPEG_OUTPUT         (DRX_CFG_BASE +  0)	/* MPEG TS output    */
@@ -1032,17 +1033,16 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \struct drxu_code_info_t
-* \brief Parameters for microcode upload and verfiy.
+* \struct struct drxu_code_info * \brief Parameters for microcode upload and verfiy.
 *
 * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
 */
-	typedef struct {
-		u8 *mc_data;
-		     /**< Pointer to microcode image. */
-		u16 mc_size;
-		     /**< Microcode image size.       */
-	} drxu_code_info_t, *p_drxu_code_info_t;
+struct drxu_code_info {
+	u8 *mc_data;
+	     /**< Pointer to microcode image. */
+	u16 mc_size;
+	     /**< Microcode image size.       */
+};
 
 /**
 * \struct drx_mc_version_rec_t
@@ -1063,12 +1063,12 @@ STRUCTS
 */
 #define AUX_VER_RECORD 0x8000
 
-	typedef struct {
-		u16 aux_type;	/* type of aux data - 0x8000 for version record     */
-		u32 mc_dev_type;	/* device type, based on JTAG ID                    */
-		u32 mc_version;	/* version of microcode                             */
-		u32 mc_base_version;	/* in case of patch: the original microcode version */
-	} drx_mc_version_rec_t, *pdrx_mc_version_rec_t;
+struct drx_mc_version_rec {
+	u16 aux_type;	/* type of aux data - 0x8000 for version record     */
+	u32 mc_dev_type;	/* device type, based on JTAG ID                    */
+	u32 mc_version;	/* version of microcode                             */
+	u32 mc_base_version;	/* in case of patch: the original microcode version */
+};
 
 /*========================================*/
 
@@ -1078,186 +1078,140 @@ STRUCTS
 *
 * Used by DRX_CTRL_LOAD_FILTER
 */
-	typedef struct {
-		u8 *data_re;
-		      /**< pointer to coefficients for RE */
-		u8 *data_im;
-		      /**< pointer to coefficients for IM */
-		u16 size_re;
-		      /**< size of coefficients for RE    */
-		u16 size_im;
-		      /**< size of coefficients for IM    */
-	} drx_filter_info_t, *pdrx_filter_info_t;
+struct drx_filter_info {
+	u8 *data_re;
+	      /**< pointer to coefficients for RE */
+	u8 *data_im;
+	      /**< pointer to coefficients for IM */
+	u16 size_re;
+	      /**< size of coefficients for RE    */
+	u16 size_im;
+	      /**< size of coefficients for IM    */
+};
 
 /*========================================*/
 
 /**
-* \struct drx_channel_t
-* \brief The set of parameters describing a single channel.
+* \struct struct drx_channel * \brief The set of parameters describing a single channel.
 *
 * Used by DRX_CTRL_SET_CHANNEL and DRX_CTRL_GET_CHANNEL.
 * Only certain fields need to be used for a specfic standard.
 *
 */
-	typedef struct {
-		s32 frequency;
-					/**< frequency in kHz                 */
-		enum drx_bandwidth bandwidth;
-					/**< bandwidth                        */
-		enum drx_mirror mirror;	/**< mirrored or not on RF            */
-		enum drx_modulation constellation;
-					/**< constellation                    */
-		enum drx_hierarchy hierarchy;
-					/**< hierarchy                        */
-		enum drx_priority priority;	/**< priority                         */
-		enum drx_coderate coderate;	/**< coderate                         */
-		enum drx_guard guard;	/**< guard interval                   */
-		enum drx_fft_mode fftmode;	/**< fftmode                          */
-		enum drx_classification classification;
-					/**< classification                   */
-		u32 symbolrate;
-					/**< symbolrate in symbols/sec        */
-		enum drx_interleave_mode interleavemode;
-					/**< interleaveMode QAM               */
-		enum drx_ldpc ldpc;		/**< ldpc                             */
-		enum drx_carrier_mode carrier;	/**< carrier                          */
-		enum drx_frame_mode framemode;
-					/**< frame mode                       */
-		enum drx_pilot_mode pilot;	/**< pilot mode                       */
-	} drx_channel_t, *pdrx_channel_t;
+struct drx_channel {
+	s32 frequency;
+				/**< frequency in kHz                 */
+	enum drx_bandwidth bandwidth;
+				/**< bandwidth                        */
+	enum drx_mirror mirror;	/**< mirrored or not on RF            */
+	enum drx_modulation constellation;
+				/**< constellation                    */
+	enum drx_hierarchy hierarchy;
+				/**< hierarchy                        */
+	enum drx_priority priority;	/**< priority                         */
+	enum drx_coderate coderate;	/**< coderate                         */
+	enum drx_guard guard;	/**< guard interval                   */
+	enum drx_fft_mode fftmode;	/**< fftmode                          */
+	enum drx_classification classification;
+				/**< classification                   */
+	u32 symbolrate;
+				/**< symbolrate in symbols/sec        */
+	enum drx_interleave_mode interleavemode;
+				/**< interleaveMode QAM               */
+	enum drx_ldpc ldpc;		/**< ldpc                             */
+	enum drx_carrier_mode carrier;	/**< carrier                          */
+	enum drx_frame_mode framemode;
+				/**< frame mode                       */
+	enum drx_pilot_mode pilot;	/**< pilot mode                       */
+};
 
 /*========================================*/
 
 /**
-* \struct drx_sig_quality_t
-* Signal quality metrics.
+* \struct struct drx_sig_quality * Signal quality metrics.
 *
 * Used by DRX_CTRL_SIG_QUALITY.
 */
-	typedef struct {
-		u16 MER;     /**< in steps of 0.1 dB                        */
-		u32 pre_viterbi_ber;
-			       /**< in steps of 1/scale_factor_ber              */
-		u32 post_viterbi_ber;
-			       /**< in steps of 1/scale_factor_ber              */
-		u32 scale_factor_ber;
-			       /**< scale factor for BER                      */
-		u16 packet_error;
-			       /**< number of packet errors                   */
-		u32 post_reed_solomon_ber;
-			       /**< in steps of 1/scale_factor_ber              */
-		u32 pre_ldpc_ber;
-			       /**< in steps of 1/scale_factor_ber              */
-		u32 aver_iter;/**< in steps of 0.01                          */
-		u16 indicator;
-			       /**< indicative signal quality low=0..100=high */
-	} drx_sig_quality_t, *pdrx_sig_quality_t;
-
-	typedef enum {
-		DRX_SQI_SPEED_FAST = 0,
-		DRX_SQI_SPEED_MEDIUM,
-		DRX_SQI_SPEED_SLOW,
-		DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
-	} drx_cfg_sqi_speed_t, *pdrx_cfg_sqi_speed_t;
+struct drx_sig_quality {
+	u16 MER;     /**< in steps of 0.1 dB                        */
+	u32 pre_viterbi_ber;
+		       /**< in steps of 1/scale_factor_ber              */
+	u32 post_viterbi_ber;
+		       /**< in steps of 1/scale_factor_ber              */
+	u32 scale_factor_ber;
+		       /**< scale factor for BER                      */
+	u16 packet_error;
+		       /**< number of packet errors                   */
+	u32 post_reed_solomon_ber;
+		       /**< in steps of 1/scale_factor_ber              */
+	u32 pre_ldpc_ber;
+		       /**< in steps of 1/scale_factor_ber              */
+	u32 aver_iter;/**< in steps of 0.01                          */
+	u16 indicator;
+		       /**< indicative signal quality low=0..100=high */
+};
+
+enum drx_cfg_sqi_speed {
+	DRX_SQI_SPEED_FAST = 0,
+	DRX_SQI_SPEED_MEDIUM,
+	DRX_SQI_SPEED_SLOW,
+	DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
+};
 
 /*========================================*/
 
 /**
-* \struct drx_complex_t
-* A complex number.
+* \struct struct drx_complex * A complex number.
 *
 * Used by DRX_CTRL_CONSTEL.
 */
-	typedef struct {
-		s16 im;
-	     /**< Imaginary part. */
-		s16 re;
-	     /**< Real part.      */
-	} drx_complex_t, *pdrx_complex_t;
+struct drx_complex {
+	s16 im;
+     /**< Imaginary part. */
+	s16 re;
+     /**< Real part.      */
+};
 
 /*========================================*/
 
 /**
-* \struct drx_frequency_plan_t
-* Array element of a frequency plan.
+* \struct struct drx_frequency_plan * Array element of a frequency plan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
-	typedef struct {
-		s32 first;
-			     /**< First centre frequency in this band        */
-		s32 last;
-			     /**< Last centre frequency in this band         */
-		s32 step;
-			     /**< Stepping frequency in this band            */
-		enum drx_bandwidth bandwidth;
-			     /**< Bandwidth within this frequency band       */
-		u16 ch_number;
-			     /**< First channel number in this band, or first
-				    index in ch_names                         */
-		char **ch_names;
-			     /**< Optional list of channel names in this
-				    band                                     */
-	} drx_frequency_plan_t, *p_drx_frequency_plan_t;
-
-/*========================================*/
-
-/**
-* \struct drx_frequency_plan_info_t
-* Array element of a list of frequency plans.
-*
-* Used by frequency_plan.h
-*/
-	typedef struct {
-		p_drx_frequency_plan_t freq_plan;
-		int freq_planSize;
-		char *freq_planName;
-	} drx_frequency_plan_info_t, *pdrx_frequency_plan_info_t;
-
-/*========================================*/
-
-/**
-* /struct drx_scan_data_qam_t
-* QAM specific scanning variables
-*/
-	typedef struct {
-		u32 *symbolrate;	  /**<  list of symbolrates to scan   */
-		u16 symbolrate_size;	  /**<  size of symbolrate array      */
-		enum drx_modulation *constellation;
-					  /**<  list of constellations        */
-		u16 constellation_size;    /**<  size of constellation array */
-		u16 if_agc_threshold;	  /**<  thresholf for IF-AGC based
-						scanning filter               */
-	} drx_scan_data_qam_t, *pdrx_scan_data_qam_t;
-
-/*========================================*/
-
-/**
-* /struct drx_scan_data_atv_t
-* ATV specific scanning variables
-*/
-	typedef struct {
-		s16 svr_threshold;
-			/**< threshold of Sound/Video ratio in 0.1dB steps */
-	} drx_scan_data_atv_t, *pdrx_scan_data_atv_t;
+struct drx_frequency_plan {
+	s32 first;
+		     /**< First centre frequency in this band        */
+	s32 last;
+		     /**< Last centre frequency in this band         */
+	s32 step;
+		     /**< Stepping frequency in this band            */
+	enum drx_bandwidth bandwidth;
+		     /**< Bandwidth within this frequency band       */
+	u16 ch_number;
+		     /**< First channel number in this band, or first
+			    index in ch_names                         */
+	char **ch_names;
+		     /**< Optional list of channel names in this
+			    band                                     */
+};
 
 /*========================================*/
 
 /**
-* \struct drx_scan_param_t
-* Parameters for channel scan.
+* \struct struct drx_scan_param * Parameters for channel scan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
-	typedef struct {
-		p_drx_frequency_plan_t frequency_plan;
-					  /**< Frequency plan (array)*/
-		u16 frequency_plan_size;  /**< Number of bands       */
-		u32 num_tries;		  /**< Max channels tried    */
-		s32 skip;	  /**< Minimum frequency step to take
-						after a channel is found */
-		void *ext_params;	  /**< Standard specific params */
-	} drx_scan_param_t, *p_drx_scan_param_t;
+struct drx_scan_param {
+	struct drx_frequency_plan *frequency_plan;
+				  /**< Frequency plan (array)*/
+	u16 frequency_plan_size;  /**< Number of bands       */
+	u32 num_tries;		  /**< Max channels tried    */
+	s32 skip;	  /**< Minimum frequency step to take
+					after a channel is found */
+	void *ext_params;	  /**< Standard specific params */
+};
 
 /*========================================*/
 
@@ -1265,31 +1219,30 @@ STRUCTS
 * \brief Scan commands.
 * Used by scanning algorithms.
 */
-	typedef enum {
+enum drx_scan_command {
 		DRX_SCAN_COMMAND_INIT = 0,/**< Initialize scanning */
 		DRX_SCAN_COMMAND_NEXT,	  /**< Next scan           */
 		DRX_SCAN_COMMAND_STOP	  /**< Stop scanning       */
-	} drx_scan_command_t, *pdrx_scan_command_t;
+};
 
 /*========================================*/
 
 /**
 * \brief Inner scan function prototype.
 */
-	typedef int(*drx_scan_func_t) (void *scan_context,
-					     drx_scan_command_t scan_command,
-					     pdrx_channel_t scan_channel,
-					     bool *get_next_channel);
+typedef int(*drx_scan_func_t) (void *scan_context,
+				     enum drx_scan_command scan_command,
+				     struct drx_channel *scan_channel,
+				     bool *get_next_channel);
 
 /*========================================*/
 
 /**
-* \struct drxtps_info_t
-* TPS information, DVB-T specific.
+* \struct struct drxtps_info * TPS information, DVB-T specific.
 *
 * Used by DRX_CTRL_TPS_INFO.
 */
-	typedef struct {
+	struct drxtps_info {
 		enum drx_fft_mode fftmode;	/**< Fft mode       */
 		enum drx_guard guard;	/**< Guard interval */
 		enum drx_modulation constellation;
@@ -1303,7 +1256,7 @@ STRUCTS
 		enum drx_tps_frame frame;	/**< Tps frame      */
 		u8 length;		/**< Length         */
 		u16 cell_id;		/**< Cell id        */
-	} drxtps_info_t, *pdrxtps_info_t;
+	};
 
 /*========================================*/
 
@@ -1312,7 +1265,7 @@ STRUCTS
 *
 * Used by DRX_CTRL_SET_POWER_MODE.
 */
-	typedef enum {
+	enum drx_power_mode {
 		DRX_POWER_UP = 0,
 			 /**< Generic         , Power Up Mode   */
 		DRX_POWER_MODE_1,
@@ -1350,17 +1303,16 @@ STRUCTS
 			 /**< Device specific , Power Down Mode */
 		DRX_POWER_DOWN = 255
 			 /**< Generic         , Power Down Mode */
-	} drx_power_mode_t, *pdrx_power_mode_t;
+	};
 
 /*========================================*/
 
 /**
-* \enum drx_module_t
-* \brief Software module identification.
+* \enum enum drx_module * \brief Software module identification.
 *
 * Used by DRX_CTRL_VERSION.
 */
-	typedef enum {
+	enum drx_module {
 		DRX_MODULE_DEVICE,
 		DRX_MODULE_MICROCODE,
 		DRX_MODULE_DRIVERCORE,
@@ -1370,16 +1322,15 @@ STRUCTS
 		DRX_MODULE_BSP_TUNER,
 		DRX_MODULE_BSP_HOST,
 		DRX_MODULE_UNKNOWN
-	} drx_module_t, *pdrx_module_t;
+	};
 
 /**
-* \enum drx_version_t
-* \brief Version information of one software module.
+* \enum struct drx_version * \brief Version information of one software module.
 *
 * Used by DRX_CTRL_VERSION.
 */
-	typedef struct {
-		drx_module_t module_type;
+	struct drx_version {
+		enum drx_module module_type;
 			       /**< Type identifier of the module */
 		char *module_name;
 			       /**< Name or description of module */
@@ -1387,19 +1338,18 @@ STRUCTS
 		u16 v_minor;  /**< Minor version number          */
 		u16 v_patch;  /**< Patch version number          */
 		char *v_string; /**< Version as text string        */
-	} drx_version_t, *pdrx_version_t;
+	};
 
 /**
-* \enum drx_version_list_t
-* \brief List element of NULL terminated, linked list for version information.
+* \enum struct drx_version_list * \brief List element of NULL terminated, linked list for version information.
 *
 * Used by DRX_CTRL_VERSION.
 */
-	typedef struct drx_version_list_s {
-		pdrx_version_t version;/**< Version information */
-		struct drx_version_list_s *next;
-				      /**< Next list element   */
-	} drx_version_list_t, *p_drx_version_list_t;
+struct drx_version_list {
+	struct drx_version *version;/**< Version information */
+	struct drx_version_list *next;
+			      /**< Next list element   */
+};
 
 /*========================================*/
 
@@ -1408,12 +1358,12 @@ STRUCTS
 *
 * Used by DRX_CTRL_UIO_CFG.
 */
-	typedef struct {
-		DRXUIO_t uio;
+	struct drxuio_cfg {
+		enum drx_uio uio;
 		       /**< UIO identifier       */
-		drxuio_mode_t mode;
+		enum drxuio_mode mode;
 		       /**< UIO operational mode */
-	} drxuio_cfg_t, *pdrxuio_cfg_t;
+	};
 
 /*========================================*/
 
@@ -1422,12 +1372,12 @@ STRUCTS
 *
 * Used by DRX_CTRL_UIO_READ and DRX_CTRL_UIO_WRITE.
 */
-	typedef struct {
-		DRXUIO_t uio;
+	struct drxuio_data {
+		enum drx_uio uio;
 		   /**< UIO identifier              */
 		bool value;
 		   /**< UIO value (true=1, false=0) */
-	} drxuio_data_t, *pdrxuio_data_t;
+	};
 
 /*========================================*/
 
@@ -1436,13 +1386,13 @@ STRUCTS
 *
 * Used by DRX_CTRL_SET_OOB.
 */
-	typedef struct {
+	struct drxoob {
 		s32 frequency;	   /**< Frequency in kHz      */
-		drxoob_downstream_standard_t standard;
+		enum drxoob_downstream_standard standard;
 						   /**< OOB standard          */
 		bool spectrum_inverted;	   /**< If true, then spectrum
 							 is inverted          */
-	} DRXOOB_t, *p_drxoob_t;
+	};
 
 /*========================================*/
 
@@ -1451,12 +1401,12 @@ STRUCTS
 *
 * Used by DRX_CTRL_GET_OOB.
 */
-	typedef struct {
+	struct drxoob_status {
 		s32 frequency; /**< Frequency in Khz         */
-		drx_lock_status_t lock;	  /**< Lock status              */
+		enum drx_lock_status lock;	  /**< Lock status              */
 		u32 mer;		  /**< MER                      */
 		s32 symbol_rate_offset;	  /**< Symbolrate offset in ppm */
-	} drxoob_status_t, *pdrxoob_status_t;
+	};
 
 /*========================================*/
 
@@ -1466,12 +1416,12 @@ STRUCTS
 * Used by DRX_CTRL_SET_CFG and DRX_CTRL_GET_CFG.
 * A sort of nested drx_ctrl() functionality for device specific controls.
 */
-	typedef struct {
-		drx_cfg_type_t cfg_type;
+	struct drx_cfg {
+		u32 cfg_type;
 			  /**< Function identifier */
 		void *cfg_data;
 			  /**< Function data */
-	} drx_cfg_t, *pdrx_cfg_t;
+	};
 
 /*========================================*/
 
@@ -1480,21 +1430,20 @@ STRUCTS
 * MStart width [nr MCLK cycles] for serial MPEG output.
 */
 
-	typedef enum {
+	enum drxmpeg_str_width {
 		DRX_MPEG_STR_WIDTH_1,
 		DRX_MPEG_STR_WIDTH_8
-	} drxmpeg_str_width_t, *pdrxmpeg_str_width_t;
+	};
 
 /* CTRL CFG MPEG ouput */
 /**
-* \struct drx_cfg_mpeg_output_t
-* \brief Configuartion parameters for MPEG output control.
+* \struct struct drx_cfg_mpeg_output * \brief Configuartion parameters for MPEG output control.
 *
 * Used by DRX_CFG_MPEG_OUTPUT, in combination with DRX_CTRL_SET_CFG and
 * DRX_CTRL_GET_CFG.
 */
 
-	typedef struct {
+	struct drx_cfg_mpeg_output {
 		bool enable_mpeg_output;/**< If true, enable MPEG output      */
 		bool insert_rs_byte;	/**< If true, insert RS byte          */
 		bool enable_parallel;	/**< If true, parallel out otherwise
@@ -1510,41 +1459,21 @@ STRUCTS
 					     TS                               */
 		u32 bitrate;		/**< Maximum bitrate in b/s in case
 					     static clockrate is selected     */
-		drxmpeg_str_width_t width_str;
+		enum drxmpeg_str_width width_str;
 					/**< MPEG start width                 */
-	} drx_cfg_mpeg_output_t, *pdrx_cfg_mpeg_output_t;
-
-/* CTRL CFG SMA */
-/**
-* /struct drx_cfg_smaio_t
-* smart antenna i/o.
-*/
-	typedef enum drx_cfg_smaio_t {
-		DRX_SMA_OUTPUT = 0,
-		DRX_SMA_INPUT
-	} drx_cfg_smaio_t, *pdrx_cfg_smaio_t;
+	};
 
-/**
-* /struct drx_cfg_sma_t
-* Set smart antenna.
-*/
-	typedef struct {
-		drx_cfg_smaio_t io;
-		u16 ctrl_data;
-		bool smart_ant_inverted;
-	} drx_cfg_sma_t, *pdrx_cfg_sma_t;
 
 /*========================================*/
 
 /**
-* \struct drxi2c_data_t
-* \brief Data for I2C via 2nd or 3rd or etc I2C port.
+* \struct struct drxi2c_data * \brief Data for I2C via 2nd or 3rd or etc I2C port.
 *
 * Used by DRX_CTRL_I2C_READWRITE.
 * If port_nr is equal to primairy port_nr BSPI2C will be used.
 *
 */
-	typedef struct {
+	struct drxi2c_data {
 		u16 port_nr;	/**< I2C port number               */
 		struct i2c_device_addr *w_dev_addr;
 				/**< Write device address          */
@@ -1554,17 +1483,16 @@ STRUCTS
 				/**< Read device address           */
 		u16 r_count;	/**< Size of data to read in bytes */
 		u8 *r_data;	/**< Pointer to read buffer        */
-	} drxi2c_data_t, *pdrxi2c_data_t;
+	};
 
 /*========================================*/
 
 /**
-* \enum drx_aud_standard_t
-* \brief Audio standard identifier.
+* \enum enum drx_aud_standard * \brief Audio standard identifier.
 *
 * Used by DRX_CTRL_SET_AUD.
 */
-	typedef enum {
+	enum drx_aud_standard {
 		DRX_AUD_STANDARD_BTSC,	   /**< set BTSC standard (USA)       */
 		DRX_AUD_STANDARD_A2,	   /**< set A2-Korea FM Stereo        */
 		DRX_AUD_STANDARD_EIAJ,	   /**< set to Japanese FM Stereo     */
@@ -1588,35 +1516,33 @@ STRUCTS
 					   /**< Automatic Standard Detection  */
 		DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN
 					   /**< used as auto and for readback */
-	} drx_aud_standard_t, *pdrx_aud_standard_t;
+	};
 
-/* CTRL_AUD_GET_STATUS    - drx_aud_status_t */
+/* CTRL_AUD_GET_STATUS    - struct drx_aud_status */
 /**
-* \enum drx_aud_nicam_status_t
-* \brief Status of NICAM carrier.
+* \enum enum drx_aud_nicam_status * \brief Status of NICAM carrier.
 */
-	typedef enum {
+	enum drx_aud_nicam_status {
 		DRX_AUD_NICAM_DETECTED = 0,
 					  /**< NICAM carrier detected         */
 		DRX_AUD_NICAM_NOT_DETECTED,
 					  /**< NICAM carrier not detected     */
 		DRX_AUD_NICAM_BAD	  /**< NICAM carrier bad quality      */
-	} drx_aud_nicam_status_t, *pdrx_aud_nicam_status_t;
+	};
 
 /**
-* \struct drx_aud_status_t
-* \brief Audio status characteristics.
+* \struct struct drx_aud_status * \brief Audio status characteristics.
 */
-	typedef struct {
+	struct drx_aud_status {
 		bool stereo;		  /**< stereo detection               */
 		bool carrier_a;	  /**< carrier A detected             */
 		bool carrier_b;	  /**< carrier B detected             */
 		bool sap;		  /**< sap / bilingual detection      */
 		bool rds;		  /**< RDS data array present         */
-		drx_aud_nicam_status_t nicam_status;
+		enum drx_aud_nicam_status nicam_status;
 					  /**< status of NICAM carrier        */
 		s8 fm_ident;		  /**< FM Identification value        */
-	} drx_aud_status_t, *pdrx_aud_status_t;
+	};
 
 /* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
 
@@ -1624,234 +1550,218 @@ STRUCTS
 * \struct DRXRDSdata_t
 * \brief Raw RDS data array.
 */
-	typedef struct {
+	struct drx_cfg_aud_rds {
 		bool valid;		  /**< RDS data validation            */
 		u16 data[18];		  /**< data from one RDS data array   */
-	} drx_cfg_aud_rds_t, *pdrx_cfg_aud_rds_t;
+	};
 
-/* DRX_CFG_AUD_VOLUME      - drx_cfg_aud_volume_t - set/get */
+/* DRX_CFG_AUD_VOLUME      - struct drx_cfg_aud_volume - set/get */
 /**
 * \enum DRXAudAVCDecayTime_t
 * \brief Automatic volume control configuration.
 */
-	typedef enum {
+	enum drx_aud_avc_mode {
 		DRX_AUD_AVC_OFF,	  /**< Automatic volume control off   */
 		DRX_AUD_AVC_DECAYTIME_8S, /**< level volume in  8 seconds     */
 		DRX_AUD_AVC_DECAYTIME_4S, /**< level volume in  4 seconds     */
 		DRX_AUD_AVC_DECAYTIME_2S, /**< level volume in  2 seconds     */
 		DRX_AUD_AVC_DECAYTIME_20MS/**< level volume in 20 millisec    */
-	} drx_aud_avc_mode_t, *pdrx_aud_avc_mode_t;
+	};
 
 /**
 * /enum DRXAudMaxAVCGain_t
 * /brief Automatic volume control max gain in audio baseband.
 */
-	typedef enum {
+	enum drx_aud_avc_max_gain {
 		DRX_AUD_AVC_MAX_GAIN_0DB, /**< maximum AVC gain  0 dB         */
 		DRX_AUD_AVC_MAX_GAIN_6DB, /**< maximum AVC gain  6 dB         */
 		DRX_AUD_AVC_MAX_GAIN_12DB /**< maximum AVC gain 12 dB         */
-	} drx_aud_avc_max_gain_t, *pdrx_aud_avc_max_gain_t;
+	};
 
 /**
 * /enum DRXAudMaxAVCAtten_t
 * /brief Automatic volume control max attenuation in audio baseband.
 */
-	typedef enum {
+	enum drx_aud_avc_max_atten {
 		DRX_AUD_AVC_MAX_ATTEN_12DB,
 					  /**< maximum AVC attenuation 12 dB  */
 		DRX_AUD_AVC_MAX_ATTEN_18DB,
 					  /**< maximum AVC attenuation 18 dB  */
 		DRX_AUD_AVC_MAX_ATTEN_24DB/**< maximum AVC attenuation 24 dB  */
-	} drx_aud_avc_max_atten_t, *pdrx_aud_avc_max_atten_t;
+	};
 /**
-* \struct drx_cfg_aud_volume_t
-* \brief Audio volume configuration.
+* \struct struct drx_cfg_aud_volume * \brief Audio volume configuration.
 */
-	typedef struct {
+	struct drx_cfg_aud_volume {
 		bool mute;		  /**< mute overrides volume setting  */
 		s16 volume;		  /**< volume, range -114 to 12 dB    */
-		drx_aud_avc_mode_t avc_mode;  /**< AVC auto volume control mode   */
+		enum drx_aud_avc_mode avc_mode;  /**< AVC auto volume control mode   */
 		u16 avc_ref_level;	  /**< AVC reference level            */
-		drx_aud_avc_max_gain_t avc_max_gain;
+		enum drx_aud_avc_max_gain avc_max_gain;
 					  /**< AVC max gain selection         */
-		drx_aud_avc_max_atten_t avc_max_atten;
+		enum drx_aud_avc_max_atten avc_max_atten;
 					  /**< AVC max attenuation selection  */
 		s16 strength_left;	  /**< quasi-peak, left speaker       */
 		s16 strength_right;	  /**< quasi-peak, right speaker      */
-	} drx_cfg_aud_volume_t, *pdrx_cfg_aud_volume_t;
+	};
 
-/* DRX_CFG_I2S_OUTPUT      - drx_cfg_i2s_output_t - set/get */
+/* DRX_CFG_I2S_OUTPUT      - struct drx_cfg_i2s_output - set/get */
 /**
-* \enum drxi2s_mode_t
-* \brief I2S output mode.
+* \enum enum drxi2s_mode * \brief I2S output mode.
 */
-	typedef enum {
+	enum drxi2s_mode {
 		DRX_I2S_MODE_MASTER,	  /**< I2S is in master mode          */
 		DRX_I2S_MODE_SLAVE	  /**< I2S is in slave mode           */
-	} drxi2s_mode_t, *pdrxi2s_mode_t;
+	};
 
 /**
-* \enum drxi2s_word_length_t
-* \brief Width of I2S data.
+* \enum enum drxi2s_word_length * \brief Width of I2S data.
 */
-	typedef enum {
+	enum drxi2s_word_length {
 		DRX_I2S_WORDLENGTH_32 = 0,/**< I2S data is 32 bit wide        */
 		DRX_I2S_WORDLENGTH_16 = 1 /**< I2S data is 16 bit wide        */
-	} drxi2s_word_length_t, *pdrxi2s_word_length_t;
+	};
 
 /**
-* \enum drxi2s_format_t
-* \brief Data wordstrobe alignment for I2S.
+* \enum enum drxi2s_format * \brief Data wordstrobe alignment for I2S.
 */
-	typedef enum {
+	enum drxi2s_format {
 		DRX_I2S_FORMAT_WS_WITH_DATA,
 				    /**< I2S data and wordstrobe are aligned  */
 		DRX_I2S_FORMAT_WS_ADVANCED
 				    /**< I2S data one cycle after wordstrobe  */
-	} drxi2s_format_t, *pdrxi2s_format_t;
+	};
 
 /**
-* \enum drxi2s_polarity_t
-* \brief Polarity of I2S data.
+* \enum enum drxi2s_polarity * \brief Polarity of I2S data.
 */
-	typedef enum {
+	enum drxi2s_polarity {
 		DRX_I2S_POLARITY_RIGHT,/**< wordstrobe - right high, left low */
 		DRX_I2S_POLARITY_LEFT  /**< wordstrobe - right low, left high */
-	} drxi2s_polarity_t, *pdrxi2s_polarity_t;
+	};
 
 /**
-* \struct drx_cfg_i2s_output_t
-* \brief I2S output configuration.
+* \struct struct drx_cfg_i2s_output * \brief I2S output configuration.
 */
-	typedef struct {
+	struct drx_cfg_i2s_output {
 		bool output_enable;	  /**< I2S output enable              */
 		u32 frequency;	  /**< range from 8000-48000 Hz       */
-		drxi2s_mode_t mode;	  /**< I2S mode, master or slave      */
-		drxi2s_word_length_t word_length;
+		enum drxi2s_mode mode;	  /**< I2S mode, master or slave      */
+		enum drxi2s_word_length word_length;
 					  /**< I2S wordlength, 16 or 32 bits  */
-		drxi2s_polarity_t polarity;/**< I2S wordstrobe polarity        */
-		drxi2s_format_t format;	  /**< I2S wordstrobe delay to data   */
-	} drx_cfg_i2s_output_t, *pdrx_cfg_i2s_output_t;
+		enum drxi2s_polarity polarity;/**< I2S wordstrobe polarity        */
+		enum drxi2s_format format;	  /**< I2S wordstrobe delay to data   */
+	};
 
 /* ------------------------------expert interface-----------------------------*/
 /**
-* /enum drx_aud_fm_deemphasis_t
-* setting for FM-Deemphasis in audio demodulator.
+* /enum enum drx_aud_fm_deemphasis * setting for FM-Deemphasis in audio demodulator.
 *
 */
-	typedef enum {
+	enum drx_aud_fm_deemphasis {
 		DRX_AUD_FM_DEEMPH_50US,
 		DRX_AUD_FM_DEEMPH_75US,
 		DRX_AUD_FM_DEEMPH_OFF
-	} drx_aud_fm_deemphasis_t, *pdrx_aud_fm_deemphasis_t;
+	};
 
 /**
 * /enum DRXAudDeviation_t
 * setting for deviation mode in audio demodulator.
 *
 */
-	typedef enum {
+	enum drx_cfg_aud_deviation {
 		DRX_AUD_DEVIATION_NORMAL,
 		DRX_AUD_DEVIATION_HIGH
-	} drx_cfg_aud_deviation_t, *pdrx_cfg_aud_deviation_t;
+	};
 
 /**
-* /enum drx_no_carrier_option_t
-* setting for carrier, mute/noise.
+* /enum enum drx_no_carrier_option * setting for carrier, mute/noise.
 *
 */
-	typedef enum {
+	enum drx_no_carrier_option {
 		DRX_NO_CARRIER_MUTE,
 		DRX_NO_CARRIER_NOISE
-	} drx_no_carrier_option_t, *pdrx_no_carrier_option_t;
+	};
 
 /**
 * \enum DRXAudAutoSound_t
 * \brief Automatic Sound
 */
-	typedef enum {
+	enum drx_cfg_aud_auto_sound {
 		DRX_AUD_AUTO_SOUND_OFF = 0,
 		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_ON,
 		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
-	} drx_cfg_aud_auto_sound_t, *pdrx_cfg_aud_auto_sound_t;
+	};
 
 /**
 * \enum DRXAudASSThres_t
 * \brief Automatic Sound Select Thresholds
 */
-	typedef struct {
+	struct drx_cfg_aud_ass_thres {
 		u16 a2;	/* A2 Threshold for ASS configuration */
 		u16 btsc;	/* BTSC Threshold for ASS configuration */
 		u16 nicam;	/* Nicam Threshold for ASS configuration */
-	} drx_cfg_aud_ass_thres_t, *pdrx_cfg_aud_ass_thres_t;
+	};
 
 /**
-* \struct drx_aud_carrier_t
-* \brief Carrier detection related parameters
+* \struct struct drx_aud_carrier * \brief Carrier detection related parameters
 */
-	typedef struct {
+	struct drx_aud_carrier {
 		u16 thres;	/* carrier detetcion threshold for primary carrier (A) */
-		drx_no_carrier_option_t opt;	/* Mute or noise at no carrier detection (A) */
+		enum drx_no_carrier_option opt;	/* Mute or noise at no carrier detection (A) */
 		s32 shift;	/* DC level of incoming signal (A) */
 		s32 dco;	/* frequency adjustment (A) */
-	} drx_aud_carrier_t, *p_drx_cfg_aud_carrier_t;
+	};
 
 /**
-* \struct drx_cfg_aud_carriers_t
-* \brief combining carrier A & B to one struct
+* \struct struct drx_cfg_aud_carriers * \brief combining carrier A & B to one struct
 */
-	typedef struct {
-		drx_aud_carrier_t a;
-		drx_aud_carrier_t b;
-	} drx_cfg_aud_carriers_t, *pdrx_cfg_aud_carriers_t;
+	struct drx_cfg_aud_carriers {
+		struct drx_aud_carrier a;
+		struct drx_aud_carrier b;
+	};
 
 /**
-* /enum drx_aud_i2s_src_t
-* Selection of audio source
+* /enum enum drx_aud_i2s_src * Selection of audio source
 */
-	typedef enum {
+	enum drx_aud_i2s_src {
 		DRX_AUD_SRC_MONO,
 		DRX_AUD_SRC_STEREO_OR_AB,
 		DRX_AUD_SRC_STEREO_OR_A,
-		DRX_AUD_SRC_STEREO_OR_B
-	} drx_aud_i2s_src_t, *pdrx_aud_i2s_src_t;
+		DRX_AUD_SRC_STEREO_OR_B};
 
 /**
-* \enum drx_aud_i2s_matrix_t
-* \brief Used for selecting I2S output.
+* \enum enum drx_aud_i2s_matrix * \brief Used for selecting I2S output.
 */
-	typedef enum {
+	enum drx_aud_i2s_matrix {
 		DRX_AUD_I2S_MATRIX_A_MONO,
 					/**< A sound only, stereo or mono     */
 		DRX_AUD_I2S_MATRIX_B_MONO,
 					/**< B sound only, stereo or mono     */
 		DRX_AUD_I2S_MATRIX_STEREO,
 					/**< A+B sound, transparant           */
-		DRX_AUD_I2S_MATRIX_MONO	/**< A+B mixed to mono sum, (L+R)/2   */
-	} drx_aud_i2s_matrix_t, *pdrx_aud_i2s_matrix_t;
+		DRX_AUD_I2S_MATRIX_MONO	/**< A+B mixed to mono sum, (L+R)/2   */};
 
 /**
-* /enum drx_aud_fm_matrix_t
-* setting for FM-Matrix in audio demodulator.
+* /enum enum drx_aud_fm_matrix * setting for FM-Matrix in audio demodulator.
 *
 */
-	typedef enum {
+	enum drx_aud_fm_matrix {
 		DRX_AUD_FM_MATRIX_NO_MATRIX,
 		DRX_AUD_FM_MATRIX_GERMAN,
 		DRX_AUD_FM_MATRIX_KOREAN,
 		DRX_AUD_FM_MATRIX_SOUND_A,
-		DRX_AUD_FM_MATRIX_SOUND_B
-	} drx_aud_fm_matrix_t, *pdrx_aud_fm_matrix_t;
+		DRX_AUD_FM_MATRIX_SOUND_B};
 
 /**
 * \struct DRXAudMatrices_t
 * \brief Mixer settings
 */
-	typedef struct {
-		drx_aud_i2s_src_t source_i2s;
-		drx_aud_i2s_matrix_t matrix_i2s;
-		drx_aud_fm_matrix_t matrix_fm;
-	} drx_cfg_aud_mixer_t, *pdrx_cfg_aud_mixer_t;
+struct drx_cfg_aud_mixer {
+	enum drx_aud_i2s_src source_i2s;
+	enum drx_aud_i2s_matrix matrix_i2s;
+	enum drx_aud_fm_matrix matrix_fm;
+};
 
 /**
 * \enum DRXI2SVidSync_t
@@ -1859,76 +1769,68 @@ STRUCTS
 * AUTO_1 and AUTO_2 are for automatic video standard detection with preference
 * for NTSC or Monochrome, because the frequencies are too close (59.94 & 60 Hz)
 */
-	typedef enum {
+	enum drx_cfg_aud_av_sync {
 		DRX_AUD_AVSYNC_OFF,/**< audio/video synchronization is off   */
 		DRX_AUD_AVSYNC_NTSC,
 				   /**< it is an NTSC system                 */
 		DRX_AUD_AVSYNC_MONOCHROME,
 				   /**< it is a MONOCHROME system            */
 		DRX_AUD_AVSYNC_PAL_SECAM
-				   /**< it is a PAL/SECAM system             */
-	} drx_cfg_aud_av_sync_t, *pdrx_cfg_aud_av_sync_t;
+				   /**< it is a PAL/SECAM system             */};
 
 /**
-* \struct drx_cfg_aud_prescale_t
-* \brief Prescalers
+* \struct struct drx_cfg_aud_prescale * \brief Prescalers
 */
-	typedef struct {
-		u16 fm_deviation;
-		s16 nicam_gain;
-	} drx_cfg_aud_prescale_t, *pdrx_cfg_aud_prescale_t;
+struct drx_cfg_aud_prescale {
+	u16 fm_deviation;
+	s16 nicam_gain;
+};
 
 /**
-* \struct drx_aud_beep_t
-* \brief Beep
+* \struct struct drx_aud_beep * \brief Beep
 */
-	typedef struct {
-		s16 volume;	/* dB */
-		u16 frequency;	/* Hz */
-		bool mute;
-	} drx_aud_beep_t, *pdrx_aud_beep_t;
+struct drx_aud_beep {
+	s16 volume;	/* dB */
+	u16 frequency;	/* Hz */
+	bool mute;
+};
 
 /**
-* \enum drx_aud_btsc_detect_t
-* \brief BTSC detetcion mode
+* \enum enum drx_aud_btsc_detect * \brief BTSC detetcion mode
 */
-	typedef enum {
+	enum drx_aud_btsc_detect {
 		DRX_BTSC_STEREO,
-		DRX_BTSC_MONO_AND_SAP
-	} drx_aud_btsc_detect_t, *pdrx_aud_btsc_detect_t;
-
-/**
-* \struct drx_aud_data_t
-* \brief Audio data structure
-*/
-	typedef struct {
-		/* audio storage */
-		bool audio_is_active;
-		drx_aud_standard_t audio_standard;
-		drx_cfg_i2s_output_t i2sdata;
-		drx_cfg_aud_volume_t volume;
-		drx_cfg_aud_auto_sound_t auto_sound;
-		drx_cfg_aud_ass_thres_t ass_thresholds;
-		drx_cfg_aud_carriers_t carriers;
-		drx_cfg_aud_mixer_t mixer;
-		drx_cfg_aud_deviation_t deviation;
-		drx_cfg_aud_av_sync_t av_sync;
-		drx_cfg_aud_prescale_t prescale;
-		drx_aud_fm_deemphasis_t deemph;
-		drx_aud_btsc_detect_t btsc_detect;
-		/* rds */
-		u16 rds_data_counter;
-		bool rds_data_present;
-	} drx_aud_data_t, *pdrx_aud_data_t;
-
-/**
-* \enum drx_qam_lock_range_t
-* \brief QAM lock range mode
-*/
-	typedef enum {
+		DRX_BTSC_MONO_AND_SAP};
+
+/**
+* \struct struct drx_aud_data * \brief Audio data structure
+*/
+struct drx_aud_data {
+	/* audio storage */
+	bool audio_is_active;
+	enum drx_aud_standard audio_standard;
+	struct drx_cfg_i2s_output i2sdata;
+	struct drx_cfg_aud_volume volume;
+	enum drx_cfg_aud_auto_sound auto_sound;
+	struct drx_cfg_aud_ass_thres ass_thresholds;
+	struct drx_cfg_aud_carriers carriers;
+	struct drx_cfg_aud_mixer mixer;
+	enum drx_cfg_aud_deviation deviation;
+	enum drx_cfg_aud_av_sync av_sync;
+	struct drx_cfg_aud_prescale prescale;
+	enum drx_aud_fm_deemphasis deemph;
+	enum drx_aud_btsc_detect btsc_detect;
+	/* rds */
+	u16 rds_data_counter;
+	bool rds_data_present;
+};
+
+/**
+* \enum enum drx_qam_lock_range * \brief QAM lock range mode
+*/
+	enum drx_qam_lock_range {
 		DRX_QAM_LOCKRANGE_NORMAL,
-		DRX_QAM_LOCKRANGE_EXTENDED
-	} drx_qam_lock_range_t, *pdrx_qam_lock_range_t;
+		DRX_QAM_LOCKRANGE_EXTENDED};
 
 /*============================================================================*/
 /*============================================================================*/
@@ -1944,101 +1846,98 @@ STRUCTS
 
 /* Write block of data to device */
 	typedef int(*drx_write_block_func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						   dr_xaddr_t addr,	/* address of register/memory   */
+						   u32 addr,	/* address of register/memory   */
 						   u16 datasize,	/* size of data in bytes        */
 						   u8 *data,	/* data to send                 */
-						   dr_xflags_t flags);
+						   u32 flags);
 
 /* Read block of data from device */
 	typedef int(*drx_read_block_func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						  dr_xaddr_t addr,	/* address of register/memory   */
+						  u32 addr,	/* address of register/memory   */
 						  u16 datasize,	/* size of data in bytes        */
 						  u8 *data,	/* receive buffer               */
-						  dr_xflags_t flags);
+						  u32 flags);
 
 /* Write 8-bits value to device */
 	typedef int(*drx_write_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						  dr_xaddr_t addr,	/* address of register/memory   */
+						  u32 addr,	/* address of register/memory   */
 						  u8 data,	/* data to send                 */
-						  dr_xflags_t flags);
+						  u32 flags);
 
 /* Read 8-bits value to device */
 	typedef int(*drx_read_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						 dr_xaddr_t addr,	/* address of register/memory   */
+						 u32 addr,	/* address of register/memory   */
 						 u8 *data,	/* receive buffer               */
-						 dr_xflags_t flags);
+						 u32 flags);
 
 /* Read modify write 8-bits value to device */
 	typedef int(*drx_read_modify_write_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
-							    dr_xaddr_t waddr,	/* write address of register   */
-							    dr_xaddr_t raddr,	/* read  address of register   */
+							    u32 waddr,	/* write address of register   */
+							    u32 raddr,	/* read  address of register   */
 							    u8 wdata,	/* data to write               */
 							    u8 *rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
 	typedef int(*drx_write_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						   dr_xaddr_t addr,	/* address of register/memory   */
+						   u32 addr,	/* address of register/memory   */
 						   u16 data,	/* data to send                 */
-						   dr_xflags_t flags);
+						   u32 flags);
 
 /* Read 16-bits value to device */
 	typedef int(*drx_read_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						  dr_xaddr_t addr,	/* address of register/memory   */
+						  u32 addr,	/* address of register/memory   */
 						  u16 *data,	/* receive buffer               */
-						  dr_xflags_t flags);
+						  u32 flags);
 
 /* Read modify write 16-bits value to device */
 	typedef int(*drx_read_modify_write_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
-							     dr_xaddr_t waddr,	/* write address of register   */
-							     dr_xaddr_t raddr,	/* read  address of register   */
+							     u32 waddr,	/* write address of register   */
+							     u32 raddr,	/* read  address of register   */
 							     u16 wdata,	/* data to write               */
 							     u16 *rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
 	typedef int(*drx_write_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						   dr_xaddr_t addr,	/* address of register/memory   */
+						   u32 addr,	/* address of register/memory   */
 						   u32 data,	/* data to send                 */
-						   dr_xflags_t flags);
+						   u32 flags);
 
 /* Read 32-bits value to device */
 	typedef int(*drx_read_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
-						  dr_xaddr_t addr,	/* address of register/memory   */
+						  u32 addr,	/* address of register/memory   */
 						  u32 *data,	/* receive buffer               */
-						  dr_xflags_t flags);
+						  u32 flags);
 
 /* Read modify write 32-bits value to device */
 	typedef int(*drx_read_modify_write_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
-							     dr_xaddr_t waddr,	/* write address of register   */
-							     dr_xaddr_t raddr,	/* read  address of register   */
+							     u32 waddr,	/* write address of register   */
+							     u32 raddr,	/* read  address of register   */
 							     u32 wdata,	/* data to write               */
 							     u32 *rdata);	/* data to read                */
 
 /**
-* \struct drx_access_func_t
-* \brief Interface to an access protocol.
-*/
-	typedef struct {
-		pdrx_version_t protocolVersion;
-		drx_write_block_func_t write_block_func;
-		drx_read_block_func_t read_block_func;
-		drx_write_reg8func_t write_reg8func;
-		drx_read_reg8func_t read_reg8func;
-		drx_read_modify_write_reg8func_t read_modify_write_reg8func;
-		drx_write_reg16func_t write_reg16func;
-		drx_read_reg16func_t read_reg16func;
-		drx_read_modify_write_reg16func_t read_modify_write_reg16func;
-		drx_write_reg32func_t write_reg32func;
-		drx_read_reg32func_t read_reg32func;
-		drx_read_modify_write_reg32func_t read_modify_write_reg32func;
-	} drx_access_func_t, *pdrx_access_func_t;
+* \struct struct drx_access_func * \brief Interface to an access protocol.
+*/
+struct drx_access_func {
+	struct drx_version *protocolVersion;
+	drx_write_block_func_t write_block_func;
+	drx_read_block_func_t read_block_func;
+	drx_write_reg8func_t write_reg8func;
+	drx_read_reg8func_t read_reg8func;
+	drx_read_modify_write_reg8func_t read_modify_write_reg8func;
+	drx_write_reg16func_t write_reg16func;
+	drx_read_reg16func_t read_reg16func;
+	drx_read_modify_write_reg16func_t read_modify_write_reg16func;
+	drx_write_reg32func_t write_reg32func;
+	drx_read_reg32func_t read_reg32func;
+	drx_read_modify_write_reg32func_t read_modify_write_reg32func;
+};
 
 /* Register address and data for register dump function */
-	typedef struct {
-
-		dr_xaddr_t address;
-		u32 data;
-
-	} drx_reg_dump_t, *p_drx_reg_dump_t;
+struct drx_reg_dump {
+	u32 address;
+	u32 data;
+};
 
 /*============================================================================*/
 /*============================================================================*/
@@ -2047,17 +1946,16 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \struct drx_common_attr_t
-* \brief Set of common attributes, shared by all DRX devices.
+* \struct struct drx_common_attr * \brief Set of common attributes, shared by all DRX devices.
 */
-	typedef struct {
+	struct drx_common_attr {
 		/* Microcode (firmware) attributes */
 		u8 *microcode;   /**< Pointer to microcode image.           */
 		u16 microcode_size;
 				   /**< Size of microcode image in bytes.     */
 		bool verify_microcode;
 				   /**< Use microcode verify or not.          */
-		drx_mc_version_rec_t mcversion;
+		struct drx_mc_version_rec mcversion;
 				   /**< Version record of microcode from file */
 
 		/* Clocks and tuner attributes */
@@ -2073,13 +1971,13 @@ STRUCTS
 				     /**< Mirror IF frequency spectrum or not.*/
 
 		/* Initial MPEG output attributes */
-		drx_cfg_mpeg_output_t mpeg_cfg;
+		struct drx_cfg_mpeg_output mpeg_cfg;
 				     /**< MPEG configuration                  */
 
 		bool is_opened;     /**< if true instance is already opened. */
 
 		/* Channel scan */
-		p_drx_scan_param_t scan_param;
+		struct drx_scan_param *scan_param;
 				      /**< scan parameters                    */
 		u16 scan_freq_plan_index;
 				      /**< next index in freq plan            */
@@ -2097,14 +1995,14 @@ STRUCTS
 		/* Channel scan - parameters for default DTV scan function in core driver  */
 		u16 scan_demod_lock_timeout;
 					 /**< millisecs to wait for lock      */
-		drx_lock_status_t scan_desired_lock;
+		enum drx_lock_status scan_desired_lock;
 				      /**< lock requirement for channel found */
 		/* scan_active can be used by SetChannel to decide how to program the tuner,
 		   fast or slow (but stable). Usually fast during scan. */
 		bool scan_active;    /**< true when scan routines are active */
 
 		/* Power management */
-		drx_power_mode_t current_power_mode;
+		enum drx_power_mode current_power_mode;
 				      /**< current power management mode      */
 
 		/* Tuner */
@@ -2117,7 +2015,7 @@ STRUCTS
 		bool tuner_if_agc_pol; /**< if true invert IF AGC polarity     */
 		bool tuner_slow_mode; /**< if true invert IF AGC polarity     */
 
-		drx_channel_t current_channel;
+		struct drx_channel current_channel;
 				      /**< current channel parameters         */
 		enum drx_standard current_standard;
 				      /**< current standard selection         */
@@ -2127,51 +2025,47 @@ STRUCTS
 				      /**< standard in DI cache if available  */
 		bool use_bootloader; /**< use bootloader in open             */
 		u32 capabilities;   /**< capabilities flags                 */
-		u32 product_id;      /**< product ID inc. metal fix number   */
-
-	} drx_common_attr_t, *pdrx_common_attr_t;
+		u32 product_id;      /**< product ID inc. metal fix number   */};
 
 /*
 * Generic functions for DRX devices.
 */
-	typedef struct drx_demod_instance_s *pdrx_demod_instance_t;
 
-	typedef int(*drx_open_func_t) (pdrx_demod_instance_t demod);
-	typedef int(*drx_close_func_t) (pdrx_demod_instance_t demod);
-	typedef int(*drx_ctrl_func_t) (pdrx_demod_instance_t demod,
+struct drx_demod_instance;
+
+	typedef int(*drx_open_func_t) (struct drx_demod_instance *demod);
+	typedef int(*drx_close_func_t) (struct drx_demod_instance *demod);
+	typedef int(*drx_ctrl_func_t) (struct drx_demod_instance *demod,
 					     u32 ctrl,
 					     void *ctrl_data);
 
 /**
-* \struct drx_demod_func_t
-* \brief A stucture containing all functions of a demodulator.
+* \struct struct drx_demod_func * \brief A stucture containing all functions of a demodulator.
 */
-	typedef struct {
+	struct drx_demod_func {
 		u32 type_id;		 /**< Device type identifier.      */
 		drx_open_func_t open_func;	 /**< Pointer to Open() function.  */
 		drx_close_func_t close_func;/**< Pointer to Close() function. */
-		drx_ctrl_func_t ctrl_func;	 /**< Pointer to Ctrl() function.  */
-	} drx_demod_func_t, *pdrx_demod_func_t;
+		drx_ctrl_func_t ctrl_func;	 /**< Pointer to Ctrl() function.  */};
 
 /**
-* \struct drx_demod_instance_t
-* \brief Top structure of demodulator instance.
+* \struct struct drx_demod_instance * \brief Top structure of demodulator instance.
 */
-	typedef struct drx_demod_instance_s {
+	struct drx_demod_instance {
 		/* type specific demodulator data */
-		pdrx_demod_func_t my_demod_funct;
+		struct drx_demod_func *my_demod_funct;
 				    /**< demodulator functions                */
-		pdrx_access_func_t my_access_funct;
+		struct drx_access_func *my_access_funct;
 				    /**< data access protocol functions       */
 		struct tuner_instance *my_tuner;
 				    /**< tuner instance,if NULL then baseband */
 		struct i2c_device_addr *my_i2c_dev_addr;
 				    /**< i2c address and device identifier    */
-		pdrx_common_attr_t my_common_attr;
+		struct drx_common_attr *my_common_attr;
 				    /**< common DRX attributes                */
 		void *my_ext_attr;    /**< device specific attributes           */
 		/* generic demodulator data */
-	} drx_demod_instance_t;
+	};
 
 /*-------------------------------------------------------------------------
 MACROS
@@ -2828,7 +2722,7 @@ Access macros
 
 #define DRX_ACCESSMACRO_SET(demod, value, cfg_name, data_type)             \
    do {                                                                    \
-      drx_cfg_t config;                                                     \
+      struct drx_cfg config;                                                     \
       data_type cfg_data;                                                    \
       config.cfg_type = cfg_name;                                            \
       config.cfg_data = &cfg_data;                                           \
@@ -2839,7 +2733,7 @@ Access macros
 #define DRX_ACCESSMACRO_GET(demod, value, cfg_name, data_type, error_value) \
    do {                                                                    \
       int cfg_status;                                               \
-      drx_cfg_t    config;                                                  \
+      struct drx_cfg config;                                                  \
       data_type    cfg_data;                                                 \
       config.cfg_type = cfg_name;                                            \
       config.cfg_data = &cfg_data;                                           \
@@ -2869,21 +2763,21 @@ Access macros
    DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
 
 #define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET((d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t)
+	 DRX_XS_CFG_AUD_BTSC_DETECT, enum drx_aud_btsc_detect)
 #define DRX_GET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_GET((d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t, DRX_UNKNOWN)
+	 DRX_XS_CFG_AUD_BTSC_DETECT, enum drx_aud_btsc_detect, DRX_UNKNOWN)
 
 #define DRX_SET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_SET((d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t)
+	 DRX_XS_CFG_QAM_LOCKRANGE, enum drx_qam_lock_range)
 #define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET((d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t, DRX_UNKNOWN)
+	 DRX_XS_CFG_QAM_LOCKRANGE, enum drx_qam_lock_range, DRX_UNKNOWN)
 
 /**
 * \brief Macro to check if std is an ATV standard
 * \retval true std is an ATV standard
 * \retval false std is an ATV standard
 */
-#define DRX_ISATVSTD(std) (( (std) == DRX_STANDARD_PAL_SECAM_BG) || \
+#define DRX_ISATVSTD(std) (((std) == DRX_STANDARD_PAL_SECAM_BG) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_DK) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_I) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_L) || \
@@ -2896,7 +2790,7 @@ Access macros
 * \retval true std is an QAM standards
 * \retval false std is an QAM standards
 */
-#define DRX_ISQAMSTD(std) (( (std) == DRX_STANDARD_ITU_A) || \
+#define DRX_ISQAMSTD(std) (((std) == DRX_STANDARD_ITU_A) || \
 			      ((std) == DRX_STANDARD_ITU_B) || \
 			      ((std) == DRX_STANDARD_ITU_C) || \
 			      ((std) == DRX_STANDARD_ITU_D))
@@ -2919,15 +2813,15 @@ Access macros
 Exported FUNCTIONS
 -------------------------------------------------------------------------*/
 
-	int drx_init(pdrx_demod_instance_t demods[]);
+	int drx_init(struct drx_demod_instance *demods[]);
 
 	int drx_term(void);
 
-	int drx_open(pdrx_demod_instance_t demod);
+	int drx_open(struct drx_demod_instance *demod);
 
-	int drx_close(pdrx_demod_instance_t demod);
+	int drx_close(struct drx_demod_instance *demod);
 
-	int drx_ctrl(pdrx_demod_instance_t demod,
+	int drx_ctrl(struct drx_demod_instance *demod,
 			     u32 ctrl, void *ctrl_data);
 
 /*-------------------------------------------------------------------------

commit 22892268cd65d50b5d2faa2232fc39ebd98b7142
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Jan 16 11:28:52 2014 -0300

    [media] drx-j: do more CodingStyle fixes
    
    This time, use checkpatch --strict --fix.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index f4a041139ee9..ca07a6c4f58d 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -493,23 +493,23 @@ MACROS
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S9TOS16(x) ((((u16)x)&0x100)?((s16)((u16)(x)|0xFF00)):(x))
+#define DRX_S9TOS16(x) ((((u16)x)&0x100) ? ((s16)((u16)(x)|0xFF00)) : (x))
 
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S24TODRXFREQ(x) (( ( (u32) x) & 0x00800000UL ) ? \
+#define DRX_S24TODRXFREQ(x) ((( (u32) x) & 0x00800000UL) ? \
 				 ((s32) \
-				    (( (u32) x) | 0xFF000000 ) ) : \
-				 ((s32) x) )
+				    (((u32) x) | 0xFF000000) ) : \
+				 ((s32) x))
 
 /**
 * \brief Macro to convert 16 bit register value to a s32
 */
-#define DRX_U16TODRXFREQ(x)   (( x & 0x8000) ? \
+#define DRX_U16TODRXFREQ(x)   ((x & 0x8000) ? \
 				 ((s32) \
-				    (( (u32) x) | 0xFFFF0000 ) ) : \
-				 ((s32) x) )
+				    (((u32) x) | 0xFFFF0000) ) : \
+				 ((s32) x))
 
 /*-------------------------------------------------------------------------
 ENUM
@@ -2868,14 +2868,14 @@ Access macros
 #define DRX_GET_PRESET(d, x) \
    DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
 
-#define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
+#define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET((d), (x), \
 	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t)
-#define DRX_GET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
+#define DRX_GET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_GET((d), (x), \
 	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t, DRX_UNKNOWN)
 
-#define DRX_SET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
+#define DRX_SET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_SET((d), (x), \
 	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t)
-#define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
+#define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET((d), (x), \
 	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t, DRX_UNKNOWN)
 
 /**
@@ -2883,20 +2883,20 @@ Access macros
 * \retval true std is an ATV standard
 * \retval false std is an ATV standard
 */
-#define DRX_ISATVSTD(std) ( ( (std) == DRX_STANDARD_PAL_SECAM_BG ) || \
+#define DRX_ISATVSTD(std) (( (std) == DRX_STANDARD_PAL_SECAM_BG) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_DK) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_I) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_L) || \
 			      ((std) == DRX_STANDARD_PAL_SECAM_LP) || \
 			      ((std) == DRX_STANDARD_NTSC) || \
-			      ((std) == DRX_STANDARD_FM) )
+			      ((std) == DRX_STANDARD_FM))
 
 /**
 * \brief Macro to check if std is an QAM standard
 * \retval true std is an QAM standards
 * \retval false std is an QAM standards
 */
-#define DRX_ISQAMSTD(std) ( ( (std) == DRX_STANDARD_ITU_A ) || \
+#define DRX_ISQAMSTD(std) (( (std) == DRX_STANDARD_ITU_A) || \
 			      ((std) == DRX_STANDARD_ITU_B) || \
 			      ((std) == DRX_STANDARD_ITU_C) || \
 			      ((std) == DRX_STANDARD_ITU_D))
@@ -2906,14 +2906,14 @@ Access macros
 * \retval true std is VSB standard
 * \retval false std is not VSB standard
 */
-#define DRX_ISVSBSTD(std) ( (std) == DRX_STANDARD_8VSB )
+#define DRX_ISVSBSTD(std) ((std) == DRX_STANDARD_8VSB)
 
 /**
 * \brief Macro to check if std is DVBT standard
 * \retval true std is DVBT standard
 * \retval false std is not DVBT standard
 */
-#define DRX_ISDVBTSTD(std) ( (std) == DRX_STANDARD_DVBT )
+#define DRX_ISDVBTSTD(std) ((std) == DRX_STANDARD_DVBT)
 
 /*-------------------------------------------------------------------------
 Exported FUNCTIONS

commit 57afe2f0bb0cca758701679f141c9fa92a034415
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Jan 16 11:24:57 2014 -0300

    [media] drx-j: Don't use CamelCase
    
    There's no reason at all to use CamelCase here. Convert all of
    them to normal case.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 0b0787f60f98..f4a041139ee9 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -42,7 +42,7 @@
 INCLUDES
 -------------------------------------------------------------------------*/
 
-enum DRXStatus {
+enum drx_status {
 	DRX_STS_READY = 3,  /**< device/service is ready     */
 	DRX_STS_BUSY = 2,   /**< device/service is busy      */
 	DRX_STS_OK = 1,	    /**< everything is OK            */
@@ -54,13 +54,13 @@ enum DRXStatus {
 };
 
 /*
- * This structure contains the I2C address, the device ID and a userData pointer.
- * The userData pointer can be used for application specific purposes.
+ * This structure contains the I2C address, the device ID and a user_data pointer.
+ * The user_data pointer can be used for application specific purposes.
  */
 struct i2c_device_addr {
-	u16 i2cAddr;		/* The I2C address of the device. */
-	u16 i2cDevId;		/* The device identifier. */
-	void *userData;		/* User data pointer */
+	u16 i2c_addr;		/* The I2C address of the device. */
+	u16 i2c_dev_id;		/* The device identifier. */
+	void *user_data;		/* User data pointer */
 };
 
 /**
@@ -79,44 +79,44 @@ Exported FUNCTIONS
 ------------------------------------------------------------------------------*/
 
 /**
-* \fn DRXBSP_I2C_Init()
+* \fn drxbsp_i2c_init()
 * \brief Initialize I2C communication module.
 * \return int Return status.
 * \retval DRX_STS_OK Initialization successful.
 * \retval DRX_STS_ERROR Initialization failed.
 */
-int DRXBSP_I2C_Init(void);
+int drxbsp_i2c_init(void);
 
 /**
-* \fn DRXBSP_I2C_Term()
+* \fn drxbsp_i2c_term()
 * \brief Terminate I2C communication module.
 * \return int Return status.
 * \retval DRX_STS_OK Termination successful.
 * \retval DRX_STS_ERROR Termination failed.
 */
-int DRXBSP_I2C_Term(void);
+int drxbsp_i2c_term(void);
 
 /**
-* \fn int DRXBSP_I2C_WriteRead( struct i2c_device_addr *wDevAddr,
-*                                       u16 wCount,
+* \fn int drxbsp_i2c_write_read( struct i2c_device_addr *w_dev_addr,
+*                                       u16 w_count,
 *                                       u8 * wData,
-*                                       struct i2c_device_addr *rDevAddr,
-*                                       u16 rCount,
-*                                       u8 * rData)
+*                                       struct i2c_device_addr *r_dev_addr,
+*                                       u16 r_count,
+*                                       u8 * r_data)
 * \brief Read and/or write count bytes from I2C bus, store them in data[].
-* \param wDevAddr The device i2c address and the device ID to write to
-* \param wCount   The number of bytes to write
+* \param w_dev_addr The device i2c address and the device ID to write to
+* \param w_count   The number of bytes to write
 * \param wData    The array to write the data to
-* \param rDevAddr The device i2c address and the device ID to read from
-* \param rCount   The number of bytes to read
-* \param rData    The array to read the data from
+* \param r_dev_addr The device i2c address and the device ID to read from
+* \param r_count   The number of bytes to read
+* \param r_data    The array to read the data from
 * \return int Return status.
 * \retval DRX_STS_OK Succes.
 * \retval DRX_STS_ERROR Failure.
 * \retval DRX_STS_INVALID_ARG Parameter 'wcount' is not zero but parameter
 *                                       'wdata' contains NULL.
 *                                       Idem for 'rcount' and 'rdata'.
-*                                       Both wDevAddr and rDevAddr are NULL.
+*                                       Both w_dev_addr and r_dev_addr are NULL.
 *
 * This function must implement an atomic write and/or read action on the I2C bus
 * No other process may use the I2C bus when this function is executing.
@@ -126,26 +126,26 @@ int DRXBSP_I2C_Term(void);
 * The device ID can be useful if several devices share an I2C address.
 * It can be used to control a "switch" on the I2C bus to the correct device.
 */
-int DRXBSP_I2C_WriteRead(struct i2c_device_addr *wDevAddr,
-					u16 wCount,
+int drxbsp_i2c_write_read(struct i2c_device_addr *w_dev_addr,
+					u16 w_count,
 					u8 *wData,
-					struct i2c_device_addr *rDevAddr,
-					u16 rCount, u8 *rData);
+					struct i2c_device_addr *r_dev_addr,
+					u16 r_count, u8 *r_data);
 
 /**
-* \fn DRXBSP_I2C_ErrorText()
+* \fn drxbsp_i2c_error_text()
 * \brief Returns a human readable error.
-* Counter part of numerical DRX_I2C_Error_g.
+* Counter part of numerical drx_i2c_error_g.
 *
 * \return char* Pointer to human readable error text.
 */
-char *DRXBSP_I2C_ErrorText(void);
+char *drxbsp_i2c_error_text(void);
 
 /**
-* \var DRX_I2C_Error_g;
+* \var drx_i2c_error_g;
 * \brief I2C specific error codes, platform dependent.
 */
-extern int DRX_I2C_Error_g;
+extern int drx_i2c_error_g;
 
 #define TUNER_MODE_SUB0    0x0001	/* for sub-mode (e.g. RF-AGC setting) */
 #define TUNER_MODE_SUB1    0x0002	/* for sub-mode (e.g. RF-AGC setting) */
@@ -178,105 +178,105 @@ enum tuner_lock_status {
 
 struct tuner_common {
 	char *name;	/* Tuner brand & type name */
-	s32 minFreqRF;	/* Lowest  RF input frequency, in kHz */
-	s32 maxFreqRF;	/* Highest RF input frequency, in kHz */
+	s32 min_freq_rf;	/* Lowest  RF input frequency, in kHz */
+	s32 max_freq_rf;	/* Highest RF input frequency, in kHz */
 
-	u8 subMode;	/* Index to sub-mode in use */
-	char ***subModeDescriptions;	/* Pointer to description of sub-modes */
-	u8 subModes;	/* Number of available sub-modes      */
+	u8 sub_mode;	/* Index to sub-mode in use */
+	char ***sub_modeDescriptions;	/* Pointer to description of sub-modes */
+	u8 sub_modes;	/* Number of available sub-modes      */
 
 	/* The following fields will be either 0, NULL or false and do not need
 		initialisation */
-	void *selfCheck;	/* gives proof of initialization  */
-	bool programmed;	/* only valid if selfCheck is OK  */
-	s32 RFfrequency;	/* only valid if programmed       */
-	s32 IFfrequency;	/* only valid if programmed       */
+	void *self_check;	/* gives proof of initialization  */
+	bool programmed;	/* only valid if self_check is OK  */
+	s32 r_ffrequency;	/* only valid if programmed       */
+	s32 i_ffrequency;	/* only valid if programmed       */
 
-	void *myUserData;	/* pointer to associated demod instance */
-	u16 myCapabilities;	/* value for storing application flags  */
+	void *myUser_data;	/* pointer to associated demod instance */
+	u16 my_capabilities;	/* value for storing application flags  */
 };
 
 struct tuner_instance;
 
-typedef int(*TUNEROpenFunc_t) (struct tuner_instance *tuner);
-typedef int(*TUNERCloseFunc_t) (struct tuner_instance *tuner);
+typedef int(*tuner_open_func_t) (struct tuner_instance *tuner);
+typedef int(*tuner_close_func_t) (struct tuner_instance *tuner);
 
-typedef int(*TUNERSetFrequencyFunc_t) (struct tuner_instance *tuner,
+typedef int(*tuner_set_frequency_func_t) (struct tuner_instance *tuner,
 						u32 mode,
 						s32
 						frequency);
 
-typedef int(*TUNERGetFrequencyFunc_t) (struct tuner_instance *tuner,
+typedef int(*tuner_get_frequency_func_t) (struct tuner_instance *tuner,
 						u32 mode,
 						s32 *
-						RFfrequency,
+						r_ffrequency,
 						s32 *
-						IFfrequency);
+						i_ffrequency);
 
-typedef int(*TUNERLockStatusFunc_t) (struct tuner_instance *tuner,
+typedef int(*tuner_lock_status_func_t) (struct tuner_instance *tuner,
 						enum tuner_lock_status *
-						lockStat);
+						lock_stat);
 
-typedef int(*TUNERi2cWriteReadFunc_t) (struct tuner_instance *tuner,
+typedef int(*tune_ri2c_write_read_func_t) (struct tuner_instance *tuner,
 						struct i2c_device_addr *
-						wDevAddr, u16 wCount,
+						w_dev_addr, u16 w_count,
 						u8 *wData,
 						struct i2c_device_addr *
-						rDevAddr, u16 rCount,
-						u8 *rData);
+						r_dev_addr, u16 r_count,
+						u8 *r_data);
 
 struct tuner_ops {
-	TUNEROpenFunc_t openFunc;
-	TUNERCloseFunc_t closeFunc;
-	TUNERSetFrequencyFunc_t setFrequencyFunc;
-	TUNERGetFrequencyFunc_t getFrequencyFunc;
-	TUNERLockStatusFunc_t lockStatusFunc;
-	TUNERi2cWriteReadFunc_t i2cWriteReadFunc;
+	tuner_open_func_t open_func;
+	tuner_close_func_t close_func;
+	tuner_set_frequency_func_t set_frequency_func;
+	tuner_get_frequency_func_t get_frequency_func;
+	tuner_lock_status_func_t lock_statusFunc;
+	tune_ri2c_write_read_func_t i2c_write_read_func;
 
 };
 
 struct tuner_instance {
-	struct i2c_device_addr myI2CDevAddr;
-	struct tuner_common *myCommonAttr;
-	void *myExtAttr;
-	struct tuner_ops *myFunct;
+	struct i2c_device_addr my_i2c_dev_addr;
+	struct tuner_common *my_common_attr;
+	void *my_ext_attr;
+	struct tuner_ops *my_funct;
 };
 
 
-int DRXBSP_TUNER_Open(struct tuner_instance *tuner);
+int drxbsp_tuner_open(struct tuner_instance *tuner);
 
-int DRXBSP_TUNER_Close(struct tuner_instance *tuner);
+int drxbsp_tuner_close(struct tuner_instance *tuner);
 
-int DRXBSP_TUNER_SetFrequency(struct tuner_instance *tuner,
+int drxbsp_tuner_set_frequency(struct tuner_instance *tuner,
 					u32 mode,
 					s32 frequency);
 
-int DRXBSP_TUNER_GetFrequency(struct tuner_instance *tuner,
+int drxbsp_tuner_get_frequency(struct tuner_instance *tuner,
 					u32 mode,
-					s32 *RFfrequency,
-					s32 *IFfrequency);
+					s32 *r_ffrequency,
+					s32 *i_ffrequency);
 
-int DRXBSP_TUNER_LockStatus(struct tuner_instance *tuner,
-					enum tuner_lock_status *lockStat);
+int drxbsp_tuner_lock_status(struct tuner_instance *tuner,
+					enum tuner_lock_status *lock_stat);
 
-int DRXBSP_TUNER_DefaultI2CWriteRead(struct tuner_instance *tuner,
-						struct i2c_device_addr *wDevAddr,
-						u16 wCount,
+int drxbsp_tuner_default_i2c_write_read(struct tuner_instance *tuner,
+						struct i2c_device_addr *w_dev_addr,
+						u16 w_count,
 						u8 *wData,
-						struct i2c_device_addr *rDevAddr,
-						u16 rCount, u8 *rData);
+						struct i2c_device_addr *r_dev_addr,
+						u16 r_count, u8 *r_data);
 
-int DRXBSP_HST_Init(void);
+int drxbsp_hst_init(void);
 
-int DRXBSP_HST_Term(void);
+int drxbsp_hst_term(void);
 
-void *DRXBSP_HST_Memcpy(void *to, void *from, u32 n);
+void *drxbsp_hst_memcpy(void *to, void *from, u32 n);
 
-int DRXBSP_HST_Memcmp(void *s1, void *s2, u32 n);
+int drxbsp_hst_memcmp(void *s1, void *s2, u32 n);
 
-u32 DRXBSP_HST_Clock(void);
+u32 drxbsp_hst_clock(void);
 
-int DRXBSP_HST_Sleep(u32 n);
+int drxbsp_hst_sleep(u32 n);
 
 
 
@@ -856,7 +856,7 @@ enum drx_pilot_mode {
 #define DRX_CTRL_MAX             (DRX_CTRL_BASE + 44)	/* never to be used    */
 
 /**
-* \enum DRXUCodeAction_t
+* \enum drxu_code_action_t
 * \brief Used to indicate if firmware has to be uploaded or verified.
 */
 
@@ -865,10 +865,10 @@ enum drx_pilot_mode {
 		  /**< Upload the microcode image to device        */
 		UCODE_VERIFY
 		  /**< Compare microcode image with code on device */
-	} DRXUCodeAction_t, *pDRXUCodeAction_t;
+	} drxu_code_action_t, *pdrxu_code_action_t;
 
 /**
-* \enum DRXLockStatus_t
+* \enum drx_lock_status_t
 * \brief Used to reflect current lock status of demodulator.
 *
 * The generic lock states have device dependent semantics.
@@ -897,7 +897,7 @@ enum drx_pilot_mode {
 		DRX_LOCK_STATE_9,
 			      /**< Generic lock state                    */
 		DRX_LOCKED    /**< Device is in lock                     */
-	} DRXLockStatus_t, *pDRXLockStatus_t;
+	} drx_lock_status_t, *pdrx_lock_status_t;
 
 /**
 * \enum DRXUIO_t
@@ -937,10 +937,10 @@ enum drx_pilot_mode {
 		DRX_UIO31,
 		DRX_UIO32,
 		DRX_UIO_MAX = DRX_UIO32
-	} DRXUIO_t, *pDRXUIO_t;
+	} DRXUIO_t, *p_drxuio_t;
 
 /**
-* \enum DRXUIOMode_t
+* \enum drxuio_mode_t
 * \brief Used to configure the modus oprandi of a UIO.
 *
 * DRX_UIO_MODE_FIRMWARE is an old uio mode.
@@ -967,10 +967,10 @@ enum drx_pilot_mode {
 				    /**< controlled by firmware, function 4   */
 		DRX_UIO_MODE_FIRMWARE5 = 0x80
 				    /**< controlled by firmware, function 5   */
-	} DRXUIOMode_t, *pDRXUIOMode_t;
+	} drxuio_mode_t, *pdrxuio_mode_t;
 
 /**
-* \enum DRXOOBDownstreamStandard_t
+* \enum drxoob_downstream_standard_t
 * \brief Used to select OOB standard.
 *
 * Based on ANSI 55-1 and 55-2
@@ -982,7 +982,7 @@ enum drx_pilot_mode {
 			       /**< ANSI 55-2 A */
 		DRX_OOB_MODE_B_GRADE_B
 			       /**< ANSI 55-2 B */
-	} DRXOOBDownstreamStandard_t, *pDRXOOBDownstreamStandard_t;
+	} drxoob_downstream_standard_t, *pdrxoob_downstream_standard_t;
 
 /*-------------------------------------------------------------------------
 STRUCTS
@@ -995,13 +995,13 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \enum DRXCfgType_t
+* \enum drx_cfg_type_t
 * \brief Generic configuration function identifiers.
 */
-	typedef u32 DRXCfgType_t, *pDRXCfgType_t;
+	typedef u32 drx_cfg_type_t, *pdrx_cfg_type_t;
 
 #ifndef DRX_CFG_BASE
-#define DRX_CFG_BASE          ((DRXCfgType_t)0)
+#define DRX_CFG_BASE          ((drx_cfg_type_t)0)
 #endif
 
 #define DRX_CFG_MPEG_OUTPUT         (DRX_CFG_BASE +  0)	/* MPEG TS output    */
@@ -1032,20 +1032,20 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \struct DRXUCodeInfo_t
+* \struct drxu_code_info_t
 * \brief Parameters for microcode upload and verfiy.
 *
 * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
 */
 	typedef struct {
-		u8 *mcData;
+		u8 *mc_data;
 		     /**< Pointer to microcode image. */
-		u16 mcSize;
+		u16 mc_size;
 		     /**< Microcode image size.       */
-	} DRXUCodeInfo_t, *pDRXUCodeInfo_t;
+	} drxu_code_info_t, *p_drxu_code_info_t;
 
 /**
-* \struct DRXMcVersionRec_t
+* \struct drx_mc_version_rec_t
 * \brief Microcode version record
 * Version numbers are stored in BCD format, as usual:
 *   o major number = bits 31-20 (first three nibbles of MSW)
@@ -1056,43 +1056,43 @@ STRUCTS
 * JTAG ID, using everything except the bond ID and the metal fix.
 *
 * Special values:
-* - mcDevType == 0         => any device allowed
-* - mcBaseVersion == 0.0.0 => full microcode (mcVersion is the version)
-* - mcBaseVersion != 0.0.0 => patch microcode, the base microcode version
-*                             (mcVersion is the version)
+* - mc_dev_type == 0         => any device allowed
+* - mc_base_version == 0.0.0 => full microcode (mc_version is the version)
+* - mc_base_version != 0.0.0 => patch microcode, the base microcode version
+*                             (mc_version is the version)
 */
 #define AUX_VER_RECORD 0x8000
 
 	typedef struct {
-		u16 auxType;	/* type of aux data - 0x8000 for version record     */
-		u32 mcDevType;	/* device type, based on JTAG ID                    */
-		u32 mcVersion;	/* version of microcode                             */
-		u32 mcBaseVersion;	/* in case of patch: the original microcode version */
-	} DRXMcVersionRec_t, *pDRXMcVersionRec_t;
+		u16 aux_type;	/* type of aux data - 0x8000 for version record     */
+		u32 mc_dev_type;	/* device type, based on JTAG ID                    */
+		u32 mc_version;	/* version of microcode                             */
+		u32 mc_base_version;	/* in case of patch: the original microcode version */
+	} drx_mc_version_rec_t, *pdrx_mc_version_rec_t;
 
 /*========================================*/
 
 /**
-* \struct DRXFilterInfo_t
+* \struct drx_filter_info_t
 * \brief Parameters for loading filter coefficients
 *
 * Used by DRX_CTRL_LOAD_FILTER
 */
 	typedef struct {
-		u8 *dataRe;
+		u8 *data_re;
 		      /**< pointer to coefficients for RE */
-		u8 *dataIm;
+		u8 *data_im;
 		      /**< pointer to coefficients for IM */
-		u16 sizeRe;
+		u16 size_re;
 		      /**< size of coefficients for RE    */
-		u16 sizeIm;
+		u16 size_im;
 		      /**< size of coefficients for IM    */
-	} DRXFilterInfo_t, *pDRXFilterInfo_t;
+	} drx_filter_info_t, *pdrx_filter_info_t;
 
 /*========================================*/
 
 /**
-* \struct DRXChannel_t
+* \struct drx_channel_t
 * \brief The set of parameters describing a single channel.
 *
 * Used by DRX_CTRL_SET_CHANNEL and DRX_CTRL_GET_CHANNEL.
@@ -1124,46 +1124,46 @@ STRUCTS
 		enum drx_frame_mode framemode;
 					/**< frame mode                       */
 		enum drx_pilot_mode pilot;	/**< pilot mode                       */
-	} DRXChannel_t, *pDRXChannel_t;
+	} drx_channel_t, *pdrx_channel_t;
 
 /*========================================*/
 
 /**
-* \struct DRXSigQuality_t
+* \struct drx_sig_quality_t
 * Signal quality metrics.
 *
 * Used by DRX_CTRL_SIG_QUALITY.
 */
 	typedef struct {
 		u16 MER;     /**< in steps of 0.1 dB                        */
-		u32 preViterbiBER;
-			       /**< in steps of 1/scaleFactorBER              */
-		u32 postViterbiBER;
-			       /**< in steps of 1/scaleFactorBER              */
-		u32 scaleFactorBER;
+		u32 pre_viterbi_ber;
+			       /**< in steps of 1/scale_factor_ber              */
+		u32 post_viterbi_ber;
+			       /**< in steps of 1/scale_factor_ber              */
+		u32 scale_factor_ber;
 			       /**< scale factor for BER                      */
-		u16 packetError;
+		u16 packet_error;
 			       /**< number of packet errors                   */
-		u32 postReedSolomonBER;
-			       /**< in steps of 1/scaleFactorBER              */
-		u32 preLdpcBER;
-			       /**< in steps of 1/scaleFactorBER              */
-		u32 averIter;/**< in steps of 0.01                          */
+		u32 post_reed_solomon_ber;
+			       /**< in steps of 1/scale_factor_ber              */
+		u32 pre_ldpc_ber;
+			       /**< in steps of 1/scale_factor_ber              */
+		u32 aver_iter;/**< in steps of 0.01                          */
 		u16 indicator;
 			       /**< indicative signal quality low=0..100=high */
-	} DRXSigQuality_t, *pDRXSigQuality_t;
+	} drx_sig_quality_t, *pdrx_sig_quality_t;
 
 	typedef enum {
 		DRX_SQI_SPEED_FAST = 0,
 		DRX_SQI_SPEED_MEDIUM,
 		DRX_SQI_SPEED_SLOW,
 		DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
-	} DRXCfgSqiSpeed_t, *pDRXCfgSqiSpeed_t;
+	} drx_cfg_sqi_speed_t, *pdrx_cfg_sqi_speed_t;
 
 /*========================================*/
 
 /**
-* \struct DRXComplex_t
+* \struct drx_complex_t
 * A complex number.
 *
 * Used by DRX_CTRL_CONSTEL.
@@ -1173,12 +1173,12 @@ STRUCTS
 	     /**< Imaginary part. */
 		s16 re;
 	     /**< Real part.      */
-	} DRXComplex_t, *pDRXComplex_t;
+	} drx_complex_t, *pdrx_complex_t;
 
 /*========================================*/
 
 /**
-* \struct DRXFrequencyPlan_t
+* \struct drx_frequency_plan_t
 * Array element of a frequency plan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
@@ -1192,72 +1192,72 @@ STRUCTS
 			     /**< Stepping frequency in this band            */
 		enum drx_bandwidth bandwidth;
 			     /**< Bandwidth within this frequency band       */
-		u16 chNumber;
+		u16 ch_number;
 			     /**< First channel number in this band, or first
-				    index in chNames                         */
-		char **chNames;
+				    index in ch_names                         */
+		char **ch_names;
 			     /**< Optional list of channel names in this
 				    band                                     */
-	} DRXFrequencyPlan_t, *pDRXFrequencyPlan_t;
+	} drx_frequency_plan_t, *p_drx_frequency_plan_t;
 
 /*========================================*/
 
 /**
-* \struct DRXFrequencyPlanInfo_t
+* \struct drx_frequency_plan_info_t
 * Array element of a list of frequency plans.
 *
 * Used by frequency_plan.h
 */
 	typedef struct {
-		pDRXFrequencyPlan_t freqPlan;
-		int freqPlanSize;
-		char *freqPlanName;
-	} DRXFrequencyPlanInfo_t, *pDRXFrequencyPlanInfo_t;
+		p_drx_frequency_plan_t freq_plan;
+		int freq_planSize;
+		char *freq_planName;
+	} drx_frequency_plan_info_t, *pdrx_frequency_plan_info_t;
 
 /*========================================*/
 
 /**
-* /struct DRXScanDataQam_t
+* /struct drx_scan_data_qam_t
 * QAM specific scanning variables
 */
 	typedef struct {
 		u32 *symbolrate;	  /**<  list of symbolrates to scan   */
-		u16 symbolrateSize;	  /**<  size of symbolrate array      */
+		u16 symbolrate_size;	  /**<  size of symbolrate array      */
 		enum drx_modulation *constellation;
 					  /**<  list of constellations        */
-		u16 constellationSize;    /**<  size of constellation array */
-		u16 ifAgcThreshold;	  /**<  thresholf for IF-AGC based
+		u16 constellation_size;    /**<  size of constellation array */
+		u16 if_agc_threshold;	  /**<  thresholf for IF-AGC based
 						scanning filter               */
-	} DRXScanDataQam_t, *pDRXScanDataQam_t;
+	} drx_scan_data_qam_t, *pdrx_scan_data_qam_t;
 
 /*========================================*/
 
 /**
-* /struct DRXScanDataAtv_t
+* /struct drx_scan_data_atv_t
 * ATV specific scanning variables
 */
 	typedef struct {
-		s16 svrThreshold;
+		s16 svr_threshold;
 			/**< threshold of Sound/Video ratio in 0.1dB steps */
-	} DRXScanDataAtv_t, *pDRXScanDataAtv_t;
+	} drx_scan_data_atv_t, *pdrx_scan_data_atv_t;
 
 /*========================================*/
 
 /**
-* \struct DRXScanParam_t
+* \struct drx_scan_param_t
 * Parameters for channel scan.
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
 	typedef struct {
-		pDRXFrequencyPlan_t frequencyPlan;
+		p_drx_frequency_plan_t frequency_plan;
 					  /**< Frequency plan (array)*/
-		u16 frequencyPlanSize;  /**< Number of bands       */
-		u32 numTries;		  /**< Max channels tried    */
+		u16 frequency_plan_size;  /**< Number of bands       */
+		u32 num_tries;		  /**< Max channels tried    */
 		s32 skip;	  /**< Minimum frequency step to take
 						after a channel is found */
-		void *extParams;	  /**< Standard specific params */
-	} DRXScanParam_t, *pDRXScanParam_t;
+		void *ext_params;	  /**< Standard specific params */
+	} drx_scan_param_t, *p_drx_scan_param_t;
 
 /*========================================*/
 
@@ -1269,22 +1269,22 @@ STRUCTS
 		DRX_SCAN_COMMAND_INIT = 0,/**< Initialize scanning */
 		DRX_SCAN_COMMAND_NEXT,	  /**< Next scan           */
 		DRX_SCAN_COMMAND_STOP	  /**< Stop scanning       */
-	} DRXScanCommand_t, *pDRXScanCommand_t;
+	} drx_scan_command_t, *pdrx_scan_command_t;
 
 /*========================================*/
 
 /**
 * \brief Inner scan function prototype.
 */
-	typedef int(*DRXScanFunc_t) (void *scanContext,
-					     DRXScanCommand_t scanCommand,
-					     pDRXChannel_t scanChannel,
-					     bool *getNextChannel);
+	typedef int(*drx_scan_func_t) (void *scan_context,
+					     drx_scan_command_t scan_command,
+					     pdrx_channel_t scan_channel,
+					     bool *get_next_channel);
 
 /*========================================*/
 
 /**
-* \struct DRXTPSInfo_t
+* \struct drxtps_info_t
 * TPS information, DVB-T specific.
 *
 * Used by DRX_CTRL_TPS_INFO.
@@ -1296,14 +1296,14 @@ STRUCTS
 					/**< Constellation  */
 		enum drx_hierarchy hierarchy;
 					/**< Hierarchy      */
-		enum drx_coderate highCoderate;
+		enum drx_coderate high_coderate;
 					/**< High code rate */
-		enum drx_coderate lowCoderate;
+		enum drx_coderate low_coderate;
 					/**< Low cod rate   */
 		enum drx_tps_frame frame;	/**< Tps frame      */
 		u8 length;		/**< Length         */
-		u16 cellId;		/**< Cell id        */
-	} DRXTPSInfo_t, *pDRXTPSInfo_t;
+		u16 cell_id;		/**< Cell id        */
+	} drxtps_info_t, *pdrxtps_info_t;
 
 /*========================================*/
 
@@ -1350,12 +1350,12 @@ STRUCTS
 			 /**< Device specific , Power Down Mode */
 		DRX_POWER_DOWN = 255
 			 /**< Generic         , Power Down Mode */
-	} DRXPowerMode_t, *pDRXPowerMode_t;
+	} drx_power_mode_t, *pdrx_power_mode_t;
 
 /*========================================*/
 
 /**
-* \enum DRXModule_t
+* \enum drx_module_t
 * \brief Software module identification.
 *
 * Used by DRX_CTRL_VERSION.
@@ -1370,36 +1370,36 @@ STRUCTS
 		DRX_MODULE_BSP_TUNER,
 		DRX_MODULE_BSP_HOST,
 		DRX_MODULE_UNKNOWN
-	} DRXModule_t, *pDRXModule_t;
+	} drx_module_t, *pdrx_module_t;
 
 /**
-* \enum DRXVersion_t
+* \enum drx_version_t
 * \brief Version information of one software module.
 *
 * Used by DRX_CTRL_VERSION.
 */
 	typedef struct {
-		DRXModule_t moduleType;
+		drx_module_t module_type;
 			       /**< Type identifier of the module */
-		char *moduleName;
+		char *module_name;
 			       /**< Name or description of module */
-		u16 vMajor;  /**< Major version number          */
-		u16 vMinor;  /**< Minor version number          */
-		u16 vPatch;  /**< Patch version number          */
-		char *vString; /**< Version as text string        */
-	} DRXVersion_t, *pDRXVersion_t;
+		u16 v_major;  /**< Major version number          */
+		u16 v_minor;  /**< Minor version number          */
+		u16 v_patch;  /**< Patch version number          */
+		char *v_string; /**< Version as text string        */
+	} drx_version_t, *pdrx_version_t;
 
 /**
-* \enum DRXVersionList_t
+* \enum drx_version_list_t
 * \brief List element of NULL terminated, linked list for version information.
 *
 * Used by DRX_CTRL_VERSION.
 */
-	typedef struct DRXVersionList_s {
-		pDRXVersion_t version;/**< Version information */
-		struct DRXVersionList_s *next;
+	typedef struct drx_version_list_s {
+		pdrx_version_t version;/**< Version information */
+		struct drx_version_list_s *next;
 				      /**< Next list element   */
-	} DRXVersionList_t, *pDRXVersionList_t;
+	} drx_version_list_t, *p_drx_version_list_t;
 
 /*========================================*/
 
@@ -1411,9 +1411,9 @@ STRUCTS
 	typedef struct {
 		DRXUIO_t uio;
 		       /**< UIO identifier       */
-		DRXUIOMode_t mode;
+		drxuio_mode_t mode;
 		       /**< UIO operational mode */
-	} DRXUIOCfg_t, *pDRXUIOCfg_t;
+	} drxuio_cfg_t, *pdrxuio_cfg_t;
 
 /*========================================*/
 
@@ -1427,7 +1427,7 @@ STRUCTS
 		   /**< UIO identifier              */
 		bool value;
 		   /**< UIO value (true=1, false=0) */
-	} DRXUIOData_t, *pDRXUIOData_t;
+	} drxuio_data_t, *pdrxuio_data_t;
 
 /*========================================*/
 
@@ -1438,11 +1438,11 @@ STRUCTS
 */
 	typedef struct {
 		s32 frequency;	   /**< Frequency in kHz      */
-		DRXOOBDownstreamStandard_t standard;
+		drxoob_downstream_standard_t standard;
 						   /**< OOB standard          */
-		bool spectrumInverted;	   /**< If true, then spectrum
+		bool spectrum_inverted;	   /**< If true, then spectrum
 							 is inverted          */
-	} DRXOOB_t, *pDRXOOB_t;
+	} DRXOOB_t, *p_drxoob_t;
 
 /*========================================*/
 
@@ -1453,10 +1453,10 @@ STRUCTS
 */
 	typedef struct {
 		s32 frequency; /**< Frequency in Khz         */
-		DRXLockStatus_t lock;	  /**< Lock status              */
+		drx_lock_status_t lock;	  /**< Lock status              */
 		u32 mer;		  /**< MER                      */
-		s32 symbolRateOffset;	  /**< Symbolrate offset in ppm */
-	} DRXOOBStatus_t, *pDRXOOBStatus_t;
+		s32 symbol_rate_offset;	  /**< Symbolrate offset in ppm */
+	} drxoob_status_t, *pdrxoob_status_t;
 
 /*========================================*/
 
@@ -1464,14 +1464,14 @@ STRUCTS
 * \brief Device dependent configuration data.
 *
 * Used by DRX_CTRL_SET_CFG and DRX_CTRL_GET_CFG.
-* A sort of nested DRX_Ctrl() functionality for device specific controls.
+* A sort of nested drx_ctrl() functionality for device specific controls.
 */
 	typedef struct {
-		DRXCfgType_t cfgType;
+		drx_cfg_type_t cfg_type;
 			  /**< Function identifier */
-		void *cfgData;
+		void *cfg_data;
 			  /**< Function data */
-	} DRXCfg_t, *pDRXCfg_t;
+	} drx_cfg_t, *pdrx_cfg_t;
 
 /*========================================*/
 
@@ -1483,11 +1483,11 @@ STRUCTS
 	typedef enum {
 		DRX_MPEG_STR_WIDTH_1,
 		DRX_MPEG_STR_WIDTH_8
-	} DRXMPEGStrWidth_t, *pDRXMPEGStrWidth_t;
+	} drxmpeg_str_width_t, *pdrxmpeg_str_width_t;
 
 /* CTRL CFG MPEG ouput */
 /**
-* \struct DRXCfgMPEGOutput_t
+* \struct drx_cfg_mpeg_output_t
 * \brief Configuartion parameters for MPEG output control.
 *
 * Used by DRX_CFG_MPEG_OUTPUT, in combination with DRX_CTRL_SET_CFG and
@@ -1495,71 +1495,71 @@ STRUCTS
 */
 
 	typedef struct {
-		bool enableMPEGOutput;/**< If true, enable MPEG output      */
-		bool insertRSByte;	/**< If true, insert RS byte          */
-		bool enableParallel;	/**< If true, parallel out otherwise
+		bool enable_mpeg_output;/**< If true, enable MPEG output      */
+		bool insert_rs_byte;	/**< If true, insert RS byte          */
+		bool enable_parallel;	/**< If true, parallel out otherwise
 								     serial   */
-		bool invertDATA;	/**< If true, invert DATA signals     */
-		bool invertERR;	/**< If true, invert ERR signal       */
-		bool invertSTR;	/**< If true, invert STR signals      */
-		bool invertVAL;	/**< If true, invert VAL signals      */
-		bool invertCLK;	/**< If true, invert CLK signals      */
-		bool staticCLK;	/**< If true, static MPEG clockrate
+		bool invert_data;	/**< If true, invert DATA signals     */
+		bool invert_err;	/**< If true, invert ERR signal       */
+		bool invert_str;	/**< If true, invert STR signals      */
+		bool invert_val;	/**< If true, invert VAL signals      */
+		bool invert_clk;	/**< If true, invert CLK signals      */
+		bool static_clk;	/**< If true, static MPEG clockrate
 					     will be used, otherwise clockrate
 					     will adapt to the bitrate of the
 					     TS                               */
 		u32 bitrate;		/**< Maximum bitrate in b/s in case
 					     static clockrate is selected     */
-		DRXMPEGStrWidth_t widthSTR;
+		drxmpeg_str_width_t width_str;
 					/**< MPEG start width                 */
-	} DRXCfgMPEGOutput_t, *pDRXCfgMPEGOutput_t;
+	} drx_cfg_mpeg_output_t, *pdrx_cfg_mpeg_output_t;
 
 /* CTRL CFG SMA */
 /**
-* /struct DRXCfgSMAIO_t
+* /struct drx_cfg_smaio_t
 * smart antenna i/o.
 */
-	typedef enum DRXCfgSMAIO_t {
+	typedef enum drx_cfg_smaio_t {
 		DRX_SMA_OUTPUT = 0,
 		DRX_SMA_INPUT
-	} DRXCfgSMAIO_t, *pDRXCfgSMAIO_t;
+	} drx_cfg_smaio_t, *pdrx_cfg_smaio_t;
 
 /**
-* /struct DRXCfgSMA_t
+* /struct drx_cfg_sma_t
 * Set smart antenna.
 */
 	typedef struct {
-		DRXCfgSMAIO_t io;
-		u16 ctrlData;
-		bool smartAntInverted;
-	} DRXCfgSMA_t, *pDRXCfgSMA_t;
+		drx_cfg_smaio_t io;
+		u16 ctrl_data;
+		bool smart_ant_inverted;
+	} drx_cfg_sma_t, *pdrx_cfg_sma_t;
 
 /*========================================*/
 
 /**
-* \struct DRXI2CData_t
+* \struct drxi2c_data_t
 * \brief Data for I2C via 2nd or 3rd or etc I2C port.
 *
 * Used by DRX_CTRL_I2C_READWRITE.
-* If portNr is equal to primairy portNr BSPI2C will be used.
+* If port_nr is equal to primairy port_nr BSPI2C will be used.
 *
 */
 	typedef struct {
-		u16 portNr;	/**< I2C port number               */
-		struct i2c_device_addr *wDevAddr;
+		u16 port_nr;	/**< I2C port number               */
+		struct i2c_device_addr *w_dev_addr;
 				/**< Write device address          */
-		u16 wCount;	/**< Size of write data in bytes   */
+		u16 w_count;	/**< Size of write data in bytes   */
 		u8 *wData;	/**< Pointer to write data         */
-		struct i2c_device_addr *rDevAddr;
+		struct i2c_device_addr *r_dev_addr;
 				/**< Read device address           */
-		u16 rCount;	/**< Size of data to read in bytes */
-		u8 *rData;	/**< Pointer to read buffer        */
-	} DRXI2CData_t, *pDRXI2CData_t;
+		u16 r_count;	/**< Size of data to read in bytes */
+		u8 *r_data;	/**< Pointer to read buffer        */
+	} drxi2c_data_t, *pdrxi2c_data_t;
 
 /*========================================*/
 
 /**
-* \enum DRXAudStandard_t
+* \enum drx_aud_standard_t
 * \brief Audio standard identifier.
 *
 * Used by DRX_CTRL_SET_AUD.
@@ -1588,11 +1588,11 @@ STRUCTS
 					   /**< Automatic Standard Detection  */
 		DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN
 					   /**< used as auto and for readback */
-	} DRXAudStandard_t, *pDRXAudStandard_t;
+	} drx_aud_standard_t, *pdrx_aud_standard_t;
 
-/* CTRL_AUD_GET_STATUS    - DRXAudStatus_t */
+/* CTRL_AUD_GET_STATUS    - drx_aud_status_t */
 /**
-* \enum DRXAudNICAMStatus_t
+* \enum drx_aud_nicam_status_t
 * \brief Status of NICAM carrier.
 */
 	typedef enum {
@@ -1601,22 +1601,22 @@ STRUCTS
 		DRX_AUD_NICAM_NOT_DETECTED,
 					  /**< NICAM carrier not detected     */
 		DRX_AUD_NICAM_BAD	  /**< NICAM carrier bad quality      */
-	} DRXAudNICAMStatus_t, *pDRXAudNICAMStatus_t;
+	} drx_aud_nicam_status_t, *pdrx_aud_nicam_status_t;
 
 /**
-* \struct DRXAudStatus_t
+* \struct drx_aud_status_t
 * \brief Audio status characteristics.
 */
 	typedef struct {
 		bool stereo;		  /**< stereo detection               */
-		bool carrierA;	  /**< carrier A detected             */
-		bool carrierB;	  /**< carrier B detected             */
+		bool carrier_a;	  /**< carrier A detected             */
+		bool carrier_b;	  /**< carrier B detected             */
 		bool sap;		  /**< sap / bilingual detection      */
 		bool rds;		  /**< RDS data array present         */
-		DRXAudNICAMStatus_t nicamStatus;
+		drx_aud_nicam_status_t nicam_status;
 					  /**< status of NICAM carrier        */
-		s8 fmIdent;		  /**< FM Identification value        */
-	} DRXAudStatus_t, *pDRXAudStatus_t;
+		s8 fm_ident;		  /**< FM Identification value        */
+	} drx_aud_status_t, *pdrx_aud_status_t;
 
 /* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
 
@@ -1627,9 +1627,9 @@ STRUCTS
 	typedef struct {
 		bool valid;		  /**< RDS data validation            */
 		u16 data[18];		  /**< data from one RDS data array   */
-	} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
+	} drx_cfg_aud_rds_t, *pdrx_cfg_aud_rds_t;
 
-/* DRX_CFG_AUD_VOLUME      - DRXCfgAudVolume_t - set/get */
+/* DRX_CFG_AUD_VOLUME      - drx_cfg_aud_volume_t - set/get */
 /**
 * \enum DRXAudAVCDecayTime_t
 * \brief Automatic volume control configuration.
@@ -1640,7 +1640,7 @@ STRUCTS
 		DRX_AUD_AVC_DECAYTIME_4S, /**< level volume in  4 seconds     */
 		DRX_AUD_AVC_DECAYTIME_2S, /**< level volume in  2 seconds     */
 		DRX_AUD_AVC_DECAYTIME_20MS/**< level volume in 20 millisec    */
-	} DRXAudAVCMode_t, *pDRXAudAVCMode_t;
+	} drx_aud_avc_mode_t, *pdrx_aud_avc_mode_t;
 
 /**
 * /enum DRXAudMaxAVCGain_t
@@ -1650,7 +1650,7 @@ STRUCTS
 		DRX_AUD_AVC_MAX_GAIN_0DB, /**< maximum AVC gain  0 dB         */
 		DRX_AUD_AVC_MAX_GAIN_6DB, /**< maximum AVC gain  6 dB         */
 		DRX_AUD_AVC_MAX_GAIN_12DB /**< maximum AVC gain 12 dB         */
-	} DRXAudAVCMaxGain_t, *pDRXAudAVCMaxGain_t;
+	} drx_aud_avc_max_gain_t, *pdrx_aud_avc_max_gain_t;
 
 /**
 * /enum DRXAudMaxAVCAtten_t
@@ -1662,45 +1662,45 @@ STRUCTS
 		DRX_AUD_AVC_MAX_ATTEN_18DB,
 					  /**< maximum AVC attenuation 18 dB  */
 		DRX_AUD_AVC_MAX_ATTEN_24DB/**< maximum AVC attenuation 24 dB  */
-	} DRXAudAVCMaxAtten_t, *pDRXAudAVCMaxAtten_t;
+	} drx_aud_avc_max_atten_t, *pdrx_aud_avc_max_atten_t;
 /**
-* \struct DRXCfgAudVolume_t
+* \struct drx_cfg_aud_volume_t
 * \brief Audio volume configuration.
 */
 	typedef struct {
 		bool mute;		  /**< mute overrides volume setting  */
 		s16 volume;		  /**< volume, range -114 to 12 dB    */
-		DRXAudAVCMode_t avcMode;  /**< AVC auto volume control mode   */
-		u16 avcRefLevel;	  /**< AVC reference level            */
-		DRXAudAVCMaxGain_t avcMaxGain;
+		drx_aud_avc_mode_t avc_mode;  /**< AVC auto volume control mode   */
+		u16 avc_ref_level;	  /**< AVC reference level            */
+		drx_aud_avc_max_gain_t avc_max_gain;
 					  /**< AVC max gain selection         */
-		DRXAudAVCMaxAtten_t avcMaxAtten;
+		drx_aud_avc_max_atten_t avc_max_atten;
 					  /**< AVC max attenuation selection  */
-		s16 strengthLeft;	  /**< quasi-peak, left speaker       */
-		s16 strengthRight;	  /**< quasi-peak, right speaker      */
-	} DRXCfgAudVolume_t, *pDRXCfgAudVolume_t;
+		s16 strength_left;	  /**< quasi-peak, left speaker       */
+		s16 strength_right;	  /**< quasi-peak, right speaker      */
+	} drx_cfg_aud_volume_t, *pdrx_cfg_aud_volume_t;
 
-/* DRX_CFG_I2S_OUTPUT      - DRXCfgI2SOutput_t - set/get */
+/* DRX_CFG_I2S_OUTPUT      - drx_cfg_i2s_output_t - set/get */
 /**
-* \enum DRXI2SMode_t
+* \enum drxi2s_mode_t
 * \brief I2S output mode.
 */
 	typedef enum {
 		DRX_I2S_MODE_MASTER,	  /**< I2S is in master mode          */
 		DRX_I2S_MODE_SLAVE	  /**< I2S is in slave mode           */
-	} DRXI2SMode_t, *pDRXI2SMode_t;
+	} drxi2s_mode_t, *pdrxi2s_mode_t;
 
 /**
-* \enum DRXI2SWordLength_t
+* \enum drxi2s_word_length_t
 * \brief Width of I2S data.
 */
 	typedef enum {
 		DRX_I2S_WORDLENGTH_32 = 0,/**< I2S data is 32 bit wide        */
 		DRX_I2S_WORDLENGTH_16 = 1 /**< I2S data is 16 bit wide        */
-	} DRXI2SWordLength_t, *pDRXI2SWordLength_t;
+	} drxi2s_word_length_t, *pdrxi2s_word_length_t;
 
 /**
-* \enum DRXI2SFormat_t
+* \enum drxi2s_format_t
 * \brief Data wordstrobe alignment for I2S.
 */
 	typedef enum {
@@ -1708,34 +1708,34 @@ STRUCTS
 				    /**< I2S data and wordstrobe are aligned  */
 		DRX_I2S_FORMAT_WS_ADVANCED
 				    /**< I2S data one cycle after wordstrobe  */
-	} DRXI2SFormat_t, *pDRXI2SFormat_t;
+	} drxi2s_format_t, *pdrxi2s_format_t;
 
 /**
-* \enum DRXI2SPolarity_t
+* \enum drxi2s_polarity_t
 * \brief Polarity of I2S data.
 */
 	typedef enum {
 		DRX_I2S_POLARITY_RIGHT,/**< wordstrobe - right high, left low */
 		DRX_I2S_POLARITY_LEFT  /**< wordstrobe - right low, left high */
-	} DRXI2SPolarity_t, *pDRXI2SPolarity_t;
+	} drxi2s_polarity_t, *pdrxi2s_polarity_t;
 
 /**
-* \struct DRXCfgI2SOutput_t
+* \struct drx_cfg_i2s_output_t
 * \brief I2S output configuration.
 */
 	typedef struct {
-		bool outputEnable;	  /**< I2S output enable              */
+		bool output_enable;	  /**< I2S output enable              */
 		u32 frequency;	  /**< range from 8000-48000 Hz       */
-		DRXI2SMode_t mode;	  /**< I2S mode, master or slave      */
-		DRXI2SWordLength_t wordLength;
+		drxi2s_mode_t mode;	  /**< I2S mode, master or slave      */
+		drxi2s_word_length_t word_length;
 					  /**< I2S wordlength, 16 or 32 bits  */
-		DRXI2SPolarity_t polarity;/**< I2S wordstrobe polarity        */
-		DRXI2SFormat_t format;	  /**< I2S wordstrobe delay to data   */
-	} DRXCfgI2SOutput_t, *pDRXCfgI2SOutput_t;
+		drxi2s_polarity_t polarity;/**< I2S wordstrobe polarity        */
+		drxi2s_format_t format;	  /**< I2S wordstrobe delay to data   */
+	} drx_cfg_i2s_output_t, *pdrx_cfg_i2s_output_t;
 
 /* ------------------------------expert interface-----------------------------*/
 /**
-* /enum DRXAudFMDeemphasis_t
+* /enum drx_aud_fm_deemphasis_t
 * setting for FM-Deemphasis in audio demodulator.
 *
 */
@@ -1743,7 +1743,7 @@ STRUCTS
 		DRX_AUD_FM_DEEMPH_50US,
 		DRX_AUD_FM_DEEMPH_75US,
 		DRX_AUD_FM_DEEMPH_OFF
-	} DRXAudFMDeemphasis_t, *pDRXAudFMDeemphasis_t;
+	} drx_aud_fm_deemphasis_t, *pdrx_aud_fm_deemphasis_t;
 
 /**
 * /enum DRXAudDeviation_t
@@ -1753,17 +1753,17 @@ STRUCTS
 	typedef enum {
 		DRX_AUD_DEVIATION_NORMAL,
 		DRX_AUD_DEVIATION_HIGH
-	} DRXCfgAudDeviation_t, *pDRXCfgAudDeviation_t;
+	} drx_cfg_aud_deviation_t, *pdrx_cfg_aud_deviation_t;
 
 /**
-* /enum DRXNoCarrierOption_t
+* /enum drx_no_carrier_option_t
 * setting for carrier, mute/noise.
 *
 */
 	typedef enum {
 		DRX_NO_CARRIER_MUTE,
 		DRX_NO_CARRIER_NOISE
-	} DRXNoCarrierOption_t, *pDRXNoCarrierOption_t;
+	} drx_no_carrier_option_t, *pdrx_no_carrier_option_t;
 
 /**
 * \enum DRXAudAutoSound_t
@@ -1773,7 +1773,7 @@ STRUCTS
 		DRX_AUD_AUTO_SOUND_OFF = 0,
 		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_ON,
 		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
-	} DRXCfgAudAutoSound_t, *pDRXCfgAudAutoSound_t;
+	} drx_cfg_aud_auto_sound_t, *pdrx_cfg_aud_auto_sound_t;
 
 /**
 * \enum DRXAudASSThres_t
@@ -1783,30 +1783,30 @@ STRUCTS
 		u16 a2;	/* A2 Threshold for ASS configuration */
 		u16 btsc;	/* BTSC Threshold for ASS configuration */
 		u16 nicam;	/* Nicam Threshold for ASS configuration */
-	} DRXCfgAudASSThres_t, *pDRXCfgAudASSThres_t;
+	} drx_cfg_aud_ass_thres_t, *pdrx_cfg_aud_ass_thres_t;
 
 /**
-* \struct DRXAudCarrier_t
+* \struct drx_aud_carrier_t
 * \brief Carrier detection related parameters
 */
 	typedef struct {
 		u16 thres;	/* carrier detetcion threshold for primary carrier (A) */
-		DRXNoCarrierOption_t opt;	/* Mute or noise at no carrier detection (A) */
+		drx_no_carrier_option_t opt;	/* Mute or noise at no carrier detection (A) */
 		s32 shift;	/* DC level of incoming signal (A) */
 		s32 dco;	/* frequency adjustment (A) */
-	} DRXAudCarrier_t, *pDRXCfgAudCarrier_t;
+	} drx_aud_carrier_t, *p_drx_cfg_aud_carrier_t;
 
 /**
-* \struct DRXCfgAudCarriers_t
+* \struct drx_cfg_aud_carriers_t
 * \brief combining carrier A & B to one struct
 */
 	typedef struct {
-		DRXAudCarrier_t a;
-		DRXAudCarrier_t b;
-	} DRXCfgAudCarriers_t, *pDRXCfgAudCarriers_t;
+		drx_aud_carrier_t a;
+		drx_aud_carrier_t b;
+	} drx_cfg_aud_carriers_t, *pdrx_cfg_aud_carriers_t;
 
 /**
-* /enum DRXAudI2SSrc_t
+* /enum drx_aud_i2s_src_t
 * Selection of audio source
 */
 	typedef enum {
@@ -1814,10 +1814,10 @@ STRUCTS
 		DRX_AUD_SRC_STEREO_OR_AB,
 		DRX_AUD_SRC_STEREO_OR_A,
 		DRX_AUD_SRC_STEREO_OR_B
-	} DRXAudI2SSrc_t, *pDRXAudI2SSrc_t;
+	} drx_aud_i2s_src_t, *pdrx_aud_i2s_src_t;
 
 /**
-* \enum DRXAudI2SMatrix_t
+* \enum drx_aud_i2s_matrix_t
 * \brief Used for selecting I2S output.
 */
 	typedef enum {
@@ -1828,10 +1828,10 @@ STRUCTS
 		DRX_AUD_I2S_MATRIX_STEREO,
 					/**< A+B sound, transparant           */
 		DRX_AUD_I2S_MATRIX_MONO	/**< A+B mixed to mono sum, (L+R)/2   */
-	} DRXAudI2SMatrix_t, *pDRXAudI2SMatrix_t;
+	} drx_aud_i2s_matrix_t, *pdrx_aud_i2s_matrix_t;
 
 /**
-* /enum DRXAudFMMatrix_t
+* /enum drx_aud_fm_matrix_t
 * setting for FM-Matrix in audio demodulator.
 *
 */
@@ -1841,17 +1841,17 @@ STRUCTS
 		DRX_AUD_FM_MATRIX_KOREAN,
 		DRX_AUD_FM_MATRIX_SOUND_A,
 		DRX_AUD_FM_MATRIX_SOUND_B
-	} DRXAudFMMatrix_t, *pDRXAudFMMatrix_t;
+	} drx_aud_fm_matrix_t, *pdrx_aud_fm_matrix_t;
 
 /**
 * \struct DRXAudMatrices_t
 * \brief Mixer settings
 */
 	typedef struct {
-		DRXAudI2SSrc_t sourceI2S;
-		DRXAudI2SMatrix_t matrixI2S;
-		DRXAudFMMatrix_t matrixFm;
-	} DRXCfgAudMixer_t, *pDRXCfgAudMixer_t;
+		drx_aud_i2s_src_t source_i2s;
+		drx_aud_i2s_matrix_t matrix_i2s;
+		drx_aud_fm_matrix_t matrix_fm;
+	} drx_cfg_aud_mixer_t, *pdrx_cfg_aud_mixer_t;
 
 /**
 * \enum DRXI2SVidSync_t
@@ -1867,68 +1867,68 @@ STRUCTS
 				   /**< it is a MONOCHROME system            */
 		DRX_AUD_AVSYNC_PAL_SECAM
 				   /**< it is a PAL/SECAM system             */
-	} DRXCfgAudAVSync_t, *pDRXCfgAudAVSync_t;
+	} drx_cfg_aud_av_sync_t, *pdrx_cfg_aud_av_sync_t;
 
 /**
-* \struct DRXCfgAudPrescale_t
+* \struct drx_cfg_aud_prescale_t
 * \brief Prescalers
 */
 	typedef struct {
-		u16 fmDeviation;
-		s16 nicamGain;
-	} DRXCfgAudPrescale_t, *pDRXCfgAudPrescale_t;
+		u16 fm_deviation;
+		s16 nicam_gain;
+	} drx_cfg_aud_prescale_t, *pdrx_cfg_aud_prescale_t;
 
 /**
-* \struct DRXAudBeep_t
+* \struct drx_aud_beep_t
 * \brief Beep
 */
 	typedef struct {
 		s16 volume;	/* dB */
 		u16 frequency;	/* Hz */
 		bool mute;
-	} DRXAudBeep_t, *pDRXAudBeep_t;
+	} drx_aud_beep_t, *pdrx_aud_beep_t;
 
 /**
-* \enum DRXAudBtscDetect_t
+* \enum drx_aud_btsc_detect_t
 * \brief BTSC detetcion mode
 */
 	typedef enum {
 		DRX_BTSC_STEREO,
 		DRX_BTSC_MONO_AND_SAP
-	} DRXAudBtscDetect_t, *pDRXAudBtscDetect_t;
+	} drx_aud_btsc_detect_t, *pdrx_aud_btsc_detect_t;
 
 /**
-* \struct DRXAudData_t
+* \struct drx_aud_data_t
 * \brief Audio data structure
 */
 	typedef struct {
 		/* audio storage */
-		bool audioIsActive;
-		DRXAudStandard_t audioStandard;
-		DRXCfgI2SOutput_t i2sdata;
-		DRXCfgAudVolume_t volume;
-		DRXCfgAudAutoSound_t autoSound;
-		DRXCfgAudASSThres_t assThresholds;
-		DRXCfgAudCarriers_t carriers;
-		DRXCfgAudMixer_t mixer;
-		DRXCfgAudDeviation_t deviation;
-		DRXCfgAudAVSync_t avSync;
-		DRXCfgAudPrescale_t prescale;
-		DRXAudFMDeemphasis_t deemph;
-		DRXAudBtscDetect_t btscDetect;
+		bool audio_is_active;
+		drx_aud_standard_t audio_standard;
+		drx_cfg_i2s_output_t i2sdata;
+		drx_cfg_aud_volume_t volume;
+		drx_cfg_aud_auto_sound_t auto_sound;
+		drx_cfg_aud_ass_thres_t ass_thresholds;
+		drx_cfg_aud_carriers_t carriers;
+		drx_cfg_aud_mixer_t mixer;
+		drx_cfg_aud_deviation_t deviation;
+		drx_cfg_aud_av_sync_t av_sync;
+		drx_cfg_aud_prescale_t prescale;
+		drx_aud_fm_deemphasis_t deemph;
+		drx_aud_btsc_detect_t btsc_detect;
 		/* rds */
-		u16 rdsDataCounter;
-		bool rdsDataPresent;
-	} DRXAudData_t, *pDRXAudData_t;
+		u16 rds_data_counter;
+		bool rds_data_present;
+	} drx_aud_data_t, *pdrx_aud_data_t;
 
 /**
-* \enum DRXQamLockRange_t
+* \enum drx_qam_lock_range_t
 * \brief QAM lock range mode
 */
 	typedef enum {
 		DRX_QAM_LOCKRANGE_NORMAL,
 		DRX_QAM_LOCKRANGE_EXTENDED
-	} DRXQamLockRange_t, *pDRXQamLockRange_t;
+	} drx_qam_lock_range_t, *pdrx_qam_lock_range_t;
 
 /*============================================================================*/
 /*============================================================================*/
@@ -1937,108 +1937,108 @@ STRUCTS
 /*============================================================================*/
 
 /* Address on device */
-	typedef u32 DRXaddr_t, *pDRXaddr_t;
+	typedef u32 dr_xaddr_t, *pdr_xaddr_t;
 
 /* Protocol specific flags */
-	typedef u32 DRXflags_t, *pDRXflags_t;
+	typedef u32 dr_xflags_t, *pdr_xflags_t;
 
 /* Write block of data to device */
-	typedef int(*DRXWriteBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						   DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_write_block_func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						   dr_xaddr_t addr,	/* address of register/memory   */
 						   u16 datasize,	/* size of data in bytes        */
 						   u8 *data,	/* data to send                 */
-						   DRXflags_t flags);
+						   dr_xflags_t flags);
 
 /* Read block of data from device */
-	typedef int(*DRXReadBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						  DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_read_block_func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						  dr_xaddr_t addr,	/* address of register/memory   */
 						  u16 datasize,	/* size of data in bytes        */
 						  u8 *data,	/* receive buffer               */
-						  DRXflags_t flags);
+						  dr_xflags_t flags);
 
 /* Write 8-bits value to device */
-	typedef int(*DRXWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						  DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_write_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						  dr_xaddr_t addr,	/* address of register/memory   */
 						  u8 data,	/* data to send                 */
-						  DRXflags_t flags);
+						  dr_xflags_t flags);
 
 /* Read 8-bits value to device */
-	typedef int(*DRXReadReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						 DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_read_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						 dr_xaddr_t addr,	/* address of register/memory   */
 						 u8 *data,	/* receive buffer               */
-						 DRXflags_t flags);
+						 dr_xflags_t flags);
 
 /* Read modify write 8-bits value to device */
-	typedef int(*DRXReadModifyWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
-							    DRXaddr_t waddr,	/* write address of register   */
-							    DRXaddr_t raddr,	/* read  address of register   */
+	typedef int(*drx_read_modify_write_reg8func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
+							    dr_xaddr_t waddr,	/* write address of register   */
+							    dr_xaddr_t raddr,	/* read  address of register   */
 							    u8 wdata,	/* data to write               */
 							    u8 *rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
-	typedef int(*DRXWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						   DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_write_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						   dr_xaddr_t addr,	/* address of register/memory   */
 						   u16 data,	/* data to send                 */
-						   DRXflags_t flags);
+						   dr_xflags_t flags);
 
 /* Read 16-bits value to device */
-	typedef int(*DRXReadReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						  DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_read_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						  dr_xaddr_t addr,	/* address of register/memory   */
 						  u16 *data,	/* receive buffer               */
-						  DRXflags_t flags);
+						  dr_xflags_t flags);
 
 /* Read modify write 16-bits value to device */
-	typedef int(*DRXReadModifyWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
-							     DRXaddr_t waddr,	/* write address of register   */
-							     DRXaddr_t raddr,	/* read  address of register   */
+	typedef int(*drx_read_modify_write_reg16func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
+							     dr_xaddr_t waddr,	/* write address of register   */
+							     dr_xaddr_t raddr,	/* read  address of register   */
 							     u16 wdata,	/* data to write               */
 							     u16 *rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
-	typedef int(*DRXWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						   DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_write_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						   dr_xaddr_t addr,	/* address of register/memory   */
 						   u32 data,	/* data to send                 */
-						   DRXflags_t flags);
+						   dr_xflags_t flags);
 
 /* Read 32-bits value to device */
-	typedef int(*DRXReadReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
-						  DRXaddr_t addr,	/* address of register/memory   */
+	typedef int(*drx_read_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device        */
+						  dr_xaddr_t addr,	/* address of register/memory   */
 						  u32 *data,	/* receive buffer               */
-						  DRXflags_t flags);
+						  dr_xflags_t flags);
 
 /* Read modify write 32-bits value to device */
-	typedef int(*DRXReadModifyWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
-							     DRXaddr_t waddr,	/* write address of register   */
-							     DRXaddr_t raddr,	/* read  address of register   */
+	typedef int(*drx_read_modify_write_reg32func_t) (struct i2c_device_addr *dev_addr,	/* address of I2C device       */
+							     dr_xaddr_t waddr,	/* write address of register   */
+							     dr_xaddr_t raddr,	/* read  address of register   */
 							     u32 wdata,	/* data to write               */
 							     u32 *rdata);	/* data to read                */
 
 /**
-* \struct DRXAccessFunc_t
+* \struct drx_access_func_t
 * \brief Interface to an access protocol.
 */
 	typedef struct {
-		pDRXVersion_t protocolVersion;
-		DRXWriteBlockFunc_t writeBlockFunc;
-		DRXReadBlockFunc_t readBlockFunc;
-		DRXWriteReg8Func_t writeReg8Func;
-		DRXReadReg8Func_t readReg8Func;
-		DRXReadModifyWriteReg8Func_t readModifyWriteReg8Func;
-		DRXWriteReg16Func_t writeReg16Func;
-		DRXReadReg16Func_t readReg16Func;
-		DRXReadModifyWriteReg16Func_t readModifyWriteReg16Func;
-		DRXWriteReg32Func_t writeReg32Func;
-		DRXReadReg32Func_t readReg32Func;
-		DRXReadModifyWriteReg32Func_t readModifyWriteReg32Func;
-	} DRXAccessFunc_t, *pDRXAccessFunc_t;
+		pdrx_version_t protocolVersion;
+		drx_write_block_func_t write_block_func;
+		drx_read_block_func_t read_block_func;
+		drx_write_reg8func_t write_reg8func;
+		drx_read_reg8func_t read_reg8func;
+		drx_read_modify_write_reg8func_t read_modify_write_reg8func;
+		drx_write_reg16func_t write_reg16func;
+		drx_read_reg16func_t read_reg16func;
+		drx_read_modify_write_reg16func_t read_modify_write_reg16func;
+		drx_write_reg32func_t write_reg32func;
+		drx_read_reg32func_t read_reg32func;
+		drx_read_modify_write_reg32func_t read_modify_write_reg32func;
+	} drx_access_func_t, *pdrx_access_func_t;
 
 /* Register address and data for register dump function */
 	typedef struct {
 
-		DRXaddr_t address;
+		dr_xaddr_t address;
 		u32 data;
 
-	} DRXRegDump_t, *pDRXRegDump_t;
+	} drx_reg_dump_t, *p_drx_reg_dump_t;
 
 /*============================================================================*/
 /*============================================================================*/
@@ -2047,131 +2047,131 @@ STRUCTS
 /*============================================================================*/
 
 /**
-* \struct DRXCommonAttr_t
+* \struct drx_common_attr_t
 * \brief Set of common attributes, shared by all DRX devices.
 */
 	typedef struct {
 		/* Microcode (firmware) attributes */
 		u8 *microcode;   /**< Pointer to microcode image.           */
-		u16 microcodeSize;
+		u16 microcode_size;
 				   /**< Size of microcode image in bytes.     */
-		bool verifyMicrocode;
+		bool verify_microcode;
 				   /**< Use microcode verify or not.          */
-		DRXMcVersionRec_t mcversion;
+		drx_mc_version_rec_t mcversion;
 				   /**< Version record of microcode from file */
 
 		/* Clocks and tuner attributes */
-		s32 intermediateFreq;
+		s32 intermediate_freq;
 				     /**< IF,if tuner instance not used. (kHz)*/
-		s32 sysClockFreq;
+		s32 sys_clock_freq;
 				     /**< Systemclock frequency.  (kHz)       */
-		s32 oscClockFreq;
+		s32 osc_clock_freq;
 				     /**< Oscillator clock frequency.  (kHz)  */
-		s16 oscClockDeviation;
+		s16 osc_clock_deviation;
 				     /**< Oscillator clock deviation.  (ppm)  */
-		bool mirrorFreqSpect;
+		bool mirror_freq_spect;
 				     /**< Mirror IF frequency spectrum or not.*/
 
 		/* Initial MPEG output attributes */
-		DRXCfgMPEGOutput_t mpegCfg;
+		drx_cfg_mpeg_output_t mpeg_cfg;
 				     /**< MPEG configuration                  */
 
-		bool isOpened;     /**< if true instance is already opened. */
+		bool is_opened;     /**< if true instance is already opened. */
 
 		/* Channel scan */
-		pDRXScanParam_t scanParam;
+		p_drx_scan_param_t scan_param;
 				      /**< scan parameters                    */
-		u16 scanFreqPlanIndex;
+		u16 scan_freq_plan_index;
 				      /**< next index in freq plan            */
-		s32 scanNextFrequency;
+		s32 scan_next_frequency;
 				      /**< next freq to scan                  */
-		bool scanReady;     /**< scan ready flag                    */
-		u32 scanMaxChannels;/**< number of channels in freqplan     */
-		u32 scanChannelsScanned;
+		bool scan_ready;     /**< scan ready flag                    */
+		u32 scan_max_channels;/**< number of channels in freqplan     */
+		u32 scan_channelsScanned;
 					/**< number of channels scanned       */
 		/* Channel scan - inner loop: demod related */
-		DRXScanFunc_t scanFunction;
+		drx_scan_func_t scan_function;
 				      /**< function to check channel          */
 		/* Channel scan - inner loop: SYSObj related */
-		void *scanContext;    /**< Context Pointer of SYSObj          */
+		void *scan_context;    /**< Context Pointer of SYSObj          */
 		/* Channel scan - parameters for default DTV scan function in core driver  */
-		u16 scanDemodLockTimeout;
+		u16 scan_demod_lock_timeout;
 					 /**< millisecs to wait for lock      */
-		DRXLockStatus_t scanDesiredLock;
+		drx_lock_status_t scan_desired_lock;
 				      /**< lock requirement for channel found */
-		/* scanActive can be used by SetChannel to decide how to program the tuner,
+		/* scan_active can be used by SetChannel to decide how to program the tuner,
 		   fast or slow (but stable). Usually fast during scan. */
-		bool scanActive;    /**< true when scan routines are active */
+		bool scan_active;    /**< true when scan routines are active */
 
 		/* Power management */
-		DRXPowerMode_t currentPowerMode;
+		drx_power_mode_t current_power_mode;
 				      /**< current power management mode      */
 
 		/* Tuner */
-		u8 tunerPortNr;     /**< nr of I2C port to wich tuner is    */
-		s32 tunerMinFreqRF;
+		u8 tuner_port_nr;     /**< nr of I2C port to wich tuner is    */
+		s32 tuner_min_freq_rf;
 				      /**< minimum RF input frequency, in kHz */
-		s32 tunerMaxFreqRF;
+		s32 tuner_max_freq_rf;
 				      /**< maximum RF input frequency, in kHz */
-		bool tunerRfAgcPol; /**< if true invert RF AGC polarity     */
-		bool tunerIfAgcPol; /**< if true invert IF AGC polarity     */
-		bool tunerSlowMode; /**< if true invert IF AGC polarity     */
+		bool tuner_rf_agc_pol; /**< if true invert RF AGC polarity     */
+		bool tuner_if_agc_pol; /**< if true invert IF AGC polarity     */
+		bool tuner_slow_mode; /**< if true invert IF AGC polarity     */
 
-		DRXChannel_t currentChannel;
+		drx_channel_t current_channel;
 				      /**< current channel parameters         */
-		enum drx_standard currentStandard;
+		enum drx_standard current_standard;
 				      /**< current standard selection         */
-		enum drx_standard prevStandard;
+		enum drx_standard prev_standard;
 				      /**< previous standard selection        */
-		enum drx_standard diCacheStandard;
+		enum drx_standard di_cache_standard;
 				      /**< standard in DI cache if available  */
-		bool useBootloader; /**< use bootloader in open             */
+		bool use_bootloader; /**< use bootloader in open             */
 		u32 capabilities;   /**< capabilities flags                 */
-		u32 productId;      /**< product ID inc. metal fix number   */
+		u32 product_id;      /**< product ID inc. metal fix number   */
 
-	} DRXCommonAttr_t, *pDRXCommonAttr_t;
+	} drx_common_attr_t, *pdrx_common_attr_t;
 
 /*
 * Generic functions for DRX devices.
 */
-	typedef struct DRXDemodInstance_s *pDRXDemodInstance_t;
+	typedef struct drx_demod_instance_s *pdrx_demod_instance_t;
 
-	typedef int(*DRXOpenFunc_t) (pDRXDemodInstance_t demod);
-	typedef int(*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
-	typedef int(*DRXCtrlFunc_t) (pDRXDemodInstance_t demod,
+	typedef int(*drx_open_func_t) (pdrx_demod_instance_t demod);
+	typedef int(*drx_close_func_t) (pdrx_demod_instance_t demod);
+	typedef int(*drx_ctrl_func_t) (pdrx_demod_instance_t demod,
 					     u32 ctrl,
-					     void *ctrlData);
+					     void *ctrl_data);
 
 /**
-* \struct DRXDemodFunc_t
+* \struct drx_demod_func_t
 * \brief A stucture containing all functions of a demodulator.
 */
 	typedef struct {
-		u32 typeId;		 /**< Device type identifier.      */
-		DRXOpenFunc_t openFunc;	 /**< Pointer to Open() function.  */
-		DRXCloseFunc_t closeFunc;/**< Pointer to Close() function. */
-		DRXCtrlFunc_t ctrlFunc;	 /**< Pointer to Ctrl() function.  */
-	} DRXDemodFunc_t, *pDRXDemodFunc_t;
+		u32 type_id;		 /**< Device type identifier.      */
+		drx_open_func_t open_func;	 /**< Pointer to Open() function.  */
+		drx_close_func_t close_func;/**< Pointer to Close() function. */
+		drx_ctrl_func_t ctrl_func;	 /**< Pointer to Ctrl() function.  */
+	} drx_demod_func_t, *pdrx_demod_func_t;
 
 /**
-* \struct DRXDemodInstance_t
+* \struct drx_demod_instance_t
 * \brief Top structure of demodulator instance.
 */
-	typedef struct DRXDemodInstance_s {
+	typedef struct drx_demod_instance_s {
 		/* type specific demodulator data */
-		pDRXDemodFunc_t myDemodFunct;
+		pdrx_demod_func_t my_demod_funct;
 				    /**< demodulator functions                */
-		pDRXAccessFunc_t myAccessFunct;
+		pdrx_access_func_t my_access_funct;
 				    /**< data access protocol functions       */
-		struct tuner_instance *myTuner;
+		struct tuner_instance *my_tuner;
 				    /**< tuner instance,if NULL then baseband */
-		struct i2c_device_addr *myI2CDevAddr;
+		struct i2c_device_addr *my_i2c_dev_addr;
 				    /**< i2c address and device identifier    */
-		pDRXCommonAttr_t myCommonAttr;
+		pdrx_common_attr_t my_common_attr;
 				    /**< common DRX attributes                */
-		void *myExtAttr;    /**< device specific attributes           */
+		void *my_ext_attr;    /**< device specific attributes           */
 		/* generic demodulator data */
-	} DRXDemodInstance_t;
+	} drx_demod_instance_t;
 
 /*-------------------------------------------------------------------------
 MACROS
@@ -2466,29 +2466,29 @@ Access macros
 *
 */
 
-#define DRX_ATTR_MCRECORD(d)        ((d)->myCommonAttr->mcversion)
-#define DRX_ATTR_MIRRORFREQSPECT(d) ((d)->myCommonAttr->mirrorFreqSpect)
-#define DRX_ATTR_CURRENTPOWERMODE(d)((d)->myCommonAttr->currentPowerMode)
-#define DRX_ATTR_ISOPENED(d)        ((d)->myCommonAttr->isOpened)
-#define DRX_ATTR_USEBOOTLOADER(d)   ((d)->myCommonAttr->useBootloader)
-#define DRX_ATTR_CURRENTSTANDARD(d) ((d)->myCommonAttr->currentStandard)
-#define DRX_ATTR_PREVSTANDARD(d)    ((d)->myCommonAttr->prevStandard)
-#define DRX_ATTR_CACHESTANDARD(d)   ((d)->myCommonAttr->diCacheStandard)
-#define DRX_ATTR_CURRENTCHANNEL(d)  ((d)->myCommonAttr->currentChannel)
-#define DRX_ATTR_MICROCODE(d)       ((d)->myCommonAttr->microcode)
-#define DRX_ATTR_MICROCODESIZE(d)   ((d)->myCommonAttr->microcodeSize)
-#define DRX_ATTR_VERIFYMICROCODE(d) ((d)->myCommonAttr->verifyMicrocode)
-#define DRX_ATTR_CAPABILITIES(d)    ((d)->myCommonAttr->capabilities)
-#define DRX_ATTR_PRODUCTID(d)       ((d)->myCommonAttr->productId)
-#define DRX_ATTR_INTERMEDIATEFREQ(d) ((d)->myCommonAttr->intermediateFreq)
-#define DRX_ATTR_SYSCLOCKFREQ(d)     ((d)->myCommonAttr->sysClockFreq)
-#define DRX_ATTR_TUNERRFAGCPOL(d)   ((d)->myCommonAttr->tunerRfAgcPol)
-#define DRX_ATTR_TUNERIFAGCPOL(d)    ((d)->myCommonAttr->tunerIfAgcPol)
-#define DRX_ATTR_TUNERSLOWMODE(d)    ((d)->myCommonAttr->tunerSlowMode)
-#define DRX_ATTR_TUNERSPORTNR(d)     ((d)->myCommonAttr->tunerPortNr)
-#define DRX_ATTR_TUNER(d)           ((d)->myTuner)
-#define DRX_ATTR_I2CADDR(d)         ((d)->myI2CDevAddr->i2cAddr)
-#define DRX_ATTR_I2CDEVID(d)        ((d)->myI2CDevAddr->i2cDevId)
+#define DRX_ATTR_MCRECORD(d)        ((d)->my_common_attr->mcversion)
+#define DRX_ATTR_MIRRORFREQSPECT(d) ((d)->my_common_attr->mirror_freq_spect)
+#define DRX_ATTR_CURRENTPOWERMODE(d)((d)->my_common_attr->current_power_mode)
+#define DRX_ATTR_ISOPENED(d)        ((d)->my_common_attr->is_opened)
+#define DRX_ATTR_USEBOOTLOADER(d)   ((d)->my_common_attr->use_bootloader)
+#define DRX_ATTR_CURRENTSTANDARD(d) ((d)->my_common_attr->current_standard)
+#define DRX_ATTR_PREVSTANDARD(d)    ((d)->my_common_attr->prev_standard)
+#define DRX_ATTR_CACHESTANDARD(d)   ((d)->my_common_attr->di_cache_standard)
+#define DRX_ATTR_CURRENTCHANNEL(d)  ((d)->my_common_attr->current_channel)
+#define DRX_ATTR_MICROCODE(d)       ((d)->my_common_attr->microcode)
+#define DRX_ATTR_MICROCODESIZE(d)   ((d)->my_common_attr->microcode_size)
+#define DRX_ATTR_VERIFYMICROCODE(d) ((d)->my_common_attr->verify_microcode)
+#define DRX_ATTR_CAPABILITIES(d)    ((d)->my_common_attr->capabilities)
+#define DRX_ATTR_PRODUCTID(d)       ((d)->my_common_attr->product_id)
+#define DRX_ATTR_INTERMEDIATEFREQ(d) ((d)->my_common_attr->intermediate_freq)
+#define DRX_ATTR_SYSCLOCKFREQ(d)     ((d)->my_common_attr->sys_clock_freq)
+#define DRX_ATTR_TUNERRFAGCPOL(d)   ((d)->my_common_attr->tuner_rf_agc_pol)
+#define DRX_ATTR_TUNERIFAGCPOL(d)    ((d)->my_common_attr->tuner_if_agc_pol)
+#define DRX_ATTR_TUNERSLOWMODE(d)    ((d)->my_common_attr->tuner_slow_mode)
+#define DRX_ATTR_TUNERSPORTNR(d)     ((d)->my_common_attr->tuner_port_nr)
+#define DRX_ATTR_TUNER(d)           ((d)->my_tuner)
+#define DRX_ATTR_I2CADDR(d)         ((d)->my_i2c_dev_addr->i2c_addr)
+#define DRX_ATTR_I2CDEVID(d)        ((d)->my_i2c_dev_addr->i2c_dev_id)
 
 /**
 * \brief Actual access macro's
@@ -2564,12 +2564,12 @@ Access macros
 
 #define DRX_SET_MCVERTYPE(d, x)                           \
    do {                                                     \
-      DRX_ATTR_MCRECORD(d).auxType = (x);                   \
+      DRX_ATTR_MCRECORD(d).aux_type = (x);                   \
    } while (0)
 
 #define DRX_GET_MCVERTYPE(d, x)                           \
    do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).auxType;                   \
+      (x) = DRX_ATTR_MCRECORD(d).aux_type;                   \
    } while (0)
 
 /**************************/
@@ -2580,35 +2580,35 @@ Access macros
 
 #define DRX_SET_MCDEV(d, x)                               \
    do {                                                     \
-      DRX_ATTR_MCRECORD(d).mcDevType = (x);                 \
+      DRX_ATTR_MCRECORD(d).mc_dev_type = (x);                 \
    } while (0)
 
 #define DRX_GET_MCDEV(d, x)                               \
    do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mcDevType;                 \
+      (x) = DRX_ATTR_MCRECORD(d).mc_dev_type;                 \
    } while (0)
 
 /**************************/
 
 #define DRX_SET_MCVERSION(d, x)                           \
    do {                                                     \
-      DRX_ATTR_MCRECORD(d).mcVersion = (x);                 \
+      DRX_ATTR_MCRECORD(d).mc_version = (x);                 \
    } while (0)
 
 #define DRX_GET_MCVERSION(d, x)                           \
    do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mcVersion;                 \
+      (x) = DRX_ATTR_MCRECORD(d).mc_version;                 \
    } while (0)
 
 /**************************/
 #define DRX_SET_MCPATCH(d, x)                             \
    do {                                                     \
-      DRX_ATTR_MCRECORD(d).mcBaseVersion = (x);             \
+      DRX_ATTR_MCRECORD(d).mc_base_version = (x);             \
    } while (0)
 
 #define DRX_GET_MCPATCH(d, x)                             \
    do {                                                     \
-      (x) = DRX_ATTR_MCRECORD(d).mcBaseVersion;             \
+      (x) = DRX_ATTR_MCRECORD(d).mc_base_version;             \
    } while (0)
 
 /**************************/
@@ -2826,28 +2826,28 @@ Access macros
 
 /* Macros with device-specific handling are converted to CFG functions */
 
-#define DRX_ACCESSMACRO_SET(demod, value, cfgName, dataType)             \
+#define DRX_ACCESSMACRO_SET(demod, value, cfg_name, data_type)             \
    do {                                                                    \
-      DRXCfg_t config;                                                     \
-      dataType cfgData;                                                    \
-      config.cfgType = cfgName;                                            \
-      config.cfgData = &cfgData;                                           \
-      cfgData = value;                                                     \
-      DRX_Ctrl(demod, DRX_CTRL_SET_CFG, &config);                        \
+      drx_cfg_t config;                                                     \
+      data_type cfg_data;                                                    \
+      config.cfg_type = cfg_name;                                            \
+      config.cfg_data = &cfg_data;                                           \
+      cfg_data = value;                                                     \
+      drx_ctrl(demod, DRX_CTRL_SET_CFG, &config);                        \
    } while (0)
 
-#define DRX_ACCESSMACRO_GET(demod, value, cfgName, dataType, errorValue) \
+#define DRX_ACCESSMACRO_GET(demod, value, cfg_name, data_type, error_value) \
    do {                                                                    \
-      int cfgStatus;                                               \
-      DRXCfg_t    config;                                                  \
-      dataType    cfgData;                                                 \
-      config.cfgType = cfgName;                                            \
-      config.cfgData = &cfgData;                                           \
-      cfgStatus = DRX_Ctrl(demod, DRX_CTRL_GET_CFG, &config);            \
-      if (cfgStatus == DRX_STS_OK) {                                     \
-	 value = cfgData;                                                  \
+      int cfg_status;                                               \
+      drx_cfg_t    config;                                                  \
+      data_type    cfg_data;                                                 \
+      config.cfg_type = cfg_name;                                            \
+      config.cfg_data = &cfg_data;                                           \
+      cfg_status = drx_ctrl(demod, DRX_CTRL_GET_CFG, &config);            \
+      if (cfg_status == DRX_STS_OK) {                                     \
+	 value = cfg_data;                                                  \
       } else {                                                             \
-	 value = (dataType)errorValue;                                     \
+	 value = (data_type)error_value;                                     \
       }                                                                    \
    } while (0)
 
@@ -2869,14 +2869,14 @@ Access macros
    DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
 
 #define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t)
+	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t)
 #define DRX_GET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t, DRX_UNKNOWN)
+	 DRX_XS_CFG_AUD_BTSC_DETECT, drx_aud_btsc_detect_t, DRX_UNKNOWN)
 
 #define DRX_SET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t)
+	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t)
 #define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t, DRX_UNKNOWN)
+	 DRX_XS_CFG_QAM_LOCKRANGE, drx_qam_lock_range_t, DRX_UNKNOWN)
 
 /**
 * \brief Macro to check if std is an ATV standard
@@ -2919,16 +2919,16 @@ Access macros
 Exported FUNCTIONS
 -------------------------------------------------------------------------*/
 
-	int DRX_Init(pDRXDemodInstance_t demods[]);
+	int drx_init(pdrx_demod_instance_t demods[]);
 
-	int DRX_Term(void);
+	int drx_term(void);
 
-	int DRX_Open(pDRXDemodInstance_t demod);
+	int drx_open(pdrx_demod_instance_t demod);
 
-	int DRX_Close(pDRXDemodInstance_t demod);
+	int drx_close(pdrx_demod_instance_t demod);
 
-	int DRX_Ctrl(pDRXDemodInstance_t demod,
-			     u32 ctrl, void *ctrlData);
+	int drx_ctrl(pdrx_demod_instance_t demod,
+			     u32 ctrl, void *ctrl_data);
 
 /*-------------------------------------------------------------------------
 THE END

commit 7ef66759a3c45aa861133b8905d4f2de1a935f54
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Jan 16 11:08:15 2014 -0300

    [media] drx-j: Use checkpatch --fix to solve several issues
    
    Instead of manually fixing the issues, use the --fix experimental
    checkpatch. That solves a bunch of checkpatch issues.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index fddf491d4816..0b0787f60f98 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -128,9 +128,9 @@ int DRXBSP_I2C_Term(void);
 */
 int DRXBSP_I2C_WriteRead(struct i2c_device_addr *wDevAddr,
 					u16 wCount,
-					u8 * wData,
+					u8 *wData,
 					struct i2c_device_addr *rDevAddr,
-					u16 rCount, u8 * rData);
+					u16 rCount, u8 *rData);
 
 /**
 * \fn DRXBSP_I2C_ErrorText()
@@ -165,10 +165,10 @@ extern int DRX_I2C_Error_g;
 #define TUNER_MODE_8MHZ    0x4000	/* for 8MHz bandwidth channels        */
 
 #define TUNER_MODE_SUB_MAX 8
-#define TUNER_MODE_SUBALL  (  TUNER_MODE_SUB0 | TUNER_MODE_SUB1 | \
+#define TUNER_MODE_SUBALL  (TUNER_MODE_SUB0 | TUNER_MODE_SUB1 | \
 			      TUNER_MODE_SUB2 | TUNER_MODE_SUB3 | \
 			      TUNER_MODE_SUB4 | TUNER_MODE_SUB5 | \
-			      TUNER_MODE_SUB6 | TUNER_MODE_SUB7 )
+			      TUNER_MODE_SUB6 | TUNER_MODE_SUB7)
 
 
 enum tuner_lock_status {
@@ -182,7 +182,7 @@ struct tuner_common {
 	s32 maxFreqRF;	/* Highest RF input frequency, in kHz */
 
 	u8 subMode;	/* Index to sub-mode in use */
-	char *** subModeDescriptions;	/* Pointer to description of sub-modes */
+	char ***subModeDescriptions;	/* Pointer to description of sub-modes */
 	u8 subModes;	/* Number of available sub-modes      */
 
 	/* The following fields will be either 0, NULL or false and do not need
@@ -220,10 +220,10 @@ typedef int(*TUNERLockStatusFunc_t) (struct tuner_instance *tuner,
 typedef int(*TUNERi2cWriteReadFunc_t) (struct tuner_instance *tuner,
 						struct i2c_device_addr *
 						wDevAddr, u16 wCount,
-						u8 * wData,
+						u8 *wData,
 						struct i2c_device_addr *
 						rDevAddr, u16 rCount,
-						u8 * rData);
+						u8 *rData);
 
 struct tuner_ops {
 	TUNEROpenFunc_t openFunc;
@@ -253,8 +253,8 @@ int DRXBSP_TUNER_SetFrequency(struct tuner_instance *tuner,
 
 int DRXBSP_TUNER_GetFrequency(struct tuner_instance *tuner,
 					u32 mode,
-					s32 * RFfrequency,
-					s32 * IFfrequency);
+					s32 *RFfrequency,
+					s32 *IFfrequency);
 
 int DRXBSP_TUNER_LockStatus(struct tuner_instance *tuner,
 					enum tuner_lock_status *lockStat);
@@ -262,9 +262,9 @@ int DRXBSP_TUNER_LockStatus(struct tuner_instance *tuner,
 int DRXBSP_TUNER_DefaultI2CWriteRead(struct tuner_instance *tuner,
 						struct i2c_device_addr *wDevAddr,
 						u16 wCount,
-						u8 * wData,
+						u8 *wData,
 						struct i2c_device_addr *rDevAddr,
-						u16 rCount, u8 * rData);
+						u16 rCount, u8 *rData);
 
 int DRXBSP_HST_Init(void);
 
@@ -474,11 +474,11 @@ int DRXBSP_HST_Sleep(u32 n);
 MACROS
 -------------------------------------------------------------------------*/
 /* Macros to stringify the version number */
-#define DRX_VERSIONSTRING( MAJOR, MINOR, PATCH ) \
+#define DRX_VERSIONSTRING(MAJOR, MINOR, PATCH) \
 	 DRX_VERSIONSTRING_HELP(MAJOR)"." \
 	 DRX_VERSIONSTRING_HELP(MINOR)"." \
 	 DRX_VERSIONSTRING_HELP(PATCH)
-#define DRX_VERSIONSTRING_HELP( NUM ) #NUM
+#define DRX_VERSIONSTRING_HELP(NUM) #NUM
 
 /**
 * \brief Macro to create byte array elements from 16 bit integers.
@@ -487,29 +487,29 @@ MACROS
 * The macro takes care of the required byte order in a 16 bits word.
 * x->lowbyte(x), highbyte(x)
 */
-#define DRX_16TO8( x ) ((u8) (((u16)x)    &0xFF)), \
+#define DRX_16TO8(x) ((u8) (((u16)x) & 0xFF)), \
 			((u8)((((u16)x)>>8)&0xFF))
 
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S9TOS16(x) ((((u16)x)&0x100 )?((s16)((u16)(x)|0xFF00)):(x))
+#define DRX_S9TOS16(x) ((((u16)x)&0x100)?((s16)((u16)(x)|0xFF00)):(x))
 
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S24TODRXFREQ(x) ( ( ( (u32) x ) & 0x00800000UL ) ? \
-				 (  (s32) \
-				    ( ( (u32) x ) | 0xFF000000 ) ) : \
-				 ( (s32) x ) )
+#define DRX_S24TODRXFREQ(x) (( ( (u32) x) & 0x00800000UL ) ? \
+				 ((s32) \
+				    (( (u32) x) | 0xFF000000 ) ) : \
+				 ((s32) x) )
 
 /**
 * \brief Macro to convert 16 bit register value to a s32
 */
-#define DRX_U16TODRXFREQ(x)   (  ( x & 0x8000 ) ? \
-				 (  (s32) \
-				    ( ( (u32) x ) | 0xFFFF0000 ) ) : \
-				 ( (s32) x ) )
+#define DRX_U16TODRXFREQ(x)   (( x & 0x8000) ? \
+				 ((s32) \
+				    (( (u32) x) | 0xFFFF0000 ) ) : \
+				 ((s32) x) )
 
 /*-------------------------------------------------------------------------
 ENUM
@@ -580,7 +580,7 @@ enum drx_bandwidth {
 * \enum enum drx_mirror
 * \brief Indicate if channel spectrum is mirrored or not.
 */
-enum drx_mirror{
+enum drx_mirror {
 	DRX_MIRROR_NO = 0,   /**< Spectrum is not mirrored.           */
 	DRX_MIRROR_YES,	     /**< Spectrum is mirrored.               */
 	DRX_MIRROR_UNKNOWN = DRX_UNKNOWN,
@@ -641,7 +641,7 @@ enum drx_priority {
 * \enum enum drx_coderate
 * \brief Channel priority in case of hierarchical transmission.
 */
-enum drx_coderate{
+enum drx_coderate {
 		DRX_CODERATE_1DIV2 = 0,	/**< Code rate 1/2nd.      */
 		DRX_CODERATE_2DIV3,	/**< Code rate 2/3nd.      */
 		DRX_CODERATE_3DIV4,	/**< Code rate 3/4nd.      */
@@ -736,7 +736,7 @@ enum drx_interleave_mode {
 * \enum enum drx_carrier_mode
 * \brief Channel Carrier Mode.
 */
-enum drx_carrier_mode{
+enum drx_carrier_mode {
 	DRX_CARRIER_MULTI = 0,		/**< Multi carrier mode       */
 	DRX_CARRIER_SINGLE,		/**< Single carrier mode      */
 	DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,
@@ -748,7 +748,7 @@ enum drx_carrier_mode{
 * \enum enum drx_frame_mode
 * \brief Channel Frame Mode.
 */
-enum drx_frame_mode{
+enum drx_frame_mode {
 	DRX_FRAMEMODE_420 = 0,	 /**< 420 with variable PN  */
 	DRX_FRAMEMODE_595,	 /**< 595                   */
 	DRX_FRAMEMODE_945,	 /**< 945 with variable PN  */
@@ -766,7 +766,7 @@ enum drx_frame_mode{
 * \enum enum drx_tps_frame
 * \brief Frame number in current super-frame.
 */
-enum drx_tps_frame{
+enum drx_tps_frame {
 	DRX_TPS_FRAME1 = 0,	  /**< TPS frame 1.       */
 	DRX_TPS_FRAME2,		  /**< TPS frame 2.       */
 	DRX_TPS_FRAME3,		  /**< TPS frame 3.       */
@@ -779,7 +779,7 @@ enum drx_tps_frame{
 * \enum enum drx_ldpc
 * \brief TPS LDPC .
 */
-enum drx_ldpc{
+enum drx_ldpc {
 	DRX_LDPC_0_4 = 0,	  /**< LDPC 0.4           */
 	DRX_LDPC_0_6,		  /**< LDPC 0.6           */
 	DRX_LDPC_0_8,		  /**< LDPC 0.8           */
@@ -792,7 +792,7 @@ enum drx_ldpc{
 * \enum enum drx_pilot_mode
 * \brief Pilot modes in DTMB.
 */
-enum drx_pilot_mode{
+enum drx_pilot_mode {
 	DRX_PILOT_ON = 0,	  /**< Pilot On             */
 	DRX_PILOT_OFF,		  /**< Pilot Off            */
 	DRX_PILOT_UNKNOWN = DRX_UNKNOWN,
@@ -802,58 +802,58 @@ enum drx_pilot_mode{
 
 #define DRX_CTRL_BASE          ((u32)0)
 
-#define DRX_CTRL_NOP             ( DRX_CTRL_BASE +  0)/**< No Operation       */
-#define DRX_CTRL_PROBE_DEVICE    ( DRX_CTRL_BASE +  1)/**< Probe device       */
-
-#define DRX_CTRL_LOAD_UCODE      ( DRX_CTRL_BASE +  2)/**< Load microcode     */
-#define DRX_CTRL_VERIFY_UCODE    ( DRX_CTRL_BASE +  3)/**< Verify microcode   */
-#define DRX_CTRL_SET_CHANNEL     ( DRX_CTRL_BASE +  4)/**< Set channel        */
-#define DRX_CTRL_GET_CHANNEL     ( DRX_CTRL_BASE +  5)/**< Get channel        */
-#define DRX_CTRL_LOCK_STATUS     ( DRX_CTRL_BASE +  6)/**< Get lock status    */
-#define DRX_CTRL_SIG_QUALITY     ( DRX_CTRL_BASE +  7)/**< Get signal quality */
-#define DRX_CTRL_SIG_STRENGTH    ( DRX_CTRL_BASE +  8)/**< Get signal strength*/
-#define DRX_CTRL_RF_POWER        ( DRX_CTRL_BASE +  9)/**< Get RF power       */
-#define DRX_CTRL_CONSTEL         ( DRX_CTRL_BASE + 10)/**< Get constel point  */
-#define DRX_CTRL_SCAN_INIT       ( DRX_CTRL_BASE + 11)/**< Initialize scan    */
-#define DRX_CTRL_SCAN_NEXT       ( DRX_CTRL_BASE + 12)/**< Scan for next      */
-#define DRX_CTRL_SCAN_STOP       ( DRX_CTRL_BASE + 13)/**< Stop scan          */
-#define DRX_CTRL_TPS_INFO        ( DRX_CTRL_BASE + 14)/**< Get TPS info       */
-#define DRX_CTRL_SET_CFG         ( DRX_CTRL_BASE + 15)/**< Set configuration  */
-#define DRX_CTRL_GET_CFG         ( DRX_CTRL_BASE + 16)/**< Get configuration  */
-#define DRX_CTRL_VERSION         ( DRX_CTRL_BASE + 17)/**< Get version info   */
-#define DRX_CTRL_I2C_BRIDGE      ( DRX_CTRL_BASE + 18)/**< Open/close  bridge */
-#define DRX_CTRL_SET_STANDARD    ( DRX_CTRL_BASE + 19)/**< Set demod std      */
-#define DRX_CTRL_GET_STANDARD    ( DRX_CTRL_BASE + 20)/**< Get demod std      */
-#define DRX_CTRL_SET_OOB         ( DRX_CTRL_BASE + 21)/**< Set OOB param      */
-#define DRX_CTRL_GET_OOB         ( DRX_CTRL_BASE + 22)/**< Get OOB param      */
+#define DRX_CTRL_NOP             (DRX_CTRL_BASE +  0)/**< No Operation       */
+#define DRX_CTRL_PROBE_DEVICE    (DRX_CTRL_BASE +  1)/**< Probe device       */
+
+#define DRX_CTRL_LOAD_UCODE      (DRX_CTRL_BASE +  2)/**< Load microcode     */
+#define DRX_CTRL_VERIFY_UCODE    (DRX_CTRL_BASE +  3)/**< Verify microcode   */
+#define DRX_CTRL_SET_CHANNEL     (DRX_CTRL_BASE +  4)/**< Set channel        */
+#define DRX_CTRL_GET_CHANNEL     (DRX_CTRL_BASE +  5)/**< Get channel        */
+#define DRX_CTRL_LOCK_STATUS     (DRX_CTRL_BASE +  6)/**< Get lock status    */
+#define DRX_CTRL_SIG_QUALITY     (DRX_CTRL_BASE +  7)/**< Get signal quality */
+#define DRX_CTRL_SIG_STRENGTH    (DRX_CTRL_BASE +  8)/**< Get signal strength*/
+#define DRX_CTRL_RF_POWER        (DRX_CTRL_BASE +  9)/**< Get RF power       */
+#define DRX_CTRL_CONSTEL         (DRX_CTRL_BASE + 10)/**< Get constel point  */
+#define DRX_CTRL_SCAN_INIT       (DRX_CTRL_BASE + 11)/**< Initialize scan    */
+#define DRX_CTRL_SCAN_NEXT       (DRX_CTRL_BASE + 12)/**< Scan for next      */
+#define DRX_CTRL_SCAN_STOP       (DRX_CTRL_BASE + 13)/**< Stop scan          */
+#define DRX_CTRL_TPS_INFO        (DRX_CTRL_BASE + 14)/**< Get TPS info       */
+#define DRX_CTRL_SET_CFG         (DRX_CTRL_BASE + 15)/**< Set configuration  */
+#define DRX_CTRL_GET_CFG         (DRX_CTRL_BASE + 16)/**< Get configuration  */
+#define DRX_CTRL_VERSION         (DRX_CTRL_BASE + 17)/**< Get version info   */
+#define DRX_CTRL_I2C_BRIDGE      (DRX_CTRL_BASE + 18)/**< Open/close  bridge */
+#define DRX_CTRL_SET_STANDARD    (DRX_CTRL_BASE + 19)/**< Set demod std      */
+#define DRX_CTRL_GET_STANDARD    (DRX_CTRL_BASE + 20)/**< Get demod std      */
+#define DRX_CTRL_SET_OOB         (DRX_CTRL_BASE + 21)/**< Set OOB param      */
+#define DRX_CTRL_GET_OOB         (DRX_CTRL_BASE + 22)/**< Get OOB param      */
 #define DRX_CTRL_AUD_SET_STANDARD (DRX_CTRL_BASE + 23)/**< Set audio param    */
 #define DRX_CTRL_AUD_GET_STANDARD (DRX_CTRL_BASE + 24)/**< Get audio param    */
-#define DRX_CTRL_AUD_GET_STATUS  ( DRX_CTRL_BASE + 25)/**< Read RDS           */
-#define DRX_CTRL_AUD_BEEP        ( DRX_CTRL_BASE + 26)/**< Read RDS           */
-#define DRX_CTRL_I2C_READWRITE   ( DRX_CTRL_BASE + 27)/**< Read/write I2C     */
-#define DRX_CTRL_PROGRAM_TUNER   ( DRX_CTRL_BASE + 28)/**< Program tuner      */
+#define DRX_CTRL_AUD_GET_STATUS  (DRX_CTRL_BASE + 25)/**< Read RDS           */
+#define DRX_CTRL_AUD_BEEP        (DRX_CTRL_BASE + 26)/**< Read RDS           */
+#define DRX_CTRL_I2C_READWRITE   (DRX_CTRL_BASE + 27)/**< Read/write I2C     */
+#define DRX_CTRL_PROGRAM_TUNER   (DRX_CTRL_BASE + 28)/**< Program tuner      */
 
 	/* Professional */
-#define DRX_CTRL_MB_CFG          ( DRX_CTRL_BASE + 29) /**<                   */
-#define DRX_CTRL_MB_READ         ( DRX_CTRL_BASE + 30) /**<                   */
-#define DRX_CTRL_MB_WRITE        ( DRX_CTRL_BASE + 31) /**<                   */
-#define DRX_CTRL_MB_CONSTEL      ( DRX_CTRL_BASE + 32) /**<                   */
-#define DRX_CTRL_MB_MER          ( DRX_CTRL_BASE + 33) /**<                   */
+#define DRX_CTRL_MB_CFG          (DRX_CTRL_BASE + 29) /**<                   */
+#define DRX_CTRL_MB_READ         (DRX_CTRL_BASE + 30) /**<                   */
+#define DRX_CTRL_MB_WRITE        (DRX_CTRL_BASE + 31) /**<                   */
+#define DRX_CTRL_MB_CONSTEL      (DRX_CTRL_BASE + 32) /**<                   */
+#define DRX_CTRL_MB_MER          (DRX_CTRL_BASE + 33) /**<                   */
 
 	/* Misc */
 #define DRX_CTRL_UIO_CFG         DRX_CTRL_SET_UIO_CFG  /**< Configure UIO     */
-#define DRX_CTRL_SET_UIO_CFG     ( DRX_CTRL_BASE + 34) /**< Configure UIO     */
-#define DRX_CTRL_GET_UIO_CFG     ( DRX_CTRL_BASE + 35) /**< Configure UIO     */
-#define DRX_CTRL_UIO_READ        ( DRX_CTRL_BASE + 36) /**< Read from UIO     */
-#define DRX_CTRL_UIO_WRITE       ( DRX_CTRL_BASE + 37) /**< Write to UIO      */
-#define DRX_CTRL_READ_EVENTS     ( DRX_CTRL_BASE + 38) /**< Read events       */
-#define DRX_CTRL_HDL_EVENTS      ( DRX_CTRL_BASE + 39) /**< Handle events     */
-#define DRX_CTRL_POWER_MODE      ( DRX_CTRL_BASE + 40) /**< Set power mode    */
-#define DRX_CTRL_LOAD_FILTER     ( DRX_CTRL_BASE + 41) /**< Load chan. filter */
-#define DRX_CTRL_VALIDATE_UCODE  ( DRX_CTRL_BASE + 42) /**< Validate ucode    */
-#define DRX_CTRL_DUMP_REGISTERS  ( DRX_CTRL_BASE + 43) /**< Dump registers    */
+#define DRX_CTRL_SET_UIO_CFG     (DRX_CTRL_BASE + 34) /**< Configure UIO     */
+#define DRX_CTRL_GET_UIO_CFG     (DRX_CTRL_BASE + 35) /**< Configure UIO     */
+#define DRX_CTRL_UIO_READ        (DRX_CTRL_BASE + 36) /**< Read from UIO     */
+#define DRX_CTRL_UIO_WRITE       (DRX_CTRL_BASE + 37) /**< Write to UIO      */
+#define DRX_CTRL_READ_EVENTS     (DRX_CTRL_BASE + 38) /**< Read events       */
+#define DRX_CTRL_HDL_EVENTS      (DRX_CTRL_BASE + 39) /**< Handle events     */
+#define DRX_CTRL_POWER_MODE      (DRX_CTRL_BASE + 40) /**< Set power mode    */
+#define DRX_CTRL_LOAD_FILTER     (DRX_CTRL_BASE + 41) /**< Load chan. filter */
+#define DRX_CTRL_VALIDATE_UCODE  (DRX_CTRL_BASE + 42) /**< Validate ucode    */
+#define DRX_CTRL_DUMP_REGISTERS  (DRX_CTRL_BASE + 43) /**< Dump registers    */
 
-#define DRX_CTRL_MAX             ( DRX_CTRL_BASE + 44)	/* never to be used    */
+#define DRX_CTRL_MAX             (DRX_CTRL_BASE + 44)	/* never to be used    */
 
 /**
 * \enum DRXUCodeAction_t
@@ -1004,25 +1004,25 @@ STRUCTS
 #define DRX_CFG_BASE          ((DRXCfgType_t)0)
 #endif
 
-#define DRX_CFG_MPEG_OUTPUT         ( DRX_CFG_BASE +  0)	/* MPEG TS output    */
-#define DRX_CFG_PKTERR              ( DRX_CFG_BASE +  1)	/* Packet Error      */
-#define DRX_CFG_SYMCLK_OFFS         ( DRX_CFG_BASE +  2)	/* Symbol Clk Offset */
-#define DRX_CFG_SMA                 ( DRX_CFG_BASE +  3)	/* Smart Antenna     */
-#define DRX_CFG_PINSAFE             ( DRX_CFG_BASE +  4)	/* Pin safe mode     */
-#define DRX_CFG_SUBSTANDARD         ( DRX_CFG_BASE +  5)	/* substandard       */
-#define DRX_CFG_AUD_VOLUME          ( DRX_CFG_BASE +  6)	/* volume            */
-#define DRX_CFG_AUD_RDS             ( DRX_CFG_BASE +  7)	/* rds               */
-#define DRX_CFG_AUD_AUTOSOUND       ( DRX_CFG_BASE +  8)	/* ASS & ASC         */
-#define DRX_CFG_AUD_ASS_THRES       ( DRX_CFG_BASE +  9)	/* ASS Thresholds    */
-#define DRX_CFG_AUD_DEVIATION       ( DRX_CFG_BASE + 10)	/* Deviation         */
-#define DRX_CFG_AUD_PRESCALE        ( DRX_CFG_BASE + 11)	/* Prescale          */
-#define DRX_CFG_AUD_MIXER           ( DRX_CFG_BASE + 12)	/* Mixer             */
-#define DRX_CFG_AUD_AVSYNC          ( DRX_CFG_BASE + 13)	/* AVSync            */
-#define DRX_CFG_AUD_CARRIER         ( DRX_CFG_BASE + 14)	/* Audio carriers    */
-#define DRX_CFG_I2S_OUTPUT          ( DRX_CFG_BASE + 15)	/* I2S output        */
-#define DRX_CFG_ATV_STANDARD        ( DRX_CFG_BASE + 16)	/* ATV standard      */
-#define DRX_CFG_SQI_SPEED           ( DRX_CFG_BASE + 17)	/* SQI speed         */
-#define DRX_CTRL_CFG_MAX            ( DRX_CFG_BASE + 18)	/* never to be used  */
+#define DRX_CFG_MPEG_OUTPUT         (DRX_CFG_BASE +  0)	/* MPEG TS output    */
+#define DRX_CFG_PKTERR              (DRX_CFG_BASE +  1)	/* Packet Error      */
+#define DRX_CFG_SYMCLK_OFFS         (DRX_CFG_BASE +  2)	/* Symbol Clk Offset */
+#define DRX_CFG_SMA                 (DRX_CFG_BASE +  3)	/* Smart Antenna     */
+#define DRX_CFG_PINSAFE             (DRX_CFG_BASE +  4)	/* Pin safe mode     */
+#define DRX_CFG_SUBSTANDARD         (DRX_CFG_BASE +  5)	/* substandard       */
+#define DRX_CFG_AUD_VOLUME          (DRX_CFG_BASE +  6)	/* volume            */
+#define DRX_CFG_AUD_RDS             (DRX_CFG_BASE +  7)	/* rds               */
+#define DRX_CFG_AUD_AUTOSOUND       (DRX_CFG_BASE +  8)	/* ASS & ASC         */
+#define DRX_CFG_AUD_ASS_THRES       (DRX_CFG_BASE +  9)	/* ASS Thresholds    */
+#define DRX_CFG_AUD_DEVIATION       (DRX_CFG_BASE + 10)	/* Deviation         */
+#define DRX_CFG_AUD_PRESCALE        (DRX_CFG_BASE + 11)	/* Prescale          */
+#define DRX_CFG_AUD_MIXER           (DRX_CFG_BASE + 12)	/* Mixer             */
+#define DRX_CFG_AUD_AVSYNC          (DRX_CFG_BASE + 13)	/* AVSync            */
+#define DRX_CFG_AUD_CARRIER         (DRX_CFG_BASE + 14)	/* Audio carriers    */
+#define DRX_CFG_I2S_OUTPUT          (DRX_CFG_BASE + 15)	/* I2S output        */
+#define DRX_CFG_ATV_STANDARD        (DRX_CFG_BASE + 16)	/* ATV standard      */
+#define DRX_CFG_SQI_SPEED           (DRX_CFG_BASE + 17)	/* SQI speed         */
+#define DRX_CTRL_CFG_MAX            (DRX_CFG_BASE + 18)	/* never to be used  */
 
 #define DRX_CFG_PINS_SAFE_MODE      DRX_CFG_PINSAFE
 /*============================================================================*/
@@ -1279,7 +1279,7 @@ STRUCTS
 	typedef int(*DRXScanFunc_t) (void *scanContext,
 					     DRXScanCommand_t scanCommand,
 					     pDRXChannel_t scanChannel,
-					     bool * getNextChannel);
+					     bool *getNextChannel);
 
 /*========================================*/
 
@@ -2181,275 +2181,275 @@ Conversion from enum values to human readable form.
 /* standard */
 
 #define DRX_STR_STANDARD(x) ( \
-   ( x == DRX_STANDARD_DVBT             )  ? "DVB-T"            : \
-   ( x == DRX_STANDARD_8VSB             )  ? "8VSB"             : \
-   ( x == DRX_STANDARD_NTSC             )  ? "NTSC"             : \
-   ( x == DRX_STANDARD_PAL_SECAM_BG     )  ? "PAL/SECAM B/G"    : \
-   ( x == DRX_STANDARD_PAL_SECAM_DK     )  ? "PAL/SECAM D/K"    : \
-   ( x == DRX_STANDARD_PAL_SECAM_I      )  ? "PAL/SECAM I"      : \
-   ( x == DRX_STANDARD_PAL_SECAM_L      )  ? "PAL/SECAM L"      : \
-   ( x == DRX_STANDARD_PAL_SECAM_LP     )  ? "PAL/SECAM LP"     : \
-   ( x == DRX_STANDARD_ITU_A            )  ? "ITU-A"            : \
-   ( x == DRX_STANDARD_ITU_B            )  ? "ITU-B"            : \
-   ( x == DRX_STANDARD_ITU_C            )  ? "ITU-C"            : \
-   ( x == DRX_STANDARD_ITU_D            )  ? "ITU-D"            : \
-   ( x == DRX_STANDARD_FM               )  ? "FM"               : \
-   ( x == DRX_STANDARD_DTMB             )  ? "DTMB"             : \
-   ( x == DRX_STANDARD_AUTO             )  ? "Auto"             : \
-   ( x == DRX_STANDARD_UNKNOWN          )  ? "Unknown"          : \
-					     "(Invalid)"  )
+   (x == DRX_STANDARD_DVBT)  ? "DVB-T"            : \
+   (x == DRX_STANDARD_8VSB)  ? "8VSB"             : \
+   (x == DRX_STANDARD_NTSC)  ? "NTSC"             : \
+   (x == DRX_STANDARD_PAL_SECAM_BG)  ? "PAL/SECAM B/G"    : \
+   (x == DRX_STANDARD_PAL_SECAM_DK)  ? "PAL/SECAM D/K"    : \
+   (x == DRX_STANDARD_PAL_SECAM_I)  ? "PAL/SECAM I"      : \
+   (x == DRX_STANDARD_PAL_SECAM_L)  ? "PAL/SECAM L"      : \
+   (x == DRX_STANDARD_PAL_SECAM_LP)  ? "PAL/SECAM LP"     : \
+   (x == DRX_STANDARD_ITU_A)  ? "ITU-A"            : \
+   (x == DRX_STANDARD_ITU_B)  ? "ITU-B"            : \
+   (x == DRX_STANDARD_ITU_C)  ? "ITU-C"            : \
+   (x == DRX_STANDARD_ITU_D)  ? "ITU-D"            : \
+   (x == DRX_STANDARD_FM)  ? "FM"               : \
+   (x == DRX_STANDARD_DTMB)  ? "DTMB"             : \
+   (x == DRX_STANDARD_AUTO)  ? "Auto"             : \
+   (x == DRX_STANDARD_UNKNOWN)  ? "Unknown"          : \
+					     "(Invalid)")
 
 /* channel */
 
 #define DRX_STR_BANDWIDTH(x) ( \
-   ( x == DRX_BANDWIDTH_8MHZ           )  ?  "8 MHz"            : \
-   ( x == DRX_BANDWIDTH_7MHZ           )  ?  "7 MHz"            : \
-   ( x == DRX_BANDWIDTH_6MHZ           )  ?  "6 MHz"            : \
-   ( x == DRX_BANDWIDTH_AUTO           )  ?  "Auto"             : \
-   ( x == DRX_BANDWIDTH_UNKNOWN        )  ?  "Unknown"          : \
-					     "(Invalid)"  )
+   (x == DRX_BANDWIDTH_8MHZ)  ?  "8 MHz"            : \
+   (x == DRX_BANDWIDTH_7MHZ)  ?  "7 MHz"            : \
+   (x == DRX_BANDWIDTH_6MHZ)  ?  "6 MHz"            : \
+   (x == DRX_BANDWIDTH_AUTO)  ?  "Auto"             : \
+   (x == DRX_BANDWIDTH_UNKNOWN)  ?  "Unknown"          : \
+					     "(Invalid)")
 #define DRX_STR_FFTMODE(x) ( \
-   ( x == DRX_FFTMODE_2K               )  ?  "2k"               : \
-   ( x == DRX_FFTMODE_4K               )  ?  "4k"               : \
-   ( x == DRX_FFTMODE_8K               )  ?  "8k"               : \
-   ( x == DRX_FFTMODE_AUTO             )  ?  "Auto"             : \
-   ( x == DRX_FFTMODE_UNKNOWN          )  ?  "Unknown"          : \
-					     "(Invalid)"  )
+   (x == DRX_FFTMODE_2K)  ?  "2k"               : \
+   (x == DRX_FFTMODE_4K)  ?  "4k"               : \
+   (x == DRX_FFTMODE_8K)  ?  "8k"               : \
+   (x == DRX_FFTMODE_AUTO)  ?  "Auto"             : \
+   (x == DRX_FFTMODE_UNKNOWN)  ?  "Unknown"          : \
+					     "(Invalid)")
 #define DRX_STR_GUARD(x) ( \
-   ( x == DRX_GUARD_1DIV32             )  ?  "1/32nd"           : \
-   ( x == DRX_GUARD_1DIV16             )  ?  "1/16th"           : \
-   ( x == DRX_GUARD_1DIV8              )  ?  "1/8th"            : \
-   ( x == DRX_GUARD_1DIV4              )  ?  "1/4th"            : \
-   ( x == DRX_GUARD_AUTO               )  ?  "Auto"             : \
-   ( x == DRX_GUARD_UNKNOWN            )  ?  "Unknown"          : \
-					     "(Invalid)"  )
+   (x == DRX_GUARD_1DIV32)  ?  "1/32nd"           : \
+   (x == DRX_GUARD_1DIV16)  ?  "1/16th"           : \
+   (x == DRX_GUARD_1DIV8)  ?  "1/8th"            : \
+   (x == DRX_GUARD_1DIV4)  ?  "1/4th"            : \
+   (x == DRX_GUARD_AUTO)  ?  "Auto"             : \
+   (x == DRX_GUARD_UNKNOWN)  ?  "Unknown"          : \
+					     "(Invalid)")
 #define DRX_STR_CONSTELLATION(x) ( \
-   ( x == DRX_CONSTELLATION_BPSK       )  ?  "BPSK"            : \
-   ( x == DRX_CONSTELLATION_QPSK       )  ?  "QPSK"            : \
-   ( x == DRX_CONSTELLATION_PSK8       )  ?  "PSK8"            : \
-   ( x == DRX_CONSTELLATION_QAM16      )  ?  "QAM16"           : \
-   ( x == DRX_CONSTELLATION_QAM32      )  ?  "QAM32"           : \
-   ( x == DRX_CONSTELLATION_QAM64      )  ?  "QAM64"           : \
-   ( x == DRX_CONSTELLATION_QAM128     )  ?  "QAM128"          : \
-   ( x == DRX_CONSTELLATION_QAM256     )  ?  "QAM256"          : \
-   ( x == DRX_CONSTELLATION_QAM512     )  ?  "QAM512"          : \
-   ( x == DRX_CONSTELLATION_QAM1024    )  ?  "QAM1024"         : \
-   ( x == DRX_CONSTELLATION_QPSK_NR    )  ?  "QPSK_NR"            : \
-   ( x == DRX_CONSTELLATION_AUTO       )  ?  "Auto"            : \
-   ( x == DRX_CONSTELLATION_UNKNOWN    )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_CONSTELLATION_BPSK)  ?  "BPSK"            : \
+   (x == DRX_CONSTELLATION_QPSK)  ?  "QPSK"            : \
+   (x == DRX_CONSTELLATION_PSK8)  ?  "PSK8"            : \
+   (x == DRX_CONSTELLATION_QAM16)  ?  "QAM16"           : \
+   (x == DRX_CONSTELLATION_QAM32)  ?  "QAM32"           : \
+   (x == DRX_CONSTELLATION_QAM64)  ?  "QAM64"           : \
+   (x == DRX_CONSTELLATION_QAM128)  ?  "QAM128"          : \
+   (x == DRX_CONSTELLATION_QAM256)  ?  "QAM256"          : \
+   (x == DRX_CONSTELLATION_QAM512)  ?  "QAM512"          : \
+   (x == DRX_CONSTELLATION_QAM1024)  ?  "QAM1024"         : \
+   (x == DRX_CONSTELLATION_QPSK_NR)  ?  "QPSK_NR"            : \
+   (x == DRX_CONSTELLATION_AUTO)  ?  "Auto"            : \
+   (x == DRX_CONSTELLATION_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 #define DRX_STR_CODERATE(x) ( \
-   ( x == DRX_CODERATE_1DIV2           )  ?  "1/2nd"           : \
-   ( x == DRX_CODERATE_2DIV3           )  ?  "2/3rd"           : \
-   ( x == DRX_CODERATE_3DIV4           )  ?  "3/4th"           : \
-   ( x == DRX_CODERATE_5DIV6           )  ?  "5/6th"           : \
-   ( x == DRX_CODERATE_7DIV8           )  ?  "7/8th"           : \
-   ( x == DRX_CODERATE_AUTO            )  ?  "Auto"            : \
-   ( x == DRX_CODERATE_UNKNOWN         )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_CODERATE_1DIV2)  ?  "1/2nd"           : \
+   (x == DRX_CODERATE_2DIV3)  ?  "2/3rd"           : \
+   (x == DRX_CODERATE_3DIV4)  ?  "3/4th"           : \
+   (x == DRX_CODERATE_5DIV6)  ?  "5/6th"           : \
+   (x == DRX_CODERATE_7DIV8)  ?  "7/8th"           : \
+   (x == DRX_CODERATE_AUTO)  ?  "Auto"            : \
+   (x == DRX_CODERATE_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 #define DRX_STR_HIERARCHY(x) ( \
-   ( x == DRX_HIERARCHY_NONE           )  ?  "None"            : \
-   ( x == DRX_HIERARCHY_ALPHA1         )  ?  "Alpha=1"         : \
-   ( x == DRX_HIERARCHY_ALPHA2         )  ?  "Alpha=2"         : \
-   ( x == DRX_HIERARCHY_ALPHA4         )  ?  "Alpha=4"         : \
-   ( x == DRX_HIERARCHY_AUTO           )  ?  "Auto"            : \
-   ( x == DRX_HIERARCHY_UNKNOWN        )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_HIERARCHY_NONE)  ?  "None"            : \
+   (x == DRX_HIERARCHY_ALPHA1)  ?  "Alpha=1"         : \
+   (x == DRX_HIERARCHY_ALPHA2)  ?  "Alpha=2"         : \
+   (x == DRX_HIERARCHY_ALPHA4)  ?  "Alpha=4"         : \
+   (x == DRX_HIERARCHY_AUTO)  ?  "Auto"            : \
+   (x == DRX_HIERARCHY_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 #define DRX_STR_PRIORITY(x) ( \
-   ( x == DRX_PRIORITY_LOW             )  ?  "Low"             : \
-   ( x == DRX_PRIORITY_HIGH            )  ?  "High"            : \
-   ( x == DRX_PRIORITY_UNKNOWN         )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_PRIORITY_LOW)  ?  "Low"             : \
+   (x == DRX_PRIORITY_HIGH)  ?  "High"            : \
+   (x == DRX_PRIORITY_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 #define DRX_STR_MIRROR(x) ( \
-   ( x == DRX_MIRROR_NO                )  ?  "Normal"          : \
-   ( x == DRX_MIRROR_YES               )  ?  "Mirrored"        : \
-   ( x == DRX_MIRROR_AUTO              )  ?  "Auto"            : \
-   ( x == DRX_MIRROR_UNKNOWN           )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_MIRROR_NO)  ?  "Normal"          : \
+   (x == DRX_MIRROR_YES)  ?  "Mirrored"        : \
+   (x == DRX_MIRROR_AUTO)  ?  "Auto"            : \
+   (x == DRX_MIRROR_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 #define DRX_STR_CLASSIFICATION(x) ( \
-   ( x == DRX_CLASSIFICATION_GAUSS     )  ?  "Gaussion"        : \
-   ( x == DRX_CLASSIFICATION_HVY_GAUSS )  ?  "Heavy Gaussion"  : \
-   ( x == DRX_CLASSIFICATION_COCHANNEL )  ?  "Co-channel"      : \
-   ( x == DRX_CLASSIFICATION_STATIC    )  ?  "Static echo"     : \
-   ( x == DRX_CLASSIFICATION_MOVING    )  ?  "Moving echo"     : \
-   ( x == DRX_CLASSIFICATION_ZERODB    )  ?  "Zero dB echo"    : \
-   ( x == DRX_CLASSIFICATION_UNKNOWN   )  ?  "Unknown"         : \
-   ( x == DRX_CLASSIFICATION_AUTO      )  ?  "Auto"            : \
-					     "(Invalid)" )
+   (x == DRX_CLASSIFICATION_GAUSS)  ?  "Gaussion"        : \
+   (x == DRX_CLASSIFICATION_HVY_GAUSS)  ?  "Heavy Gaussion"  : \
+   (x == DRX_CLASSIFICATION_COCHANNEL)  ?  "Co-channel"      : \
+   (x == DRX_CLASSIFICATION_STATIC)  ?  "Static echo"     : \
+   (x == DRX_CLASSIFICATION_MOVING)  ?  "Moving echo"     : \
+   (x == DRX_CLASSIFICATION_ZERODB)  ?  "Zero dB echo"    : \
+   (x == DRX_CLASSIFICATION_UNKNOWN)  ?  "Unknown"         : \
+   (x == DRX_CLASSIFICATION_AUTO)  ?  "Auto"            : \
+					     "(Invalid)")
 
 #define DRX_STR_INTERLEAVEMODE(x) ( \
-   ( x == DRX_INTERLEAVEMODE_I128_J1     ) ? "I128_J1"         : \
-   ( x == DRX_INTERLEAVEMODE_I128_J1_V2  ) ? "I128_J1_V2"      : \
-   ( x == DRX_INTERLEAVEMODE_I128_J2     ) ? "I128_J2"         : \
-   ( x == DRX_INTERLEAVEMODE_I64_J2      ) ? "I64_J2"          : \
-   ( x == DRX_INTERLEAVEMODE_I128_J3     ) ? "I128_J3"         : \
-   ( x == DRX_INTERLEAVEMODE_I32_J4      ) ? "I32_J4"          : \
-   ( x == DRX_INTERLEAVEMODE_I128_J4     ) ? "I128_J4"         : \
-   ( x == DRX_INTERLEAVEMODE_I16_J8      ) ? "I16_J8"          : \
-   ( x == DRX_INTERLEAVEMODE_I128_J5     ) ? "I128_J5"         : \
-   ( x == DRX_INTERLEAVEMODE_I8_J16      ) ? "I8_J16"          : \
-   ( x == DRX_INTERLEAVEMODE_I128_J6     ) ? "I128_J6"         : \
-   ( x == DRX_INTERLEAVEMODE_RESERVED_11 ) ? "Reserved 11"     : \
-   ( x == DRX_INTERLEAVEMODE_I128_J7     ) ? "I128_J7"         : \
-   ( x == DRX_INTERLEAVEMODE_RESERVED_13 ) ? "Reserved 13"     : \
-   ( x == DRX_INTERLEAVEMODE_I128_J8     ) ? "I128_J8"         : \
-   ( x == DRX_INTERLEAVEMODE_RESERVED_15 ) ? "Reserved 15"     : \
-   ( x == DRX_INTERLEAVEMODE_I12_J17     ) ? "I12_J17"         : \
-   ( x == DRX_INTERLEAVEMODE_I5_J4       ) ? "I5_J4"           : \
-   ( x == DRX_INTERLEAVEMODE_B52_M240    ) ? "B52_M240"        : \
-   ( x == DRX_INTERLEAVEMODE_B52_M720    ) ? "B52_M720"        : \
-   ( x == DRX_INTERLEAVEMODE_B52_M48     ) ? "B52_M48"         : \
-   ( x == DRX_INTERLEAVEMODE_B52_M0      ) ? "B52_M0"          : \
-   ( x == DRX_INTERLEAVEMODE_UNKNOWN     ) ? "Unknown"         : \
-   ( x == DRX_INTERLEAVEMODE_AUTO        ) ? "Auto"            : \
-					     "(Invalid)" )
+   (x == DRX_INTERLEAVEMODE_I128_J1) ? "I128_J1"         : \
+   (x == DRX_INTERLEAVEMODE_I128_J1_V2) ? "I128_J1_V2"      : \
+   (x == DRX_INTERLEAVEMODE_I128_J2) ? "I128_J2"         : \
+   (x == DRX_INTERLEAVEMODE_I64_J2) ? "I64_J2"          : \
+   (x == DRX_INTERLEAVEMODE_I128_J3) ? "I128_J3"         : \
+   (x == DRX_INTERLEAVEMODE_I32_J4) ? "I32_J4"          : \
+   (x == DRX_INTERLEAVEMODE_I128_J4) ? "I128_J4"         : \
+   (x == DRX_INTERLEAVEMODE_I16_J8) ? "I16_J8"          : \
+   (x == DRX_INTERLEAVEMODE_I128_J5) ? "I128_J5"         : \
+   (x == DRX_INTERLEAVEMODE_I8_J16) ? "I8_J16"          : \
+   (x == DRX_INTERLEAVEMODE_I128_J6) ? "I128_J6"         : \
+   (x == DRX_INTERLEAVEMODE_RESERVED_11) ? "Reserved 11"     : \
+   (x == DRX_INTERLEAVEMODE_I128_J7) ? "I128_J7"         : \
+   (x == DRX_INTERLEAVEMODE_RESERVED_13) ? "Reserved 13"     : \
+   (x == DRX_INTERLEAVEMODE_I128_J8) ? "I128_J8"         : \
+   (x == DRX_INTERLEAVEMODE_RESERVED_15) ? "Reserved 15"     : \
+   (x == DRX_INTERLEAVEMODE_I12_J17) ? "I12_J17"         : \
+   (x == DRX_INTERLEAVEMODE_I5_J4) ? "I5_J4"           : \
+   (x == DRX_INTERLEAVEMODE_B52_M240) ? "B52_M240"        : \
+   (x == DRX_INTERLEAVEMODE_B52_M720) ? "B52_M720"        : \
+   (x == DRX_INTERLEAVEMODE_B52_M48) ? "B52_M48"         : \
+   (x == DRX_INTERLEAVEMODE_B52_M0) ? "B52_M0"          : \
+   (x == DRX_INTERLEAVEMODE_UNKNOWN) ? "Unknown"         : \
+   (x == DRX_INTERLEAVEMODE_AUTO) ? "Auto"            : \
+					     "(Invalid)")
 
 #define DRX_STR_LDPC(x) ( \
-   ( x == DRX_LDPC_0_4                   ) ? "0.4"             : \
-   ( x == DRX_LDPC_0_6                   ) ? "0.6"             : \
-   ( x == DRX_LDPC_0_8                   ) ? "0.8"             : \
-   ( x == DRX_LDPC_AUTO                  ) ? "Auto"            : \
-   ( x == DRX_LDPC_UNKNOWN               ) ? "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_LDPC_0_4) ? "0.4"             : \
+   (x == DRX_LDPC_0_6) ? "0.6"             : \
+   (x == DRX_LDPC_0_8) ? "0.8"             : \
+   (x == DRX_LDPC_AUTO) ? "Auto"            : \
+   (x == DRX_LDPC_UNKNOWN) ? "Unknown"         : \
+					     "(Invalid)")
 
 #define DRX_STR_CARRIER(x) ( \
-   ( x == DRX_CARRIER_MULTI              ) ? "Multi"           : \
-   ( x == DRX_CARRIER_SINGLE             ) ? "Single"          : \
-   ( x == DRX_CARRIER_AUTO               ) ? "Auto"            : \
-   ( x == DRX_CARRIER_UNKNOWN            ) ? "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_CARRIER_MULTI) ? "Multi"           : \
+   (x == DRX_CARRIER_SINGLE) ? "Single"          : \
+   (x == DRX_CARRIER_AUTO) ? "Auto"            : \
+   (x == DRX_CARRIER_UNKNOWN) ? "Unknown"         : \
+					     "(Invalid)")
 
 #define DRX_STR_FRAMEMODE(x) ( \
-   ( x == DRX_FRAMEMODE_420          )  ? "420"                : \
-   ( x == DRX_FRAMEMODE_595          )  ? "595"                : \
-   ( x == DRX_FRAMEMODE_945          )  ? "945"                : \
-   ( x == DRX_FRAMEMODE_420_FIXED_PN )  ? "420 with fixed PN"  : \
-   ( x == DRX_FRAMEMODE_945_FIXED_PN )  ? "945 with fixed PN"  : \
-   ( x == DRX_FRAMEMODE_AUTO         )  ? "Auto"               : \
-   ( x == DRX_FRAMEMODE_UNKNOWN      )  ? "Unknown"            : \
-					  "(Invalid)" )
+   (x == DRX_FRAMEMODE_420)  ? "420"                : \
+   (x == DRX_FRAMEMODE_595)  ? "595"                : \
+   (x == DRX_FRAMEMODE_945)  ? "945"                : \
+   (x == DRX_FRAMEMODE_420_FIXED_PN)  ? "420 with fixed PN"  : \
+   (x == DRX_FRAMEMODE_945_FIXED_PN)  ? "945 with fixed PN"  : \
+   (x == DRX_FRAMEMODE_AUTO)  ? "Auto"               : \
+   (x == DRX_FRAMEMODE_UNKNOWN)  ? "Unknown"            : \
+					  "(Invalid)")
 
 #define DRX_STR_PILOT(x) ( \
-   ( x == DRX_PILOT_ON                 ) ?   "On"              : \
-   ( x == DRX_PILOT_OFF                ) ?   "Off"             : \
-   ( x == DRX_PILOT_AUTO               ) ?   "Auto"            : \
-   ( x == DRX_PILOT_UNKNOWN            ) ?   "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_PILOT_ON) ?   "On"              : \
+   (x == DRX_PILOT_OFF) ?   "Off"             : \
+   (x == DRX_PILOT_AUTO) ?   "Auto"            : \
+   (x == DRX_PILOT_UNKNOWN) ?   "Unknown"         : \
+					     "(Invalid)")
 /* TPS */
 
 #define DRX_STR_TPS_FRAME(x)  ( \
-   ( x == DRX_TPS_FRAME1               )  ?  "Frame1"          : \
-   ( x == DRX_TPS_FRAME2               )  ?  "Frame2"          : \
-   ( x == DRX_TPS_FRAME3               )  ?  "Frame3"          : \
-   ( x == DRX_TPS_FRAME4               )  ?  "Frame4"          : \
-   ( x == DRX_TPS_FRAME_UNKNOWN        )  ?  "Unknown"         : \
-					     "(Invalid)" )
+   (x == DRX_TPS_FRAME1)  ?  "Frame1"          : \
+   (x == DRX_TPS_FRAME2)  ?  "Frame2"          : \
+   (x == DRX_TPS_FRAME3)  ?  "Frame3"          : \
+   (x == DRX_TPS_FRAME4)  ?  "Frame4"          : \
+   (x == DRX_TPS_FRAME_UNKNOWN)  ?  "Unknown"         : \
+					     "(Invalid)")
 
 /* lock status */
 
 #define DRX_STR_LOCKSTATUS(x) ( \
-   ( x == DRX_NEVER_LOCK               )  ?  "Never"           : \
-   ( x == DRX_NOT_LOCKED               )  ?  "No"              : \
-   ( x == DRX_LOCKED                   )  ?  "Locked"          : \
-   ( x == DRX_LOCK_STATE_1             )  ?  "Lock state 1"    : \
-   ( x == DRX_LOCK_STATE_2             )  ?  "Lock state 2"    : \
-   ( x == DRX_LOCK_STATE_3             )  ?  "Lock state 3"    : \
-   ( x == DRX_LOCK_STATE_4             )  ?  "Lock state 4"    : \
-   ( x == DRX_LOCK_STATE_5             )  ?  "Lock state 5"    : \
-   ( x == DRX_LOCK_STATE_6             )  ?  "Lock state 6"    : \
-   ( x == DRX_LOCK_STATE_7             )  ?  "Lock state 7"    : \
-   ( x == DRX_LOCK_STATE_8             )  ?  "Lock state 8"    : \
-   ( x == DRX_LOCK_STATE_9             )  ?  "Lock state 9"    : \
-					     "(Invalid)" )
+   (x == DRX_NEVER_LOCK)  ?  "Never"           : \
+   (x == DRX_NOT_LOCKED)  ?  "No"              : \
+   (x == DRX_LOCKED)  ?  "Locked"          : \
+   (x == DRX_LOCK_STATE_1)  ?  "Lock state 1"    : \
+   (x == DRX_LOCK_STATE_2)  ?  "Lock state 2"    : \
+   (x == DRX_LOCK_STATE_3)  ?  "Lock state 3"    : \
+   (x == DRX_LOCK_STATE_4)  ?  "Lock state 4"    : \
+   (x == DRX_LOCK_STATE_5)  ?  "Lock state 5"    : \
+   (x == DRX_LOCK_STATE_6)  ?  "Lock state 6"    : \
+   (x == DRX_LOCK_STATE_7)  ?  "Lock state 7"    : \
+   (x == DRX_LOCK_STATE_8)  ?  "Lock state 8"    : \
+   (x == DRX_LOCK_STATE_9)  ?  "Lock state 9"    : \
+					     "(Invalid)")
 
 /* version information , modules */
 #define DRX_STR_MODULE(x) ( \
-   ( x == DRX_MODULE_DEVICE            )  ?  "Device"                : \
-   ( x == DRX_MODULE_MICROCODE         )  ?  "Microcode"             : \
-   ( x == DRX_MODULE_DRIVERCORE        )  ?  "CoreDriver"            : \
-   ( x == DRX_MODULE_DEVICEDRIVER      )  ?  "DeviceDriver"          : \
-   ( x == DRX_MODULE_BSP_I2C           )  ?  "BSP I2C"               : \
-   ( x == DRX_MODULE_BSP_TUNER         )  ?  "BSP Tuner"             : \
-   ( x == DRX_MODULE_BSP_HOST          )  ?  "BSP Host"              : \
-   ( x == DRX_MODULE_DAP               )  ?  "Data Access Protocol"  : \
-   ( x == DRX_MODULE_UNKNOWN           )  ?  "Unknown"               : \
-					     "(Invalid)" )
+   (x == DRX_MODULE_DEVICE)  ?  "Device"                : \
+   (x == DRX_MODULE_MICROCODE)  ?  "Microcode"             : \
+   (x == DRX_MODULE_DRIVERCORE)  ?  "CoreDriver"            : \
+   (x == DRX_MODULE_DEVICEDRIVER)  ?  "DeviceDriver"          : \
+   (x == DRX_MODULE_BSP_I2C)  ?  "BSP I2C"               : \
+   (x == DRX_MODULE_BSP_TUNER)  ?  "BSP Tuner"             : \
+   (x == DRX_MODULE_BSP_HOST)  ?  "BSP Host"              : \
+   (x == DRX_MODULE_DAP)  ?  "Data Access Protocol"  : \
+   (x == DRX_MODULE_UNKNOWN)  ?  "Unknown"               : \
+					     "(Invalid)")
 
 #define DRX_STR_POWER_MODE(x) ( \
-   ( x == DRX_POWER_UP                 )  ?  "DRX_POWER_UP    "  : \
-   ( x == DRX_POWER_MODE_1             )  ?  "DRX_POWER_MODE_1"  : \
-   ( x == DRX_POWER_MODE_2             )  ?  "DRX_POWER_MODE_2"  : \
-   ( x == DRX_POWER_MODE_3             )  ?  "DRX_POWER_MODE_3"  : \
-   ( x == DRX_POWER_MODE_4             )  ?  "DRX_POWER_MODE_4"  : \
-   ( x == DRX_POWER_MODE_5             )  ?  "DRX_POWER_MODE_5"  : \
-   ( x == DRX_POWER_MODE_6             )  ?  "DRX_POWER_MODE_6"  : \
-   ( x == DRX_POWER_MODE_7             )  ?  "DRX_POWER_MODE_7"  : \
-   ( x == DRX_POWER_MODE_8             )  ?  "DRX_POWER_MODE_8"  : \
-   ( x == DRX_POWER_MODE_9             )  ?  "DRX_POWER_MODE_9"  : \
-   ( x == DRX_POWER_MODE_10            )  ?  "DRX_POWER_MODE_10" : \
-   ( x == DRX_POWER_MODE_11            )  ?  "DRX_POWER_MODE_11" : \
-   ( x == DRX_POWER_MODE_12            )  ?  "DRX_POWER_MODE_12" : \
-   ( x == DRX_POWER_MODE_13            )  ?  "DRX_POWER_MODE_13" : \
-   ( x == DRX_POWER_MODE_14            )  ?  "DRX_POWER_MODE_14" : \
-   ( x == DRX_POWER_MODE_15            )  ?  "DRX_POWER_MODE_15" : \
-   ( x == DRX_POWER_MODE_16            )  ?  "DRX_POWER_MODE_16" : \
-   ( x == DRX_POWER_DOWN               )  ?  "DRX_POWER_DOWN  " : \
-					     "(Invalid)" )
+   (x == DRX_POWER_UP)  ?  "DRX_POWER_UP    "  : \
+   (x == DRX_POWER_MODE_1)  ?  "DRX_POWER_MODE_1"  : \
+   (x == DRX_POWER_MODE_2)  ?  "DRX_POWER_MODE_2"  : \
+   (x == DRX_POWER_MODE_3)  ?  "DRX_POWER_MODE_3"  : \
+   (x == DRX_POWER_MODE_4)  ?  "DRX_POWER_MODE_4"  : \
+   (x == DRX_POWER_MODE_5)  ?  "DRX_POWER_MODE_5"  : \
+   (x == DRX_POWER_MODE_6)  ?  "DRX_POWER_MODE_6"  : \
+   (x == DRX_POWER_MODE_7)  ?  "DRX_POWER_MODE_7"  : \
+   (x == DRX_POWER_MODE_8)  ?  "DRX_POWER_MODE_8"  : \
+   (x == DRX_POWER_MODE_9)  ?  "DRX_POWER_MODE_9"  : \
+   (x == DRX_POWER_MODE_10)  ?  "DRX_POWER_MODE_10" : \
+   (x == DRX_POWER_MODE_11)  ?  "DRX_POWER_MODE_11" : \
+   (x == DRX_POWER_MODE_12)  ?  "DRX_POWER_MODE_12" : \
+   (x == DRX_POWER_MODE_13)  ?  "DRX_POWER_MODE_13" : \
+   (x == DRX_POWER_MODE_14)  ?  "DRX_POWER_MODE_14" : \
+   (x == DRX_POWER_MODE_15)  ?  "DRX_POWER_MODE_15" : \
+   (x == DRX_POWER_MODE_16)  ?  "DRX_POWER_MODE_16" : \
+   (x == DRX_POWER_DOWN)  ?  "DRX_POWER_DOWN  " : \
+					     "(Invalid)")
 
 #define DRX_STR_OOB_STANDARD(x) ( \
-   ( x == DRX_OOB_MODE_A            )  ?  "ANSI 55-1  " : \
-   ( x == DRX_OOB_MODE_B_GRADE_A    )  ?  "ANSI 55-2 A" : \
-   ( x == DRX_OOB_MODE_B_GRADE_B    )  ?  "ANSI 55-2 B" : \
-					     "(Invalid)" )
+   (x == DRX_OOB_MODE_A)  ?  "ANSI 55-1  " : \
+   (x == DRX_OOB_MODE_B_GRADE_A)  ?  "ANSI 55-2 A" : \
+   (x == DRX_OOB_MODE_B_GRADE_B)  ?  "ANSI 55-2 B" : \
+					     "(Invalid)")
 
 #define DRX_STR_AUD_STANDARD(x) ( \
-   ( x == DRX_AUD_STANDARD_BTSC         )  ? "BTSC"                     : \
-   ( x == DRX_AUD_STANDARD_A2           )  ? "A2"                       : \
-   ( x == DRX_AUD_STANDARD_EIAJ         )  ? "EIAJ"                     : \
-   ( x == DRX_AUD_STANDARD_FM_STEREO    )  ? "FM Stereo"                : \
-   ( x == DRX_AUD_STANDARD_AUTO         )  ? "Auto"                     : \
-   ( x == DRX_AUD_STANDARD_M_MONO       )  ? "M-Standard Mono"          : \
-   ( x == DRX_AUD_STANDARD_D_K_MONO     )  ? "D/K Mono FM"              : \
-   ( x == DRX_AUD_STANDARD_BG_FM        )  ? "B/G-Dual Carrier FM (A2)" : \
-   ( x == DRX_AUD_STANDARD_D_K1         )  ? "D/K1-Dual Carrier FM"     : \
-   ( x == DRX_AUD_STANDARD_D_K2         )  ? "D/K2-Dual Carrier FM"     : \
-   ( x == DRX_AUD_STANDARD_D_K3         )  ? "D/K3-Dual Carrier FM"     : \
-   ( x == DRX_AUD_STANDARD_BG_NICAM_FM  )  ? "B/G-NICAM-FM"             : \
-   ( x == DRX_AUD_STANDARD_L_NICAM_AM   )  ? "L-NICAM-AM"               : \
-   ( x == DRX_AUD_STANDARD_I_NICAM_FM   )  ? "I-NICAM-FM"               : \
-   ( x == DRX_AUD_STANDARD_D_K_NICAM_FM )  ? "D/K-NICAM-FM"             : \
-   ( x == DRX_AUD_STANDARD_UNKNOWN      )  ? "Unknown"                  : \
-					     "(Invalid)"  )
+   (x == DRX_AUD_STANDARD_BTSC)  ? "BTSC"                     : \
+   (x == DRX_AUD_STANDARD_A2)  ? "A2"                       : \
+   (x == DRX_AUD_STANDARD_EIAJ)  ? "EIAJ"                     : \
+   (x == DRX_AUD_STANDARD_FM_STEREO)  ? "FM Stereo"                : \
+   (x == DRX_AUD_STANDARD_AUTO)  ? "Auto"                     : \
+   (x == DRX_AUD_STANDARD_M_MONO)  ? "M-Standard Mono"          : \
+   (x == DRX_AUD_STANDARD_D_K_MONO)  ? "D/K Mono FM"              : \
+   (x == DRX_AUD_STANDARD_BG_FM)  ? "B/G-Dual Carrier FM (A2)" : \
+   (x == DRX_AUD_STANDARD_D_K1)  ? "D/K1-Dual Carrier FM"     : \
+   (x == DRX_AUD_STANDARD_D_K2)  ? "D/K2-Dual Carrier FM"     : \
+   (x == DRX_AUD_STANDARD_D_K3)  ? "D/K3-Dual Carrier FM"     : \
+   (x == DRX_AUD_STANDARD_BG_NICAM_FM)  ? "B/G-NICAM-FM"             : \
+   (x == DRX_AUD_STANDARD_L_NICAM_AM)  ? "L-NICAM-AM"               : \
+   (x == DRX_AUD_STANDARD_I_NICAM_FM)  ? "I-NICAM-FM"               : \
+   (x == DRX_AUD_STANDARD_D_K_NICAM_FM)  ? "D/K-NICAM-FM"             : \
+   (x == DRX_AUD_STANDARD_UNKNOWN)  ? "Unknown"                  : \
+					     "(Invalid)")
 #define DRX_STR_AUD_STEREO(x) ( \
-   ( x == true                          )  ? "Stereo"           : \
-   ( x == false                         )  ? "Mono"             : \
-					     "(Invalid)"  )
+   (x == true)  ? "Stereo"           : \
+   (x == false)  ? "Mono"             : \
+					     "(Invalid)")
 
 #define DRX_STR_AUD_SAP(x) ( \
-   ( x == true                          )  ? "Present"          : \
-   ( x == false                         )  ? "Not present"      : \
-					     "(Invalid)"  )
+   (x == true)  ? "Present"          : \
+   (x == false)  ? "Not present"      : \
+					     "(Invalid)")
 
 #define DRX_STR_AUD_CARRIER(x) ( \
-   ( x == true                          )  ? "Present"          : \
-   ( x == false                         )  ? "Not present"      : \
-					     "(Invalid)"  )
+   (x == true)  ? "Present"          : \
+   (x == false)  ? "Not present"      : \
+					     "(Invalid)")
 
 #define DRX_STR_AUD_RDS(x) ( \
-   ( x == true                          )  ? "Available"        : \
-   ( x == false                         )  ? "Not Available"    : \
-					     "(Invalid)"  )
+   (x == true)  ? "Available"        : \
+   (x == false)  ? "Not Available"    : \
+					     "(Invalid)")
 
 #define DRX_STR_AUD_NICAM_STATUS(x) ( \
-   ( x == DRX_AUD_NICAM_DETECTED        )  ? "Detected"         : \
-   ( x == DRX_AUD_NICAM_NOT_DETECTED    )  ? "Not detected"     : \
-   ( x == DRX_AUD_NICAM_BAD             )  ? "Bad"              : \
-					     "(Invalid)"  )
+   (x == DRX_AUD_NICAM_DETECTED)  ? "Detected"         : \
+   (x == DRX_AUD_NICAM_NOT_DETECTED)  ? "Not detected"     : \
+   (x == DRX_AUD_NICAM_BAD)  ? "Bad"              : \
+					     "(Invalid)")
 
 #define DRX_STR_RDS_VALID(x) ( \
-   ( x == true                          )  ? "Valid"            : \
-   ( x == false                         )  ? "Not Valid"        : \
-					     "(Invalid)"  )
+   (x == true)  ? "Valid"            : \
+   (x == false)  ? "Not Valid"        : \
+					     "(Invalid)")
 
 /*-------------------------------------------------------------------------
 Access macros
@@ -2466,29 +2466,29 @@ Access macros
 *
 */
 
-#define DRX_ATTR_MCRECORD( d )        ((d)->myCommonAttr->mcversion)
-#define DRX_ATTR_MIRRORFREQSPECT( d ) ((d)->myCommonAttr->mirrorFreqSpect)
-#define DRX_ATTR_CURRENTPOWERMODE( d )((d)->myCommonAttr->currentPowerMode)
-#define DRX_ATTR_ISOPENED( d )        ((d)->myCommonAttr->isOpened)
-#define DRX_ATTR_USEBOOTLOADER( d )   ((d)->myCommonAttr->useBootloader)
-#define DRX_ATTR_CURRENTSTANDARD( d ) ((d)->myCommonAttr->currentStandard)
-#define DRX_ATTR_PREVSTANDARD( d )    ((d)->myCommonAttr->prevStandard)
-#define DRX_ATTR_CACHESTANDARD( d )   ((d)->myCommonAttr->diCacheStandard)
-#define DRX_ATTR_CURRENTCHANNEL( d )  ((d)->myCommonAttr->currentChannel)
-#define DRX_ATTR_MICROCODE( d )       ((d)->myCommonAttr->microcode)
-#define DRX_ATTR_MICROCODESIZE( d )   ((d)->myCommonAttr->microcodeSize)
-#define DRX_ATTR_VERIFYMICROCODE( d ) ((d)->myCommonAttr->verifyMicrocode)
-#define DRX_ATTR_CAPABILITIES( d )    ((d)->myCommonAttr->capabilities)
-#define DRX_ATTR_PRODUCTID( d )       ((d)->myCommonAttr->productId)
-#define DRX_ATTR_INTERMEDIATEFREQ( d) ((d)->myCommonAttr->intermediateFreq)
-#define DRX_ATTR_SYSCLOCKFREQ( d)     ((d)->myCommonAttr->sysClockFreq)
-#define DRX_ATTR_TUNERRFAGCPOL( d )   ((d)->myCommonAttr->tunerRfAgcPol)
-#define DRX_ATTR_TUNERIFAGCPOL( d)    ((d)->myCommonAttr->tunerIfAgcPol)
-#define DRX_ATTR_TUNERSLOWMODE( d)    ((d)->myCommonAttr->tunerSlowMode)
-#define DRX_ATTR_TUNERSPORTNR( d)     ((d)->myCommonAttr->tunerPortNr)
-#define DRX_ATTR_TUNER( d )           ((d)->myTuner)
-#define DRX_ATTR_I2CADDR( d )         ((d)->myI2CDevAddr->i2cAddr)
-#define DRX_ATTR_I2CDEVID( d )        ((d)->myI2CDevAddr->i2cDevId)
+#define DRX_ATTR_MCRECORD(d)        ((d)->myCommonAttr->mcversion)
+#define DRX_ATTR_MIRRORFREQSPECT(d) ((d)->myCommonAttr->mirrorFreqSpect)
+#define DRX_ATTR_CURRENTPOWERMODE(d)((d)->myCommonAttr->currentPowerMode)
+#define DRX_ATTR_ISOPENED(d)        ((d)->myCommonAttr->isOpened)
+#define DRX_ATTR_USEBOOTLOADER(d)   ((d)->myCommonAttr->useBootloader)
+#define DRX_ATTR_CURRENTSTANDARD(d) ((d)->myCommonAttr->currentStandard)
+#define DRX_ATTR_PREVSTANDARD(d)    ((d)->myCommonAttr->prevStandard)
+#define DRX_ATTR_CACHESTANDARD(d)   ((d)->myCommonAttr->diCacheStandard)
+#define DRX_ATTR_CURRENTCHANNEL(d)  ((d)->myCommonAttr->currentChannel)
+#define DRX_ATTR_MICROCODE(d)       ((d)->myCommonAttr->microcode)
+#define DRX_ATTR_MICROCODESIZE(d)   ((d)->myCommonAttr->microcodeSize)
+#define DRX_ATTR_VERIFYMICROCODE(d) ((d)->myCommonAttr->verifyMicrocode)
+#define DRX_ATTR_CAPABILITIES(d)    ((d)->myCommonAttr->capabilities)
+#define DRX_ATTR_PRODUCTID(d)       ((d)->myCommonAttr->productId)
+#define DRX_ATTR_INTERMEDIATEFREQ(d) ((d)->myCommonAttr->intermediateFreq)
+#define DRX_ATTR_SYSCLOCKFREQ(d)     ((d)->myCommonAttr->sysClockFreq)
+#define DRX_ATTR_TUNERRFAGCPOL(d)   ((d)->myCommonAttr->tunerRfAgcPol)
+#define DRX_ATTR_TUNERIFAGCPOL(d)    ((d)->myCommonAttr->tunerIfAgcPol)
+#define DRX_ATTR_TUNERSLOWMODE(d)    ((d)->myCommonAttr->tunerSlowMode)
+#define DRX_ATTR_TUNERSPORTNR(d)     ((d)->myCommonAttr->tunerPortNr)
+#define DRX_ATTR_TUNER(d)           ((d)->myTuner)
+#define DRX_ATTR_I2CADDR(d)         ((d)->myI2CDevAddr->i2cAddr)
+#define DRX_ATTR_I2CDEVID(d)        ((d)->myI2CDevAddr->i2cDevId)
 
 /**
 * \brief Actual access macro's
@@ -2502,72 +2502,72 @@ Access macros
 
 /**************************/
 
-#define DRX_SET_MIRRORFREQSPECT( d, x )                     \
+#define DRX_SET_MIRRORFREQSPECT(d, x)                     \
    do {                                                     \
-      DRX_ATTR_MIRRORFREQSPECT( d ) = (x);                  \
-   } while(0)
+      DRX_ATTR_MIRRORFREQSPECT(d) = (x);                  \
+   } while (0)
 
-#define DRX_GET_MIRRORFREQSPECT( d, x )                     \
+#define DRX_GET_MIRRORFREQSPECT(d, x)                     \
    do {                                                     \
-      (x)=DRX_ATTR_MIRRORFREQSPECT( d );                    \
-   } while(0)
+      (x) = DRX_ATTR_MIRRORFREQSPECT(d);                    \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_CURRENTPOWERMODE( d, x )                    \
+#define DRX_SET_CURRENTPOWERMODE(d, x)                    \
    do {                                                     \
-      DRX_ATTR_CURRENTPOWERMODE( d ) = (x);                 \
-   } while(0)
+      DRX_ATTR_CURRENTPOWERMODE(d) = (x);                 \
+   } while (0)
 
-#define DRX_GET_CURRENTPOWERMODE( d, x )                    \
+#define DRX_GET_CURRENTPOWERMODE(d, x)                    \
    do {                                                     \
-      (x)=DRX_ATTR_CURRENTPOWERMODE( d );                   \
-   } while(0)
+      (x) = DRX_ATTR_CURRENTPOWERMODE(d);                   \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_MICROCODE( d, x )                           \
+#define DRX_SET_MICROCODE(d, x)                           \
    do {                                                     \
-      DRX_ATTR_MICROCODE( d ) = (x);                        \
-   } while(0)
+      DRX_ATTR_MICROCODE(d) = (x);                        \
+   } while (0)
 
-#define DRX_GET_MICROCODE( d, x )                           \
+#define DRX_GET_MICROCODE(d, x)                           \
    do {                                                     \
-      (x)=DRX_ATTR_MICROCODE( d );                          \
-   } while(0)
+      (x) = DRX_ATTR_MICROCODE(d);                          \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_MICROCODESIZE( d, x )                       \
+#define DRX_SET_MICROCODESIZE(d, x)                       \
    do {                                                     \
       DRX_ATTR_MICROCODESIZE(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_MICROCODESIZE( d, x )                       \
+#define DRX_GET_MICROCODESIZE(d, x)                       \
    do {                                                     \
-      (x)=DRX_ATTR_MICROCODESIZE(d);                        \
-   } while(0)
+      (x) = DRX_ATTR_MICROCODESIZE(d);                        \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_VERIFYMICROCODE( d, x )                     \
+#define DRX_SET_VERIFYMICROCODE(d, x)                     \
    do {                                                     \
       DRX_ATTR_VERIFYMICROCODE(d) = (x);                    \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_VERIFYMICROCODE( d, x )                     \
+#define DRX_GET_VERIFYMICROCODE(d, x)                     \
    do {                                                     \
-      (x)=DRX_ATTR_VERIFYMICROCODE(d);                      \
-   } while(0)
+      (x) = DRX_ATTR_VERIFYMICROCODE(d);                      \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_MCVERTYPE( d, x )                           \
+#define DRX_SET_MCVERTYPE(d, x)                           \
    do {                                                     \
       DRX_ATTR_MCRECORD(d).auxType = (x);                   \
    } while (0)
 
-#define DRX_GET_MCVERTYPE( d, x )                           \
+#define DRX_GET_MCVERTYPE(d, x)                           \
    do {                                                     \
       (x) = DRX_ATTR_MCRECORD(d).auxType;                   \
    } while (0)
@@ -2578,278 +2578,278 @@ Access macros
 
 /**************************/
 
-#define DRX_SET_MCDEV( d, x )                               \
+#define DRX_SET_MCDEV(d, x)                               \
    do {                                                     \
       DRX_ATTR_MCRECORD(d).mcDevType = (x);                 \
    } while (0)
 
-#define DRX_GET_MCDEV( d, x )                               \
+#define DRX_GET_MCDEV(d, x)                               \
    do {                                                     \
       (x) = DRX_ATTR_MCRECORD(d).mcDevType;                 \
    } while (0)
 
 /**************************/
 
-#define DRX_SET_MCVERSION( d, x )                           \
+#define DRX_SET_MCVERSION(d, x)                           \
    do {                                                     \
       DRX_ATTR_MCRECORD(d).mcVersion = (x);                 \
    } while (0)
 
-#define DRX_GET_MCVERSION( d, x )                           \
+#define DRX_GET_MCVERSION(d, x)                           \
    do {                                                     \
       (x) = DRX_ATTR_MCRECORD(d).mcVersion;                 \
    } while (0)
 
 /**************************/
-#define DRX_SET_MCPATCH( d, x )                             \
+#define DRX_SET_MCPATCH(d, x)                             \
    do {                                                     \
       DRX_ATTR_MCRECORD(d).mcBaseVersion = (x);             \
    } while (0)
 
-#define DRX_GET_MCPATCH( d, x )                             \
+#define DRX_GET_MCPATCH(d, x)                             \
    do {                                                     \
       (x) = DRX_ATTR_MCRECORD(d).mcBaseVersion;             \
    } while (0)
 
 /**************************/
 
-#define DRX_SET_I2CADDR( d, x )                             \
+#define DRX_SET_I2CADDR(d, x)                             \
    do {                                                     \
       DRX_ATTR_I2CADDR(d) = (x);                            \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_I2CADDR( d, x )                             \
+#define DRX_GET_I2CADDR(d, x)                             \
    do {                                                     \
-      (x)=DRX_ATTR_I2CADDR(d);                              \
-   } while(0)
+      (x) = DRX_ATTR_I2CADDR(d);                              \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_I2CDEVID( d, x )                            \
+#define DRX_SET_I2CDEVID(d, x)                            \
    do {                                                     \
       DRX_ATTR_I2CDEVID(d) = (x);                           \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_I2CDEVID( d, x )                            \
+#define DRX_GET_I2CDEVID(d, x)                            \
    do {                                                     \
-      (x)=DRX_ATTR_I2CDEVID(d);                             \
-   } while(0)
+      (x) = DRX_ATTR_I2CDEVID(d);                             \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_USEBOOTLOADER( d, x )                       \
+#define DRX_SET_USEBOOTLOADER(d, x)                       \
    do {                                                     \
       DRX_ATTR_USEBOOTLOADER(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_USEBOOTLOADER( d, x)                        \
+#define DRX_GET_USEBOOTLOADER(d, x)                        \
    do {                                                     \
-      (x)=DRX_ATTR_USEBOOTLOADER(d);                        \
-   } while(0)
+      (x) = DRX_ATTR_USEBOOTLOADER(d);                        \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_CURRENTSTANDARD( d, x )                     \
+#define DRX_SET_CURRENTSTANDARD(d, x)                     \
    do {                                                     \
       DRX_ATTR_CURRENTSTANDARD(d) = (x);                    \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_CURRENTSTANDARD( d, x)                      \
+#define DRX_GET_CURRENTSTANDARD(d, x)                      \
    do {                                                     \
-      (x)=DRX_ATTR_CURRENTSTANDARD(d);                      \
-   } while(0)
+      (x) = DRX_ATTR_CURRENTSTANDARD(d);                      \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_PREVSTANDARD( d, x )                        \
+#define DRX_SET_PREVSTANDARD(d, x)                        \
    do {                                                     \
       DRX_ATTR_PREVSTANDARD(d) = (x);                       \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_PREVSTANDARD( d, x)                         \
+#define DRX_GET_PREVSTANDARD(d, x)                         \
    do {                                                     \
-      (x)=DRX_ATTR_PREVSTANDARD(d);                         \
-   } while(0)
+      (x) = DRX_ATTR_PREVSTANDARD(d);                         \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_CACHESTANDARD( d, x )                       \
+#define DRX_SET_CACHESTANDARD(d, x)                       \
    do {                                                     \
       DRX_ATTR_CACHESTANDARD(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_CACHESTANDARD( d, x)                        \
+#define DRX_GET_CACHESTANDARD(d, x)                        \
    do {                                                     \
-      (x)=DRX_ATTR_CACHESTANDARD(d);                        \
-   } while(0)
+      (x) = DRX_ATTR_CACHESTANDARD(d);                        \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_CURRENTCHANNEL( d, x )                      \
+#define DRX_SET_CURRENTCHANNEL(d, x)                      \
    do {                                                     \
       DRX_ATTR_CURRENTCHANNEL(d) = (x);                     \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_CURRENTCHANNEL( d, x)                       \
+#define DRX_GET_CURRENTCHANNEL(d, x)                       \
    do {                                                     \
-      (x)=DRX_ATTR_CURRENTCHANNEL(d);                       \
-   } while(0)
+      (x) = DRX_ATTR_CURRENTCHANNEL(d);                       \
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_ISOPENED( d, x )                            \
+#define DRX_SET_ISOPENED(d, x)                            \
    do {                                                     \
       DRX_ATTR_ISOPENED(d) = (x);                           \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_ISOPENED( d, x)                             \
+#define DRX_GET_ISOPENED(d, x)                             \
    do {                                                     \
       (x) = DRX_ATTR_ISOPENED(d);                           \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_TUNER( d, x )                               \
+#define DRX_SET_TUNER(d, x)                               \
    do {                                                     \
       DRX_ATTR_TUNER(d) = (x);                              \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_TUNER( d, x)                                \
+#define DRX_GET_TUNER(d, x)                                \
    do {                                                     \
       (x) = DRX_ATTR_TUNER(d);                              \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_CAPABILITIES( d, x )                        \
+#define DRX_SET_CAPABILITIES(d, x)                        \
    do {                                                     \
       DRX_ATTR_CAPABILITIES(d) = (x);                       \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_CAPABILITIES( d, x)                         \
+#define DRX_GET_CAPABILITIES(d, x)                         \
    do {                                                     \
       (x) = DRX_ATTR_CAPABILITIES(d);                       \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_PRODUCTID( d, x )                           \
+#define DRX_SET_PRODUCTID(d, x)                           \
    do {                                                     \
       DRX_ATTR_PRODUCTID(d) |= (x << 4);                    \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_PRODUCTID( d, x)                            \
+#define DRX_GET_PRODUCTID(d, x)                            \
    do {                                                     \
       (x) = (DRX_ATTR_PRODUCTID(d) >> 4);                   \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_MFX( d, x )                                 \
+#define DRX_SET_MFX(d, x)                                 \
    do {                                                     \
       DRX_ATTR_PRODUCTID(d) |= (x);                         \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_MFX( d, x)                                  \
+#define DRX_GET_MFX(d, x)                                  \
    do {                                                     \
       (x) = (DRX_ATTR_PRODUCTID(d) & 0xF);                  \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_INTERMEDIATEFREQ( d, x )                    \
+#define DRX_SET_INTERMEDIATEFREQ(d, x)                    \
    do {                                                     \
       DRX_ATTR_INTERMEDIATEFREQ(d) = (x);                   \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_INTERMEDIATEFREQ( d, x)                     \
+#define DRX_GET_INTERMEDIATEFREQ(d, x)                     \
    do {                                                     \
       (x) = DRX_ATTR_INTERMEDIATEFREQ(d);                   \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_SYSCLOCKFREQ( d, x )                        \
+#define DRX_SET_SYSCLOCKFREQ(d, x)                        \
    do {                                                     \
       DRX_ATTR_SYSCLOCKFREQ(d) = (x);                       \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_SYSCLOCKFREQ( d, x)                         \
+#define DRX_GET_SYSCLOCKFREQ(d, x)                         \
    do {                                                     \
       (x) = DRX_ATTR_SYSCLOCKFREQ(d);                       \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_TUNERRFAGCPOL( d, x )                       \
+#define DRX_SET_TUNERRFAGCPOL(d, x)                       \
    do {                                                     \
       DRX_ATTR_TUNERRFAGCPOL(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_TUNERRFAGCPOL( d, x)                        \
+#define DRX_GET_TUNERRFAGCPOL(d, x)                        \
    do {                                                     \
       (x) = DRX_ATTR_TUNERRFAGCPOL(d);                      \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_TUNERIFAGCPOL( d, x )                       \
+#define DRX_SET_TUNERIFAGCPOL(d, x)                       \
    do {                                                     \
       DRX_ATTR_TUNERIFAGCPOL(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_TUNERIFAGCPOL( d, x)                        \
+#define DRX_GET_TUNERIFAGCPOL(d, x)                        \
    do {                                                     \
       (x) = DRX_ATTR_TUNERIFAGCPOL(d);                      \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_TUNERSLOWMODE( d, x )                       \
+#define DRX_SET_TUNERSLOWMODE(d, x)                       \
    do {                                                     \
       DRX_ATTR_TUNERSLOWMODE(d) = (x);                      \
-   } while(0)
+   } while (0)
 
-#define DRX_GET_TUNERSLOWMODE( d, x)                        \
+#define DRX_GET_TUNERSLOWMODE(d, x)                        \
    do {                                                     \
       (x) = DRX_ATTR_TUNERSLOWMODE(d);                      \
-   } while(0)
+   } while (0)
 
 /**************************/
 
-#define DRX_SET_TUNERPORTNR( d, x )                         \
+#define DRX_SET_TUNERPORTNR(d, x)                         \
    do {                                                     \
       DRX_ATTR_TUNERSPORTNR(d) = (x);                       \
-   } while(0)
+   } while (0)
 
 /**************************/
 
 /* Macros with device-specific handling are converted to CFG functions */
 
-#define DRX_ACCESSMACRO_SET( demod, value, cfgName, dataType )             \
+#define DRX_ACCESSMACRO_SET(demod, value, cfgName, dataType)             \
    do {                                                                    \
       DRXCfg_t config;                                                     \
       dataType cfgData;                                                    \
       config.cfgType = cfgName;                                            \
       config.cfgData = &cfgData;                                           \
       cfgData = value;                                                     \
-      DRX_Ctrl( demod, DRX_CTRL_SET_CFG, &config );                        \
-   } while ( 0 )
+      DRX_Ctrl(demod, DRX_CTRL_SET_CFG, &config);                        \
+   } while (0)
 
-#define DRX_ACCESSMACRO_GET( demod, value, cfgName, dataType, errorValue ) \
+#define DRX_ACCESSMACRO_GET(demod, value, cfgName, dataType, errorValue) \
    do {                                                                    \
       int cfgStatus;                                               \
       DRXCfg_t    config;                                                  \
       dataType    cfgData;                                                 \
       config.cfgType = cfgName;                                            \
       config.cfgData = &cfgData;                                           \
-      cfgStatus = DRX_Ctrl( demod, DRX_CTRL_GET_CFG, &config );            \
-      if ( cfgStatus == DRX_STS_OK ) {                                     \
+      cfgStatus = DRX_Ctrl(demod, DRX_CTRL_GET_CFG, &config);            \
+      if (cfgStatus == DRX_STS_OK) {                                     \
 	 value = cfgData;                                                  \
       } else {                                                             \
 	 value = (dataType)errorValue;                                     \
       }                                                                    \
-   } while ( 0 )
+   } while (0)
 
 /* Configuration functions for usage by Access (XS) Macros */
 
@@ -2857,63 +2857,63 @@ Access macros
 #define DRX_XS_CFG_BASE (500)
 #endif
 
-#define DRX_XS_CFG_PRESET          ( DRX_XS_CFG_BASE + 0 )
-#define DRX_XS_CFG_AUD_BTSC_DETECT ( DRX_XS_CFG_BASE + 1 )
-#define DRX_XS_CFG_QAM_LOCKRANGE   ( DRX_XS_CFG_BASE + 2 )
+#define DRX_XS_CFG_PRESET          (DRX_XS_CFG_BASE + 0)
+#define DRX_XS_CFG_AUD_BTSC_DETECT (DRX_XS_CFG_BASE + 1)
+#define DRX_XS_CFG_QAM_LOCKRANGE   (DRX_XS_CFG_BASE + 2)
 
 /* Access Macros with device-specific handling */
 
-#define DRX_SET_PRESET( d, x ) \
-   DRX_ACCESSMACRO_SET( (d), (x), DRX_XS_CFG_PRESET, char* )
-#define DRX_GET_PRESET( d, x ) \
-   DRX_ACCESSMACRO_GET( (d), (x), DRX_XS_CFG_PRESET, char*, "ERROR" )
+#define DRX_SET_PRESET(d, x) \
+   DRX_ACCESSMACRO_SET((d), (x), DRX_XS_CFG_PRESET, char*)
+#define DRX_GET_PRESET(d, x) \
+   DRX_ACCESSMACRO_GET((d), (x), DRX_XS_CFG_PRESET, char*, "ERROR")
 
-#define DRX_SET_AUD_BTSC_DETECT( d, x ) DRX_ACCESSMACRO_SET( (d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t )
-#define DRX_GET_AUD_BTSC_DETECT( d, x ) DRX_ACCESSMACRO_GET( (d), (x), \
-	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t, DRX_UNKNOWN )
+#define DRX_SET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
+	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t)
+#define DRX_GET_AUD_BTSC_DETECT(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
+	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t, DRX_UNKNOWN)
 
-#define DRX_SET_QAM_LOCKRANGE( d, x ) DRX_ACCESSMACRO_SET( (d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t )
-#define DRX_GET_QAM_LOCKRANGE( d, x ) DRX_ACCESSMACRO_GET( (d), (x), \
-	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t, DRX_UNKNOWN )
+#define DRX_SET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_SET( (d), (x), \
+	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t)
+#define DRX_GET_QAM_LOCKRANGE(d, x) DRX_ACCESSMACRO_GET( (d), (x), \
+	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t, DRX_UNKNOWN)
 
 /**
 * \brief Macro to check if std is an ATV standard
 * \retval true std is an ATV standard
 * \retval false std is an ATV standard
 */
-#define DRX_ISATVSTD( std ) ( ( (std) == DRX_STANDARD_PAL_SECAM_BG ) || \
-			      ( (std) == DRX_STANDARD_PAL_SECAM_DK ) || \
-			      ( (std) == DRX_STANDARD_PAL_SECAM_I  ) || \
-			      ( (std) == DRX_STANDARD_PAL_SECAM_L  ) || \
-			      ( (std) == DRX_STANDARD_PAL_SECAM_LP ) || \
-			      ( (std) == DRX_STANDARD_NTSC ) || \
-			      ( (std) == DRX_STANDARD_FM ) )
+#define DRX_ISATVSTD(std) ( ( (std) == DRX_STANDARD_PAL_SECAM_BG ) || \
+			      ((std) == DRX_STANDARD_PAL_SECAM_DK) || \
+			      ((std) == DRX_STANDARD_PAL_SECAM_I) || \
+			      ((std) == DRX_STANDARD_PAL_SECAM_L) || \
+			      ((std) == DRX_STANDARD_PAL_SECAM_LP) || \
+			      ((std) == DRX_STANDARD_NTSC) || \
+			      ((std) == DRX_STANDARD_FM) )
 
 /**
 * \brief Macro to check if std is an QAM standard
 * \retval true std is an QAM standards
 * \retval false std is an QAM standards
 */
-#define DRX_ISQAMSTD( std ) ( ( (std) == DRX_STANDARD_ITU_A ) || \
-			      ( (std) == DRX_STANDARD_ITU_B ) || \
-			      ( (std) == DRX_STANDARD_ITU_C ) || \
-			      ( (std) == DRX_STANDARD_ITU_D ))
+#define DRX_ISQAMSTD(std) ( ( (std) == DRX_STANDARD_ITU_A ) || \
+			      ((std) == DRX_STANDARD_ITU_B) || \
+			      ((std) == DRX_STANDARD_ITU_C) || \
+			      ((std) == DRX_STANDARD_ITU_D))
 
 /**
 * \brief Macro to check if std is VSB standard
 * \retval true std is VSB standard
 * \retval false std is not VSB standard
 */
-#define DRX_ISVSBSTD( std ) ( (std) == DRX_STANDARD_8VSB )
+#define DRX_ISVSBSTD(std) ( (std) == DRX_STANDARD_8VSB )
 
 /**
 * \brief Macro to check if std is DVBT standard
 * \retval true std is DVBT standard
 * \retval false std is not DVBT standard
 */
-#define DRX_ISDVBTSTD( std ) ( (std) == DRX_STANDARD_DVBT )
+#define DRX_ISDVBTSTD(std) ( (std) == DRX_STANDARD_DVBT )
 
 /*-------------------------------------------------------------------------
 Exported FUNCTIONS

commit dbe82e06138f3630027e2bc27a47c79f74693850
Author: Mauro Carvalho Chehab <m.chehab@samsung.com>
Date:   Thu Jan 16 10:43:00 2014 -0300

    [media] drx-j: fix whitespacing on pointer parmameters
    
    Patch generated with this script:
    
    for i in drivers/media/dvb-frontends/drx39xyj/*.[ch]; do perl -ne 's,(enum|struct|void|int|u32|u64|u16|u8|s8|s16|s32|s64)\s+(\S+)\s+\*[ ]+,\1 \2 *,g; print $_' <$i >a && mv a $i; done
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 1e906b8298fc..fddf491d4816 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -237,9 +237,9 @@ struct tuner_ops {
 
 struct tuner_instance {
 	struct i2c_device_addr myI2CDevAddr;
-	struct tuner_common * myCommonAttr;
+	struct tuner_common *myCommonAttr;
 	void *myExtAttr;
-	struct tuner_ops * myFunct;
+	struct tuner_ops *myFunct;
 };
 
 
@@ -257,7 +257,7 @@ int DRXBSP_TUNER_GetFrequency(struct tuner_instance *tuner,
 					s32 * IFfrequency);
 
 int DRXBSP_TUNER_LockStatus(struct tuner_instance *tuner,
-					enum tuner_lock_status * lockStat);
+					enum tuner_lock_status *lockStat);
 
 int DRXBSP_TUNER_DefaultI2CWriteRead(struct tuner_instance *tuner,
 						struct i2c_device_addr *wDevAddr,
@@ -1223,7 +1223,7 @@ STRUCTS
 	typedef struct {
 		u32 *symbolrate;	  /**<  list of symbolrates to scan   */
 		u16 symbolrateSize;	  /**<  size of symbolrate array      */
-		enum drx_modulation * constellation;
+		enum drx_modulation *constellation;
 					  /**<  list of constellations        */
 		u16 constellationSize;    /**<  size of constellation array */
 		u16 ifAgcThreshold;	  /**<  thresholf for IF-AGC based

commit 61263c751bafaecb3a23a7f9db05db9addc5f0f6
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 01:18:02 2012 -0300

    [media] drx-j: get rid of most of the typedefs
    
    There are lots of typedefs there. Let's get rid of them.
    
    Most of the work here is due to this small script:
    
            if [ "$3" == "" ]; then
                    echo "usage: $0 type DRXName drx_name"
            fi
            t=$1; f=$2; g=$3
            for i in *.[ch]; do
                    sed s,"p${f}_t","$t $g *",g <$i >a && mv a $i && \
                    sed s,"${f}_t","$t $g",g <$i >a && mv a $i
            done
    
    Just kept there the function typedefs, as those are still useful.
    
    Yet, all those tuner_ops can likely be just removed on a latter
    cleanup patch.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 752b2b3a50ac..1e906b8298fc 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -42,7 +42,7 @@
 INCLUDES
 -------------------------------------------------------------------------*/
 
-typedef enum {
+enum DRXStatus {
 	DRX_STS_READY = 3,  /**< device/service is ready     */
 	DRX_STS_BUSY = 2,   /**< device/service is busy      */
 	DRX_STS_OK = 1,	    /**< everything is OK            */
@@ -51,7 +51,7 @@ typedef enum {
 	DRX_STS_ERROR = -2, /**< general error               */
 	DRX_STS_FUNC_NOT_AVAILABLE = -3
 				/**< unavailable functionality   */
-} DRXStatus_t, *pDRXStatus_t;
+};
 
 /*
  * This structure contains the I2C address, the device ID and a userData pointer.
@@ -81,23 +81,23 @@ Exported FUNCTIONS
 /**
 * \fn DRXBSP_I2C_Init()
 * \brief Initialize I2C communication module.
-* \return DRXStatus_t Return status.
+* \return int Return status.
 * \retval DRX_STS_OK Initialization successful.
 * \retval DRX_STS_ERROR Initialization failed.
 */
-DRXStatus_t DRXBSP_I2C_Init(void);
+int DRXBSP_I2C_Init(void);
 
 /**
 * \fn DRXBSP_I2C_Term()
 * \brief Terminate I2C communication module.
-* \return DRXStatus_t Return status.
+* \return int Return status.
 * \retval DRX_STS_OK Termination successful.
 * \retval DRX_STS_ERROR Termination failed.
 */
-DRXStatus_t DRXBSP_I2C_Term(void);
+int DRXBSP_I2C_Term(void);
 
 /**
-* \fn DRXStatus_t DRXBSP_I2C_WriteRead( struct i2c_device_addr *wDevAddr,
+* \fn int DRXBSP_I2C_WriteRead( struct i2c_device_addr *wDevAddr,
 *                                       u16 wCount,
 *                                       u8 * wData,
 *                                       struct i2c_device_addr *rDevAddr,
@@ -110,7 +110,7 @@ DRXStatus_t DRXBSP_I2C_Term(void);
 * \param rDevAddr The device i2c address and the device ID to read from
 * \param rCount   The number of bytes to read
 * \param rData    The array to read the data from
-* \return DRXStatus_t Return status.
+* \return int Return status.
 * \retval DRX_STS_OK Succes.
 * \retval DRX_STS_ERROR Failure.
 * \retval DRX_STS_INVALID_ARG Parameter 'wcount' is not zero but parameter
@@ -126,7 +126,7 @@ DRXStatus_t DRXBSP_I2C_Term(void);
 * The device ID can be useful if several devices share an I2C address.
 * It can be used to control a "switch" on the I2C bus to the correct device.
 */
-DRXStatus_t DRXBSP_I2C_WriteRead(struct i2c_device_addr *wDevAddr,
+int DRXBSP_I2C_WriteRead(struct i2c_device_addr *wDevAddr,
 					u16 wCount,
 					u8 * wData,
 					struct i2c_device_addr *rDevAddr,
@@ -170,26 +170,19 @@ extern int DRX_I2C_Error_g;
 			      TUNER_MODE_SUB4 | TUNER_MODE_SUB5 | \
 			      TUNER_MODE_SUB6 | TUNER_MODE_SUB7 )
 
-typedef u32 TUNERMode_t;
-typedef u32 * pTUNERMode_t;
-
-typedef char *TUNERSubMode_t;	/* description of submode */
-typedef TUNERSubMode_t *pTUNERSubMode_t;
-
-typedef enum {
 
+enum tuner_lock_status {
 	TUNER_LOCKED,
 	TUNER_NOT_LOCKED
-} TUNERLockStatus_t, *pTUNERLockStatus_t;
-
-typedef struct {
+};
 
+struct tuner_common {
 	char *name;	/* Tuner brand & type name */
 	s32 minFreqRF;	/* Lowest  RF input frequency, in kHz */
 	s32 maxFreqRF;	/* Highest RF input frequency, in kHz */
 
 	u8 subMode;	/* Index to sub-mode in use */
-	pTUNERSubMode_t subModeDescriptions;	/* Pointer to description of sub-modes */
+	char *** subModeDescriptions;	/* Pointer to description of sub-modes */
 	u8 subModes;	/* Number of available sub-modes      */
 
 	/* The following fields will be either 0, NULL or false and do not need
@@ -201,31 +194,30 @@ typedef struct {
 
 	void *myUserData;	/* pointer to associated demod instance */
 	u16 myCapabilities;	/* value for storing application flags  */
+};
 
-} TUNERCommonAttr_t, *pTUNERCommonAttr_t;
-
-typedef struct TUNERInstance_s *pTUNERInstance_t;
+struct tuner_instance;
 
-typedef DRXStatus_t(*TUNEROpenFunc_t) (pTUNERInstance_t tuner);
-typedef DRXStatus_t(*TUNERCloseFunc_t) (pTUNERInstance_t tuner);
+typedef int(*TUNEROpenFunc_t) (struct tuner_instance *tuner);
+typedef int(*TUNERCloseFunc_t) (struct tuner_instance *tuner);
 
-typedef DRXStatus_t(*TUNERSetFrequencyFunc_t) (pTUNERInstance_t tuner,
-						TUNERMode_t mode,
+typedef int(*TUNERSetFrequencyFunc_t) (struct tuner_instance *tuner,
+						u32 mode,
 						s32
 						frequency);
 
-typedef DRXStatus_t(*TUNERGetFrequencyFunc_t) (pTUNERInstance_t tuner,
-						TUNERMode_t mode,
+typedef int(*TUNERGetFrequencyFunc_t) (struct tuner_instance *tuner,
+						u32 mode,
 						s32 *
 						RFfrequency,
 						s32 *
 						IFfrequency);
 
-typedef DRXStatus_t(*TUNERLockStatusFunc_t) (pTUNERInstance_t tuner,
-						pTUNERLockStatus_t
+typedef int(*TUNERLockStatusFunc_t) (struct tuner_instance *tuner,
+						enum tuner_lock_status *
 						lockStat);
 
-typedef DRXStatus_t(*TUNERi2cWriteReadFunc_t) (pTUNERInstance_t tuner,
+typedef int(*TUNERi2cWriteReadFunc_t) (struct tuner_instance *tuner,
 						struct i2c_device_addr *
 						wDevAddr, u16 wCount,
 						u8 * wData,
@@ -233,7 +225,7 @@ typedef DRXStatus_t(*TUNERi2cWriteReadFunc_t) (pTUNERInstance_t tuner,
 						rDevAddr, u16 rCount,
 						u8 * rData);
 
-typedef struct {
+struct tuner_ops {
 	TUNEROpenFunc_t openFunc;
 	TUNERCloseFunc_t closeFunc;
 	TUNERSetFrequencyFunc_t setFrequencyFunc;
@@ -241,43 +233,42 @@ typedef struct {
 	TUNERLockStatusFunc_t lockStatusFunc;
 	TUNERi2cWriteReadFunc_t i2cWriteReadFunc;
 
-} TUNERFunc_t, *pTUNERFunc_t;
-
-typedef struct TUNERInstance_s {
+};
 
+struct tuner_instance {
 	struct i2c_device_addr myI2CDevAddr;
-	pTUNERCommonAttr_t myCommonAttr;
+	struct tuner_common * myCommonAttr;
 	void *myExtAttr;
-	pTUNERFunc_t myFunct;
+	struct tuner_ops * myFunct;
+};
 
-} TUNERInstance_t;
 
-DRXStatus_t DRXBSP_TUNER_Open(pTUNERInstance_t tuner);
+int DRXBSP_TUNER_Open(struct tuner_instance *tuner);
 
-DRXStatus_t DRXBSP_TUNER_Close(pTUNERInstance_t tuner);
+int DRXBSP_TUNER_Close(struct tuner_instance *tuner);
 
-DRXStatus_t DRXBSP_TUNER_SetFrequency(pTUNERInstance_t tuner,
-					TUNERMode_t mode,
+int DRXBSP_TUNER_SetFrequency(struct tuner_instance *tuner,
+					u32 mode,
 					s32 frequency);
 
-DRXStatus_t DRXBSP_TUNER_GetFrequency(pTUNERInstance_t tuner,
-					TUNERMode_t mode,
+int DRXBSP_TUNER_GetFrequency(struct tuner_instance *tuner,
+					u32 mode,
 					s32 * RFfrequency,
 					s32 * IFfrequency);
 
-DRXStatus_t DRXBSP_TUNER_LockStatus(pTUNERInstance_t tuner,
-					pTUNERLockStatus_t lockStat);
+int DRXBSP_TUNER_LockStatus(struct tuner_instance *tuner,
+					enum tuner_lock_status * lockStat);
 
-DRXStatus_t DRXBSP_TUNER_DefaultI2CWriteRead(pTUNERInstance_t tuner,
+int DRXBSP_TUNER_DefaultI2CWriteRead(struct tuner_instance *tuner,
 						struct i2c_device_addr *wDevAddr,
 						u16 wCount,
 						u8 * wData,
 						struct i2c_device_addr *rDevAddr,
 						u16 rCount, u8 * rData);
 
-DRXStatus_t DRXBSP_HST_Init(void);
+int DRXBSP_HST_Init(void);
 
-DRXStatus_t DRXBSP_HST_Term(void);
+int DRXBSP_HST_Term(void);
 
 void *DRXBSP_HST_Memcpy(void *to, void *from, u32 n);
 
@@ -285,19 +276,9 @@ int DRXBSP_HST_Memcmp(void *s1, void *s2, u32 n);
 
 u32 DRXBSP_HST_Clock(void);
 
-DRXStatus_t DRXBSP_HST_Sleep(u32 n);
+int DRXBSP_HST_Sleep(u32 n);
 
 
-#ifdef __cplusplus
-extern "C" {
-#endif
-/*-------------------------------------------------------------------------
-TYPEDEFS
--------------------------------------------------------------------------*/
-
-/*-------------------------------------------------------------------------
-DEFINES
--------------------------------------------------------------------------*/
 
 /**************
 *
@@ -535,132 +516,132 @@ ENUM
 -------------------------------------------------------------------------*/
 
 /**
-* \enum DRXStandard_t
+* \enum enum drx_standard
 * \brief Modulation standards.
 */
-	typedef enum {
-		DRX_STANDARD_DVBT = 0, /**< Terrestrial DVB-T.               */
-		DRX_STANDARD_8VSB,     /**< Terrestrial 8VSB.                */
-		DRX_STANDARD_NTSC,     /**< Terrestrial\Cable analog NTSC.   */
-		DRX_STANDARD_PAL_SECAM_BG,
-				       /**< Terrestrial analog PAL/SECAM B/G */
-		DRX_STANDARD_PAL_SECAM_DK,
-				       /**< Terrestrial analog PAL/SECAM D/K */
-		DRX_STANDARD_PAL_SECAM_I,
-				       /**< Terrestrial analog PAL/SECAM I   */
-		DRX_STANDARD_PAL_SECAM_L,
-				       /**< Terrestrial analog PAL/SECAM L
-					     with negative modulation        */
-		DRX_STANDARD_PAL_SECAM_LP,
-				       /**< Terrestrial analog PAL/SECAM L
-					     with positive modulation        */
-		DRX_STANDARD_ITU_A,    /**< Cable ITU ANNEX A.               */
-		DRX_STANDARD_ITU_B,    /**< Cable ITU ANNEX B.               */
-		DRX_STANDARD_ITU_C,    /**< Cable ITU ANNEX C.               */
-		DRX_STANDARD_ITU_D,    /**< Cable ITU ANNEX D.               */
-		DRX_STANDARD_FM,       /**< Terrestrial\Cable FM radio       */
-		DRX_STANDARD_DTMB,     /**< Terrestrial DTMB standard (China)*/
-		DRX_STANDARD_UNKNOWN = DRX_UNKNOWN,
-				       /**< Standard unknown.                */
-		DRX_STANDARD_AUTO = DRX_AUTO
-				       /**< Autodetect standard.             */
-	} DRXStandard_t, *pDRXStandard_t;
-
-/**
-* \enum DRXStandard_t
+enum drx_standard {
+	DRX_STANDARD_DVBT = 0, /**< Terrestrial DVB-T.               */
+	DRX_STANDARD_8VSB,     /**< Terrestrial 8VSB.                */
+	DRX_STANDARD_NTSC,     /**< Terrestrial\Cable analog NTSC.   */
+	DRX_STANDARD_PAL_SECAM_BG,
+				/**< Terrestrial analog PAL/SECAM B/G */
+	DRX_STANDARD_PAL_SECAM_DK,
+				/**< Terrestrial analog PAL/SECAM D/K */
+	DRX_STANDARD_PAL_SECAM_I,
+				/**< Terrestrial analog PAL/SECAM I   */
+	DRX_STANDARD_PAL_SECAM_L,
+				/**< Terrestrial analog PAL/SECAM L
+					with negative modulation        */
+	DRX_STANDARD_PAL_SECAM_LP,
+				/**< Terrestrial analog PAL/SECAM L
+					with positive modulation        */
+	DRX_STANDARD_ITU_A,    /**< Cable ITU ANNEX A.               */
+	DRX_STANDARD_ITU_B,    /**< Cable ITU ANNEX B.               */
+	DRX_STANDARD_ITU_C,    /**< Cable ITU ANNEX C.               */
+	DRX_STANDARD_ITU_D,    /**< Cable ITU ANNEX D.               */
+	DRX_STANDARD_FM,       /**< Terrestrial\Cable FM radio       */
+	DRX_STANDARD_DTMB,     /**< Terrestrial DTMB standard (China)*/
+	DRX_STANDARD_UNKNOWN = DRX_UNKNOWN,
+				/**< Standard unknown.                */
+	DRX_STANDARD_AUTO = DRX_AUTO
+				/**< Autodetect standard.             */
+};
+
+/**
+* \enum enum drx_standard
 * \brief Modulation sub-standards.
 */
-	typedef enum {
-		DRX_SUBSTANDARD_MAIN = 0, /**< Main subvariant of standard   */
-		DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
-		DRX_SUBSTANDARD_ATV_DK_POLAND,
-		DRX_SUBSTANDARD_ATV_DK_CHINA,
-		DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN,
-					  /**< Sub-standard unknown.         */
-		DRX_SUBSTANDARD_AUTO = DRX_AUTO
-					  /**< Auto (default) sub-standard   */
-	} DRXSubstandard_t, *pDRXSubstandard_t;
-
-/**
-* \enum DRXBandwidth_t
+enum drx_substandard {
+	DRX_SUBSTANDARD_MAIN = 0, /**< Main subvariant of standard   */
+	DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
+	DRX_SUBSTANDARD_ATV_DK_POLAND,
+	DRX_SUBSTANDARD_ATV_DK_CHINA,
+	DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN,
+					/**< Sub-standard unknown.         */
+	DRX_SUBSTANDARD_AUTO = DRX_AUTO
+					/**< Auto (default) sub-standard   */
+};
+
+/**
+* \enum enum drx_bandwidth
 * \brief Channel bandwidth or channel spacing.
 */
-	typedef enum {
-		DRX_BANDWIDTH_8MHZ = 0,	 /**< Bandwidth 8 MHz.   */
-		DRX_BANDWIDTH_7MHZ,	 /**< Bandwidth 7 MHz.   */
-		DRX_BANDWIDTH_6MHZ,	 /**< Bandwidth 6 MHz.   */
-		DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,
-					 /**< Bandwidth unknown. */
-		DRX_BANDWIDTH_AUTO = DRX_AUTO
-					 /**< Auto Set Bandwidth */
-	} DRXBandwidth_t, *pDRXBandwidth_t;
+enum drx_bandwidth {
+	DRX_BANDWIDTH_8MHZ = 0,	 /**< Bandwidth 8 MHz.   */
+	DRX_BANDWIDTH_7MHZ,	 /**< Bandwidth 7 MHz.   */
+	DRX_BANDWIDTH_6MHZ,	 /**< Bandwidth 6 MHz.   */
+	DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,
+					/**< Bandwidth unknown. */
+	DRX_BANDWIDTH_AUTO = DRX_AUTO
+					/**< Auto Set Bandwidth */
+};
 
 /**
-* \enum DRXMirror_t
+* \enum enum drx_mirror
 * \brief Indicate if channel spectrum is mirrored or not.
 */
-	typedef enum {
-		DRX_MIRROR_NO = 0,   /**< Spectrum is not mirrored.           */
-		DRX_MIRROR_YES,	     /**< Spectrum is mirrored.               */
-		DRX_MIRROR_UNKNOWN = DRX_UNKNOWN,
-				     /**< Unknown if spectrum is mirrored.    */
-		DRX_MIRROR_AUTO = DRX_AUTO
-				     /**< Autodetect if spectrum is mirrored. */
-	} DRXMirror_t, *pDRXMirror_t;
+enum drx_mirror{
+	DRX_MIRROR_NO = 0,   /**< Spectrum is not mirrored.           */
+	DRX_MIRROR_YES,	     /**< Spectrum is mirrored.               */
+	DRX_MIRROR_UNKNOWN = DRX_UNKNOWN,
+				/**< Unknown if spectrum is mirrored.    */
+	DRX_MIRROR_AUTO = DRX_AUTO
+				/**< Autodetect if spectrum is mirrored. */
+};
 
 /**
-* \enum DRXConstellation_t
+* \enum enum drx_modulation
 * \brief Constellation type of the channel.
 */
-	typedef enum {
-		DRX_CONSTELLATION_BPSK = 0,  /**< Modulation is BPSK.       */
-		DRX_CONSTELLATION_QPSK,	     /**< Constellation is QPSK.    */
-		DRX_CONSTELLATION_PSK8,	     /**< Constellation is PSK8.    */
-		DRX_CONSTELLATION_QAM16,     /**< Constellation is QAM16.   */
-		DRX_CONSTELLATION_QAM32,     /**< Constellation is QAM32.   */
-		DRX_CONSTELLATION_QAM64,     /**< Constellation is QAM64.   */
-		DRX_CONSTELLATION_QAM128,    /**< Constellation is QAM128.  */
-		DRX_CONSTELLATION_QAM256,    /**< Constellation is QAM256.  */
-		DRX_CONSTELLATION_QAM512,    /**< Constellation is QAM512.  */
-		DRX_CONSTELLATION_QAM1024,   /**< Constellation is QAM1024. */
-		DRX_CONSTELLATION_QPSK_NR,   /**< Constellation is QPSK_NR  */
-		DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,
-					     /**< Constellation unknown.    */
-		DRX_CONSTELLATION_AUTO = DRX_AUTO
-					     /**< Autodetect constellation. */
-	} DRXConstellation_t, *pDRXConstellation_t;
-
-/**
-* \enum DRXHierarchy_t
+enum drx_modulation {
+	DRX_CONSTELLATION_BPSK = 0,  /**< Modulation is BPSK.       */
+	DRX_CONSTELLATION_QPSK,	     /**< Constellation is QPSK.    */
+	DRX_CONSTELLATION_PSK8,	     /**< Constellation is PSK8.    */
+	DRX_CONSTELLATION_QAM16,     /**< Constellation is QAM16.   */
+	DRX_CONSTELLATION_QAM32,     /**< Constellation is QAM32.   */
+	DRX_CONSTELLATION_QAM64,     /**< Constellation is QAM64.   */
+	DRX_CONSTELLATION_QAM128,    /**< Constellation is QAM128.  */
+	DRX_CONSTELLATION_QAM256,    /**< Constellation is QAM256.  */
+	DRX_CONSTELLATION_QAM512,    /**< Constellation is QAM512.  */
+	DRX_CONSTELLATION_QAM1024,   /**< Constellation is QAM1024. */
+	DRX_CONSTELLATION_QPSK_NR,   /**< Constellation is QPSK_NR  */
+	DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,
+					/**< Constellation unknown.    */
+	DRX_CONSTELLATION_AUTO = DRX_AUTO
+					/**< Autodetect constellation. */
+};
+
+/**
+* \enum enum drx_hierarchy
 * \brief Hierarchy of the channel.
 */
-	typedef enum {
-		DRX_HIERARCHY_NONE = 0,	/**< None hierarchical channel.     */
-		DRX_HIERARCHY_ALPHA1,	/**< Hierarchical channel, alpha=1. */
-		DRX_HIERARCHY_ALPHA2,	/**< Hierarchical channel, alpha=2. */
-		DRX_HIERARCHY_ALPHA4,	/**< Hierarchical channel, alpha=4. */
-		DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN,
-					/**< Hierarchy unknown.             */
-		DRX_HIERARCHY_AUTO = DRX_AUTO
-					/**< Autodetect hierarchy.          */
-	} DRXHierarchy_t, *pDRXHierarchy_t;
-
-/**
-* \enum DRXPriority_t
+enum drx_hierarchy {
+	DRX_HIERARCHY_NONE = 0,	/**< None hierarchical channel.     */
+	DRX_HIERARCHY_ALPHA1,	/**< Hierarchical channel, alpha=1. */
+	DRX_HIERARCHY_ALPHA2,	/**< Hierarchical channel, alpha=2. */
+	DRX_HIERARCHY_ALPHA4,	/**< Hierarchical channel, alpha=4. */
+	DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN,
+				/**< Hierarchy unknown.             */
+	DRX_HIERARCHY_AUTO = DRX_AUTO
+				/**< Autodetect hierarchy.          */
+};
+
+/**
+* \enum enum drx_priority
 * \brief Channel priority in case of hierarchical transmission.
 */
-	typedef enum {
-		DRX_PRIORITY_LOW = 0,  /**< Low priority channel.  */
-		DRX_PRIORITY_HIGH,     /**< High priority channel. */
-		DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN
-				       /**< Priority unknown.      */
-	} DRXPriority_t, *pDRXPriority_t;
+enum drx_priority {
+	DRX_PRIORITY_LOW = 0,  /**< Low priority channel.  */
+	DRX_PRIORITY_HIGH,     /**< High priority channel. */
+	DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN
+				/**< Priority unknown.      */
+};
 
 /**
-* \enum DRXCoderate_t
+* \enum enum drx_coderate
 * \brief Channel priority in case of hierarchical transmission.
 */
-	typedef enum {
+enum drx_coderate{
 		DRX_CODERATE_1DIV2 = 0,	/**< Code rate 1/2nd.      */
 		DRX_CODERATE_2DIV3,	/**< Code rate 2/3nd.      */
 		DRX_CODERATE_3DIV4,	/**< Code rate 3/4nd.      */
@@ -670,164 +651,156 @@ ENUM
 					/**< Code rate unknown.    */
 		DRX_CODERATE_AUTO = DRX_AUTO
 					/**< Autodetect code rate. */
-	} DRXCoderate_t, *pDRXCoderate_t;
+};
 
 /**
-* \enum DRXGuard_t
+* \enum enum drx_guard
 * \brief Guard interval of a channel.
 */
-	typedef enum {
-		DRX_GUARD_1DIV32 = 0, /**< Guard interval 1/32nd.     */
-		DRX_GUARD_1DIV16,     /**< Guard interval 1/16th.     */
-		DRX_GUARD_1DIV8,      /**< Guard interval 1/8th.      */
-		DRX_GUARD_1DIV4,      /**< Guard interval 1/4th.      */
-		DRX_GUARD_UNKNOWN = DRX_UNKNOWN,
-				      /**< Guard interval unknown.    */
-		DRX_GUARD_AUTO = DRX_AUTO
-				      /**< Autodetect guard interval. */
-	} DRXGuard_t, *pDRXGuard_t;
-
-/**
-* \enum DRXFftmode_t
+enum drx_guard {
+	DRX_GUARD_1DIV32 = 0, /**< Guard interval 1/32nd.     */
+	DRX_GUARD_1DIV16,     /**< Guard interval 1/16th.     */
+	DRX_GUARD_1DIV8,      /**< Guard interval 1/8th.      */
+	DRX_GUARD_1DIV4,      /**< Guard interval 1/4th.      */
+	DRX_GUARD_UNKNOWN = DRX_UNKNOWN,
+				/**< Guard interval unknown.    */
+	DRX_GUARD_AUTO = DRX_AUTO
+				/**< Autodetect guard interval. */
+};
+
+/**
+* \enum enum drx_fft_mode
 * \brief FFT mode.
 */
-	typedef enum {
-		DRX_FFTMODE_2K = 0,    /**< 2K FFT mode.         */
-		DRX_FFTMODE_4K,	       /**< 4K FFT mode.         */
-		DRX_FFTMODE_8K,	       /**< 8K FFT mode.         */
-		DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,
-				       /**< FFT mode unknown.    */
-		DRX_FFTMODE_AUTO = DRX_AUTO
-				       /**< Autodetect FFT mode. */
-	} DRXFftmode_t, *pDRXFftmode_t;
+enum drx_fft_mode {
+	DRX_FFTMODE_2K = 0,    /**< 2K FFT mode.         */
+	DRX_FFTMODE_4K,	       /**< 4K FFT mode.         */
+	DRX_FFTMODE_8K,	       /**< 8K FFT mode.         */
+	DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,
+				/**< FFT mode unknown.    */
+	DRX_FFTMODE_AUTO = DRX_AUTO
+				/**< Autodetect FFT mode. */
+};
 
 /**
-* \enum DRXClassification_t
+* \enum enum drx_classification
 * \brief Channel classification.
 */
-	typedef enum {
-		DRX_CLASSIFICATION_GAUSS = 0, /**< Gaussion noise.            */
-		DRX_CLASSIFICATION_HVY_GAUSS, /**< Heavy Gaussion noise.      */
-		DRX_CLASSIFICATION_COCHANNEL, /**< Co-channel.                */
-		DRX_CLASSIFICATION_STATIC,    /**< Static echo.               */
-		DRX_CLASSIFICATION_MOVING,    /**< Moving echo.               */
-		DRX_CLASSIFICATION_ZERODB,    /**< Zero dB echo.              */
-		DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,
-					      /**< Unknown classification     */
-		DRX_CLASSIFICATION_AUTO = DRX_AUTO
-					      /**< Autodetect classification. */
-	} DRXClassification_t, *pDRXClassification_t;
-
-/**
-* /enum DRXInterleaveModes_t
+enum drx_classification {
+	DRX_CLASSIFICATION_GAUSS = 0, /**< Gaussion noise.            */
+	DRX_CLASSIFICATION_HVY_GAUSS, /**< Heavy Gaussion noise.      */
+	DRX_CLASSIFICATION_COCHANNEL, /**< Co-channel.                */
+	DRX_CLASSIFICATION_STATIC,    /**< Static echo.               */
+	DRX_CLASSIFICATION_MOVING,    /**< Moving echo.               */
+	DRX_CLASSIFICATION_ZERODB,    /**< Zero dB echo.              */
+	DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,
+					/**< Unknown classification     */
+	DRX_CLASSIFICATION_AUTO = DRX_AUTO
+					/**< Autodetect classification. */
+};
+
+/**
+* /enum enum drx_interleave_mode
 * /brief Interleave modes
 */
-	typedef enum {
-		DRX_INTERLEAVEMODE_I128_J1 = 0,
-		DRX_INTERLEAVEMODE_I128_J1_V2,
-		DRX_INTERLEAVEMODE_I128_J2,
-		DRX_INTERLEAVEMODE_I64_J2,
-		DRX_INTERLEAVEMODE_I128_J3,
-		DRX_INTERLEAVEMODE_I32_J4,
-		DRX_INTERLEAVEMODE_I128_J4,
-		DRX_INTERLEAVEMODE_I16_J8,
-		DRX_INTERLEAVEMODE_I128_J5,
-		DRX_INTERLEAVEMODE_I8_J16,
-		DRX_INTERLEAVEMODE_I128_J6,
-		DRX_INTERLEAVEMODE_RESERVED_11,
-		DRX_INTERLEAVEMODE_I128_J7,
-		DRX_INTERLEAVEMODE_RESERVED_13,
-		DRX_INTERLEAVEMODE_I128_J8,
-		DRX_INTERLEAVEMODE_RESERVED_15,
-		DRX_INTERLEAVEMODE_I12_J17,
-		DRX_INTERLEAVEMODE_I5_J4,
-		DRX_INTERLEAVEMODE_B52_M240,
-		DRX_INTERLEAVEMODE_B52_M720,
-		DRX_INTERLEAVEMODE_B52_M48,
-		DRX_INTERLEAVEMODE_B52_M0,
-		DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,
-					      /**< Unknown interleave mode    */
-		DRX_INTERLEAVEMODE_AUTO = DRX_AUTO
-					      /**< Autodetect interleave mode */
-	} DRXInterleaveModes_t, *pDRXInterleaveModes_t;
-
-/**
-* \enum DRXCarrier_t
+enum drx_interleave_mode {
+	DRX_INTERLEAVEMODE_I128_J1 = 0,
+	DRX_INTERLEAVEMODE_I128_J1_V2,
+	DRX_INTERLEAVEMODE_I128_J2,
+	DRX_INTERLEAVEMODE_I64_J2,
+	DRX_INTERLEAVEMODE_I128_J3,
+	DRX_INTERLEAVEMODE_I32_J4,
+	DRX_INTERLEAVEMODE_I128_J4,
+	DRX_INTERLEAVEMODE_I16_J8,
+	DRX_INTERLEAVEMODE_I128_J5,
+	DRX_INTERLEAVEMODE_I8_J16,
+	DRX_INTERLEAVEMODE_I128_J6,
+	DRX_INTERLEAVEMODE_RESERVED_11,
+	DRX_INTERLEAVEMODE_I128_J7,
+	DRX_INTERLEAVEMODE_RESERVED_13,
+	DRX_INTERLEAVEMODE_I128_J8,
+	DRX_INTERLEAVEMODE_RESERVED_15,
+	DRX_INTERLEAVEMODE_I12_J17,
+	DRX_INTERLEAVEMODE_I5_J4,
+	DRX_INTERLEAVEMODE_B52_M240,
+	DRX_INTERLEAVEMODE_B52_M720,
+	DRX_INTERLEAVEMODE_B52_M48,
+	DRX_INTERLEAVEMODE_B52_M0,
+	DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,
+					/**< Unknown interleave mode    */
+	DRX_INTERLEAVEMODE_AUTO = DRX_AUTO
+					/**< Autodetect interleave mode */
+};
+
+/**
+* \enum enum drx_carrier_mode
 * \brief Channel Carrier Mode.
 */
-	typedef enum {
-		DRX_CARRIER_MULTI = 0,		/**< Multi carrier mode       */
-		DRX_CARRIER_SINGLE,		/**< Single carrier mode      */
-		DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,
-						/**< Carrier mode unknown.    */
-		DRX_CARRIER_AUTO = DRX_AUTO	/**< Autodetect carrier mode  */
-	} DRXCarrier_t, *pDRXCarrier_t;
+enum drx_carrier_mode{
+	DRX_CARRIER_MULTI = 0,		/**< Multi carrier mode       */
+	DRX_CARRIER_SINGLE,		/**< Single carrier mode      */
+	DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,
+					/**< Carrier mode unknown.    */
+	DRX_CARRIER_AUTO = DRX_AUTO	/**< Autodetect carrier mode  */
+};
 
 /**
-* \enum DRXFramemode_t
+* \enum enum drx_frame_mode
 * \brief Channel Frame Mode.
 */
-	typedef enum {
-		DRX_FRAMEMODE_420 = 0,	 /**< 420 with variable PN  */
-		DRX_FRAMEMODE_595,	 /**< 595                   */
-		DRX_FRAMEMODE_945,	 /**< 945 with variable PN  */
-		DRX_FRAMEMODE_420_FIXED_PN,
-					 /**< 420 with fixed PN     */
-		DRX_FRAMEMODE_945_FIXED_PN,
-					 /**< 945 with fixed PN     */
-		DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,
-					 /**< Frame mode unknown.   */
-		DRX_FRAMEMODE_AUTO = DRX_AUTO
-					 /**< Autodetect frame mode */
-	} DRXFramemode_t, *pDRXFramemode_t;
-
-/**
-* \enum DRXTPSFrame_t
+enum drx_frame_mode{
+	DRX_FRAMEMODE_420 = 0,	 /**< 420 with variable PN  */
+	DRX_FRAMEMODE_595,	 /**< 595                   */
+	DRX_FRAMEMODE_945,	 /**< 945 with variable PN  */
+	DRX_FRAMEMODE_420_FIXED_PN,
+					/**< 420 with fixed PN     */
+	DRX_FRAMEMODE_945_FIXED_PN,
+					/**< 945 with fixed PN     */
+	DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,
+					/**< Frame mode unknown.   */
+	DRX_FRAMEMODE_AUTO = DRX_AUTO
+					/**< Autodetect frame mode */
+};
+
+/**
+* \enum enum drx_tps_frame
 * \brief Frame number in current super-frame.
 */
-	typedef enum {
-		DRX_TPS_FRAME1 = 0,	  /**< TPS frame 1.       */
-		DRX_TPS_FRAME2,		  /**< TPS frame 2.       */
-		DRX_TPS_FRAME3,		  /**< TPS frame 3.       */
-		DRX_TPS_FRAME4,		  /**< TPS frame 4.       */
-		DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN
-					  /**< TPS frame unknown. */
-	} DRXTPSFrame_t, *pDRXTPSFrame_t;
+enum drx_tps_frame{
+	DRX_TPS_FRAME1 = 0,	  /**< TPS frame 1.       */
+	DRX_TPS_FRAME2,		  /**< TPS frame 2.       */
+	DRX_TPS_FRAME3,		  /**< TPS frame 3.       */
+	DRX_TPS_FRAME4,		  /**< TPS frame 4.       */
+	DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN
+					/**< TPS frame unknown. */
+};
 
 /**
-* \enum DRXLDPC_t
+* \enum enum drx_ldpc
 * \brief TPS LDPC .
 */
-	typedef enum {
-		DRX_LDPC_0_4 = 0,	  /**< LDPC 0.4           */
-		DRX_LDPC_0_6,		  /**< LDPC 0.6           */
-		DRX_LDPC_0_8,		  /**< LDPC 0.8           */
-		DRX_LDPC_UNKNOWN = DRX_UNKNOWN,
-					  /**< LDPC unknown.      */
-		DRX_LDPC_AUTO = DRX_AUTO  /**< Autodetect LDPC    */
-	} DRXLDPC_t, *pDRXLDPC_t;
+enum drx_ldpc{
+	DRX_LDPC_0_4 = 0,	  /**< LDPC 0.4           */
+	DRX_LDPC_0_6,		  /**< LDPC 0.6           */
+	DRX_LDPC_0_8,		  /**< LDPC 0.8           */
+	DRX_LDPC_UNKNOWN = DRX_UNKNOWN,
+					/**< LDPC unknown.      */
+	DRX_LDPC_AUTO = DRX_AUTO  /**< Autodetect LDPC    */
+};
 
 /**
-* \enum DRXPilotMode_t
+* \enum enum drx_pilot_mode
 * \brief Pilot modes in DTMB.
 */
-	typedef enum {
-		DRX_PILOT_ON = 0,	  /**< Pilot On             */
-		DRX_PILOT_OFF,		  /**< Pilot Off            */
-		DRX_PILOT_UNKNOWN = DRX_UNKNOWN,
-					  /**< Pilot unknown.       */
-		DRX_PILOT_AUTO = DRX_AUTO /**< Autodetect Pilot     */
-	} DRXPilotMode_t, *pDRXPilotMode_t;
-
-/**
-* \enum DRXCtrlIndex_t
-* \brief Indices of the control functions.
-*/
-	typedef u32 DRXCtrlIndex_t, *pDRXCtrlIndex_t;
+enum drx_pilot_mode{
+	DRX_PILOT_ON = 0,	  /**< Pilot On             */
+	DRX_PILOT_OFF,		  /**< Pilot Off            */
+	DRX_PILOT_UNKNOWN = DRX_UNKNOWN,
+					/**< Pilot unknown.       */
+	DRX_PILOT_AUTO = DRX_AUTO /**< Autodetect Pilot     */
+};
 
-#ifndef DRX_CTRL_BASE
-#define DRX_CTRL_BASE          ((DRXCtrlIndex_t)0)
-#endif
+#define DRX_CTRL_BASE          ((u32)0)
 
 #define DRX_CTRL_NOP             ( DRX_CTRL_BASE +  0)/**< No Operation       */
 #define DRX_CTRL_PROBE_DEVICE    ( DRX_CTRL_BASE +  1)/**< Probe device       */
@@ -1129,28 +1102,28 @@ STRUCTS
 	typedef struct {
 		s32 frequency;
 					/**< frequency in kHz                 */
-		DRXBandwidth_t bandwidth;
+		enum drx_bandwidth bandwidth;
 					/**< bandwidth                        */
-		DRXMirror_t mirror;	/**< mirrored or not on RF            */
-		DRXConstellation_t constellation;
+		enum drx_mirror mirror;	/**< mirrored or not on RF            */
+		enum drx_modulation constellation;
 					/**< constellation                    */
-		DRXHierarchy_t hierarchy;
+		enum drx_hierarchy hierarchy;
 					/**< hierarchy                        */
-		DRXPriority_t priority;	/**< priority                         */
-		DRXCoderate_t coderate;	/**< coderate                         */
-		DRXGuard_t guard;	/**< guard interval                   */
-		DRXFftmode_t fftmode;	/**< fftmode                          */
-		DRXClassification_t classification;
+		enum drx_priority priority;	/**< priority                         */
+		enum drx_coderate coderate;	/**< coderate                         */
+		enum drx_guard guard;	/**< guard interval                   */
+		enum drx_fft_mode fftmode;	/**< fftmode                          */
+		enum drx_classification classification;
 					/**< classification                   */
 		u32 symbolrate;
 					/**< symbolrate in symbols/sec        */
-		DRXInterleaveModes_t interleavemode;
+		enum drx_interleave_mode interleavemode;
 					/**< interleaveMode QAM               */
-		DRXLDPC_t ldpc;		/**< ldpc                             */
-		DRXCarrier_t carrier;	/**< carrier                          */
-		DRXFramemode_t framemode;
+		enum drx_ldpc ldpc;		/**< ldpc                             */
+		enum drx_carrier_mode carrier;	/**< carrier                          */
+		enum drx_frame_mode framemode;
 					/**< frame mode                       */
-		DRXPilotMode_t pilot;	/**< pilot mode                       */
+		enum drx_pilot_mode pilot;	/**< pilot mode                       */
 	} DRXChannel_t, *pDRXChannel_t;
 
 /*========================================*/
@@ -1217,7 +1190,7 @@ STRUCTS
 			     /**< Last centre frequency in this band         */
 		s32 step;
 			     /**< Stepping frequency in this band            */
-		DRXBandwidth_t bandwidth;
+		enum drx_bandwidth bandwidth;
 			     /**< Bandwidth within this frequency band       */
 		u16 chNumber;
 			     /**< First channel number in this band, or first
@@ -1250,7 +1223,7 @@ STRUCTS
 	typedef struct {
 		u32 *symbolrate;	  /**<  list of symbolrates to scan   */
 		u16 symbolrateSize;	  /**<  size of symbolrate array      */
-		pDRXConstellation_t constellation;
+		enum drx_modulation * constellation;
 					  /**<  list of constellations        */
 		u16 constellationSize;    /**<  size of constellation array */
 		u16 ifAgcThreshold;	  /**<  thresholf for IF-AGC based
@@ -1303,7 +1276,7 @@ STRUCTS
 /**
 * \brief Inner scan function prototype.
 */
-	typedef DRXStatus_t(*DRXScanFunc_t) (void *scanContext,
+	typedef int(*DRXScanFunc_t) (void *scanContext,
 					     DRXScanCommand_t scanCommand,
 					     pDRXChannel_t scanChannel,
 					     bool * getNextChannel);
@@ -1317,17 +1290,17 @@ STRUCTS
 * Used by DRX_CTRL_TPS_INFO.
 */
 	typedef struct {
-		DRXFftmode_t fftmode;	/**< Fft mode       */
-		DRXGuard_t guard;	/**< Guard interval */
-		DRXConstellation_t constellation;
+		enum drx_fft_mode fftmode;	/**< Fft mode       */
+		enum drx_guard guard;	/**< Guard interval */
+		enum drx_modulation constellation;
 					/**< Constellation  */
-		DRXHierarchy_t hierarchy;
+		enum drx_hierarchy hierarchy;
 					/**< Hierarchy      */
-		DRXCoderate_t highCoderate;
+		enum drx_coderate highCoderate;
 					/**< High code rate */
-		DRXCoderate_t lowCoderate;
+		enum drx_coderate lowCoderate;
 					/**< Low cod rate   */
-		DRXTPSFrame_t frame;	/**< Tps frame      */
+		enum drx_tps_frame frame;	/**< Tps frame      */
 		u8 length;		/**< Length         */
 		u16 cellId;		/**< Cell id        */
 	} DRXTPSInfo_t, *pDRXTPSInfo_t;
@@ -1970,71 +1943,71 @@ STRUCTS
 	typedef u32 DRXflags_t, *pDRXflags_t;
 
 /* Write block of data to device */
-	typedef DRXStatus_t(*DRXWriteBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXWriteBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u16 datasize,	/* size of data in bytes        */
 						   u8 *data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read block of data from device */
-	typedef DRXStatus_t(*DRXReadBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXReadBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u16 datasize,	/* size of data in bytes        */
 						  u8 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Write 8-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u8 data,	/* data to send                 */
 						  DRXflags_t flags);
 
 /* Read 8-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXReadReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						 DRXaddr_t addr,	/* address of register/memory   */
 						 u8 *data,	/* receive buffer               */
 						 DRXflags_t flags);
 
 /* Read modify write 8-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
+	typedef int(*DRXReadModifyWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							    DRXaddr_t waddr,	/* write address of register   */
 							    DRXaddr_t raddr,	/* read  address of register   */
 							    u8 wdata,	/* data to write               */
 							    u8 *rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u16 data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 16-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXReadReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u16 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 16-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
+	typedef int(*DRXReadModifyWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
 							     u16 wdata,	/* data to write               */
 							     u16 *rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u32 data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 32-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
+	typedef int(*DRXReadReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u32 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 32-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
+	typedef int(*DRXReadModifyWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
 							     u32 wdata,	/* data to write               */
@@ -2146,11 +2119,11 @@ STRUCTS
 
 		DRXChannel_t currentChannel;
 				      /**< current channel parameters         */
-		DRXStandard_t currentStandard;
+		enum drx_standard currentStandard;
 				      /**< current standard selection         */
-		DRXStandard_t prevStandard;
+		enum drx_standard prevStandard;
 				      /**< previous standard selection        */
-		DRXStandard_t diCacheStandard;
+		enum drx_standard diCacheStandard;
 				      /**< standard in DI cache if available  */
 		bool useBootloader; /**< use bootloader in open             */
 		u32 capabilities;   /**< capabilities flags                 */
@@ -2163,10 +2136,10 @@ STRUCTS
 */
 	typedef struct DRXDemodInstance_s *pDRXDemodInstance_t;
 
-	typedef DRXStatus_t(*DRXOpenFunc_t) (pDRXDemodInstance_t demod);
-	typedef DRXStatus_t(*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
-	typedef DRXStatus_t(*DRXCtrlFunc_t) (pDRXDemodInstance_t demod,
-					     DRXCtrlIndex_t ctrl,
+	typedef int(*DRXOpenFunc_t) (pDRXDemodInstance_t demod);
+	typedef int(*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
+	typedef int(*DRXCtrlFunc_t) (pDRXDemodInstance_t demod,
+					     u32 ctrl,
 					     void *ctrlData);
 
 /**
@@ -2190,7 +2163,7 @@ STRUCTS
 				    /**< demodulator functions                */
 		pDRXAccessFunc_t myAccessFunct;
 				    /**< data access protocol functions       */
-		pTUNERInstance_t myTuner;
+		struct tuner_instance *myTuner;
 				    /**< tuner instance,if NULL then baseband */
 		struct i2c_device_addr *myI2CDevAddr;
 				    /**< i2c address and device identifier    */
@@ -2865,7 +2838,7 @@ Access macros
 
 #define DRX_ACCESSMACRO_GET( demod, value, cfgName, dataType, errorValue ) \
    do {                                                                    \
-      DRXStatus_t cfgStatus;                                               \
+      int cfgStatus;                                               \
       DRXCfg_t    config;                                                  \
       dataType    cfgData;                                                 \
       config.cfgType = cfgName;                                            \
@@ -2946,21 +2919,18 @@ Access macros
 Exported FUNCTIONS
 -------------------------------------------------------------------------*/
 
-	DRXStatus_t DRX_Init(pDRXDemodInstance_t demods[]);
+	int DRX_Init(pDRXDemodInstance_t demods[]);
 
-	DRXStatus_t DRX_Term(void);
+	int DRX_Term(void);
 
-	DRXStatus_t DRX_Open(pDRXDemodInstance_t demod);
+	int DRX_Open(pDRXDemodInstance_t demod);
 
-	DRXStatus_t DRX_Close(pDRXDemodInstance_t demod);
+	int DRX_Close(pDRXDemodInstance_t demod);
 
-	DRXStatus_t DRX_Ctrl(pDRXDemodInstance_t demod,
-			     DRXCtrlIndex_t ctrl, void *ctrlData);
+	int DRX_Ctrl(pDRXDemodInstance_t demod,
+			     u32 ctrl, void *ctrlData);
 
 /*-------------------------------------------------------------------------
 THE END
 -------------------------------------------------------------------------*/
-#ifdef __cplusplus
-}
-#endif
 #endif				/* __DRXDRIVER_H__ */

commit 6c1d56c5cb2271567e60a9a94e4d3591d3043ef2
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 01:13:25 2012 -0300

    [media] drx-j: get rid of the bsp*.h headers
    
    Move them into drx_driver.h
    
    That makes easier to cleanup further what's there at the
    headers.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 12e7770448cb..752b2b3a50ac 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -36,13 +36,257 @@
 */
 #ifndef __DRXDRIVER_H__
 #define __DRXDRIVER_H__
+
+#include <linux/kernel.h>
 /*-------------------------------------------------------------------------
 INCLUDES
 -------------------------------------------------------------------------*/
-#include "bsp_types.h"
-#include "bsp_i2c.h"
-#include "bsp_tuner.h"
-#include "bsp_host.h"
+
+typedef enum {
+	DRX_STS_READY = 3,  /**< device/service is ready     */
+	DRX_STS_BUSY = 2,   /**< device/service is busy      */
+	DRX_STS_OK = 1,	    /**< everything is OK            */
+	DRX_STS_INVALID_ARG = -1,
+				/**< invalid arguments           */
+	DRX_STS_ERROR = -2, /**< general error               */
+	DRX_STS_FUNC_NOT_AVAILABLE = -3
+				/**< unavailable functionality   */
+} DRXStatus_t, *pDRXStatus_t;
+
+/*
+ * This structure contains the I2C address, the device ID and a userData pointer.
+ * The userData pointer can be used for application specific purposes.
+ */
+struct i2c_device_addr {
+	u16 i2cAddr;		/* The I2C address of the device. */
+	u16 i2cDevId;		/* The device identifier. */
+	void *userData;		/* User data pointer */
+};
+
+/**
+* \def IS_I2C_10BIT( addr )
+* \brief Determine if I2C address 'addr' is a 10 bits address or not.
+* \param addr The I2C address.
+* \return int.
+* \retval 0 if address is not a 10 bits I2C address.
+* \retval 1 if address is a 10 bits I2C address.
+*/
+#define IS_I2C_10BIT(addr) \
+	 (((addr) & 0xF8) == 0xF0)
+
+/*------------------------------------------------------------------------------
+Exported FUNCTIONS
+------------------------------------------------------------------------------*/
+
+/**
+* \fn DRXBSP_I2C_Init()
+* \brief Initialize I2C communication module.
+* \return DRXStatus_t Return status.
+* \retval DRX_STS_OK Initialization successful.
+* \retval DRX_STS_ERROR Initialization failed.
+*/
+DRXStatus_t DRXBSP_I2C_Init(void);
+
+/**
+* \fn DRXBSP_I2C_Term()
+* \brief Terminate I2C communication module.
+* \return DRXStatus_t Return status.
+* \retval DRX_STS_OK Termination successful.
+* \retval DRX_STS_ERROR Termination failed.
+*/
+DRXStatus_t DRXBSP_I2C_Term(void);
+
+/**
+* \fn DRXStatus_t DRXBSP_I2C_WriteRead( struct i2c_device_addr *wDevAddr,
+*                                       u16 wCount,
+*                                       u8 * wData,
+*                                       struct i2c_device_addr *rDevAddr,
+*                                       u16 rCount,
+*                                       u8 * rData)
+* \brief Read and/or write count bytes from I2C bus, store them in data[].
+* \param wDevAddr The device i2c address and the device ID to write to
+* \param wCount   The number of bytes to write
+* \param wData    The array to write the data to
+* \param rDevAddr The device i2c address and the device ID to read from
+* \param rCount   The number of bytes to read
+* \param rData    The array to read the data from
+* \return DRXStatus_t Return status.
+* \retval DRX_STS_OK Succes.
+* \retval DRX_STS_ERROR Failure.
+* \retval DRX_STS_INVALID_ARG Parameter 'wcount' is not zero but parameter
+*                                       'wdata' contains NULL.
+*                                       Idem for 'rcount' and 'rdata'.
+*                                       Both wDevAddr and rDevAddr are NULL.
+*
+* This function must implement an atomic write and/or read action on the I2C bus
+* No other process may use the I2C bus when this function is executing.
+* The critical section of this function runs from and including the I2C
+* write, up to and including the I2C read action.
+*
+* The device ID can be useful if several devices share an I2C address.
+* It can be used to control a "switch" on the I2C bus to the correct device.
+*/
+DRXStatus_t DRXBSP_I2C_WriteRead(struct i2c_device_addr *wDevAddr,
+					u16 wCount,
+					u8 * wData,
+					struct i2c_device_addr *rDevAddr,
+					u16 rCount, u8 * rData);
+
+/**
+* \fn DRXBSP_I2C_ErrorText()
+* \brief Returns a human readable error.
+* Counter part of numerical DRX_I2C_Error_g.
+*
+* \return char* Pointer to human readable error text.
+*/
+char *DRXBSP_I2C_ErrorText(void);
+
+/**
+* \var DRX_I2C_Error_g;
+* \brief I2C specific error codes, platform dependent.
+*/
+extern int DRX_I2C_Error_g;
+
+#define TUNER_MODE_SUB0    0x0001	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB1    0x0002	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB2    0x0004	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB3    0x0008	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB4    0x0010	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB5    0x0020	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB6    0x0040	/* for sub-mode (e.g. RF-AGC setting) */
+#define TUNER_MODE_SUB7    0x0080	/* for sub-mode (e.g. RF-AGC setting) */
+
+#define TUNER_MODE_DIGITAL 0x0100	/* for digital channel (e.g. DVB-T)   */
+#define TUNER_MODE_ANALOG  0x0200	/* for analog channel  (e.g. PAL)     */
+#define TUNER_MODE_SWITCH  0x0400	/* during channel switch & scanning   */
+#define TUNER_MODE_LOCK    0x0800	/* after tuner has locked             */
+#define TUNER_MODE_6MHZ    0x1000	/* for 6MHz bandwidth channels        */
+#define TUNER_MODE_7MHZ    0x2000	/* for 7MHz bandwidth channels        */
+#define TUNER_MODE_8MHZ    0x4000	/* for 8MHz bandwidth channels        */
+
+#define TUNER_MODE_SUB_MAX 8
+#define TUNER_MODE_SUBALL  (  TUNER_MODE_SUB0 | TUNER_MODE_SUB1 | \
+			      TUNER_MODE_SUB2 | TUNER_MODE_SUB3 | \
+			      TUNER_MODE_SUB4 | TUNER_MODE_SUB5 | \
+			      TUNER_MODE_SUB6 | TUNER_MODE_SUB7 )
+
+typedef u32 TUNERMode_t;
+typedef u32 * pTUNERMode_t;
+
+typedef char *TUNERSubMode_t;	/* description of submode */
+typedef TUNERSubMode_t *pTUNERSubMode_t;
+
+typedef enum {
+
+	TUNER_LOCKED,
+	TUNER_NOT_LOCKED
+} TUNERLockStatus_t, *pTUNERLockStatus_t;
+
+typedef struct {
+
+	char *name;	/* Tuner brand & type name */
+	s32 minFreqRF;	/* Lowest  RF input frequency, in kHz */
+	s32 maxFreqRF;	/* Highest RF input frequency, in kHz */
+
+	u8 subMode;	/* Index to sub-mode in use */
+	pTUNERSubMode_t subModeDescriptions;	/* Pointer to description of sub-modes */
+	u8 subModes;	/* Number of available sub-modes      */
+
+	/* The following fields will be either 0, NULL or false and do not need
+		initialisation */
+	void *selfCheck;	/* gives proof of initialization  */
+	bool programmed;	/* only valid if selfCheck is OK  */
+	s32 RFfrequency;	/* only valid if programmed       */
+	s32 IFfrequency;	/* only valid if programmed       */
+
+	void *myUserData;	/* pointer to associated demod instance */
+	u16 myCapabilities;	/* value for storing application flags  */
+
+} TUNERCommonAttr_t, *pTUNERCommonAttr_t;
+
+typedef struct TUNERInstance_s *pTUNERInstance_t;
+
+typedef DRXStatus_t(*TUNEROpenFunc_t) (pTUNERInstance_t tuner);
+typedef DRXStatus_t(*TUNERCloseFunc_t) (pTUNERInstance_t tuner);
+
+typedef DRXStatus_t(*TUNERSetFrequencyFunc_t) (pTUNERInstance_t tuner,
+						TUNERMode_t mode,
+						s32
+						frequency);
+
+typedef DRXStatus_t(*TUNERGetFrequencyFunc_t) (pTUNERInstance_t tuner,
+						TUNERMode_t mode,
+						s32 *
+						RFfrequency,
+						s32 *
+						IFfrequency);
+
+typedef DRXStatus_t(*TUNERLockStatusFunc_t) (pTUNERInstance_t tuner,
+						pTUNERLockStatus_t
+						lockStat);
+
+typedef DRXStatus_t(*TUNERi2cWriteReadFunc_t) (pTUNERInstance_t tuner,
+						struct i2c_device_addr *
+						wDevAddr, u16 wCount,
+						u8 * wData,
+						struct i2c_device_addr *
+						rDevAddr, u16 rCount,
+						u8 * rData);
+
+typedef struct {
+	TUNEROpenFunc_t openFunc;
+	TUNERCloseFunc_t closeFunc;
+	TUNERSetFrequencyFunc_t setFrequencyFunc;
+	TUNERGetFrequencyFunc_t getFrequencyFunc;
+	TUNERLockStatusFunc_t lockStatusFunc;
+	TUNERi2cWriteReadFunc_t i2cWriteReadFunc;
+
+} TUNERFunc_t, *pTUNERFunc_t;
+
+typedef struct TUNERInstance_s {
+
+	struct i2c_device_addr myI2CDevAddr;
+	pTUNERCommonAttr_t myCommonAttr;
+	void *myExtAttr;
+	pTUNERFunc_t myFunct;
+
+} TUNERInstance_t;
+
+DRXStatus_t DRXBSP_TUNER_Open(pTUNERInstance_t tuner);
+
+DRXStatus_t DRXBSP_TUNER_Close(pTUNERInstance_t tuner);
+
+DRXStatus_t DRXBSP_TUNER_SetFrequency(pTUNERInstance_t tuner,
+					TUNERMode_t mode,
+					s32 frequency);
+
+DRXStatus_t DRXBSP_TUNER_GetFrequency(pTUNERInstance_t tuner,
+					TUNERMode_t mode,
+					s32 * RFfrequency,
+					s32 * IFfrequency);
+
+DRXStatus_t DRXBSP_TUNER_LockStatus(pTUNERInstance_t tuner,
+					pTUNERLockStatus_t lockStat);
+
+DRXStatus_t DRXBSP_TUNER_DefaultI2CWriteRead(pTUNERInstance_t tuner,
+						struct i2c_device_addr *wDevAddr,
+						u16 wCount,
+						u8 * wData,
+						struct i2c_device_addr *rDevAddr,
+						u16 rCount, u8 * rData);
+
+DRXStatus_t DRXBSP_HST_Init(void);
+
+DRXStatus_t DRXBSP_HST_Term(void);
+
+void *DRXBSP_HST_Memcpy(void *to, void *from, u32 n);
+
+int DRXBSP_HST_Memcmp(void *s1, void *s2, u32 n);
+
+u32 DRXBSP_HST_Clock(void);
+
+DRXStatus_t DRXBSP_HST_Sleep(u32 n);
+
 
 #ifdef __cplusplus
 extern "C" {

commit 73f7065be6f31080d92ceec14c69b76b9f7b705c
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 00:59:03 2012 -0300

    [media] drx-j: get rid of the other typedefs at bsp_types.h
    
    Most of the work were done by those small scripts:
    
    for i in *; do sed s,pDRXFrequency_t,"s32 *",g <$i >a && mv a $i; done
    for i in *; do sed s,DRXFrequency_t,"s32",g <$i >a && mv a $i; done
    for i in *; do sed s,pDRXSymbolrate_t,"u32 *",g <$i >a && mv a $i; done
    for i in *; do sed s,DRXSymbolrate_t,"u32",g <$i >a && mv a $i; done
    for i in *; do sed s,FALSE,false,g <$i >a && mv a $i; done
    for i in *; do sed s,TRUE,true,g <$i >a && mv a $i; done
    for i in *; do sed s,Bool_t,bool,g <$i >a && mv a $i; done
    for i in *; do sed s,pbool,"bool *",g <$i >a && mv a $i; done
    
    The only remaining things there are the return values.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 8f0f2edbb733..12e7770448cb 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -274,17 +274,17 @@ MACROS
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
 #define DRX_S24TODRXFREQ(x) ( ( ( (u32) x ) & 0x00800000UL ) ? \
-				 (  (DRXFrequency_t) \
+				 (  (s32) \
 				    ( ( (u32) x ) | 0xFF000000 ) ) : \
-				 ( (DRXFrequency_t) x ) )
+				 ( (s32) x ) )
 
 /**
-* \brief Macro to convert 16 bit register value to a DRXFrequency_t
+* \brief Macro to convert 16 bit register value to a s32
 */
 #define DRX_U16TODRXFREQ(x)   (  ( x & 0x8000 ) ? \
-				 (  (DRXFrequency_t) \
+				 (  (s32) \
 				    ( ( (u32) x ) | 0xFFFF0000 ) ) : \
-				 ( (DRXFrequency_t) x ) )
+				 ( (s32) x ) )
 
 /*-------------------------------------------------------------------------
 ENUM
@@ -883,7 +883,7 @@ STRUCTS
 *
 */
 	typedef struct {
-		DRXFrequency_t frequency;
+		s32 frequency;
 					/**< frequency in kHz                 */
 		DRXBandwidth_t bandwidth;
 					/**< bandwidth                        */
@@ -898,7 +898,7 @@ STRUCTS
 		DRXFftmode_t fftmode;	/**< fftmode                          */
 		DRXClassification_t classification;
 					/**< classification                   */
-		DRXSymbolrate_t symbolrate;
+		u32 symbolrate;
 					/**< symbolrate in symbols/sec        */
 		DRXInterleaveModes_t interleavemode;
 					/**< interleaveMode QAM               */
@@ -967,11 +967,11 @@ STRUCTS
 * Used by DRX_CTRL_SCAN_INIT.
 */
 	typedef struct {
-		DRXFrequency_t first;
+		s32 first;
 			     /**< First centre frequency in this band        */
-		DRXFrequency_t last;
+		s32 last;
 			     /**< Last centre frequency in this band         */
-		DRXFrequency_t step;
+		s32 step;
 			     /**< Stepping frequency in this band            */
 		DRXBandwidth_t bandwidth;
 			     /**< Bandwidth within this frequency band       */
@@ -1037,7 +1037,7 @@ STRUCTS
 					  /**< Frequency plan (array)*/
 		u16 frequencyPlanSize;  /**< Number of bands       */
 		u32 numTries;		  /**< Max channels tried    */
-		DRXFrequency_t skip;	  /**< Minimum frequency step to take
+		s32 skip;	  /**< Minimum frequency step to take
 						after a channel is found */
 		void *extParams;	  /**< Standard specific params */
 	} DRXScanParam_t, *pDRXScanParam_t;
@@ -1062,7 +1062,7 @@ STRUCTS
 	typedef DRXStatus_t(*DRXScanFunc_t) (void *scanContext,
 					     DRXScanCommand_t scanCommand,
 					     pDRXChannel_t scanChannel,
-					     pBool_t getNextChannel);
+					     bool * getNextChannel);
 
 /*========================================*/
 
@@ -1208,8 +1208,8 @@ STRUCTS
 	typedef struct {
 		DRXUIO_t uio;
 		   /**< UIO identifier              */
-		Bool_t value;
-		   /**< UIO value (TRUE=1, FALSE=0) */
+		bool value;
+		   /**< UIO value (true=1, false=0) */
 	} DRXUIOData_t, *pDRXUIOData_t;
 
 /*========================================*/
@@ -1220,10 +1220,10 @@ STRUCTS
 * Used by DRX_CTRL_SET_OOB.
 */
 	typedef struct {
-		DRXFrequency_t frequency;	   /**< Frequency in kHz      */
+		s32 frequency;	   /**< Frequency in kHz      */
 		DRXOOBDownstreamStandard_t standard;
 						   /**< OOB standard          */
-		Bool_t spectrumInverted;	   /**< If TRUE, then spectrum
+		bool spectrumInverted;	   /**< If true, then spectrum
 							 is inverted          */
 	} DRXOOB_t, *pDRXOOB_t;
 
@@ -1235,7 +1235,7 @@ STRUCTS
 * Used by DRX_CTRL_GET_OOB.
 */
 	typedef struct {
-		DRXFrequency_t frequency; /**< Frequency in Khz         */
+		s32 frequency; /**< Frequency in Khz         */
 		DRXLockStatus_t lock;	  /**< Lock status              */
 		u32 mer;		  /**< MER                      */
 		s32 symbolRateOffset;	  /**< Symbolrate offset in ppm */
@@ -1278,16 +1278,16 @@ STRUCTS
 */
 
 	typedef struct {
-		Bool_t enableMPEGOutput;/**< If TRUE, enable MPEG output      */
-		Bool_t insertRSByte;	/**< If TRUE, insert RS byte          */
-		Bool_t enableParallel;	/**< If TRUE, parallel out otherwise
+		bool enableMPEGOutput;/**< If true, enable MPEG output      */
+		bool insertRSByte;	/**< If true, insert RS byte          */
+		bool enableParallel;	/**< If true, parallel out otherwise
 								     serial   */
-		Bool_t invertDATA;	/**< If TRUE, invert DATA signals     */
-		Bool_t invertERR;	/**< If TRUE, invert ERR signal       */
-		Bool_t invertSTR;	/**< If TRUE, invert STR signals      */
-		Bool_t invertVAL;	/**< If TRUE, invert VAL signals      */
-		Bool_t invertCLK;	/**< If TRUE, invert CLK signals      */
-		Bool_t staticCLK;	/**< If TRUE, static MPEG clockrate
+		bool invertDATA;	/**< If true, invert DATA signals     */
+		bool invertERR;	/**< If true, invert ERR signal       */
+		bool invertSTR;	/**< If true, invert STR signals      */
+		bool invertVAL;	/**< If true, invert VAL signals      */
+		bool invertCLK;	/**< If true, invert CLK signals      */
+		bool staticCLK;	/**< If true, static MPEG clockrate
 					     will be used, otherwise clockrate
 					     will adapt to the bitrate of the
 					     TS                               */
@@ -1314,7 +1314,7 @@ STRUCTS
 	typedef struct {
 		DRXCfgSMAIO_t io;
 		u16 ctrlData;
-		Bool_t smartAntInverted;
+		bool smartAntInverted;
 	} DRXCfgSMA_t, *pDRXCfgSMA_t;
 
 /*========================================*/
@@ -1391,11 +1391,11 @@ STRUCTS
 * \brief Audio status characteristics.
 */
 	typedef struct {
-		Bool_t stereo;		  /**< stereo detection               */
-		Bool_t carrierA;	  /**< carrier A detected             */
-		Bool_t carrierB;	  /**< carrier B detected             */
-		Bool_t sap;		  /**< sap / bilingual detection      */
-		Bool_t rds;		  /**< RDS data array present         */
+		bool stereo;		  /**< stereo detection               */
+		bool carrierA;	  /**< carrier A detected             */
+		bool carrierB;	  /**< carrier B detected             */
+		bool sap;		  /**< sap / bilingual detection      */
+		bool rds;		  /**< RDS data array present         */
 		DRXAudNICAMStatus_t nicamStatus;
 					  /**< status of NICAM carrier        */
 		s8 fmIdent;		  /**< FM Identification value        */
@@ -1408,7 +1408,7 @@ STRUCTS
 * \brief Raw RDS data array.
 */
 	typedef struct {
-		Bool_t valid;		  /**< RDS data validation            */
+		bool valid;		  /**< RDS data validation            */
 		u16 data[18];		  /**< data from one RDS data array   */
 	} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
 
@@ -1451,7 +1451,7 @@ STRUCTS
 * \brief Audio volume configuration.
 */
 	typedef struct {
-		Bool_t mute;		  /**< mute overrides volume setting  */
+		bool mute;		  /**< mute overrides volume setting  */
 		s16 volume;		  /**< volume, range -114 to 12 dB    */
 		DRXAudAVCMode_t avcMode;  /**< AVC auto volume control mode   */
 		u16 avcRefLevel;	  /**< AVC reference level            */
@@ -1507,7 +1507,7 @@ STRUCTS
 * \brief I2S output configuration.
 */
 	typedef struct {
-		Bool_t outputEnable;	  /**< I2S output enable              */
+		bool outputEnable;	  /**< I2S output enable              */
 		u32 frequency;	  /**< range from 8000-48000 Hz       */
 		DRXI2SMode_t mode;	  /**< I2S mode, master or slave      */
 		DRXI2SWordLength_t wordLength;
@@ -1575,8 +1575,8 @@ STRUCTS
 	typedef struct {
 		u16 thres;	/* carrier detetcion threshold for primary carrier (A) */
 		DRXNoCarrierOption_t opt;	/* Mute or noise at no carrier detection (A) */
-		DRXFrequency_t shift;	/* DC level of incoming signal (A) */
-		DRXFrequency_t dco;	/* frequency adjustment (A) */
+		s32 shift;	/* DC level of incoming signal (A) */
+		s32 dco;	/* frequency adjustment (A) */
 	} DRXAudCarrier_t, *pDRXCfgAudCarrier_t;
 
 /**
@@ -1668,7 +1668,7 @@ STRUCTS
 	typedef struct {
 		s16 volume;	/* dB */
 		u16 frequency;	/* Hz */
-		Bool_t mute;
+		bool mute;
 	} DRXAudBeep_t, *pDRXAudBeep_t;
 
 /**
@@ -1686,7 +1686,7 @@ STRUCTS
 */
 	typedef struct {
 		/* audio storage */
-		Bool_t audioIsActive;
+		bool audioIsActive;
 		DRXAudStandard_t audioStandard;
 		DRXCfgI2SOutput_t i2sdata;
 		DRXCfgAudVolume_t volume;
@@ -1701,7 +1701,7 @@ STRUCTS
 		DRXAudBtscDetect_t btscDetect;
 		/* rds */
 		u16 rdsDataCounter;
-		Bool_t rdsDataPresent;
+		bool rdsDataPresent;
 	} DRXAudData_t, *pDRXAudData_t;
 
 /**
@@ -1838,37 +1838,37 @@ STRUCTS
 		u8 *microcode;   /**< Pointer to microcode image.           */
 		u16 microcodeSize;
 				   /**< Size of microcode image in bytes.     */
-		Bool_t verifyMicrocode;
+		bool verifyMicrocode;
 				   /**< Use microcode verify or not.          */
 		DRXMcVersionRec_t mcversion;
 				   /**< Version record of microcode from file */
 
 		/* Clocks and tuner attributes */
-		DRXFrequency_t intermediateFreq;
+		s32 intermediateFreq;
 				     /**< IF,if tuner instance not used. (kHz)*/
-		DRXFrequency_t sysClockFreq;
+		s32 sysClockFreq;
 				     /**< Systemclock frequency.  (kHz)       */
-		DRXFrequency_t oscClockFreq;
+		s32 oscClockFreq;
 				     /**< Oscillator clock frequency.  (kHz)  */
 		s16 oscClockDeviation;
 				     /**< Oscillator clock deviation.  (ppm)  */
-		Bool_t mirrorFreqSpect;
+		bool mirrorFreqSpect;
 				     /**< Mirror IF frequency spectrum or not.*/
 
 		/* Initial MPEG output attributes */
 		DRXCfgMPEGOutput_t mpegCfg;
 				     /**< MPEG configuration                  */
 
-		Bool_t isOpened;     /**< if TRUE instance is already opened. */
+		bool isOpened;     /**< if true instance is already opened. */
 
 		/* Channel scan */
 		pDRXScanParam_t scanParam;
 				      /**< scan parameters                    */
 		u16 scanFreqPlanIndex;
 				      /**< next index in freq plan            */
-		DRXFrequency_t scanNextFrequency;
+		s32 scanNextFrequency;
 				      /**< next freq to scan                  */
-		Bool_t scanReady;     /**< scan ready flag                    */
+		bool scanReady;     /**< scan ready flag                    */
 		u32 scanMaxChannels;/**< number of channels in freqplan     */
 		u32 scanChannelsScanned;
 					/**< number of channels scanned       */
@@ -1884,7 +1884,7 @@ STRUCTS
 				      /**< lock requirement for channel found */
 		/* scanActive can be used by SetChannel to decide how to program the tuner,
 		   fast or slow (but stable). Usually fast during scan. */
-		Bool_t scanActive;    /**< TRUE when scan routines are active */
+		bool scanActive;    /**< true when scan routines are active */
 
 		/* Power management */
 		DRXPowerMode_t currentPowerMode;
@@ -1892,13 +1892,13 @@ STRUCTS
 
 		/* Tuner */
 		u8 tunerPortNr;     /**< nr of I2C port to wich tuner is    */
-		DRXFrequency_t tunerMinFreqRF;
+		s32 tunerMinFreqRF;
 				      /**< minimum RF input frequency, in kHz */
-		DRXFrequency_t tunerMaxFreqRF;
+		s32 tunerMaxFreqRF;
 				      /**< maximum RF input frequency, in kHz */
-		Bool_t tunerRfAgcPol; /**< if TRUE invert RF AGC polarity     */
-		Bool_t tunerIfAgcPol; /**< if TRUE invert IF AGC polarity     */
-		Bool_t tunerSlowMode; /**< if TRUE invert IF AGC polarity     */
+		bool tunerRfAgcPol; /**< if true invert RF AGC polarity     */
+		bool tunerIfAgcPol; /**< if true invert IF AGC polarity     */
+		bool tunerSlowMode; /**< if true invert IF AGC polarity     */
 
 		DRXChannel_t currentChannel;
 				      /**< current channel parameters         */
@@ -1908,7 +1908,7 @@ STRUCTS
 				      /**< previous standard selection        */
 		DRXStandard_t diCacheStandard;
 				      /**< standard in DI cache if available  */
-		Bool_t useBootloader; /**< use bootloader in open             */
+		bool useBootloader; /**< use bootloader in open             */
 		u32 capabilities;   /**< capabilities flags                 */
 		u32 productId;      /**< product ID inc. metal fix number   */
 
@@ -2204,23 +2204,23 @@ Conversion from enum values to human readable form.
    ( x == DRX_AUD_STANDARD_UNKNOWN      )  ? "Unknown"                  : \
 					     "(Invalid)"  )
 #define DRX_STR_AUD_STEREO(x) ( \
-   ( x == TRUE                          )  ? "Stereo"           : \
-   ( x == FALSE                         )  ? "Mono"             : \
+   ( x == true                          )  ? "Stereo"           : \
+   ( x == false                         )  ? "Mono"             : \
 					     "(Invalid)"  )
 
 #define DRX_STR_AUD_SAP(x) ( \
-   ( x == TRUE                          )  ? "Present"          : \
-   ( x == FALSE                         )  ? "Not present"      : \
+   ( x == true                          )  ? "Present"          : \
+   ( x == false                         )  ? "Not present"      : \
 					     "(Invalid)"  )
 
 #define DRX_STR_AUD_CARRIER(x) ( \
-   ( x == TRUE                          )  ? "Present"          : \
-   ( x == FALSE                         )  ? "Not present"      : \
+   ( x == true                          )  ? "Present"          : \
+   ( x == false                         )  ? "Not present"      : \
 					     "(Invalid)"  )
 
 #define DRX_STR_AUD_RDS(x) ( \
-   ( x == TRUE                          )  ? "Available"        : \
-   ( x == FALSE                         )  ? "Not Available"    : \
+   ( x == true                          )  ? "Available"        : \
+   ( x == false                         )  ? "Not Available"    : \
 					     "(Invalid)"  )
 
 #define DRX_STR_AUD_NICAM_STATUS(x) ( \
@@ -2230,8 +2230,8 @@ Conversion from enum values to human readable form.
 					     "(Invalid)"  )
 
 #define DRX_STR_RDS_VALID(x) ( \
-   ( x == TRUE                          )  ? "Valid"            : \
-   ( x == FALSE                         )  ? "Not Valid"        : \
+   ( x == true                          )  ? "Valid"            : \
+   ( x == false                         )  ? "Not Valid"        : \
 					     "(Invalid)"  )
 
 /*-------------------------------------------------------------------------
@@ -2663,8 +2663,8 @@ Access macros
 
 /**
 * \brief Macro to check if std is an ATV standard
-* \retval TRUE std is an ATV standard
-* \retval FALSE std is an ATV standard
+* \retval true std is an ATV standard
+* \retval false std is an ATV standard
 */
 #define DRX_ISATVSTD( std ) ( ( (std) == DRX_STANDARD_PAL_SECAM_BG ) || \
 			      ( (std) == DRX_STANDARD_PAL_SECAM_DK ) || \
@@ -2676,8 +2676,8 @@ Access macros
 
 /**
 * \brief Macro to check if std is an QAM standard
-* \retval TRUE std is an QAM standards
-* \retval FALSE std is an QAM standards
+* \retval true std is an QAM standards
+* \retval false std is an QAM standards
 */
 #define DRX_ISQAMSTD( std ) ( ( (std) == DRX_STANDARD_ITU_A ) || \
 			      ( (std) == DRX_STANDARD_ITU_B ) || \
@@ -2686,15 +2686,15 @@ Access macros
 
 /**
 * \brief Macro to check if std is VSB standard
-* \retval TRUE std is VSB standard
-* \retval FALSE std is not VSB standard
+* \retval true std is VSB standard
+* \retval false std is not VSB standard
 */
 #define DRX_ISVSBSTD( std ) ( (std) == DRX_STANDARD_8VSB )
 
 /**
 * \brief Macro to check if std is DVBT standard
-* \retval TRUE std is DVBT standard
-* \retval FALSE std is not DVBT standard
+* \retval true std is DVBT standard
+* \retval false std is not DVBT standard
 */
 #define DRX_ISDVBTSTD( std ) ( (std) == DRX_STANDARD_DVBT )
 

commit 43a431e4b2244b25a51b0a5900e894c2a4764ff6
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 00:49:45 2012 -0300

    [media] drx-j: get rid of the integer typedefs
    
    Patch created using this small script:
    
    for j in 8 16 32; do for i in *; do sed s,pu${j}_t,"u$j *",g <$i >a && mv a $i; done; done
    for j in 8 16 32; do for i in *; do sed s,ps${j}_t,"s$j *",g <$i >a && mv a $i; done; done
    for j in 8 16 32; do for i in *; do sed s,s${j}_t,"s$j",g <$i >a && mv a $i; done; done
    for j in 8 16 32; do for i in *; do sed s,u${j}_t,"u$j",g <$i >a && mv a $i; done; done
    
    and fixing the bsp_types.h header.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index c88c064c3ab8..8f0f2edbb733 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -262,20 +262,20 @@ MACROS
 * The macro takes care of the required byte order in a 16 bits word.
 * x->lowbyte(x), highbyte(x)
 */
-#define DRX_16TO8( x ) ((u8_t) (((u16_t)x)    &0xFF)), \
-			((u8_t)((((u16_t)x)>>8)&0xFF))
+#define DRX_16TO8( x ) ((u8) (((u16)x)    &0xFF)), \
+			((u8)((((u16)x)>>8)&0xFF))
 
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S9TOS16(x) ((((u16_t)x)&0x100 )?((s16_t)((u16_t)(x)|0xFF00)):(x))
+#define DRX_S9TOS16(x) ((((u16)x)&0x100 )?((s16)((u16)(x)|0xFF00)):(x))
 
 /**
 * \brief Macro to sign extend signed 9 bit value to signed  16 bit value
 */
-#define DRX_S24TODRXFREQ(x) ( ( ( (u32_t) x ) & 0x00800000UL ) ? \
+#define DRX_S24TODRXFREQ(x) ( ( ( (u32) x ) & 0x00800000UL ) ? \
 				 (  (DRXFrequency_t) \
-				    ( ( (u32_t) x ) | 0xFF000000 ) ) : \
+				    ( ( (u32) x ) | 0xFF000000 ) ) : \
 				 ( (DRXFrequency_t) x ) )
 
 /**
@@ -283,7 +283,7 @@ MACROS
 */
 #define DRX_U16TODRXFREQ(x)   (  ( x & 0x8000 ) ? \
 				 (  (DRXFrequency_t) \
-				    ( ( (u32_t) x ) | 0xFFFF0000 ) ) : \
+				    ( ( (u32) x ) | 0xFFFF0000 ) ) : \
 				 ( (DRXFrequency_t) x ) )
 
 /*-------------------------------------------------------------------------
@@ -579,7 +579,7 @@ ENUM
 * \enum DRXCtrlIndex_t
 * \brief Indices of the control functions.
 */
-	typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
+	typedef u32 DRXCtrlIndex_t, *pDRXCtrlIndex_t;
 
 #ifndef DRX_CTRL_BASE
 #define DRX_CTRL_BASE          ((DRXCtrlIndex_t)0)
@@ -781,7 +781,7 @@ STRUCTS
 * \enum DRXCfgType_t
 * \brief Generic configuration function identifiers.
 */
-	typedef u32_t DRXCfgType_t, *pDRXCfgType_t;
+	typedef u32 DRXCfgType_t, *pDRXCfgType_t;
 
 #ifndef DRX_CFG_BASE
 #define DRX_CFG_BASE          ((DRXCfgType_t)0)
@@ -821,9 +821,9 @@ STRUCTS
 * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
 */
 	typedef struct {
-		pu8_t mcData;
+		u8 *mcData;
 		     /**< Pointer to microcode image. */
-		u16_t mcSize;
+		u16 mcSize;
 		     /**< Microcode image size.       */
 	} DRXUCodeInfo_t, *pDRXUCodeInfo_t;
 
@@ -847,10 +847,10 @@ STRUCTS
 #define AUX_VER_RECORD 0x8000
 
 	typedef struct {
-		u16_t auxType;	/* type of aux data - 0x8000 for version record     */
-		u32_t mcDevType;	/* device type, based on JTAG ID                    */
-		u32_t mcVersion;	/* version of microcode                             */
-		u32_t mcBaseVersion;	/* in case of patch: the original microcode version */
+		u16 auxType;	/* type of aux data - 0x8000 for version record     */
+		u32 mcDevType;	/* device type, based on JTAG ID                    */
+		u32 mcVersion;	/* version of microcode                             */
+		u32 mcBaseVersion;	/* in case of patch: the original microcode version */
 	} DRXMcVersionRec_t, *pDRXMcVersionRec_t;
 
 /*========================================*/
@@ -862,13 +862,13 @@ STRUCTS
 * Used by DRX_CTRL_LOAD_FILTER
 */
 	typedef struct {
-		pu8_t dataRe;
+		u8 *dataRe;
 		      /**< pointer to coefficients for RE */
-		pu8_t dataIm;
+		u8 *dataIm;
 		      /**< pointer to coefficients for IM */
-		u16_t sizeRe;
+		u16 sizeRe;
 		      /**< size of coefficients for RE    */
-		u16_t sizeIm;
+		u16 sizeIm;
 		      /**< size of coefficients for IM    */
 	} DRXFilterInfo_t, *pDRXFilterInfo_t;
 
@@ -918,21 +918,21 @@ STRUCTS
 * Used by DRX_CTRL_SIG_QUALITY.
 */
 	typedef struct {
-		u16_t MER;     /**< in steps of 0.1 dB                        */
-		u32_t preViterbiBER;
+		u16 MER;     /**< in steps of 0.1 dB                        */
+		u32 preViterbiBER;
 			       /**< in steps of 1/scaleFactorBER              */
-		u32_t postViterbiBER;
+		u32 postViterbiBER;
 			       /**< in steps of 1/scaleFactorBER              */
-		u32_t scaleFactorBER;
+		u32 scaleFactorBER;
 			       /**< scale factor for BER                      */
-		u16_t packetError;
+		u16 packetError;
 			       /**< number of packet errors                   */
-		u32_t postReedSolomonBER;
+		u32 postReedSolomonBER;
 			       /**< in steps of 1/scaleFactorBER              */
-		u32_t preLdpcBER;
+		u32 preLdpcBER;
 			       /**< in steps of 1/scaleFactorBER              */
-		u32_t averIter;/**< in steps of 0.01                          */
-		u16_t indicator;
+		u32 averIter;/**< in steps of 0.01                          */
+		u16 indicator;
 			       /**< indicative signal quality low=0..100=high */
 	} DRXSigQuality_t, *pDRXSigQuality_t;
 
@@ -952,9 +952,9 @@ STRUCTS
 * Used by DRX_CTRL_CONSTEL.
 */
 	typedef struct {
-		s16_t im;
+		s16 im;
 	     /**< Imaginary part. */
-		s16_t re;
+		s16 re;
 	     /**< Real part.      */
 	} DRXComplex_t, *pDRXComplex_t;
 
@@ -975,7 +975,7 @@ STRUCTS
 			     /**< Stepping frequency in this band            */
 		DRXBandwidth_t bandwidth;
 			     /**< Bandwidth within this frequency band       */
-		u16_t chNumber;
+		u16 chNumber;
 			     /**< First channel number in this band, or first
 				    index in chNames                         */
 		char **chNames;
@@ -1004,12 +1004,12 @@ STRUCTS
 * QAM specific scanning variables
 */
 	typedef struct {
-		pu32_t symbolrate;	  /**<  list of symbolrates to scan   */
-		u16_t symbolrateSize;	  /**<  size of symbolrate array      */
+		u32 *symbolrate;	  /**<  list of symbolrates to scan   */
+		u16 symbolrateSize;	  /**<  size of symbolrate array      */
 		pDRXConstellation_t constellation;
 					  /**<  list of constellations        */
-		u16_t constellationSize;    /**<  size of constellation array */
-		u16_t ifAgcThreshold;	  /**<  thresholf for IF-AGC based
+		u16 constellationSize;    /**<  size of constellation array */
+		u16 ifAgcThreshold;	  /**<  thresholf for IF-AGC based
 						scanning filter               */
 	} DRXScanDataQam_t, *pDRXScanDataQam_t;
 
@@ -1020,7 +1020,7 @@ STRUCTS
 * ATV specific scanning variables
 */
 	typedef struct {
-		s16_t svrThreshold;
+		s16 svrThreshold;
 			/**< threshold of Sound/Video ratio in 0.1dB steps */
 	} DRXScanDataAtv_t, *pDRXScanDataAtv_t;
 
@@ -1035,8 +1035,8 @@ STRUCTS
 	typedef struct {
 		pDRXFrequencyPlan_t frequencyPlan;
 					  /**< Frequency plan (array)*/
-		u16_t frequencyPlanSize;  /**< Number of bands       */
-		u32_t numTries;		  /**< Max channels tried    */
+		u16 frequencyPlanSize;  /**< Number of bands       */
+		u32 numTries;		  /**< Max channels tried    */
 		DRXFrequency_t skip;	  /**< Minimum frequency step to take
 						after a channel is found */
 		void *extParams;	  /**< Standard specific params */
@@ -1084,8 +1084,8 @@ STRUCTS
 		DRXCoderate_t lowCoderate;
 					/**< Low cod rate   */
 		DRXTPSFrame_t frame;	/**< Tps frame      */
-		u8_t length;		/**< Length         */
-		u16_t cellId;		/**< Cell id        */
+		u8 length;		/**< Length         */
+		u16 cellId;		/**< Cell id        */
 	} DRXTPSInfo_t, *pDRXTPSInfo_t;
 
 /*========================================*/
@@ -1166,9 +1166,9 @@ STRUCTS
 			       /**< Type identifier of the module */
 		char *moduleName;
 			       /**< Name or description of module */
-		u16_t vMajor;  /**< Major version number          */
-		u16_t vMinor;  /**< Minor version number          */
-		u16_t vPatch;  /**< Patch version number          */
+		u16 vMajor;  /**< Major version number          */
+		u16 vMinor;  /**< Minor version number          */
+		u16 vPatch;  /**< Patch version number          */
 		char *vString; /**< Version as text string        */
 	} DRXVersion_t, *pDRXVersion_t;
 
@@ -1237,8 +1237,8 @@ STRUCTS
 	typedef struct {
 		DRXFrequency_t frequency; /**< Frequency in Khz         */
 		DRXLockStatus_t lock;	  /**< Lock status              */
-		u32_t mer;		  /**< MER                      */
-		s32_t symbolRateOffset;	  /**< Symbolrate offset in ppm */
+		u32 mer;		  /**< MER                      */
+		s32 symbolRateOffset;	  /**< Symbolrate offset in ppm */
 	} DRXOOBStatus_t, *pDRXOOBStatus_t;
 
 /*========================================*/
@@ -1291,7 +1291,7 @@ STRUCTS
 					     will be used, otherwise clockrate
 					     will adapt to the bitrate of the
 					     TS                               */
-		u32_t bitrate;		/**< Maximum bitrate in b/s in case
+		u32 bitrate;		/**< Maximum bitrate in b/s in case
 					     static clockrate is selected     */
 		DRXMPEGStrWidth_t widthSTR;
 					/**< MPEG start width                 */
@@ -1313,7 +1313,7 @@ STRUCTS
 */
 	typedef struct {
 		DRXCfgSMAIO_t io;
-		u16_t ctrlData;
+		u16 ctrlData;
 		Bool_t smartAntInverted;
 	} DRXCfgSMA_t, *pDRXCfgSMA_t;
 
@@ -1328,15 +1328,15 @@ STRUCTS
 *
 */
 	typedef struct {
-		u16_t portNr;	/**< I2C port number               */
+		u16 portNr;	/**< I2C port number               */
 		struct i2c_device_addr *wDevAddr;
 				/**< Write device address          */
-		u16_t wCount;	/**< Size of write data in bytes   */
-		pu8_t wData;	/**< Pointer to write data         */
+		u16 wCount;	/**< Size of write data in bytes   */
+		u8 *wData;	/**< Pointer to write data         */
 		struct i2c_device_addr *rDevAddr;
 				/**< Read device address           */
-		u16_t rCount;	/**< Size of data to read in bytes */
-		pu8_t rData;	/**< Pointer to read buffer        */
+		u16 rCount;	/**< Size of data to read in bytes */
+		u8 *rData;	/**< Pointer to read buffer        */
 	} DRXI2CData_t, *pDRXI2CData_t;
 
 /*========================================*/
@@ -1398,7 +1398,7 @@ STRUCTS
 		Bool_t rds;		  /**< RDS data array present         */
 		DRXAudNICAMStatus_t nicamStatus;
 					  /**< status of NICAM carrier        */
-		s8_t fmIdent;		  /**< FM Identification value        */
+		s8 fmIdent;		  /**< FM Identification value        */
 	} DRXAudStatus_t, *pDRXAudStatus_t;
 
 /* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
@@ -1409,7 +1409,7 @@ STRUCTS
 */
 	typedef struct {
 		Bool_t valid;		  /**< RDS data validation            */
-		u16_t data[18];		  /**< data from one RDS data array   */
+		u16 data[18];		  /**< data from one RDS data array   */
 	} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
 
 /* DRX_CFG_AUD_VOLUME      - DRXCfgAudVolume_t - set/get */
@@ -1452,15 +1452,15 @@ STRUCTS
 */
 	typedef struct {
 		Bool_t mute;		  /**< mute overrides volume setting  */
-		s16_t volume;		  /**< volume, range -114 to 12 dB    */
+		s16 volume;		  /**< volume, range -114 to 12 dB    */
 		DRXAudAVCMode_t avcMode;  /**< AVC auto volume control mode   */
-		u16_t avcRefLevel;	  /**< AVC reference level            */
+		u16 avcRefLevel;	  /**< AVC reference level            */
 		DRXAudAVCMaxGain_t avcMaxGain;
 					  /**< AVC max gain selection         */
 		DRXAudAVCMaxAtten_t avcMaxAtten;
 					  /**< AVC max attenuation selection  */
-		s16_t strengthLeft;	  /**< quasi-peak, left speaker       */
-		s16_t strengthRight;	  /**< quasi-peak, right speaker      */
+		s16 strengthLeft;	  /**< quasi-peak, left speaker       */
+		s16 strengthRight;	  /**< quasi-peak, right speaker      */
 	} DRXCfgAudVolume_t, *pDRXCfgAudVolume_t;
 
 /* DRX_CFG_I2S_OUTPUT      - DRXCfgI2SOutput_t - set/get */
@@ -1508,7 +1508,7 @@ STRUCTS
 */
 	typedef struct {
 		Bool_t outputEnable;	  /**< I2S output enable              */
-		u32_t frequency;	  /**< range from 8000-48000 Hz       */
+		u32 frequency;	  /**< range from 8000-48000 Hz       */
 		DRXI2SMode_t mode;	  /**< I2S mode, master or slave      */
 		DRXI2SWordLength_t wordLength;
 					  /**< I2S wordlength, 16 or 32 bits  */
@@ -1563,9 +1563,9 @@ STRUCTS
 * \brief Automatic Sound Select Thresholds
 */
 	typedef struct {
-		u16_t a2;	/* A2 Threshold for ASS configuration */
-		u16_t btsc;	/* BTSC Threshold for ASS configuration */
-		u16_t nicam;	/* Nicam Threshold for ASS configuration */
+		u16 a2;	/* A2 Threshold for ASS configuration */
+		u16 btsc;	/* BTSC Threshold for ASS configuration */
+		u16 nicam;	/* Nicam Threshold for ASS configuration */
 	} DRXCfgAudASSThres_t, *pDRXCfgAudASSThres_t;
 
 /**
@@ -1573,7 +1573,7 @@ STRUCTS
 * \brief Carrier detection related parameters
 */
 	typedef struct {
-		u16_t thres;	/* carrier detetcion threshold for primary carrier (A) */
+		u16 thres;	/* carrier detetcion threshold for primary carrier (A) */
 		DRXNoCarrierOption_t opt;	/* Mute or noise at no carrier detection (A) */
 		DRXFrequency_t shift;	/* DC level of incoming signal (A) */
 		DRXFrequency_t dco;	/* frequency adjustment (A) */
@@ -1657,8 +1657,8 @@ STRUCTS
 * \brief Prescalers
 */
 	typedef struct {
-		u16_t fmDeviation;
-		s16_t nicamGain;
+		u16 fmDeviation;
+		s16 nicamGain;
 	} DRXCfgAudPrescale_t, *pDRXCfgAudPrescale_t;
 
 /**
@@ -1666,8 +1666,8 @@ STRUCTS
 * \brief Beep
 */
 	typedef struct {
-		s16_t volume;	/* dB */
-		u16_t frequency;	/* Hz */
+		s16 volume;	/* dB */
+		u16 frequency;	/* Hz */
 		Bool_t mute;
 	} DRXAudBeep_t, *pDRXAudBeep_t;
 
@@ -1700,7 +1700,7 @@ STRUCTS
 		DRXAudFMDeemphasis_t deemph;
 		DRXAudBtscDetect_t btscDetect;
 		/* rds */
-		u16_t rdsDataCounter;
+		u16 rdsDataCounter;
 		Bool_t rdsDataPresent;
 	} DRXAudData_t, *pDRXAudData_t;
 
@@ -1720,81 +1720,81 @@ STRUCTS
 /*============================================================================*/
 
 /* Address on device */
-	typedef u32_t DRXaddr_t, *pDRXaddr_t;
+	typedef u32 DRXaddr_t, *pDRXaddr_t;
 
 /* Protocol specific flags */
-	typedef u32_t DRXflags_t, *pDRXflags_t;
+	typedef u32 DRXflags_t, *pDRXflags_t;
 
 /* Write block of data to device */
 	typedef DRXStatus_t(*DRXWriteBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
-						   u16_t datasize,	/* size of data in bytes        */
-						   pu8_t data,	/* data to send                 */
+						   u16 datasize,	/* size of data in bytes        */
+						   u8 *data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read block of data from device */
 	typedef DRXStatus_t(*DRXReadBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
-						  u16_t datasize,	/* size of data in bytes        */
-						  pu8_t data,	/* receive buffer               */
+						  u16 datasize,	/* size of data in bytes        */
+						  u8 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Write 8-bits value to device */
 	typedef DRXStatus_t(*DRXWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
-						  u8_t data,	/* data to send                 */
+						  u8 data,	/* data to send                 */
 						  DRXflags_t flags);
 
 /* Read 8-bits value to device */
 	typedef DRXStatus_t(*DRXReadReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						 DRXaddr_t addr,	/* address of register/memory   */
-						 pu8_t data,	/* receive buffer               */
+						 u8 *data,	/* receive buffer               */
 						 DRXflags_t flags);
 
 /* Read modify write 8-bits value to device */
 	typedef DRXStatus_t(*DRXReadModifyWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							    DRXaddr_t waddr,	/* write address of register   */
 							    DRXaddr_t raddr,	/* read  address of register   */
-							    u8_t wdata,	/* data to write               */
-							    pu8_t rdata);	/* data to read                */
+							    u8 wdata,	/* data to write               */
+							    u8 *rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
 	typedef DRXStatus_t(*DRXWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
-						   u16_t data,	/* data to send                 */
+						   u16 data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 16-bits value to device */
 	typedef DRXStatus_t(*DRXReadReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
-						  pu16_t data,	/* receive buffer               */
+						  u16 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 16-bits value to device */
 	typedef DRXStatus_t(*DRXReadModifyWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
-							     u16_t wdata,	/* data to write               */
-							     pu16_t rdata);	/* data to read                */
+							     u16 wdata,	/* data to write               */
+							     u16 *rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
 	typedef DRXStatus_t(*DRXWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
-						   u32_t data,	/* data to send                 */
+						   u32 data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 32-bits value to device */
 	typedef DRXStatus_t(*DRXReadReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
-						  pu32_t data,	/* receive buffer               */
+						  u32 *data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 32-bits value to device */
 	typedef DRXStatus_t(*DRXReadModifyWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
-							     u32_t wdata,	/* data to write               */
-							     pu32_t rdata);	/* data to read                */
+							     u32 wdata,	/* data to write               */
+							     u32 *rdata);	/* data to read                */
 
 /**
 * \struct DRXAccessFunc_t
@@ -1819,7 +1819,7 @@ STRUCTS
 	typedef struct {
 
 		DRXaddr_t address;
-		u32_t data;
+		u32 data;
 
 	} DRXRegDump_t, *pDRXRegDump_t;
 
@@ -1835,8 +1835,8 @@ STRUCTS
 */
 	typedef struct {
 		/* Microcode (firmware) attributes */
-		pu8_t microcode;   /**< Pointer to microcode image.           */
-		u16_t microcodeSize;
+		u8 *microcode;   /**< Pointer to microcode image.           */
+		u16 microcodeSize;
 				   /**< Size of microcode image in bytes.     */
 		Bool_t verifyMicrocode;
 				   /**< Use microcode verify or not.          */
@@ -1850,7 +1850,7 @@ STRUCTS
 				     /**< Systemclock frequency.  (kHz)       */
 		DRXFrequency_t oscClockFreq;
 				     /**< Oscillator clock frequency.  (kHz)  */
-		s16_t oscClockDeviation;
+		s16 oscClockDeviation;
 				     /**< Oscillator clock deviation.  (ppm)  */
 		Bool_t mirrorFreqSpect;
 				     /**< Mirror IF frequency spectrum or not.*/
@@ -1864,13 +1864,13 @@ STRUCTS
 		/* Channel scan */
 		pDRXScanParam_t scanParam;
 				      /**< scan parameters                    */
-		u16_t scanFreqPlanIndex;
+		u16 scanFreqPlanIndex;
 				      /**< next index in freq plan            */
 		DRXFrequency_t scanNextFrequency;
 				      /**< next freq to scan                  */
 		Bool_t scanReady;     /**< scan ready flag                    */
-		u32_t scanMaxChannels;/**< number of channels in freqplan     */
-		u32_t scanChannelsScanned;
+		u32 scanMaxChannels;/**< number of channels in freqplan     */
+		u32 scanChannelsScanned;
 					/**< number of channels scanned       */
 		/* Channel scan - inner loop: demod related */
 		DRXScanFunc_t scanFunction;
@@ -1878,7 +1878,7 @@ STRUCTS
 		/* Channel scan - inner loop: SYSObj related */
 		void *scanContext;    /**< Context Pointer of SYSObj          */
 		/* Channel scan - parameters for default DTV scan function in core driver  */
-		u16_t scanDemodLockTimeout;
+		u16 scanDemodLockTimeout;
 					 /**< millisecs to wait for lock      */
 		DRXLockStatus_t scanDesiredLock;
 				      /**< lock requirement for channel found */
@@ -1891,7 +1891,7 @@ STRUCTS
 				      /**< current power management mode      */
 
 		/* Tuner */
-		u8_t tunerPortNr;     /**< nr of I2C port to wich tuner is    */
+		u8 tunerPortNr;     /**< nr of I2C port to wich tuner is    */
 		DRXFrequency_t tunerMinFreqRF;
 				      /**< minimum RF input frequency, in kHz */
 		DRXFrequency_t tunerMaxFreqRF;
@@ -1909,8 +1909,8 @@ STRUCTS
 		DRXStandard_t diCacheStandard;
 				      /**< standard in DI cache if available  */
 		Bool_t useBootloader; /**< use bootloader in open             */
-		u32_t capabilities;   /**< capabilities flags                 */
-		u32_t productId;      /**< product ID inc. metal fix number   */
+		u32 capabilities;   /**< capabilities flags                 */
+		u32 productId;      /**< product ID inc. metal fix number   */
 
 	} DRXCommonAttr_t, *pDRXCommonAttr_t;
 
@@ -1930,7 +1930,7 @@ STRUCTS
 * \brief A stucture containing all functions of a demodulator.
 */
 	typedef struct {
-		u32_t typeId;		 /**< Device type identifier.      */
+		u32 typeId;		 /**< Device type identifier.      */
 		DRXOpenFunc_t openFunc;	 /**< Pointer to Open() function.  */
 		DRXCloseFunc_t closeFunc;/**< Pointer to Close() function. */
 		DRXCtrlFunc_t ctrlFunc;	 /**< Pointer to Ctrl() function.  */

commit 5b223b390d0b6a58921ebd024f5161315ba316df
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 00:33:46 2012 -0300

    [media] drx-j: get rid of the typedefs on bsp_i2c.h
    
    Most of the hard work here were done by this small script:
    
    for i in *; do sed s,pI2CDeviceAddr_t,"struct i2c_device_addr *",g <$i >a && mv a $i; done
    for i in *; do sed s,I2CDeviceAddr_t,"struct i2c_device_addr",g <$i >a && mv a $i; done
    
    Only bsp_i2c.h were added by hand.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 712ffd5a2fbb..c88c064c3ab8 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1329,11 +1329,11 @@ STRUCTS
 */
 	typedef struct {
 		u16_t portNr;	/**< I2C port number               */
-		pI2CDeviceAddr_t wDevAddr;
+		struct i2c_device_addr *wDevAddr;
 				/**< Write device address          */
 		u16_t wCount;	/**< Size of write data in bytes   */
 		pu8_t wData;	/**< Pointer to write data         */
-		pI2CDeviceAddr_t rDevAddr;
+		struct i2c_device_addr *rDevAddr;
 				/**< Read device address           */
 		u16_t rCount;	/**< Size of data to read in bytes */
 		pu8_t rData;	/**< Pointer to read buffer        */
@@ -1726,71 +1726,71 @@ STRUCTS
 	typedef u32_t DRXflags_t, *pDRXflags_t;
 
 /* Write block of data to device */
-	typedef DRXStatus_t(*DRXWriteBlockFunc_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXWriteBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u16_t datasize,	/* size of data in bytes        */
 						   pu8_t data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read block of data from device */
-	typedef DRXStatus_t(*DRXReadBlockFunc_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXReadBlockFunc_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u16_t datasize,	/* size of data in bytes        */
 						  pu8_t data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Write 8-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  u8_t data,	/* data to send                 */
 						  DRXflags_t flags);
 
 /* Read 8-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXReadReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						 DRXaddr_t addr,	/* address of register/memory   */
 						 pu8_t data,	/* receive buffer               */
 						 DRXflags_t flags);
 
 /* Read modify write 8-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg8Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							    DRXaddr_t waddr,	/* write address of register   */
 							    DRXaddr_t raddr,	/* read  address of register   */
 							    u8_t wdata,	/* data to write               */
 							    pu8_t rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u16_t data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 16-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXReadReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  pu16_t data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 16-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg16Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
 							     u16_t wdata,	/* data to write               */
 							     pu16_t rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
-	typedef DRXStatus_t(*DRXWriteReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						   DRXaddr_t addr,	/* address of register/memory   */
 						   u32_t data,	/* data to send                 */
 						   DRXflags_t flags);
 
 /* Read 32-bits value to device */
-	typedef DRXStatus_t(*DRXReadReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+	typedef DRXStatus_t(*DRXReadReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device        */
 						  DRXaddr_t addr,	/* address of register/memory   */
 						  pu32_t data,	/* receive buffer               */
 						  DRXflags_t flags);
 
 /* Read modify write 32-bits value to device */
-	typedef DRXStatus_t(*DRXReadModifyWriteReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg32Func_t) (struct i2c_device_addr *devAddr,	/* address of I2C device       */
 							     DRXaddr_t waddr,	/* write address of register   */
 							     DRXaddr_t raddr,	/* read  address of register   */
 							     u32_t wdata,	/* data to write               */
@@ -1948,7 +1948,7 @@ STRUCTS
 				    /**< data access protocol functions       */
 		pTUNERInstance_t myTuner;
 				    /**< tuner instance,if NULL then baseband */
-		pI2CDeviceAddr_t myI2CDevAddr;
+		struct i2c_device_addr *myI2CDevAddr;
 				    /**< i2c address and device identifier    */
 		pDRXCommonAttr_t myCommonAttr;
 				    /**< common DRX attributes                */

commit 443f18d0d52d513810311601a9235cb22c72a85b
Author: Mauro Carvalho Chehab <mchehab@redhat.com>
Date:   Tue Mar 20 00:00:42 2012 -0300

    [media] drx-j: CodingStyle fixes
    
    Do the automatic CodingStyle fixes found at Lindent.
    
    No functional changes.
    
    Acked-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index 053334455831..712ffd5a2fbb 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -140,7 +140,6 @@ DEFINES
 #define DRX_AUTO    (255)
 #endif
 
-
 /**************
 *
 * This section describes flag definitions for the device capbilities.
@@ -295,258 +294,292 @@ ENUM
 * \enum DRXStandard_t
 * \brief Modulation standards.
 */
-typedef enum {
-   DRX_STANDARD_DVBT    = 0,           /**< Terrestrial DVB-T.               */
-   DRX_STANDARD_8VSB,                  /**< Terrestrial 8VSB.                */
-   DRX_STANDARD_NTSC,                  /**< Terrestrial\Cable analog NTSC.   */
-   DRX_STANDARD_PAL_SECAM_BG,          /**< Terrestrial analog PAL/SECAM B/G */
-   DRX_STANDARD_PAL_SECAM_DK,          /**< Terrestrial analog PAL/SECAM D/K */
-   DRX_STANDARD_PAL_SECAM_I,           /**< Terrestrial analog PAL/SECAM I   */
-   DRX_STANDARD_PAL_SECAM_L,           /**< Terrestrial analog PAL/SECAM L
+	typedef enum {
+		DRX_STANDARD_DVBT = 0, /**< Terrestrial DVB-T.               */
+		DRX_STANDARD_8VSB,     /**< Terrestrial 8VSB.                */
+		DRX_STANDARD_NTSC,     /**< Terrestrial\Cable analog NTSC.   */
+		DRX_STANDARD_PAL_SECAM_BG,
+				       /**< Terrestrial analog PAL/SECAM B/G */
+		DRX_STANDARD_PAL_SECAM_DK,
+				       /**< Terrestrial analog PAL/SECAM D/K */
+		DRX_STANDARD_PAL_SECAM_I,
+				       /**< Terrestrial analog PAL/SECAM I   */
+		DRX_STANDARD_PAL_SECAM_L,
+				       /**< Terrestrial analog PAL/SECAM L
 					     with negative modulation        */
-   DRX_STANDARD_PAL_SECAM_LP,          /**< Terrestrial analog PAL/SECAM L
+		DRX_STANDARD_PAL_SECAM_LP,
+				       /**< Terrestrial analog PAL/SECAM L
 					     with positive modulation        */
-   DRX_STANDARD_ITU_A,                 /**< Cable ITU ANNEX A.               */
-   DRX_STANDARD_ITU_B,                 /**< Cable ITU ANNEX B.               */
-   DRX_STANDARD_ITU_C,                 /**< Cable ITU ANNEX C.               */
-   DRX_STANDARD_ITU_D,                 /**< Cable ITU ANNEX D.               */
-   DRX_STANDARD_FM,                    /**< Terrestrial\Cable FM radio       */
-   DRX_STANDARD_DTMB,                  /**< Terrestrial DTMB standard (China)*/
-   DRX_STANDARD_UNKNOWN = DRX_UNKNOWN, /**< Standard unknown.                */
-   DRX_STANDARD_AUTO    = DRX_AUTO     /**< Autodetect standard.             */
-} DRXStandard_t, *pDRXStandard_t;
+		DRX_STANDARD_ITU_A,    /**< Cable ITU ANNEX A.               */
+		DRX_STANDARD_ITU_B,    /**< Cable ITU ANNEX B.               */
+		DRX_STANDARD_ITU_C,    /**< Cable ITU ANNEX C.               */
+		DRX_STANDARD_ITU_D,    /**< Cable ITU ANNEX D.               */
+		DRX_STANDARD_FM,       /**< Terrestrial\Cable FM radio       */
+		DRX_STANDARD_DTMB,     /**< Terrestrial DTMB standard (China)*/
+		DRX_STANDARD_UNKNOWN = DRX_UNKNOWN,
+				       /**< Standard unknown.                */
+		DRX_STANDARD_AUTO = DRX_AUTO
+				       /**< Autodetect standard.             */
+	} DRXStandard_t, *pDRXStandard_t;
 
 /**
 * \enum DRXStandard_t
 * \brief Modulation sub-standards.
 */
-typedef enum {
-   DRX_SUBSTANDARD_MAIN = 0,              /**< Main subvariant of standard   */
-   DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
-   DRX_SUBSTANDARD_ATV_DK_POLAND,
-   DRX_SUBSTANDARD_ATV_DK_CHINA,
-   DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN, /**< Sub-standard unknown.         */
-   DRX_SUBSTANDARD_AUTO    = DRX_AUTO     /**< Auto (default) sub-standard   */
-} DRXSubstandard_t, *pDRXSubstandard_t;
+	typedef enum {
+		DRX_SUBSTANDARD_MAIN = 0, /**< Main subvariant of standard   */
+		DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
+		DRX_SUBSTANDARD_ATV_DK_POLAND,
+		DRX_SUBSTANDARD_ATV_DK_CHINA,
+		DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN,
+					  /**< Sub-standard unknown.         */
+		DRX_SUBSTANDARD_AUTO = DRX_AUTO
+					  /**< Auto (default) sub-standard   */
+	} DRXSubstandard_t, *pDRXSubstandard_t;
 
 /**
 * \enum DRXBandwidth_t
 * \brief Channel bandwidth or channel spacing.
 */
-typedef enum {
-   DRX_BANDWIDTH_8MHZ    = 0,            /**< Bandwidth 8 MHz.   */
-   DRX_BANDWIDTH_7MHZ,                   /**< Bandwidth 7 MHz.   */
-   DRX_BANDWIDTH_6MHZ,                   /**< Bandwidth 6 MHz.   */
-   DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,  /**< Bandwidth unknown. */
-   DRX_BANDWIDTH_AUTO    = DRX_AUTO      /**< Auto Set Bandwidth */
-} DRXBandwidth_t, *pDRXBandwidth_t;
+	typedef enum {
+		DRX_BANDWIDTH_8MHZ = 0,	 /**< Bandwidth 8 MHz.   */
+		DRX_BANDWIDTH_7MHZ,	 /**< Bandwidth 7 MHz.   */
+		DRX_BANDWIDTH_6MHZ,	 /**< Bandwidth 6 MHz.   */
+		DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,
+					 /**< Bandwidth unknown. */
+		DRX_BANDWIDTH_AUTO = DRX_AUTO
+					 /**< Auto Set Bandwidth */
+	} DRXBandwidth_t, *pDRXBandwidth_t;
 
 /**
 * \enum DRXMirror_t
 * \brief Indicate if channel spectrum is mirrored or not.
 */
-typedef enum {
-   DRX_MIRROR_NO     = 0,            /**< Spectrum is not mirrored.           */
-   DRX_MIRROR_YES,                   /**< Spectrum is mirrored.               */
-   DRX_MIRROR_UNKNOWN = DRX_UNKNOWN, /**< Unknown if spectrum is mirrored.    */
-   DRX_MIRROR_AUTO   = DRX_AUTO      /**< Autodetect if spectrum is mirrored. */
-} DRXMirror_t, *pDRXMirror_t;
+	typedef enum {
+		DRX_MIRROR_NO = 0,   /**< Spectrum is not mirrored.           */
+		DRX_MIRROR_YES,	     /**< Spectrum is mirrored.               */
+		DRX_MIRROR_UNKNOWN = DRX_UNKNOWN,
+				     /**< Unknown if spectrum is mirrored.    */
+		DRX_MIRROR_AUTO = DRX_AUTO
+				     /**< Autodetect if spectrum is mirrored. */
+	} DRXMirror_t, *pDRXMirror_t;
 
 /**
 * \enum DRXConstellation_t
 * \brief Constellation type of the channel.
 */
-typedef enum {
-   DRX_CONSTELLATION_BPSK    = 0,            /**< Modulation is BPSK.       */
-   DRX_CONSTELLATION_QPSK,                   /**< Constellation is QPSK.    */
-   DRX_CONSTELLATION_PSK8,                   /**< Constellation is PSK8.    */
-   DRX_CONSTELLATION_QAM16,                  /**< Constellation is QAM16.   */
-   DRX_CONSTELLATION_QAM32,                  /**< Constellation is QAM32.   */
-   DRX_CONSTELLATION_QAM64,                  /**< Constellation is QAM64.   */
-   DRX_CONSTELLATION_QAM128,                 /**< Constellation is QAM128.  */
-   DRX_CONSTELLATION_QAM256,                 /**< Constellation is QAM256.  */
-   DRX_CONSTELLATION_QAM512,                 /**< Constellation is QAM512.  */
-   DRX_CONSTELLATION_QAM1024,                /**< Constellation is QAM1024. */
-   DRX_CONSTELLATION_QPSK_NR,                /**< Constellation is QPSK_NR  */
-   DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,  /**< Constellation unknown.    */
-   DRX_CONSTELLATION_AUTO    = DRX_AUTO      /**< Autodetect constellation. */
-} DRXConstellation_t, *pDRXConstellation_t;
+	typedef enum {
+		DRX_CONSTELLATION_BPSK = 0,  /**< Modulation is BPSK.       */
+		DRX_CONSTELLATION_QPSK,	     /**< Constellation is QPSK.    */
+		DRX_CONSTELLATION_PSK8,	     /**< Constellation is PSK8.    */
+		DRX_CONSTELLATION_QAM16,     /**< Constellation is QAM16.   */
+		DRX_CONSTELLATION_QAM32,     /**< Constellation is QAM32.   */
+		DRX_CONSTELLATION_QAM64,     /**< Constellation is QAM64.   */
+		DRX_CONSTELLATION_QAM128,    /**< Constellation is QAM128.  */
+		DRX_CONSTELLATION_QAM256,    /**< Constellation is QAM256.  */
+		DRX_CONSTELLATION_QAM512,    /**< Constellation is QAM512.  */
+		DRX_CONSTELLATION_QAM1024,   /**< Constellation is QAM1024. */
+		DRX_CONSTELLATION_QPSK_NR,   /**< Constellation is QPSK_NR  */
+		DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,
+					     /**< Constellation unknown.    */
+		DRX_CONSTELLATION_AUTO = DRX_AUTO
+					     /**< Autodetect constellation. */
+	} DRXConstellation_t, *pDRXConstellation_t;
 
 /**
 * \enum DRXHierarchy_t
 * \brief Hierarchy of the channel.
 */
-typedef enum {
-   DRX_HIERARCHY_NONE    = 0,           /**< None hierarchical channel.     */
-   DRX_HIERARCHY_ALPHA1,                /**< Hierarchical channel, alpha=1. */
-   DRX_HIERARCHY_ALPHA2,                /**< Hierarchical channel, alpha=2. */
-   DRX_HIERARCHY_ALPHA4,                /**< Hierarchical channel, alpha=4. */
-   DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN, /**< Hierarchy unknown.             */
-   DRX_HIERARCHY_AUTO    = DRX_AUTO     /**< Autodetect hierarchy.          */
-} DRXHierarchy_t, *pDRXHierarchy_t;
+	typedef enum {
+		DRX_HIERARCHY_NONE = 0,	/**< None hierarchical channel.     */
+		DRX_HIERARCHY_ALPHA1,	/**< Hierarchical channel, alpha=1. */
+		DRX_HIERARCHY_ALPHA2,	/**< Hierarchical channel, alpha=2. */
+		DRX_HIERARCHY_ALPHA4,	/**< Hierarchical channel, alpha=4. */
+		DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN,
+					/**< Hierarchy unknown.             */
+		DRX_HIERARCHY_AUTO = DRX_AUTO
+					/**< Autodetect hierarchy.          */
+	} DRXHierarchy_t, *pDRXHierarchy_t;
 
 /**
 * \enum DRXPriority_t
 * \brief Channel priority in case of hierarchical transmission.
 */
-typedef enum {
-   DRX_PRIORITY_LOW     = 0,           /**< Low priority channel.  */
-   DRX_PRIORITY_HIGH,                  /**< High priority channel. */
-   DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN  /**< Priority unknown.      */
-} DRXPriority_t, *pDRXPriority_t;
+	typedef enum {
+		DRX_PRIORITY_LOW = 0,  /**< Low priority channel.  */
+		DRX_PRIORITY_HIGH,     /**< High priority channel. */
+		DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN
+				       /**< Priority unknown.      */
+	} DRXPriority_t, *pDRXPriority_t;
 
 /**
 * \enum DRXCoderate_t
 * \brief Channel priority in case of hierarchical transmission.
 */
-typedef enum {
-   DRX_CODERATE_1DIV2   = 0,            /**< Code rate 1/2nd.      */
-   DRX_CODERATE_2DIV3,                  /**< Code rate 2/3nd.      */
-   DRX_CODERATE_3DIV4,                  /**< Code rate 3/4nd.      */
-   DRX_CODERATE_5DIV6,                  /**< Code rate 5/6nd.      */
-   DRX_CODERATE_7DIV8,                  /**< Code rate 7/8nd.      */
-   DRX_CODERATE_UNKNOWN = DRX_UNKNOWN,  /**< Code rate unknown.    */
-   DRX_CODERATE_AUTO    = DRX_AUTO      /**< Autodetect code rate. */
-} DRXCoderate_t, *pDRXCoderate_t;
+	typedef enum {
+		DRX_CODERATE_1DIV2 = 0,	/**< Code rate 1/2nd.      */
+		DRX_CODERATE_2DIV3,	/**< Code rate 2/3nd.      */
+		DRX_CODERATE_3DIV4,	/**< Code rate 3/4nd.      */
+		DRX_CODERATE_5DIV6,	/**< Code rate 5/6nd.      */
+		DRX_CODERATE_7DIV8,	/**< Code rate 7/8nd.      */
+		DRX_CODERATE_UNKNOWN = DRX_UNKNOWN,
+					/**< Code rate unknown.    */
+		DRX_CODERATE_AUTO = DRX_AUTO
+					/**< Autodetect code rate. */
+	} DRXCoderate_t, *pDRXCoderate_t;
 
 /**
 * \enum DRXGuard_t
 * \brief Guard interval of a channel.
 */
-typedef enum {
-   DRX_GUARD_1DIV32   = 0,            /**< Guard interval 1/32nd.     */
-   DRX_GUARD_1DIV16,                  /**< Guard interval 1/16th.     */
-   DRX_GUARD_1DIV8,                   /**< Guard interval 1/8th.      */
-   DRX_GUARD_1DIV4,                   /**< Guard interval 1/4th.      */
-   DRX_GUARD_UNKNOWN  = DRX_UNKNOWN,  /**< Guard interval unknown.    */
-   DRX_GUARD_AUTO     = DRX_AUTO      /**< Autodetect guard interval. */
-} DRXGuard_t, *pDRXGuard_t;
+	typedef enum {
+		DRX_GUARD_1DIV32 = 0, /**< Guard interval 1/32nd.     */
+		DRX_GUARD_1DIV16,     /**< Guard interval 1/16th.     */
+		DRX_GUARD_1DIV8,      /**< Guard interval 1/8th.      */
+		DRX_GUARD_1DIV4,      /**< Guard interval 1/4th.      */
+		DRX_GUARD_UNKNOWN = DRX_UNKNOWN,
+				      /**< Guard interval unknown.    */
+		DRX_GUARD_AUTO = DRX_AUTO
+				      /**< Autodetect guard interval. */
+	} DRXGuard_t, *pDRXGuard_t;
 
 /**
 * \enum DRXFftmode_t
 * \brief FFT mode.
 */
-typedef enum {
-   DRX_FFTMODE_2K      = 0,            /**< 2K FFT mode.         */
-   DRX_FFTMODE_4K,                     /**< 4K FFT mode.         */
-   DRX_FFTMODE_8K,                     /**< 8K FFT mode.         */
-   DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,  /**< FFT mode unknown.    */
-   DRX_FFTMODE_AUTO    = DRX_AUTO      /**< Autodetect FFT mode. */
-} DRXFftmode_t, *pDRXFftmode_t;
+	typedef enum {
+		DRX_FFTMODE_2K = 0,    /**< 2K FFT mode.         */
+		DRX_FFTMODE_4K,	       /**< 4K FFT mode.         */
+		DRX_FFTMODE_8K,	       /**< 8K FFT mode.         */
+		DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,
+				       /**< FFT mode unknown.    */
+		DRX_FFTMODE_AUTO = DRX_AUTO
+				       /**< Autodetect FFT mode. */
+	} DRXFftmode_t, *pDRXFftmode_t;
 
 /**
 * \enum DRXClassification_t
 * \brief Channel classification.
 */
-typedef enum {
-   DRX_CLASSIFICATION_GAUSS   = 0,            /**< Gaussion noise.            */
-   DRX_CLASSIFICATION_HVY_GAUSS,              /**< Heavy Gaussion noise.      */
-   DRX_CLASSIFICATION_COCHANNEL,              /**< Co-channel.                */
-   DRX_CLASSIFICATION_STATIC,                 /**< Static echo.               */
-   DRX_CLASSIFICATION_MOVING,                 /**< Moving echo.               */
-   DRX_CLASSIFICATION_ZERODB,                 /**< Zero dB echo.              */
-   DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,  /**< Unknown classification     */
-   DRX_CLASSIFICATION_AUTO    = DRX_AUTO      /**< Autodetect classification. */
-} DRXClassification_t, *pDRXClassification_t;
+	typedef enum {
+		DRX_CLASSIFICATION_GAUSS = 0, /**< Gaussion noise.            */
+		DRX_CLASSIFICATION_HVY_GAUSS, /**< Heavy Gaussion noise.      */
+		DRX_CLASSIFICATION_COCHANNEL, /**< Co-channel.                */
+		DRX_CLASSIFICATION_STATIC,    /**< Static echo.               */
+		DRX_CLASSIFICATION_MOVING,    /**< Moving echo.               */
+		DRX_CLASSIFICATION_ZERODB,    /**< Zero dB echo.              */
+		DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,
+					      /**< Unknown classification     */
+		DRX_CLASSIFICATION_AUTO = DRX_AUTO
+					      /**< Autodetect classification. */
+	} DRXClassification_t, *pDRXClassification_t;
 
 /**
 * /enum DRXInterleaveModes_t
 * /brief Interleave modes
 */
-typedef enum {
-   DRX_INTERLEAVEMODE_I128_J1    = 0,
-   DRX_INTERLEAVEMODE_I128_J1_V2,
-   DRX_INTERLEAVEMODE_I128_J2,
-   DRX_INTERLEAVEMODE_I64_J2,
-   DRX_INTERLEAVEMODE_I128_J3,
-   DRX_INTERLEAVEMODE_I32_J4,
-   DRX_INTERLEAVEMODE_I128_J4,
-   DRX_INTERLEAVEMODE_I16_J8,
-   DRX_INTERLEAVEMODE_I128_J5,
-   DRX_INTERLEAVEMODE_I8_J16,
-   DRX_INTERLEAVEMODE_I128_J6,
-   DRX_INTERLEAVEMODE_RESERVED_11,
-   DRX_INTERLEAVEMODE_I128_J7,
-   DRX_INTERLEAVEMODE_RESERVED_13,
-   DRX_INTERLEAVEMODE_I128_J8,
-   DRX_INTERLEAVEMODE_RESERVED_15,
-   DRX_INTERLEAVEMODE_I12_J17,
-   DRX_INTERLEAVEMODE_I5_J4,
-   DRX_INTERLEAVEMODE_B52_M240,
-   DRX_INTERLEAVEMODE_B52_M720,
-   DRX_INTERLEAVEMODE_B52_M48,
-   DRX_INTERLEAVEMODE_B52_M0,
-   DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,  /**< Unknown interleave mode    */
-   DRX_INTERLEAVEMODE_AUTO    = DRX_AUTO      /**< Autodetect interleave mode */
-} DRXInterleaveModes_t, *pDRXInterleaveModes_t;
+	typedef enum {
+		DRX_INTERLEAVEMODE_I128_J1 = 0,
+		DRX_INTERLEAVEMODE_I128_J1_V2,
+		DRX_INTERLEAVEMODE_I128_J2,
+		DRX_INTERLEAVEMODE_I64_J2,
+		DRX_INTERLEAVEMODE_I128_J3,
+		DRX_INTERLEAVEMODE_I32_J4,
+		DRX_INTERLEAVEMODE_I128_J4,
+		DRX_INTERLEAVEMODE_I16_J8,
+		DRX_INTERLEAVEMODE_I128_J5,
+		DRX_INTERLEAVEMODE_I8_J16,
+		DRX_INTERLEAVEMODE_I128_J6,
+		DRX_INTERLEAVEMODE_RESERVED_11,
+		DRX_INTERLEAVEMODE_I128_J7,
+		DRX_INTERLEAVEMODE_RESERVED_13,
+		DRX_INTERLEAVEMODE_I128_J8,
+		DRX_INTERLEAVEMODE_RESERVED_15,
+		DRX_INTERLEAVEMODE_I12_J17,
+		DRX_INTERLEAVEMODE_I5_J4,
+		DRX_INTERLEAVEMODE_B52_M240,
+		DRX_INTERLEAVEMODE_B52_M720,
+		DRX_INTERLEAVEMODE_B52_M48,
+		DRX_INTERLEAVEMODE_B52_M0,
+		DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,
+					      /**< Unknown interleave mode    */
+		DRX_INTERLEAVEMODE_AUTO = DRX_AUTO
+					      /**< Autodetect interleave mode */
+	} DRXInterleaveModes_t, *pDRXInterleaveModes_t;
 
 /**
 * \enum DRXCarrier_t
 * \brief Channel Carrier Mode.
 */
-typedef enum {
-   DRX_CARRIER_MULTI     = 0,                   /**< Multi carrier mode       */
-   DRX_CARRIER_SINGLE,                          /**< Single carrier mode      */
-   DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,           /**< Carrier mode unknown.    */
-   DRX_CARRIER_AUTO = DRX_AUTO                  /**< Autodetect carrier mode  */
-} DRXCarrier_t, *pDRXCarrier_t;
+	typedef enum {
+		DRX_CARRIER_MULTI = 0,		/**< Multi carrier mode       */
+		DRX_CARRIER_SINGLE,		/**< Single carrier mode      */
+		DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,
+						/**< Carrier mode unknown.    */
+		DRX_CARRIER_AUTO = DRX_AUTO	/**< Autodetect carrier mode  */
+	} DRXCarrier_t, *pDRXCarrier_t;
 
 /**
 * \enum DRXFramemode_t
 * \brief Channel Frame Mode.
 */
-typedef enum {
-   DRX_FRAMEMODE_420     = 0,            /**< 420 with variable PN  */
-   DRX_FRAMEMODE_595,                    /**< 595                   */
-   DRX_FRAMEMODE_945,                    /**< 945 with variable PN  */
-   DRX_FRAMEMODE_420_FIXED_PN,           /**< 420 with fixed PN     */
-   DRX_FRAMEMODE_945_FIXED_PN,           /**< 945 with fixed PN     */
-   DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,  /**< Frame mode unknown.   */
-   DRX_FRAMEMODE_AUTO = DRX_AUTO         /**< Autodetect frame mode */
-} DRXFramemode_t, *pDRXFramemode_t;
+	typedef enum {
+		DRX_FRAMEMODE_420 = 0,	 /**< 420 with variable PN  */
+		DRX_FRAMEMODE_595,	 /**< 595                   */
+		DRX_FRAMEMODE_945,	 /**< 945 with variable PN  */
+		DRX_FRAMEMODE_420_FIXED_PN,
+					 /**< 420 with fixed PN     */
+		DRX_FRAMEMODE_945_FIXED_PN,
+					 /**< 945 with fixed PN     */
+		DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,
+					 /**< Frame mode unknown.   */
+		DRX_FRAMEMODE_AUTO = DRX_AUTO
+					 /**< Autodetect frame mode */
+	} DRXFramemode_t, *pDRXFramemode_t;
 
 /**
 * \enum DRXTPSFrame_t
 * \brief Frame number in current super-frame.
 */
-typedef enum {
-   DRX_TPS_FRAME1     = 0,                /**< TPS frame 1.       */
-   DRX_TPS_FRAME2,                        /**< TPS frame 2.       */
-   DRX_TPS_FRAME3,                        /**< TPS frame 3.       */
-   DRX_TPS_FRAME4,                        /**< TPS frame 4.       */
-   DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN    /**< TPS frame unknown. */
-} DRXTPSFrame_t, *pDRXTPSFrame_t;
+	typedef enum {
+		DRX_TPS_FRAME1 = 0,	  /**< TPS frame 1.       */
+		DRX_TPS_FRAME2,		  /**< TPS frame 2.       */
+		DRX_TPS_FRAME3,		  /**< TPS frame 3.       */
+		DRX_TPS_FRAME4,		  /**< TPS frame 4.       */
+		DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN
+					  /**< TPS frame unknown. */
+	} DRXTPSFrame_t, *pDRXTPSFrame_t;
 
 /**
 * \enum DRXLDPC_t
 * \brief TPS LDPC .
 */
-typedef enum {
-   DRX_LDPC_0_4     = 0,                  /**< LDPC 0.4           */
-   DRX_LDPC_0_6,                          /**< LDPC 0.6           */
-   DRX_LDPC_0_8,                          /**< LDPC 0.8           */
-   DRX_LDPC_UNKNOWN = DRX_UNKNOWN,        /**< LDPC unknown.      */
-   DRX_LDPC_AUTO = DRX_AUTO               /**< Autodetect LDPC    */
-} DRXLDPC_t, *pDRXLDPC_t;
+	typedef enum {
+		DRX_LDPC_0_4 = 0,	  /**< LDPC 0.4           */
+		DRX_LDPC_0_6,		  /**< LDPC 0.6           */
+		DRX_LDPC_0_8,		  /**< LDPC 0.8           */
+		DRX_LDPC_UNKNOWN = DRX_UNKNOWN,
+					  /**< LDPC unknown.      */
+		DRX_LDPC_AUTO = DRX_AUTO  /**< Autodetect LDPC    */
+	} DRXLDPC_t, *pDRXLDPC_t;
 
 /**
 * \enum DRXPilotMode_t
 * \brief Pilot modes in DTMB.
 */
-typedef enum {
-   DRX_PILOT_ON    = 0,                   /**< Pilot On             */
-   DRX_PILOT_OFF,                         /**< Pilot Off            */
-   DRX_PILOT_UNKNOWN = DRX_UNKNOWN,       /**< Pilot unknown.       */
-   DRX_PILOT_AUTO = DRX_AUTO              /**< Autodetect Pilot     */
-} DRXPilotMode_t, *pDRXPilotMode_t;
-
-
+	typedef enum {
+		DRX_PILOT_ON = 0,	  /**< Pilot On             */
+		DRX_PILOT_OFF,		  /**< Pilot Off            */
+		DRX_PILOT_UNKNOWN = DRX_UNKNOWN,
+					  /**< Pilot unknown.       */
+		DRX_PILOT_AUTO = DRX_AUTO /**< Autodetect Pilot     */
+	} DRXPilotMode_t, *pDRXPilotMode_t;
 
 /**
 * \enum DRXCtrlIndex_t
 * \brief Indices of the control functions.
 */
-typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
+	typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
 
 #ifndef DRX_CTRL_BASE
 #define DRX_CTRL_BASE          ((DRXCtrlIndex_t)0)
@@ -583,14 +616,14 @@ typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
 #define DRX_CTRL_I2C_READWRITE   ( DRX_CTRL_BASE + 27)/**< Read/write I2C     */
 #define DRX_CTRL_PROGRAM_TUNER   ( DRX_CTRL_BASE + 28)/**< Program tuner      */
 
-	 /* Professional */
+	/* Professional */
 #define DRX_CTRL_MB_CFG          ( DRX_CTRL_BASE + 29) /**<                   */
 #define DRX_CTRL_MB_READ         ( DRX_CTRL_BASE + 30) /**<                   */
 #define DRX_CTRL_MB_WRITE        ( DRX_CTRL_BASE + 31) /**<                   */
 #define DRX_CTRL_MB_CONSTEL      ( DRX_CTRL_BASE + 32) /**<                   */
 #define DRX_CTRL_MB_MER          ( DRX_CTRL_BASE + 33) /**<                   */
 
-	 /* Misc */
+	/* Misc */
 #define DRX_CTRL_UIO_CFG         DRX_CTRL_SET_UIO_CFG  /**< Configure UIO     */
 #define DRX_CTRL_SET_UIO_CFG     ( DRX_CTRL_BASE + 34) /**< Configure UIO     */
 #define DRX_CTRL_GET_UIO_CFG     ( DRX_CTRL_BASE + 35) /**< Configure UIO     */
@@ -603,18 +636,19 @@ typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
 #define DRX_CTRL_VALIDATE_UCODE  ( DRX_CTRL_BASE + 42) /**< Validate ucode    */
 #define DRX_CTRL_DUMP_REGISTERS  ( DRX_CTRL_BASE + 43) /**< Dump registers    */
 
-#define DRX_CTRL_MAX             ( DRX_CTRL_BASE + 44) /* never to be used    */
+#define DRX_CTRL_MAX             ( DRX_CTRL_BASE + 44)	/* never to be used    */
 
 /**
 * \enum DRXUCodeAction_t
 * \brief Used to indicate if firmware has to be uploaded or verified.
 */
 
-typedef enum {
-   UCODE_UPLOAD,  /**< Upload the microcode image to device        */
-   UCODE_VERIFY   /**< Compare microcode image with code on device */
-} DRXUCodeAction_t, *pDRXUCodeAction_t;
-
+	typedef enum {
+		UCODE_UPLOAD,
+		  /**< Upload the microcode image to device        */
+		UCODE_VERIFY
+		  /**< Compare microcode image with code on device */
+	} DRXUCodeAction_t, *pDRXUCodeAction_t;
 
 /**
 * \enum DRXLockStatus_t
@@ -622,60 +656,71 @@ typedef enum {
 *
 * The generic lock states have device dependent semantics.
 */
-typedef enum{
-   DRX_NEVER_LOCK = 0,        /**< Device will never lock on this signal */
-   DRX_NOT_LOCKED,            /**< Device has no lock at all             */
-   DRX_LOCK_STATE_1,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_2,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_3,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_4,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_5,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_6,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_7,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_8,          /**< Generic lock state                    */
-   DRX_LOCK_STATE_9,          /**< Generic lock state                    */
-   DRX_LOCKED                 /**< Device is in lock                     */
-} DRXLockStatus_t, *pDRXLockStatus_t;
+	typedef enum {
+		DRX_NEVER_LOCK = 0,
+			      /**< Device will never lock on this signal */
+		DRX_NOT_LOCKED,
+			      /**< Device has no lock at all             */
+		DRX_LOCK_STATE_1,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_2,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_3,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_4,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_5,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_6,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_7,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_8,
+			      /**< Generic lock state                    */
+		DRX_LOCK_STATE_9,
+			      /**< Generic lock state                    */
+		DRX_LOCKED    /**< Device is in lock                     */
+	} DRXLockStatus_t, *pDRXLockStatus_t;
 
 /**
 * \enum DRXUIO_t
 * \brief Used to address a User IO (UIO).
 */
-typedef enum{
-   DRX_UIO1  ,
-   DRX_UIO2  ,
-   DRX_UIO3  ,
-   DRX_UIO4  ,
-   DRX_UIO5  ,
-   DRX_UIO6  ,
-   DRX_UIO7  ,
-   DRX_UIO8  ,
-   DRX_UIO9  ,
-   DRX_UIO10 ,
-   DRX_UIO11 ,
-   DRX_UIO12 ,
-   DRX_UIO13 ,
-   DRX_UIO14 ,
-   DRX_UIO15 ,
-   DRX_UIO16 ,
-   DRX_UIO17 ,
-   DRX_UIO18 ,
-   DRX_UIO19 ,
-   DRX_UIO20 ,
-   DRX_UIO21 ,
-   DRX_UIO22 ,
-   DRX_UIO23 ,
-   DRX_UIO24 ,
-   DRX_UIO25 ,
-   DRX_UIO26 ,
-   DRX_UIO27 ,
-   DRX_UIO28 ,
-   DRX_UIO29 ,
-   DRX_UIO30 ,
-   DRX_UIO31 ,
-   DRX_UIO32 ,
-   DRX_UIO_MAX = DRX_UIO32
-} DRXUIO_t, *pDRXUIO_t;
+	typedef enum {
+		DRX_UIO1,
+		DRX_UIO2,
+		DRX_UIO3,
+		DRX_UIO4,
+		DRX_UIO5,
+		DRX_UIO6,
+		DRX_UIO7,
+		DRX_UIO8,
+		DRX_UIO9,
+		DRX_UIO10,
+		DRX_UIO11,
+		DRX_UIO12,
+		DRX_UIO13,
+		DRX_UIO14,
+		DRX_UIO15,
+		DRX_UIO16,
+		DRX_UIO17,
+		DRX_UIO18,
+		DRX_UIO19,
+		DRX_UIO20,
+		DRX_UIO21,
+		DRX_UIO22,
+		DRX_UIO23,
+		DRX_UIO24,
+		DRX_UIO25,
+		DRX_UIO26,
+		DRX_UIO27,
+		DRX_UIO28,
+		DRX_UIO29,
+		DRX_UIO30,
+		DRX_UIO31,
+		DRX_UIO32,
+		DRX_UIO_MAX = DRX_UIO32
+	} DRXUIO_t, *pDRXUIO_t;
 
 /**
 * \enum DRXUIOMode_t
@@ -686,17 +731,26 @@ typedef enum{
 * To be backward compatible DRX_UIO_MODE_FIRMWARE is equivalent to
 * DRX_UIO_MODE_FIRMWARE0.
 */
-typedef enum{
-   DRX_UIO_MODE_DISABLE   = 0x01,   /**< not used, pin is configured as input */
-   DRX_UIO_MODE_READWRITE = 0x02,   /**< used for read/write by application   */
-   DRX_UIO_MODE_FIRMWARE  = 0x04,   /**< controlled by firmware, function 0   */
-   DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE , /**< same as above        */
-   DRX_UIO_MODE_FIRMWARE1 = 0x08,   /**< controlled by firmware, function 1   */
-   DRX_UIO_MODE_FIRMWARE2 = 0x10,   /**< controlled by firmware, function 2   */
-   DRX_UIO_MODE_FIRMWARE3 = 0x20,   /**< controlled by firmware, function 3   */
-   DRX_UIO_MODE_FIRMWARE4 = 0x40,   /**< controlled by firmware, function 4   */
-   DRX_UIO_MODE_FIRMWARE5 = 0x80    /**< controlled by firmware, function 5   */
-} DRXUIOMode_t, *pDRXUIOMode_t;
+	typedef enum {
+		DRX_UIO_MODE_DISABLE = 0x01,
+				    /**< not used, pin is configured as input */
+		DRX_UIO_MODE_READWRITE = 0x02,
+				    /**< used for read/write by application   */
+		DRX_UIO_MODE_FIRMWARE = 0x04,
+				    /**< controlled by firmware, function 0   */
+		DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE,
+						    /**< same as above        */
+		DRX_UIO_MODE_FIRMWARE1 = 0x08,
+				    /**< controlled by firmware, function 1   */
+		DRX_UIO_MODE_FIRMWARE2 = 0x10,
+				    /**< controlled by firmware, function 2   */
+		DRX_UIO_MODE_FIRMWARE3 = 0x20,
+				    /**< controlled by firmware, function 3   */
+		DRX_UIO_MODE_FIRMWARE4 = 0x40,
+				    /**< controlled by firmware, function 4   */
+		DRX_UIO_MODE_FIRMWARE5 = 0x80
+				    /**< controlled by firmware, function 5   */
+	} DRXUIOMode_t, *pDRXUIOMode_t;
 
 /**
 * \enum DRXOOBDownstreamStandard_t
@@ -704,12 +758,14 @@ typedef enum{
 *
 * Based on ANSI 55-1 and 55-2
 */
-typedef enum {
-   DRX_OOB_MODE_A = 0,         /**< ANSI 55-1   */
-   DRX_OOB_MODE_B_GRADE_A,     /**< ANSI 55-2 A */
-   DRX_OOB_MODE_B_GRADE_B      /**< ANSI 55-2 B */
-} DRXOOBDownstreamStandard_t, *pDRXOOBDownstreamStandard_t;
-
+	typedef enum {
+		DRX_OOB_MODE_A = 0,
+			       /**< ANSI 55-1   */
+		DRX_OOB_MODE_B_GRADE_A,
+			       /**< ANSI 55-2 A */
+		DRX_OOB_MODE_B_GRADE_B
+			       /**< ANSI 55-2 B */
+	} DRXOOBDownstreamStandard_t, *pDRXOOBDownstreamStandard_t;
 
 /*-------------------------------------------------------------------------
 STRUCTS
@@ -725,31 +781,31 @@ STRUCTS
 * \enum DRXCfgType_t
 * \brief Generic configuration function identifiers.
 */
-typedef u32_t DRXCfgType_t, *pDRXCfgType_t;
+	typedef u32_t DRXCfgType_t, *pDRXCfgType_t;
 
 #ifndef DRX_CFG_BASE
 #define DRX_CFG_BASE          ((DRXCfgType_t)0)
 #endif
 
-#define DRX_CFG_MPEG_OUTPUT         ( DRX_CFG_BASE +  0) /* MPEG TS output    */
-#define DRX_CFG_PKTERR              ( DRX_CFG_BASE +  1) /* Packet Error      */
-#define DRX_CFG_SYMCLK_OFFS         ( DRX_CFG_BASE +  2) /* Symbol Clk Offset */
-#define DRX_CFG_SMA                 ( DRX_CFG_BASE +  3) /* Smart Antenna     */
-#define DRX_CFG_PINSAFE             ( DRX_CFG_BASE +  4) /* Pin safe mode     */
-#define DRX_CFG_SUBSTANDARD         ( DRX_CFG_BASE +  5) /* substandard       */
-#define DRX_CFG_AUD_VOLUME          ( DRX_CFG_BASE +  6) /* volume            */
-#define DRX_CFG_AUD_RDS             ( DRX_CFG_BASE +  7) /* rds               */
-#define DRX_CFG_AUD_AUTOSOUND       ( DRX_CFG_BASE +  8) /* ASS & ASC         */
-#define DRX_CFG_AUD_ASS_THRES       ( DRX_CFG_BASE +  9) /* ASS Thresholds    */
-#define DRX_CFG_AUD_DEVIATION       ( DRX_CFG_BASE + 10) /* Deviation         */
-#define DRX_CFG_AUD_PRESCALE        ( DRX_CFG_BASE + 11) /* Prescale          */
-#define DRX_CFG_AUD_MIXER           ( DRX_CFG_BASE + 12) /* Mixer             */
-#define DRX_CFG_AUD_AVSYNC          ( DRX_CFG_BASE + 13) /* AVSync            */
-#define DRX_CFG_AUD_CARRIER         ( DRX_CFG_BASE + 14) /* Audio carriers    */
-#define DRX_CFG_I2S_OUTPUT          ( DRX_CFG_BASE + 15) /* I2S output        */
-#define DRX_CFG_ATV_STANDARD        ( DRX_CFG_BASE + 16) /* ATV standard      */
-#define DRX_CFG_SQI_SPEED           ( DRX_CFG_BASE + 17) /* SQI speed         */
-#define DRX_CTRL_CFG_MAX            ( DRX_CFG_BASE + 18) /* never to be used  */
+#define DRX_CFG_MPEG_OUTPUT         ( DRX_CFG_BASE +  0)	/* MPEG TS output    */
+#define DRX_CFG_PKTERR              ( DRX_CFG_BASE +  1)	/* Packet Error      */
+#define DRX_CFG_SYMCLK_OFFS         ( DRX_CFG_BASE +  2)	/* Symbol Clk Offset */
+#define DRX_CFG_SMA                 ( DRX_CFG_BASE +  3)	/* Smart Antenna     */
+#define DRX_CFG_PINSAFE             ( DRX_CFG_BASE +  4)	/* Pin safe mode     */
+#define DRX_CFG_SUBSTANDARD         ( DRX_CFG_BASE +  5)	/* substandard       */
+#define DRX_CFG_AUD_VOLUME          ( DRX_CFG_BASE +  6)	/* volume            */
+#define DRX_CFG_AUD_RDS             ( DRX_CFG_BASE +  7)	/* rds               */
+#define DRX_CFG_AUD_AUTOSOUND       ( DRX_CFG_BASE +  8)	/* ASS & ASC         */
+#define DRX_CFG_AUD_ASS_THRES       ( DRX_CFG_BASE +  9)	/* ASS Thresholds    */
+#define DRX_CFG_AUD_DEVIATION       ( DRX_CFG_BASE + 10)	/* Deviation         */
+#define DRX_CFG_AUD_PRESCALE        ( DRX_CFG_BASE + 11)	/* Prescale          */
+#define DRX_CFG_AUD_MIXER           ( DRX_CFG_BASE + 12)	/* Mixer             */
+#define DRX_CFG_AUD_AVSYNC          ( DRX_CFG_BASE + 13)	/* AVSync            */
+#define DRX_CFG_AUD_CARRIER         ( DRX_CFG_BASE + 14)	/* Audio carriers    */
+#define DRX_CFG_I2S_OUTPUT          ( DRX_CFG_BASE + 15)	/* I2S output        */
+#define DRX_CFG_ATV_STANDARD        ( DRX_CFG_BASE + 16)	/* ATV standard      */
+#define DRX_CFG_SQI_SPEED           ( DRX_CFG_BASE + 17)	/* SQI speed         */
+#define DRX_CTRL_CFG_MAX            ( DRX_CFG_BASE + 18)	/* never to be used  */
 
 #define DRX_CFG_PINS_SAFE_MODE      DRX_CFG_PINSAFE
 /*============================================================================*/
@@ -764,10 +820,12 @@ typedef u32_t DRXCfgType_t, *pDRXCfgType_t;
 *
 * Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
 */
-typedef struct {
-   pu8_t    mcData;  /**< Pointer to microcode image. */
-   u16_t    mcSize;  /**< Microcode image size.       */
-} DRXUCodeInfo_t, *pDRXUCodeInfo_t;
+	typedef struct {
+		pu8_t mcData;
+		     /**< Pointer to microcode image. */
+		u16_t mcSize;
+		     /**< Microcode image size.       */
+	} DRXUCodeInfo_t, *pDRXUCodeInfo_t;
 
 /**
 * \struct DRXMcVersionRec_t
@@ -788,12 +846,12 @@ typedef struct {
 */
 #define AUX_VER_RECORD 0x8000
 
-typedef struct {
-   u16_t auxType;       /* type of aux data - 0x8000 for version record     */
-   u32_t mcDevType;     /* device type, based on JTAG ID                    */
-   u32_t mcVersion;     /* version of microcode                             */
-   u32_t mcBaseVersion; /* in case of patch: the original microcode version */
-} DRXMcVersionRec_t, *pDRXMcVersionRec_t;
+	typedef struct {
+		u16_t auxType;	/* type of aux data - 0x8000 for version record     */
+		u32_t mcDevType;	/* device type, based on JTAG ID                    */
+		u32_t mcVersion;	/* version of microcode                             */
+		u32_t mcBaseVersion;	/* in case of patch: the original microcode version */
+	} DRXMcVersionRec_t, *pDRXMcVersionRec_t;
 
 /*========================================*/
 
@@ -803,14 +861,16 @@ typedef struct {
 *
 * Used by DRX_CTRL_LOAD_FILTER
 */
-typedef struct {
-   pu8_t    dataRe;   /**< pointer to coefficients for RE */
-   pu8_t    dataIm;   /**< pointer to coefficients for IM */
-   u16_t    sizeRe;   /**< size of coefficients for RE    */
-   u16_t    sizeIm;   /**< size of coefficients for IM    */
-} DRXFilterInfo_t, *pDRXFilterInfo_t;
-
-
+	typedef struct {
+		pu8_t dataRe;
+		      /**< pointer to coefficients for RE */
+		pu8_t dataIm;
+		      /**< pointer to coefficients for IM */
+		u16_t sizeRe;
+		      /**< size of coefficients for RE    */
+		u16_t sizeIm;
+		      /**< size of coefficients for IM    */
+	} DRXFilterInfo_t, *pDRXFilterInfo_t;
 
 /*========================================*/
 
@@ -822,24 +882,32 @@ typedef struct {
 * Only certain fields need to be used for a specfic standard.
 *
 */
-typedef struct {
-   DRXFrequency_t       frequency;      /**< frequency in kHz                 */
-   DRXBandwidth_t       bandwidth;      /**< bandwidth                        */
-   DRXMirror_t          mirror;         /**< mirrored or not on RF            */
-   DRXConstellation_t   constellation;  /**< constellation                    */
-   DRXHierarchy_t       hierarchy;      /**< hierarchy                        */
-   DRXPriority_t        priority;       /**< priority                         */
-   DRXCoderate_t        coderate;       /**< coderate                         */
-   DRXGuard_t           guard;          /**< guard interval                   */
-   DRXFftmode_t         fftmode;        /**< fftmode                          */
-   DRXClassification_t  classification; /**< classification                   */
-   DRXSymbolrate_t      symbolrate;     /**< symbolrate in symbols/sec        */
-   DRXInterleaveModes_t interleavemode; /**< interleaveMode QAM               */
-   DRXLDPC_t            ldpc;           /**< ldpc                             */
-   DRXCarrier_t         carrier;        /**< carrier                          */
-   DRXFramemode_t       framemode;      /**< frame mode                       */
-   DRXPilotMode_t       pilot;          /**< pilot mode                       */
-} DRXChannel_t, *pDRXChannel_t;
+	typedef struct {
+		DRXFrequency_t frequency;
+					/**< frequency in kHz                 */
+		DRXBandwidth_t bandwidth;
+					/**< bandwidth                        */
+		DRXMirror_t mirror;	/**< mirrored or not on RF            */
+		DRXConstellation_t constellation;
+					/**< constellation                    */
+		DRXHierarchy_t hierarchy;
+					/**< hierarchy                        */
+		DRXPriority_t priority;	/**< priority                         */
+		DRXCoderate_t coderate;	/**< coderate                         */
+		DRXGuard_t guard;	/**< guard interval                   */
+		DRXFftmode_t fftmode;	/**< fftmode                          */
+		DRXClassification_t classification;
+					/**< classification                   */
+		DRXSymbolrate_t symbolrate;
+					/**< symbolrate in symbols/sec        */
+		DRXInterleaveModes_t interleavemode;
+					/**< interleaveMode QAM               */
+		DRXLDPC_t ldpc;		/**< ldpc                             */
+		DRXCarrier_t carrier;	/**< carrier                          */
+		DRXFramemode_t framemode;
+					/**< frame mode                       */
+		DRXPilotMode_t pilot;	/**< pilot mode                       */
+	} DRXChannel_t, *pDRXChannel_t;
 
 /*========================================*/
 
@@ -849,25 +917,31 @@ typedef struct {
 *
 * Used by DRX_CTRL_SIG_QUALITY.
 */
-typedef struct {
-   u16_t MER;                  /**< in steps of 0.1 dB                        */
-   u32_t preViterbiBER ;       /**< in steps of 1/scaleFactorBER              */
-   u32_t postViterbiBER ;      /**< in steps of 1/scaleFactorBER              */
-   u32_t scaleFactorBER;       /**< scale factor for BER                      */
-   u16_t packetError ;         /**< number of packet errors                   */
-   u32_t postReedSolomonBER ;  /**< in steps of 1/scaleFactorBER              */
-   u32_t preLdpcBER;           /**< in steps of 1/scaleFactorBER              */
-   u32_t averIter;             /**< in steps of 0.01                          */
-   u16_t indicator;            /**< indicative signal quality low=0..100=high */
-}DRXSigQuality_t, *pDRXSigQuality_t;
-
-
-typedef enum {
-   DRX_SQI_SPEED_FAST = 0,
-   DRX_SQI_SPEED_MEDIUM,
-   DRX_SQI_SPEED_SLOW,
-   DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
-} DRXCfgSqiSpeed_t, *pDRXCfgSqiSpeed_t;
+	typedef struct {
+		u16_t MER;     /**< in steps of 0.1 dB                        */
+		u32_t preViterbiBER;
+			       /**< in steps of 1/scaleFactorBER              */
+		u32_t postViterbiBER;
+			       /**< in steps of 1/scaleFactorBER              */
+		u32_t scaleFactorBER;
+			       /**< scale factor for BER                      */
+		u16_t packetError;
+			       /**< number of packet errors                   */
+		u32_t postReedSolomonBER;
+			       /**< in steps of 1/scaleFactorBER              */
+		u32_t preLdpcBER;
+			       /**< in steps of 1/scaleFactorBER              */
+		u32_t averIter;/**< in steps of 0.01                          */
+		u16_t indicator;
+			       /**< indicative signal quality low=0..100=high */
+	} DRXSigQuality_t, *pDRXSigQuality_t;
+
+	typedef enum {
+		DRX_SQI_SPEED_FAST = 0,
+		DRX_SQI_SPEED_MEDIUM,
+		DRX_SQI_SPEED_SLOW,
+		DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
+	} DRXCfgSqiSpeed_t, *pDRXCfgSqiSpeed_t;
 
 /*========================================*/
 
@@ -877,11 +951,12 @@ typedef enum {
 *
 * Used by DRX_CTRL_CONSTEL.
 */
-typedef struct {
-   s16_t im; /**< Imaginary part. */
-   s16_t re; /**< Real part.      */
-} DRXComplex_t, *pDRXComplex_t;
-
+	typedef struct {
+		s16_t im;
+	     /**< Imaginary part. */
+		s16_t re;
+	     /**< Real part.      */
+	} DRXComplex_t, *pDRXComplex_t;
 
 /*========================================*/
 
@@ -891,16 +966,22 @@ typedef struct {
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
-typedef struct {
-   DRXFrequency_t first;     /**< First centre frequency in this band        */
-   DRXFrequency_t last;      /**< Last centre frequency in this band         */
-   DRXFrequency_t step;      /**< Stepping frequency in this band            */
-   DRXBandwidth_t bandwidth; /**< Bandwidth within this frequency band       */
-   u16_t          chNumber;  /**< First channel number in this band, or first
+	typedef struct {
+		DRXFrequency_t first;
+			     /**< First centre frequency in this band        */
+		DRXFrequency_t last;
+			     /**< Last centre frequency in this band         */
+		DRXFrequency_t step;
+			     /**< Stepping frequency in this band            */
+		DRXBandwidth_t bandwidth;
+			     /**< Bandwidth within this frequency band       */
+		u16_t chNumber;
+			     /**< First channel number in this band, or first
 				    index in chNames                         */
-   char         **chNames;   /**< Optional list of channel names in this
+		char **chNames;
+			     /**< Optional list of channel names in this
 				    band                                     */
-} DRXFrequencyPlan_t, *pDRXFrequencyPlan_t;
+	} DRXFrequencyPlan_t, *pDRXFrequencyPlan_t;
 
 /*========================================*/
 
@@ -910,11 +991,11 @@ typedef struct {
 *
 * Used by frequency_plan.h
 */
-typedef struct{
-   pDRXFrequencyPlan_t freqPlan;
-   int                 freqPlanSize;
-   char                *freqPlanName;
-}DRXFrequencyPlanInfo_t, *pDRXFrequencyPlanInfo_t;
+	typedef struct {
+		pDRXFrequencyPlan_t freqPlan;
+		int freqPlanSize;
+		char *freqPlanName;
+	} DRXFrequencyPlanInfo_t, *pDRXFrequencyPlanInfo_t;
 
 /*========================================*/
 
@@ -922,14 +1003,15 @@ typedef struct{
 * /struct DRXScanDataQam_t
 * QAM specific scanning variables
 */
-typedef struct {
-   pu32_t               symbolrate;       /**<  list of symbolrates to scan   */
-   u16_t                symbolrateSize;   /**<  size of symbolrate array      */
-   pDRXConstellation_t  constellation;    /**<  list of constellations        */
-   u16_t                constellationSize;  /**<  size of constellation array */
-   u16_t                ifAgcThreshold;   /**<  thresholf for IF-AGC based
+	typedef struct {
+		pu32_t symbolrate;	  /**<  list of symbolrates to scan   */
+		u16_t symbolrateSize;	  /**<  size of symbolrate array      */
+		pDRXConstellation_t constellation;
+					  /**<  list of constellations        */
+		u16_t constellationSize;    /**<  size of constellation array */
+		u16_t ifAgcThreshold;	  /**<  thresholf for IF-AGC based
 						scanning filter               */
-} DRXScanDataQam_t, *pDRXScanDataQam_t;
+	} DRXScanDataQam_t, *pDRXScanDataQam_t;
 
 /*========================================*/
 
@@ -937,9 +1019,10 @@ typedef struct {
 * /struct DRXScanDataAtv_t
 * ATV specific scanning variables
 */
-typedef struct {
-   s16_t svrThreshold;  /**< threshold of Sound/Video ratio in 0.1dB steps */
-} DRXScanDataAtv_t, *pDRXScanDataAtv_t;
+	typedef struct {
+		s16_t svrThreshold;
+			/**< threshold of Sound/Video ratio in 0.1dB steps */
+	} DRXScanDataAtv_t, *pDRXScanDataAtv_t;
 
 /*========================================*/
 
@@ -949,14 +1032,15 @@ typedef struct {
 *
 * Used by DRX_CTRL_SCAN_INIT.
 */
-typedef struct {
-   pDRXFrequencyPlan_t frequencyPlan;     /**< Frequency plan (array)*/
-   u16_t               frequencyPlanSize; /**< Number of bands       */
-   u32_t               numTries;          /**< Max channels tried    */
-   DRXFrequency_t      skip;              /**< Minimum frequency step to take
+	typedef struct {
+		pDRXFrequencyPlan_t frequencyPlan;
+					  /**< Frequency plan (array)*/
+		u16_t frequencyPlanSize;  /**< Number of bands       */
+		u32_t numTries;		  /**< Max channels tried    */
+		DRXFrequency_t skip;	  /**< Minimum frequency step to take
 						after a channel is found */
-   void                *extParams;        /**< Standard specific params */
-} DRXScanParam_t, *pDRXScanParam_t;
+		void *extParams;	  /**< Standard specific params */
+	} DRXScanParam_t, *pDRXScanParam_t;
 
 /*========================================*/
 
@@ -964,21 +1048,21 @@ typedef struct {
 * \brief Scan commands.
 * Used by scanning algorithms.
 */
-typedef enum {
-   DRX_SCAN_COMMAND_INIT = 0,             /**< Initialize scanning */
-   DRX_SCAN_COMMAND_NEXT,                 /**< Next scan           */
-   DRX_SCAN_COMMAND_STOP                  /**< Stop scanning       */
-}DRXScanCommand_t, *pDRXScanCommand_t;
+	typedef enum {
+		DRX_SCAN_COMMAND_INIT = 0,/**< Initialize scanning */
+		DRX_SCAN_COMMAND_NEXT,	  /**< Next scan           */
+		DRX_SCAN_COMMAND_STOP	  /**< Stop scanning       */
+	} DRXScanCommand_t, *pDRXScanCommand_t;
 
 /*========================================*/
 
 /**
 * \brief Inner scan function prototype.
 */
-typedef DRXStatus_t (*DRXScanFunc_t)  (void*               scanContext,
-				       DRXScanCommand_t    scanCommand,
-				       pDRXChannel_t       scanChannel,
-				       pBool_t             getNextChannel  );
+	typedef DRXStatus_t(*DRXScanFunc_t) (void *scanContext,
+					     DRXScanCommand_t scanCommand,
+					     pDRXChannel_t scanChannel,
+					     pBool_t getNextChannel);
 
 /*========================================*/
 
@@ -988,17 +1072,21 @@ typedef DRXStatus_t (*DRXScanFunc_t)  (void*               scanContext,
 *
 * Used by DRX_CTRL_TPS_INFO.
 */
-typedef struct {
-   DRXFftmode_t       fftmode;          /**< Fft mode       */
-   DRXGuard_t         guard;            /**< Guard interval */
-   DRXConstellation_t constellation;    /**< Constellation  */
-   DRXHierarchy_t     hierarchy;        /**< Hierarchy      */
-   DRXCoderate_t      highCoderate;     /**< High code rate */
-   DRXCoderate_t      lowCoderate;      /**< Low cod rate   */
-   DRXTPSFrame_t      frame;            /**< Tps frame      */
-   u8_t               length;           /**< Length         */
-   u16_t              cellId;           /**< Cell id        */
-}DRXTPSInfo_t, *pDRXTPSInfo_t;
+	typedef struct {
+		DRXFftmode_t fftmode;	/**< Fft mode       */
+		DRXGuard_t guard;	/**< Guard interval */
+		DRXConstellation_t constellation;
+					/**< Constellation  */
+		DRXHierarchy_t hierarchy;
+					/**< Hierarchy      */
+		DRXCoderate_t highCoderate;
+					/**< High code rate */
+		DRXCoderate_t lowCoderate;
+					/**< Low cod rate   */
+		DRXTPSFrame_t frame;	/**< Tps frame      */
+		u8_t length;		/**< Length         */
+		u16_t cellId;		/**< Cell id        */
+	} DRXTPSInfo_t, *pDRXTPSInfo_t;
 
 /*========================================*/
 
@@ -1007,27 +1095,45 @@ typedef struct {
 *
 * Used by DRX_CTRL_SET_POWER_MODE.
 */
-typedef enum {
-   DRX_POWER_UP = 0,     /**< Generic         , Power Up Mode   */
-   DRX_POWER_MODE_1,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_2,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_3,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_4,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_5,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_6,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_7,     /**< Device specific , Power Up Mode   */
-   DRX_POWER_MODE_8,     /**< Device specific , Power Up Mode   */
-
-   DRX_POWER_MODE_9,     /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_10,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_11,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_12,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_13,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_14,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_15,    /**< Device specific , Power Down Mode */
-   DRX_POWER_MODE_16,    /**< Device specific , Power Down Mode */
-   DRX_POWER_DOWN = 255  /**< Generic         , Power Down Mode */
-}DRXPowerMode_t, *pDRXPowerMode_t;
+	typedef enum {
+		DRX_POWER_UP = 0,
+			 /**< Generic         , Power Up Mode   */
+		DRX_POWER_MODE_1,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_2,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_3,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_4,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_5,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_6,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_7,
+			 /**< Device specific , Power Up Mode   */
+		DRX_POWER_MODE_8,
+			 /**< Device specific , Power Up Mode   */
+
+		DRX_POWER_MODE_9,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_10,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_11,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_12,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_13,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_14,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_15,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_MODE_16,
+			 /**< Device specific , Power Down Mode */
+		DRX_POWER_DOWN = 255
+			 /**< Generic         , Power Down Mode */
+	} DRXPowerMode_t, *pDRXPowerMode_t;
 
 /*========================================*/
 
@@ -1037,18 +1143,17 @@ typedef enum {
 *
 * Used by DRX_CTRL_VERSION.
 */
-typedef enum {
-   DRX_MODULE_DEVICE,
-   DRX_MODULE_MICROCODE,
-   DRX_MODULE_DRIVERCORE,
-   DRX_MODULE_DEVICEDRIVER,
-   DRX_MODULE_DAP,
-   DRX_MODULE_BSP_I2C,
-   DRX_MODULE_BSP_TUNER,
-   DRX_MODULE_BSP_HOST,
-   DRX_MODULE_UNKNOWN
-} DRXModule_t, *pDRXModule_t;
-
+	typedef enum {
+		DRX_MODULE_DEVICE,
+		DRX_MODULE_MICROCODE,
+		DRX_MODULE_DRIVERCORE,
+		DRX_MODULE_DEVICEDRIVER,
+		DRX_MODULE_DAP,
+		DRX_MODULE_BSP_I2C,
+		DRX_MODULE_BSP_TUNER,
+		DRX_MODULE_BSP_HOST,
+		DRX_MODULE_UNKNOWN
+	} DRXModule_t, *pDRXModule_t;
 
 /**
 * \enum DRXVersion_t
@@ -1056,14 +1161,16 @@ typedef enum {
 *
 * Used by DRX_CTRL_VERSION.
 */
-typedef struct {
-   DRXModule_t  moduleType;    /**< Type identifier of the module */
-   char        *moduleName;    /**< Name or description of module */
-   u16_t        vMajor;        /**< Major version number          */
-   u16_t        vMinor;        /**< Minor version number          */
-   u16_t        vPatch;        /**< Patch version number          */
-   char        *vString;       /**< Version as text string        */
-} DRXVersion_t, *pDRXVersion_t;
+	typedef struct {
+		DRXModule_t moduleType;
+			       /**< Type identifier of the module */
+		char *moduleName;
+			       /**< Name or description of module */
+		u16_t vMajor;  /**< Major version number          */
+		u16_t vMinor;  /**< Minor version number          */
+		u16_t vPatch;  /**< Patch version number          */
+		char *vString; /**< Version as text string        */
+	} DRXVersion_t, *pDRXVersion_t;
 
 /**
 * \enum DRXVersionList_t
@@ -1071,10 +1178,11 @@ typedef struct {
 *
 * Used by DRX_CTRL_VERSION.
 */
-typedef struct DRXVersionList_s {
-   pDRXVersion_t            version;  /**< Version information */
-   struct DRXVersionList_s *next;     /**< Next list element   */
-} DRXVersionList_t, *pDRXVersionList_t;
+	typedef struct DRXVersionList_s {
+		pDRXVersion_t version;/**< Version information */
+		struct DRXVersionList_s *next;
+				      /**< Next list element   */
+	} DRXVersionList_t, *pDRXVersionList_t;
 
 /*========================================*/
 
@@ -1083,10 +1191,12 @@ typedef struct DRXVersionList_s {
 *
 * Used by DRX_CTRL_UIO_CFG.
 */
-typedef struct {
-   DRXUIO_t      uio;  /**< UIO identifier       */
-   DRXUIOMode_t  mode; /**< UIO operational mode */
-} DRXUIOCfg_t, *pDRXUIOCfg_t;
+	typedef struct {
+		DRXUIO_t uio;
+		       /**< UIO identifier       */
+		DRXUIOMode_t mode;
+		       /**< UIO operational mode */
+	} DRXUIOCfg_t, *pDRXUIOCfg_t;
 
 /*========================================*/
 
@@ -1095,10 +1205,12 @@ typedef struct {
 *
 * Used by DRX_CTRL_UIO_READ and DRX_CTRL_UIO_WRITE.
 */
-typedef struct {
-   DRXUIO_t uio;   /**< UIO identifier              */
-   Bool_t   value; /**< UIO value (TRUE=1, FALSE=0) */
-} DRXUIOData_t, *pDRXUIOData_t;
+	typedef struct {
+		DRXUIO_t uio;
+		   /**< UIO identifier              */
+		Bool_t value;
+		   /**< UIO value (TRUE=1, FALSE=0) */
+	} DRXUIOData_t, *pDRXUIOData_t;
 
 /*========================================*/
 
@@ -1107,13 +1219,13 @@ typedef struct {
 *
 * Used by DRX_CTRL_SET_OOB.
 */
-typedef struct {
-   DRXFrequency_t               frequency;         /**< Frequency in kHz      */
-   DRXOOBDownstreamStandard_t   standard;          /**< OOB standard          */
-   Bool_t                       spectrumInverted;  /**< If TRUE, then spectrum
+	typedef struct {
+		DRXFrequency_t frequency;	   /**< Frequency in kHz      */
+		DRXOOBDownstreamStandard_t standard;
+						   /**< OOB standard          */
+		Bool_t spectrumInverted;	   /**< If TRUE, then spectrum
 							 is inverted          */
-} DRXOOB_t, *pDRXOOB_t;
-
+	} DRXOOB_t, *pDRXOOB_t;
 
 /*========================================*/
 
@@ -1122,13 +1234,12 @@ typedef struct {
 *
 * Used by DRX_CTRL_GET_OOB.
 */
-typedef struct {
-   DRXFrequency_t       frequency;        /**< Frequency in Khz         */
-   DRXLockStatus_t      lock;             /**< Lock status              */
-   u32_t                mer;              /**< MER                      */
-   s32_t                symbolRateOffset; /**< Symbolrate offset in ppm */
-} DRXOOBStatus_t, *pDRXOOBStatus_t;
-
+	typedef struct {
+		DRXFrequency_t frequency; /**< Frequency in Khz         */
+		DRXLockStatus_t lock;	  /**< Lock status              */
+		u32_t mer;		  /**< MER                      */
+		s32_t symbolRateOffset;	  /**< Symbolrate offset in ppm */
+	} DRXOOBStatus_t, *pDRXOOBStatus_t;
 
 /*========================================*/
 
@@ -1138,10 +1249,12 @@ typedef struct {
 * Used by DRX_CTRL_SET_CFG and DRX_CTRL_GET_CFG.
 * A sort of nested DRX_Ctrl() functionality for device specific controls.
 */
-typedef struct {
-   DRXCfgType_t cfgType ; /**< Function identifier */
-   void*        cfgData ; /**< Function data */
-} DRXCfg_t, *pDRXCfg_t;
+	typedef struct {
+		DRXCfgType_t cfgType;
+			  /**< Function identifier */
+		void *cfgData;
+			  /**< Function data */
+	} DRXCfg_t, *pDRXCfg_t;
 
 /*========================================*/
 
@@ -1150,11 +1263,10 @@ typedef struct {
 * MStart width [nr MCLK cycles] for serial MPEG output.
 */
 
-typedef enum {
-   DRX_MPEG_STR_WIDTH_1,
-   DRX_MPEG_STR_WIDTH_8
-} DRXMPEGStrWidth_t, *pDRXMPEGStrWidth_t;
-
+	typedef enum {
+		DRX_MPEG_STR_WIDTH_1,
+		DRX_MPEG_STR_WIDTH_8
+	} DRXMPEGStrWidth_t, *pDRXMPEGStrWidth_t;
 
 /* CTRL CFG MPEG ouput */
 /**
@@ -1165,44 +1277,45 @@ typedef enum {
 * DRX_CTRL_GET_CFG.
 */
 
-typedef struct {
-   Bool_t            enableMPEGOutput;  /**< If TRUE, enable MPEG output      */
-   Bool_t            insertRSByte;      /**< If TRUE, insert RS byte          */
-   Bool_t            enableParallel;    /**< If TRUE, parallel out otherwise
+	typedef struct {
+		Bool_t enableMPEGOutput;/**< If TRUE, enable MPEG output      */
+		Bool_t insertRSByte;	/**< If TRUE, insert RS byte          */
+		Bool_t enableParallel;	/**< If TRUE, parallel out otherwise
 								     serial   */
-   Bool_t            invertDATA;        /**< If TRUE, invert DATA signals     */
-   Bool_t            invertERR;         /**< If TRUE, invert ERR signal       */
-   Bool_t            invertSTR;         /**< If TRUE, invert STR signals      */
-   Bool_t            invertVAL;         /**< If TRUE, invert VAL signals      */
-   Bool_t            invertCLK;         /**< If TRUE, invert CLK signals      */
-   Bool_t            staticCLK;         /**< If TRUE, static MPEG clockrate
+		Bool_t invertDATA;	/**< If TRUE, invert DATA signals     */
+		Bool_t invertERR;	/**< If TRUE, invert ERR signal       */
+		Bool_t invertSTR;	/**< If TRUE, invert STR signals      */
+		Bool_t invertVAL;	/**< If TRUE, invert VAL signals      */
+		Bool_t invertCLK;	/**< If TRUE, invert CLK signals      */
+		Bool_t staticCLK;	/**< If TRUE, static MPEG clockrate
 					     will be used, otherwise clockrate
 					     will adapt to the bitrate of the
 					     TS                               */
-   u32_t             bitrate;           /**< Maximum bitrate in b/s in case
+		u32_t bitrate;		/**< Maximum bitrate in b/s in case
 					     static clockrate is selected     */
-   DRXMPEGStrWidth_t widthSTR;          /**< MPEG start width                 */
-} DRXCfgMPEGOutput_t, *pDRXCfgMPEGOutput_t;
+		DRXMPEGStrWidth_t widthSTR;
+					/**< MPEG start width                 */
+	} DRXCfgMPEGOutput_t, *pDRXCfgMPEGOutput_t;
 
 /* CTRL CFG SMA */
 /**
 * /struct DRXCfgSMAIO_t
 * smart antenna i/o.
 */
-typedef enum DRXCfgSMAIO_t {
-   DRX_SMA_OUTPUT = 0,
-   DRX_SMA_INPUT
-} DRXCfgSMAIO_t, *pDRXCfgSMAIO_t;
+	typedef enum DRXCfgSMAIO_t {
+		DRX_SMA_OUTPUT = 0,
+		DRX_SMA_INPUT
+	} DRXCfgSMAIO_t, *pDRXCfgSMAIO_t;
 
 /**
 * /struct DRXCfgSMA_t
 * Set smart antenna.
 */
-typedef struct {
-   DRXCfgSMAIO_t  io;
-   u16_t          ctrlData;
-   Bool_t         smartAntInverted;
-} DRXCfgSMA_t, *pDRXCfgSMA_t;
+	typedef struct {
+		DRXCfgSMAIO_t io;
+		u16_t ctrlData;
+		Bool_t smartAntInverted;
+	} DRXCfgSMA_t, *pDRXCfgSMA_t;
 
 /*========================================*/
 
@@ -1214,15 +1327,17 @@ typedef struct {
 * If portNr is equal to primairy portNr BSPI2C will be used.
 *
 */
-typedef struct {
-   u16_t            portNr;     /**< I2C port number               */
-   pI2CDeviceAddr_t wDevAddr;   /**< Write device address          */
-   u16_t            wCount;     /**< Size of write data in bytes   */
-   pu8_t            wData;      /**< Pointer to write data         */
-   pI2CDeviceAddr_t rDevAddr;   /**< Read device address           */
-   u16_t            rCount;     /**< Size of data to read in bytes */
-   pu8_t            rData;      /**< Pointer to read buffer        */
-} DRXI2CData_t, *pDRXI2CData_t;
+	typedef struct {
+		u16_t portNr;	/**< I2C port number               */
+		pI2CDeviceAddr_t wDevAddr;
+				/**< Write device address          */
+		u16_t wCount;	/**< Size of write data in bytes   */
+		pu8_t wData;	/**< Pointer to write data         */
+		pI2CDeviceAddr_t rDevAddr;
+				/**< Read device address           */
+		u16_t rCount;	/**< Size of data to read in bytes */
+		pu8_t rData;	/**< Pointer to read buffer        */
+	} DRXI2CData_t, *pDRXI2CData_t;
 
 /*========================================*/
 
@@ -1232,50 +1347,59 @@ typedef struct {
 *
 * Used by DRX_CTRL_SET_AUD.
 */
-typedef enum {
-   DRX_AUD_STANDARD_BTSC,                  /**< set BTSC standard (USA)       */
-   DRX_AUD_STANDARD_A2,                    /**< set A2-Korea FM Stereo        */
-   DRX_AUD_STANDARD_EIAJ,                  /**< set to Japanese FM Stereo     */
-   DRX_AUD_STANDARD_FM_STEREO,             /**< set to FM-Stereo Radio        */
-   DRX_AUD_STANDARD_M_MONO,                /**< for 4.5 MHz mono detected     */
-   DRX_AUD_STANDARD_D_K_MONO,              /**< for 6.5 MHz mono detected     */
-   DRX_AUD_STANDARD_BG_FM,                 /**< set BG_FM standard            */
-   DRX_AUD_STANDARD_D_K1,                  /**< set D_K1 standard             */
-   DRX_AUD_STANDARD_D_K2,                  /**< set D_K2 standard             */
-   DRX_AUD_STANDARD_D_K3,                  /**< set D_K3 standard             */
-   DRX_AUD_STANDARD_BG_NICAM_FM,           /**< set BG_NICAM_FM standard      */
-   DRX_AUD_STANDARD_L_NICAM_AM,            /**< set L_NICAM_AM standard       */
-   DRX_AUD_STANDARD_I_NICAM_FM,            /**< set I_NICAM_FM standard       */
-   DRX_AUD_STANDARD_D_K_NICAM_FM,          /**< set D_K_NICAM_FM standard     */
-   DRX_AUD_STANDARD_NOT_READY,             /**< used to detect audio standard */
-   DRX_AUD_STANDARD_AUTO = DRX_AUTO,       /**< Automatic Standard Detection  */
-   DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN  /**< used as auto and for readback */
-} DRXAudStandard_t, *pDRXAudStandard_t;
+	typedef enum {
+		DRX_AUD_STANDARD_BTSC,	   /**< set BTSC standard (USA)       */
+		DRX_AUD_STANDARD_A2,	   /**< set A2-Korea FM Stereo        */
+		DRX_AUD_STANDARD_EIAJ,	   /**< set to Japanese FM Stereo     */
+		DRX_AUD_STANDARD_FM_STEREO,/**< set to FM-Stereo Radio        */
+		DRX_AUD_STANDARD_M_MONO,   /**< for 4.5 MHz mono detected     */
+		DRX_AUD_STANDARD_D_K_MONO, /**< for 6.5 MHz mono detected     */
+		DRX_AUD_STANDARD_BG_FM,	   /**< set BG_FM standard            */
+		DRX_AUD_STANDARD_D_K1,	   /**< set D_K1 standard             */
+		DRX_AUD_STANDARD_D_K2,	   /**< set D_K2 standard             */
+		DRX_AUD_STANDARD_D_K3,	   /**< set D_K3 standard             */
+		DRX_AUD_STANDARD_BG_NICAM_FM,
+					   /**< set BG_NICAM_FM standard      */
+		DRX_AUD_STANDARD_L_NICAM_AM,
+					   /**< set L_NICAM_AM standard       */
+		DRX_AUD_STANDARD_I_NICAM_FM,
+					   /**< set I_NICAM_FM standard       */
+		DRX_AUD_STANDARD_D_K_NICAM_FM,
+					   /**< set D_K_NICAM_FM standard     */
+		DRX_AUD_STANDARD_NOT_READY,/**< used to detect audio standard */
+		DRX_AUD_STANDARD_AUTO = DRX_AUTO,
+					   /**< Automatic Standard Detection  */
+		DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN
+					   /**< used as auto and for readback */
+	} DRXAudStandard_t, *pDRXAudStandard_t;
 
 /* CTRL_AUD_GET_STATUS    - DRXAudStatus_t */
 /**
 * \enum DRXAudNICAMStatus_t
 * \brief Status of NICAM carrier.
 */
-typedef enum {
-   DRX_AUD_NICAM_DETECTED = 0,            /**< NICAM carrier detected         */
-   DRX_AUD_NICAM_NOT_DETECTED,            /**< NICAM carrier not detected     */
-   DRX_AUD_NICAM_BAD                      /**< NICAM carrier bad quality      */
-} DRXAudNICAMStatus_t, *pDRXAudNICAMStatus_t;
+	typedef enum {
+		DRX_AUD_NICAM_DETECTED = 0,
+					  /**< NICAM carrier detected         */
+		DRX_AUD_NICAM_NOT_DETECTED,
+					  /**< NICAM carrier not detected     */
+		DRX_AUD_NICAM_BAD	  /**< NICAM carrier bad quality      */
+	} DRXAudNICAMStatus_t, *pDRXAudNICAMStatus_t;
 
 /**
 * \struct DRXAudStatus_t
 * \brief Audio status characteristics.
 */
-typedef struct {
-   Bool_t               stereo;           /**< stereo detection               */
-   Bool_t               carrierA;         /**< carrier A detected             */
-   Bool_t               carrierB;         /**< carrier B detected             */
-   Bool_t               sap;              /**< sap / bilingual detection      */
-   Bool_t               rds;              /**< RDS data array present         */
-   DRXAudNICAMStatus_t  nicamStatus;      /**< status of NICAM carrier        */
-   s8_t                 fmIdent;          /**< FM Identification value        */
-} DRXAudStatus_t, *pDRXAudStatus_t;
+	typedef struct {
+		Bool_t stereo;		  /**< stereo detection               */
+		Bool_t carrierA;	  /**< carrier A detected             */
+		Bool_t carrierB;	  /**< carrier B detected             */
+		Bool_t sap;		  /**< sap / bilingual detection      */
+		Bool_t rds;		  /**< RDS data array present         */
+		DRXAudNICAMStatus_t nicamStatus;
+					  /**< status of NICAM carrier        */
+		s8_t fmIdent;		  /**< FM Identification value        */
+	} DRXAudStatus_t, *pDRXAudStatus_t;
 
 /* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
 
@@ -1283,110 +1407,114 @@ typedef struct {
 * \struct DRXRDSdata_t
 * \brief Raw RDS data array.
 */
-typedef struct {
-   Bool_t               valid;            /**< RDS data validation            */
-   u16_t                data[18];         /**< data from one RDS data array   */
-} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
+	typedef struct {
+		Bool_t valid;		  /**< RDS data validation            */
+		u16_t data[18];		  /**< data from one RDS data array   */
+	} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
 
 /* DRX_CFG_AUD_VOLUME      - DRXCfgAudVolume_t - set/get */
 /**
 * \enum DRXAudAVCDecayTime_t
 * \brief Automatic volume control configuration.
 */
-typedef enum {
-   DRX_AUD_AVC_OFF,                       /**< Automatic volume control off   */
-   DRX_AUD_AVC_DECAYTIME_8S,              /**< level volume in  8 seconds     */
-   DRX_AUD_AVC_DECAYTIME_4S,              /**< level volume in  4 seconds     */
-   DRX_AUD_AVC_DECAYTIME_2S,              /**< level volume in  2 seconds     */
-   DRX_AUD_AVC_DECAYTIME_20MS             /**< level volume in 20 millisec    */
-} DRXAudAVCMode_t, *pDRXAudAVCMode_t;
+	typedef enum {
+		DRX_AUD_AVC_OFF,	  /**< Automatic volume control off   */
+		DRX_AUD_AVC_DECAYTIME_8S, /**< level volume in  8 seconds     */
+		DRX_AUD_AVC_DECAYTIME_4S, /**< level volume in  4 seconds     */
+		DRX_AUD_AVC_DECAYTIME_2S, /**< level volume in  2 seconds     */
+		DRX_AUD_AVC_DECAYTIME_20MS/**< level volume in 20 millisec    */
+	} DRXAudAVCMode_t, *pDRXAudAVCMode_t;
 
 /**
 * /enum DRXAudMaxAVCGain_t
 * /brief Automatic volume control max gain in audio baseband.
 */
-typedef enum {
-   DRX_AUD_AVC_MAX_GAIN_0DB,              /**< maximum AVC gain  0 dB         */
-   DRX_AUD_AVC_MAX_GAIN_6DB,              /**< maximum AVC gain  6 dB         */
-   DRX_AUD_AVC_MAX_GAIN_12DB              /**< maximum AVC gain 12 dB         */
-} DRXAudAVCMaxGain_t, *pDRXAudAVCMaxGain_t;
+	typedef enum {
+		DRX_AUD_AVC_MAX_GAIN_0DB, /**< maximum AVC gain  0 dB         */
+		DRX_AUD_AVC_MAX_GAIN_6DB, /**< maximum AVC gain  6 dB         */
+		DRX_AUD_AVC_MAX_GAIN_12DB /**< maximum AVC gain 12 dB         */
+	} DRXAudAVCMaxGain_t, *pDRXAudAVCMaxGain_t;
 
 /**
 * /enum DRXAudMaxAVCAtten_t
 * /brief Automatic volume control max attenuation in audio baseband.
 */
-typedef enum {
-   DRX_AUD_AVC_MAX_ATTEN_12DB,            /**< maximum AVC attenuation 12 dB  */
-   DRX_AUD_AVC_MAX_ATTEN_18DB,            /**< maximum AVC attenuation 18 dB  */
-   DRX_AUD_AVC_MAX_ATTEN_24DB             /**< maximum AVC attenuation 24 dB  */
-} DRXAudAVCMaxAtten_t, *pDRXAudAVCMaxAtten_t;
+	typedef enum {
+		DRX_AUD_AVC_MAX_ATTEN_12DB,
+					  /**< maximum AVC attenuation 12 dB  */
+		DRX_AUD_AVC_MAX_ATTEN_18DB,
+					  /**< maximum AVC attenuation 18 dB  */
+		DRX_AUD_AVC_MAX_ATTEN_24DB/**< maximum AVC attenuation 24 dB  */
+	} DRXAudAVCMaxAtten_t, *pDRXAudAVCMaxAtten_t;
 /**
 * \struct DRXCfgAudVolume_t
 * \brief Audio volume configuration.
 */
-typedef struct {
-   Bool_t               mute;             /**< mute overrides volume setting  */
-   s16_t                volume;           /**< volume, range -114 to 12 dB    */
-   DRXAudAVCMode_t      avcMode;          /**< AVC auto volume control mode   */
-   u16_t                avcRefLevel;      /**< AVC reference level            */
-   DRXAudAVCMaxGain_t   avcMaxGain;       /**< AVC max gain selection         */
-   DRXAudAVCMaxAtten_t  avcMaxAtten;      /**< AVC max attenuation selection  */
-   s16_t                strengthLeft;     /**< quasi-peak, left speaker       */
-   s16_t                strengthRight;    /**< quasi-peak, right speaker      */
-} DRXCfgAudVolume_t, *pDRXCfgAudVolume_t;
+	typedef struct {
+		Bool_t mute;		  /**< mute overrides volume setting  */
+		s16_t volume;		  /**< volume, range -114 to 12 dB    */
+		DRXAudAVCMode_t avcMode;  /**< AVC auto volume control mode   */
+		u16_t avcRefLevel;	  /**< AVC reference level            */
+		DRXAudAVCMaxGain_t avcMaxGain;
+					  /**< AVC max gain selection         */
+		DRXAudAVCMaxAtten_t avcMaxAtten;
+					  /**< AVC max attenuation selection  */
+		s16_t strengthLeft;	  /**< quasi-peak, left speaker       */
+		s16_t strengthRight;	  /**< quasi-peak, right speaker      */
+	} DRXCfgAudVolume_t, *pDRXCfgAudVolume_t;
 
 /* DRX_CFG_I2S_OUTPUT      - DRXCfgI2SOutput_t - set/get */
 /**
 * \enum DRXI2SMode_t
 * \brief I2S output mode.
 */
-typedef enum {
-   DRX_I2S_MODE_MASTER,                   /**< I2S is in master mode          */
-   DRX_I2S_MODE_SLAVE                     /**< I2S is in slave mode           */
-} DRXI2SMode_t, *pDRXI2SMode_t;
+	typedef enum {
+		DRX_I2S_MODE_MASTER,	  /**< I2S is in master mode          */
+		DRX_I2S_MODE_SLAVE	  /**< I2S is in slave mode           */
+	} DRXI2SMode_t, *pDRXI2SMode_t;
 
 /**
 * \enum DRXI2SWordLength_t
 * \brief Width of I2S data.
 */
-typedef enum {
-   DRX_I2S_WORDLENGTH_32 = 0,             /**< I2S data is 32 bit wide        */
-   DRX_I2S_WORDLENGTH_16 = 1              /**< I2S data is 16 bit wide        */
-} DRXI2SWordLength_t, *pDRXI2SWordLength_t;
+	typedef enum {
+		DRX_I2S_WORDLENGTH_32 = 0,/**< I2S data is 32 bit wide        */
+		DRX_I2S_WORDLENGTH_16 = 1 /**< I2S data is 16 bit wide        */
+	} DRXI2SWordLength_t, *pDRXI2SWordLength_t;
 
 /**
 * \enum DRXI2SFormat_t
 * \brief Data wordstrobe alignment for I2S.
 */
-typedef enum {
-   DRX_I2S_FORMAT_WS_WITH_DATA,     /**< I2S data and wordstrobe are aligned  */
-   DRX_I2S_FORMAT_WS_ADVANCED       /**< I2S data one cycle after wordstrobe  */
-} DRXI2SFormat_t, *pDRXI2SFormat_t;
+	typedef enum {
+		DRX_I2S_FORMAT_WS_WITH_DATA,
+				    /**< I2S data and wordstrobe are aligned  */
+		DRX_I2S_FORMAT_WS_ADVANCED
+				    /**< I2S data one cycle after wordstrobe  */
+	} DRXI2SFormat_t, *pDRXI2SFormat_t;
 
 /**
 * \enum DRXI2SPolarity_t
 * \brief Polarity of I2S data.
 */
-typedef enum {
-   DRX_I2S_POLARITY_RIGHT,             /**< wordstrobe - right high, left low */
-   DRX_I2S_POLARITY_LEFT               /**< wordstrobe - right low, left high */
-} DRXI2SPolarity_t, *pDRXI2SPolarity_t;
-
-
+	typedef enum {
+		DRX_I2S_POLARITY_RIGHT,/**< wordstrobe - right high, left low */
+		DRX_I2S_POLARITY_LEFT  /**< wordstrobe - right low, left high */
+	} DRXI2SPolarity_t, *pDRXI2SPolarity_t;
 
 /**
 * \struct DRXCfgI2SOutput_t
 * \brief I2S output configuration.
 */
-typedef struct {
-   Bool_t               outputEnable;     /**< I2S output enable              */
-   u32_t                frequency;        /**< range from 8000-48000 Hz       */
-   DRXI2SMode_t         mode;             /**< I2S mode, master or slave      */
-   DRXI2SWordLength_t   wordLength;       /**< I2S wordlength, 16 or 32 bits  */
-   DRXI2SPolarity_t     polarity;         /**< I2S wordstrobe polarity        */
-   DRXI2SFormat_t       format;           /**< I2S wordstrobe delay to data   */
-} DRXCfgI2SOutput_t, *pDRXCfgI2SOutput_t;
-
+	typedef struct {
+		Bool_t outputEnable;	  /**< I2S output enable              */
+		u32_t frequency;	  /**< range from 8000-48000 Hz       */
+		DRXI2SMode_t mode;	  /**< I2S mode, master or slave      */
+		DRXI2SWordLength_t wordLength;
+					  /**< I2S wordlength, 16 or 32 bits  */
+		DRXI2SPolarity_t polarity;/**< I2S wordstrobe polarity        */
+		DRXI2SFormat_t format;	  /**< I2S wordstrobe delay to data   */
+	} DRXCfgI2SOutput_t, *pDRXCfgI2SOutput_t;
 
 /* ------------------------------expert interface-----------------------------*/
 /**
@@ -1394,119 +1522,119 @@ typedef struct {
 * setting for FM-Deemphasis in audio demodulator.
 *
 */
-typedef enum {
-   DRX_AUD_FM_DEEMPH_50US,
-   DRX_AUD_FM_DEEMPH_75US,
-   DRX_AUD_FM_DEEMPH_OFF
-} DRXAudFMDeemphasis_t, *pDRXAudFMDeemphasis_t;
+	typedef enum {
+		DRX_AUD_FM_DEEMPH_50US,
+		DRX_AUD_FM_DEEMPH_75US,
+		DRX_AUD_FM_DEEMPH_OFF
+	} DRXAudFMDeemphasis_t, *pDRXAudFMDeemphasis_t;
 
 /**
 * /enum DRXAudDeviation_t
 * setting for deviation mode in audio demodulator.
 *
 */
-typedef enum {
-   DRX_AUD_DEVIATION_NORMAL,
-   DRX_AUD_DEVIATION_HIGH
-} DRXCfgAudDeviation_t, *pDRXCfgAudDeviation_t;
+	typedef enum {
+		DRX_AUD_DEVIATION_NORMAL,
+		DRX_AUD_DEVIATION_HIGH
+	} DRXCfgAudDeviation_t, *pDRXCfgAudDeviation_t;
 
 /**
 * /enum DRXNoCarrierOption_t
 * setting for carrier, mute/noise.
 *
 */
-typedef enum {
-   DRX_NO_CARRIER_MUTE,
-   DRX_NO_CARRIER_NOISE
-} DRXNoCarrierOption_t, *pDRXNoCarrierOption_t;
-
+	typedef enum {
+		DRX_NO_CARRIER_MUTE,
+		DRX_NO_CARRIER_NOISE
+	} DRXNoCarrierOption_t, *pDRXNoCarrierOption_t;
 
 /**
 * \enum DRXAudAutoSound_t
 * \brief Automatic Sound
 */
-typedef enum {
-   DRX_AUD_AUTO_SOUND_OFF = 0,
-   DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_ON,
-   DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
-} DRXCfgAudAutoSound_t, *pDRXCfgAudAutoSound_t;
+	typedef enum {
+		DRX_AUD_AUTO_SOUND_OFF = 0,
+		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_ON,
+		DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
+	} DRXCfgAudAutoSound_t, *pDRXCfgAudAutoSound_t;
 
 /**
 * \enum DRXAudASSThres_t
 * \brief Automatic Sound Select Thresholds
 */
-typedef struct {
-   u16_t a2;    /* A2 Threshold for ASS configuration */
-   u16_t btsc;  /* BTSC Threshold for ASS configuration */
-   u16_t nicam; /* Nicam Threshold for ASS configuration */
-} DRXCfgAudASSThres_t, *pDRXCfgAudASSThres_t;
+	typedef struct {
+		u16_t a2;	/* A2 Threshold for ASS configuration */
+		u16_t btsc;	/* BTSC Threshold for ASS configuration */
+		u16_t nicam;	/* Nicam Threshold for ASS configuration */
+	} DRXCfgAudASSThres_t, *pDRXCfgAudASSThres_t;
 
 /**
 * \struct DRXAudCarrier_t
 * \brief Carrier detection related parameters
 */
-typedef struct {
-   u16_t thres;  /* carrier detetcion threshold for primary carrier (A) */
-   DRXNoCarrierOption_t opt;    /* Mute or noise at no carrier detection (A) */
-   DRXFrequency_t shift;     /* DC level of incoming signal (A) */
-   DRXFrequency_t dco;       /* frequency adjustment (A) */
-} DRXAudCarrier_t, *pDRXCfgAudCarrier_t;
+	typedef struct {
+		u16_t thres;	/* carrier detetcion threshold for primary carrier (A) */
+		DRXNoCarrierOption_t opt;	/* Mute or noise at no carrier detection (A) */
+		DRXFrequency_t shift;	/* DC level of incoming signal (A) */
+		DRXFrequency_t dco;	/* frequency adjustment (A) */
+	} DRXAudCarrier_t, *pDRXCfgAudCarrier_t;
 
 /**
 * \struct DRXCfgAudCarriers_t
 * \brief combining carrier A & B to one struct
 */
-typedef struct {
-   DRXAudCarrier_t a;
-   DRXAudCarrier_t b;
-} DRXCfgAudCarriers_t, *pDRXCfgAudCarriers_t;
+	typedef struct {
+		DRXAudCarrier_t a;
+		DRXAudCarrier_t b;
+	} DRXCfgAudCarriers_t, *pDRXCfgAudCarriers_t;
 
 /**
 * /enum DRXAudI2SSrc_t
 * Selection of audio source
 */
-typedef enum {
-   DRX_AUD_SRC_MONO,
-   DRX_AUD_SRC_STEREO_OR_AB,
-   DRX_AUD_SRC_STEREO_OR_A,
-   DRX_AUD_SRC_STEREO_OR_B
-} DRXAudI2SSrc_t, *pDRXAudI2SSrc_t;
-
+	typedef enum {
+		DRX_AUD_SRC_MONO,
+		DRX_AUD_SRC_STEREO_OR_AB,
+		DRX_AUD_SRC_STEREO_OR_A,
+		DRX_AUD_SRC_STEREO_OR_B
+	} DRXAudI2SSrc_t, *pDRXAudI2SSrc_t;
 
 /**
 * \enum DRXAudI2SMatrix_t
 * \brief Used for selecting I2S output.
 */
-typedef enum {
-   DRX_AUD_I2S_MATRIX_A_MONO,           /**< A sound only, stereo or mono     */
-   DRX_AUD_I2S_MATRIX_B_MONO,           /**< B sound only, stereo or mono     */
-   DRX_AUD_I2S_MATRIX_STEREO,           /**< A+B sound, transparant           */
-   DRX_AUD_I2S_MATRIX_MONO              /**< A+B mixed to mono sum, (L+R)/2   */
-} DRXAudI2SMatrix_t, *pDRXAudI2SMatrix_t;
-
+	typedef enum {
+		DRX_AUD_I2S_MATRIX_A_MONO,
+					/**< A sound only, stereo or mono     */
+		DRX_AUD_I2S_MATRIX_B_MONO,
+					/**< B sound only, stereo or mono     */
+		DRX_AUD_I2S_MATRIX_STEREO,
+					/**< A+B sound, transparant           */
+		DRX_AUD_I2S_MATRIX_MONO	/**< A+B mixed to mono sum, (L+R)/2   */
+	} DRXAudI2SMatrix_t, *pDRXAudI2SMatrix_t;
 
 /**
 * /enum DRXAudFMMatrix_t
 * setting for FM-Matrix in audio demodulator.
 *
 */
-typedef enum {
-   DRX_AUD_FM_MATRIX_NO_MATRIX,
-   DRX_AUD_FM_MATRIX_GERMAN,
-   DRX_AUD_FM_MATRIX_KOREAN,
-   DRX_AUD_FM_MATRIX_SOUND_A,
-   DRX_AUD_FM_MATRIX_SOUND_B
-} DRXAudFMMatrix_t, *pDRXAudFMMatrix_t;
+	typedef enum {
+		DRX_AUD_FM_MATRIX_NO_MATRIX,
+		DRX_AUD_FM_MATRIX_GERMAN,
+		DRX_AUD_FM_MATRIX_KOREAN,
+		DRX_AUD_FM_MATRIX_SOUND_A,
+		DRX_AUD_FM_MATRIX_SOUND_B
+	} DRXAudFMMatrix_t, *pDRXAudFMMatrix_t;
 
 /**
 * \struct DRXAudMatrices_t
 * \brief Mixer settings
 */
-typedef struct {
-   DRXAudI2SSrc_t       sourceI2S;
-   DRXAudI2SMatrix_t    matrixI2S;
-   DRXAudFMMatrix_t     matrixFm;
-} DRXCfgAudMixer_t, *pDRXCfgAudMixer_t;
+	typedef struct {
+		DRXAudI2SSrc_t sourceI2S;
+		DRXAudI2SMatrix_t matrixI2S;
+		DRXAudFMMatrix_t matrixFm;
+	} DRXCfgAudMixer_t, *pDRXCfgAudMixer_t;
 
 /**
 * \enum DRXI2SVidSync_t
@@ -1514,77 +1642,76 @@ typedef struct {
 * AUTO_1 and AUTO_2 are for automatic video standard detection with preference
 * for NTSC or Monochrome, because the frequencies are too close (59.94 & 60 Hz)
 */
-typedef enum {
-   DRX_AUD_AVSYNC_OFF,             /**< audio/video synchronization is off   */
-   DRX_AUD_AVSYNC_NTSC,            /**< it is an NTSC system                 */
-   DRX_AUD_AVSYNC_MONOCHROME,      /**< it is a MONOCHROME system            */
-   DRX_AUD_AVSYNC_PAL_SECAM        /**< it is a PAL/SECAM system             */
-} DRXCfgAudAVSync_t, *pDRXCfgAudAVSync_t;
+	typedef enum {
+		DRX_AUD_AVSYNC_OFF,/**< audio/video synchronization is off   */
+		DRX_AUD_AVSYNC_NTSC,
+				   /**< it is an NTSC system                 */
+		DRX_AUD_AVSYNC_MONOCHROME,
+				   /**< it is a MONOCHROME system            */
+		DRX_AUD_AVSYNC_PAL_SECAM
+				   /**< it is a PAL/SECAM system             */
+	} DRXCfgAudAVSync_t, *pDRXCfgAudAVSync_t;
 
 /**
 * \struct DRXCfgAudPrescale_t
 * \brief Prescalers
 */
-typedef struct {
-   u16_t fmDeviation;
-   s16_t nicamGain;
-} DRXCfgAudPrescale_t, *pDRXCfgAudPrescale_t;
+	typedef struct {
+		u16_t fmDeviation;
+		s16_t nicamGain;
+	} DRXCfgAudPrescale_t, *pDRXCfgAudPrescale_t;
 
 /**
 * \struct DRXAudBeep_t
 * \brief Beep
 */
-typedef struct {
-   s16_t    volume;     /* dB */
-   u16_t    frequency;  /* Hz */
-   Bool_t   mute;
-} DRXAudBeep_t, *pDRXAudBeep_t;
-
+	typedef struct {
+		s16_t volume;	/* dB */
+		u16_t frequency;	/* Hz */
+		Bool_t mute;
+	} DRXAudBeep_t, *pDRXAudBeep_t;
 
 /**
 * \enum DRXAudBtscDetect_t
 * \brief BTSC detetcion mode
 */
-typedef enum {
-   DRX_BTSC_STEREO,
-   DRX_BTSC_MONO_AND_SAP
-} DRXAudBtscDetect_t, *pDRXAudBtscDetect_t;
+	typedef enum {
+		DRX_BTSC_STEREO,
+		DRX_BTSC_MONO_AND_SAP
+	} DRXAudBtscDetect_t, *pDRXAudBtscDetect_t;
 
 /**
 * \struct DRXAudData_t
 * \brief Audio data structure
 */
-typedef struct
-{
-   /* audio storage */
-   Bool_t                  audioIsActive;
-   DRXAudStandard_t        audioStandard;
-   DRXCfgI2SOutput_t       i2sdata;
-   DRXCfgAudVolume_t       volume;
-   DRXCfgAudAutoSound_t    autoSound;
-   DRXCfgAudASSThres_t     assThresholds;
-   DRXCfgAudCarriers_t     carriers;
-   DRXCfgAudMixer_t        mixer;
-   DRXCfgAudDeviation_t    deviation;
-   DRXCfgAudAVSync_t       avSync;
-   DRXCfgAudPrescale_t     prescale;
-   DRXAudFMDeemphasis_t    deemph;
-   DRXAudBtscDetect_t      btscDetect;
-   /* rds */
-   u16_t                rdsDataCounter;
-   Bool_t               rdsDataPresent;
-} DRXAudData_t, *pDRXAudData_t;
-
+	typedef struct {
+		/* audio storage */
+		Bool_t audioIsActive;
+		DRXAudStandard_t audioStandard;
+		DRXCfgI2SOutput_t i2sdata;
+		DRXCfgAudVolume_t volume;
+		DRXCfgAudAutoSound_t autoSound;
+		DRXCfgAudASSThres_t assThresholds;
+		DRXCfgAudCarriers_t carriers;
+		DRXCfgAudMixer_t mixer;
+		DRXCfgAudDeviation_t deviation;
+		DRXCfgAudAVSync_t avSync;
+		DRXCfgAudPrescale_t prescale;
+		DRXAudFMDeemphasis_t deemph;
+		DRXAudBtscDetect_t btscDetect;
+		/* rds */
+		u16_t rdsDataCounter;
+		Bool_t rdsDataPresent;
+	} DRXAudData_t, *pDRXAudData_t;
 
 /**
 * \enum DRXQamLockRange_t
 * \brief QAM lock range mode
 */
-typedef enum
-{
-   DRX_QAM_LOCKRANGE_NORMAL,
-   DRX_QAM_LOCKRANGE_EXTENDED
-}DRXQamLockRange_t, *pDRXQamLockRange_t;
+	typedef enum {
+		DRX_QAM_LOCKRANGE_NORMAL,
+		DRX_QAM_LOCKRANGE_EXTENDED
+	} DRXQamLockRange_t, *pDRXQamLockRange_t;
 
 /*============================================================================*/
 /*============================================================================*/
@@ -1593,119 +1720,108 @@ typedef enum
 /*============================================================================*/
 
 /* Address on device */
-typedef u32_t DRXaddr_t, *pDRXaddr_t;
+	typedef u32_t DRXaddr_t, *pDRXaddr_t;
 
 /* Protocol specific flags */
-typedef u32_t DRXflags_t, *pDRXflags_t;
+	typedef u32_t DRXflags_t, *pDRXflags_t;
 
 /* Write block of data to device */
-typedef DRXStatus_t (*DRXWriteBlockFunc_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 u16_t            datasize,      /* size of data in bytes        */
-	 pu8_t            data,          /* data to send                 */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXWriteBlockFunc_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						   DRXaddr_t addr,	/* address of register/memory   */
+						   u16_t datasize,	/* size of data in bytes        */
+						   pu8_t data,	/* data to send                 */
+						   DRXflags_t flags);
 
 /* Read block of data from device */
-typedef DRXStatus_t (*DRXReadBlockFunc_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 u16_t            datasize,      /* size of data in bytes        */
-	 pu8_t            data,          /* receive buffer               */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXReadBlockFunc_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						  DRXaddr_t addr,	/* address of register/memory   */
+						  u16_t datasize,	/* size of data in bytes        */
+						  pu8_t data,	/* receive buffer               */
+						  DRXflags_t flags);
 
 /* Write 8-bits value to device */
-typedef DRXStatus_t (*DRXWriteReg8Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 u8_t             data,          /* data to send                 */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXWriteReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						  DRXaddr_t addr,	/* address of register/memory   */
+						  u8_t data,	/* data to send                 */
+						  DRXflags_t flags);
 
 /* Read 8-bits value to device */
-typedef DRXStatus_t (*DRXReadReg8Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 pu8_t            data,          /* receive buffer               */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXReadReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						 DRXaddr_t addr,	/* address of register/memory   */
+						 pu8_t data,	/* receive buffer               */
+						 DRXflags_t flags);
 
 /* Read modify write 8-bits value to device */
-typedef DRXStatus_t (*DRXReadModifyWriteReg8Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
-	 DRXaddr_t        waddr,         /* write address of register   */
-	 DRXaddr_t        raddr,         /* read  address of register   */
-	 u8_t             wdata,         /* data to write               */
-	 pu8_t            rdata);        /* data to read                */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg8Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+							    DRXaddr_t waddr,	/* write address of register   */
+							    DRXaddr_t raddr,	/* read  address of register   */
+							    u8_t wdata,	/* data to write               */
+							    pu8_t rdata);	/* data to read                */
 
 /* Write 16-bits value to device */
-typedef DRXStatus_t (*DRXWriteReg16Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 u16_t            data,          /* data to send                 */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXWriteReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						   DRXaddr_t addr,	/* address of register/memory   */
+						   u16_t data,	/* data to send                 */
+						   DRXflags_t flags);
 
 /* Read 16-bits value to device */
-typedef DRXStatus_t (*DRXReadReg16Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 pu16_t           data,          /* receive buffer               */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXReadReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						  DRXaddr_t addr,	/* address of register/memory   */
+						  pu16_t data,	/* receive buffer               */
+						  DRXflags_t flags);
 
 /* Read modify write 16-bits value to device */
-typedef DRXStatus_t (*DRXReadModifyWriteReg16Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
-	 DRXaddr_t        waddr,         /* write address of register   */
-	 DRXaddr_t        raddr,         /* read  address of register   */
-	 u16_t            wdata,         /* data to write               */
-	 pu16_t           rdata);        /* data to read                */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg16Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+							     DRXaddr_t waddr,	/* write address of register   */
+							     DRXaddr_t raddr,	/* read  address of register   */
+							     u16_t wdata,	/* data to write               */
+							     pu16_t rdata);	/* data to read                */
 
 /* Write 32-bits value to device */
-typedef DRXStatus_t (*DRXWriteReg32Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 u32_t            data,          /* data to send                 */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXWriteReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						   DRXaddr_t addr,	/* address of register/memory   */
+						   u32_t data,	/* data to send                 */
+						   DRXflags_t flags);
 
 /* Read 32-bits value to device */
-typedef DRXStatus_t (*DRXReadReg32Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
-	 DRXaddr_t        addr,          /* address of register/memory   */
-	 pu32_t           data,          /* receive buffer               */
-	 DRXflags_t       flags);
+	typedef DRXStatus_t(*DRXReadReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device        */
+						  DRXaddr_t addr,	/* address of register/memory   */
+						  pu32_t data,	/* receive buffer               */
+						  DRXflags_t flags);
 
 /* Read modify write 32-bits value to device */
-typedef DRXStatus_t (*DRXReadModifyWriteReg32Func_t) (
-	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
-	 DRXaddr_t        waddr,         /* write address of register   */
-	 DRXaddr_t        raddr,         /* read  address of register   */
-	 u32_t            wdata,         /* data to write               */
-	 pu32_t           rdata);        /* data to read                */
+	typedef DRXStatus_t(*DRXReadModifyWriteReg32Func_t) (pI2CDeviceAddr_t devAddr,	/* address of I2C device       */
+							     DRXaddr_t waddr,	/* write address of register   */
+							     DRXaddr_t raddr,	/* read  address of register   */
+							     u32_t wdata,	/* data to write               */
+							     pu32_t rdata);	/* data to read                */
 
 /**
 * \struct DRXAccessFunc_t
 * \brief Interface to an access protocol.
 */
-typedef struct {
-   pDRXVersion_t                   protocolVersion;
-   DRXWriteBlockFunc_t             writeBlockFunc;
-   DRXReadBlockFunc_t              readBlockFunc;
-   DRXWriteReg8Func_t              writeReg8Func;
-   DRXReadReg8Func_t               readReg8Func;
-   DRXReadModifyWriteReg8Func_t    readModifyWriteReg8Func;
-   DRXWriteReg16Func_t             writeReg16Func;
-   DRXReadReg16Func_t              readReg16Func;
-   DRXReadModifyWriteReg16Func_t   readModifyWriteReg16Func;
-   DRXWriteReg32Func_t             writeReg32Func;
-   DRXReadReg32Func_t              readReg32Func;
-   DRXReadModifyWriteReg32Func_t   readModifyWriteReg32Func;
-} DRXAccessFunc_t, *pDRXAccessFunc_t;
+	typedef struct {
+		pDRXVersion_t protocolVersion;
+		DRXWriteBlockFunc_t writeBlockFunc;
+		DRXReadBlockFunc_t readBlockFunc;
+		DRXWriteReg8Func_t writeReg8Func;
+		DRXReadReg8Func_t readReg8Func;
+		DRXReadModifyWriteReg8Func_t readModifyWriteReg8Func;
+		DRXWriteReg16Func_t writeReg16Func;
+		DRXReadReg16Func_t readReg16Func;
+		DRXReadModifyWriteReg16Func_t readModifyWriteReg16Func;
+		DRXWriteReg32Func_t writeReg32Func;
+		DRXReadReg32Func_t readReg32Func;
+		DRXReadModifyWriteReg32Func_t readModifyWriteReg32Func;
+	} DRXAccessFunc_t, *pDRXAccessFunc_t;
 
 /* Register address and data for register dump function */
-typedef struct {
+	typedef struct {
 
-   DRXaddr_t      address;
-   u32_t          data;
+		DRXaddr_t address;
+		u32_t data;
 
-} DRXRegDump_t, *pDRXRegDump_t ;
+	} DRXRegDump_t, *pDRXRegDump_t;
 
 /*============================================================================*/
 /*============================================================================*/
@@ -1717,103 +1833,128 @@ typedef struct {
 * \struct DRXCommonAttr_t
 * \brief Set of common attributes, shared by all DRX devices.
 */
-typedef struct {
-   /* Microcode (firmware) attributes */
-   pu8_t          microcode;       /**< Pointer to microcode image.           */
-   u16_t          microcodeSize;   /**< Size of microcode image in bytes.     */
-   Bool_t         verifyMicrocode; /**< Use microcode verify or not.          */
-   DRXMcVersionRec_t mcversion;    /**< Version record of microcode from file */
-
-   /* Clocks and tuner attributes */
-   DRXFrequency_t intermediateFreq;  /**< IF,if tuner instance not used. (kHz)*/
-   DRXFrequency_t sysClockFreq;      /**< Systemclock frequency.  (kHz)       */
-   DRXFrequency_t oscClockFreq;      /**< Oscillator clock frequency.  (kHz)  */
-   s16_t          oscClockDeviation; /**< Oscillator clock deviation.  (ppm)  */
-   Bool_t         mirrorFreqSpect;   /**< Mirror IF frequency spectrum or not.*/
-
-   /* Initial MPEG output attributes */
-   DRXCfgMPEGOutput_t mpegCfg;       /**< MPEG configuration                  */
-
-   Bool_t         isOpened;          /**< if TRUE instance is already opened. */
-
-   /* Channel scan */
-   pDRXScanParam_t scanParam;         /**< scan parameters                    */
-   u16_t           scanFreqPlanIndex; /**< next index in freq plan            */
-   DRXFrequency_t  scanNextFrequency; /**< next freq to scan                  */
-   Bool_t          scanReady;         /**< scan ready flag                    */
-   u32_t           scanMaxChannels;   /**< number of channels in freqplan     */
-   u32_t           scanChannelsScanned; /**< number of channels scanned       */
-   /* Channel scan - inner loop: demod related */
-   DRXScanFunc_t   scanFunction;      /**< function to check channel          */
-   /* Channel scan - inner loop: SYSObj related */
-   void*           scanContext;       /**< Context Pointer of SYSObj          */
-   /* Channel scan - parameters for default DTV scan function in core driver  */
-   u16_t           scanDemodLockTimeout; /**< millisecs to wait for lock      */
-   DRXLockStatus_t scanDesiredLock;   /**< lock requirement for channel found */
-   /* scanActive can be used by SetChannel to decide how to program the tuner,
-      fast or slow (but stable). Usually fast during scan. */
-   Bool_t          scanActive;        /**< TRUE when scan routines are active */
-
-   /* Power management */
-   DRXPowerMode_t  currentPowerMode;  /**< current power management mode      */
-
-   /* Tuner */
-   u8_t            tunerPortNr;       /**< nr of I2C port to wich tuner is    */
-   DRXFrequency_t  tunerMinFreqRF;    /**< minimum RF input frequency, in kHz */
-   DRXFrequency_t  tunerMaxFreqRF;    /**< maximum RF input frequency, in kHz */
-   Bool_t          tunerRfAgcPol;     /**< if TRUE invert RF AGC polarity     */
-   Bool_t          tunerIfAgcPol;     /**< if TRUE invert IF AGC polarity     */
-   Bool_t          tunerSlowMode;     /**< if TRUE invert IF AGC polarity     */
-
-   DRXChannel_t    currentChannel;    /**< current channel parameters         */
-   DRXStandard_t   currentStandard;   /**< current standard selection         */
-   DRXStandard_t   prevStandard;      /**< previous standard selection        */
-   DRXStandard_t   diCacheStandard;   /**< standard in DI cache if available  */
-   Bool_t          useBootloader;     /**< use bootloader in open             */
-   u32_t           capabilities;      /**< capabilities flags                 */
-   u32_t           productId;         /**< product ID inc. metal fix number   */
-
-} DRXCommonAttr_t, *pDRXCommonAttr_t;
-
+	typedef struct {
+		/* Microcode (firmware) attributes */
+		pu8_t microcode;   /**< Pointer to microcode image.           */
+		u16_t microcodeSize;
+				   /**< Size of microcode image in bytes.     */
+		Bool_t verifyMicrocode;
+				   /**< Use microcode verify or not.          */
+		DRXMcVersionRec_t mcversion;
+				   /**< Version record of microcode from file */
+
+		/* Clocks and tuner attributes */
+		DRXFrequency_t intermediateFreq;
+				     /**< IF,if tuner instance not used. (kHz)*/
+		DRXFrequency_t sysClockFreq;
+				     /**< Systemclock frequency.  (kHz)       */
+		DRXFrequency_t oscClockFreq;
+				     /**< Oscillator clock frequency.  (kHz)  */
+		s16_t oscClockDeviation;
+				     /**< Oscillator clock deviation.  (ppm)  */
+		Bool_t mirrorFreqSpect;
+				     /**< Mirror IF frequency spectrum or not.*/
+
+		/* Initial MPEG output attributes */
+		DRXCfgMPEGOutput_t mpegCfg;
+				     /**< MPEG configuration                  */
+
+		Bool_t isOpened;     /**< if TRUE instance is already opened. */
+
+		/* Channel scan */
+		pDRXScanParam_t scanParam;
+				      /**< scan parameters                    */
+		u16_t scanFreqPlanIndex;
+				      /**< next index in freq plan            */
+		DRXFrequency_t scanNextFrequency;
+				      /**< next freq to scan                  */
+		Bool_t scanReady;     /**< scan ready flag                    */
+		u32_t scanMaxChannels;/**< number of channels in freqplan     */
+		u32_t scanChannelsScanned;
+					/**< number of channels scanned       */
+		/* Channel scan - inner loop: demod related */
+		DRXScanFunc_t scanFunction;
+				      /**< function to check channel          */
+		/* Channel scan - inner loop: SYSObj related */
+		void *scanContext;    /**< Context Pointer of SYSObj          */
+		/* Channel scan - parameters for default DTV scan function in core driver  */
+		u16_t scanDemodLockTimeout;
+					 /**< millisecs to wait for lock      */
+		DRXLockStatus_t scanDesiredLock;
+				      /**< lock requirement for channel found */
+		/* scanActive can be used by SetChannel to decide how to program the tuner,
+		   fast or slow (but stable). Usually fast during scan. */
+		Bool_t scanActive;    /**< TRUE when scan routines are active */
+
+		/* Power management */
+		DRXPowerMode_t currentPowerMode;
+				      /**< current power management mode      */
+
+		/* Tuner */
+		u8_t tunerPortNr;     /**< nr of I2C port to wich tuner is    */
+		DRXFrequency_t tunerMinFreqRF;
+				      /**< minimum RF input frequency, in kHz */
+		DRXFrequency_t tunerMaxFreqRF;
+				      /**< maximum RF input frequency, in kHz */
+		Bool_t tunerRfAgcPol; /**< if TRUE invert RF AGC polarity     */
+		Bool_t tunerIfAgcPol; /**< if TRUE invert IF AGC polarity     */
+		Bool_t tunerSlowMode; /**< if TRUE invert IF AGC polarity     */
+
+		DRXChannel_t currentChannel;
+				      /**< current channel parameters         */
+		DRXStandard_t currentStandard;
+				      /**< current standard selection         */
+		DRXStandard_t prevStandard;
+				      /**< previous standard selection        */
+		DRXStandard_t diCacheStandard;
+				      /**< standard in DI cache if available  */
+		Bool_t useBootloader; /**< use bootloader in open             */
+		u32_t capabilities;   /**< capabilities flags                 */
+		u32_t productId;      /**< product ID inc. metal fix number   */
+
+	} DRXCommonAttr_t, *pDRXCommonAttr_t;
 
 /*
 * Generic functions for DRX devices.
 */
-typedef struct DRXDemodInstance_s *pDRXDemodInstance_t;
+	typedef struct DRXDemodInstance_s *pDRXDemodInstance_t;
 
-typedef DRXStatus_t (*DRXOpenFunc_t)  (pDRXDemodInstance_t demod);
-typedef DRXStatus_t (*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
-typedef DRXStatus_t (*DRXCtrlFunc_t)  (pDRXDemodInstance_t demod,
-				       DRXCtrlIndex_t ctrl,
-				       void *ctrlData);
+	typedef DRXStatus_t(*DRXOpenFunc_t) (pDRXDemodInstance_t demod);
+	typedef DRXStatus_t(*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
+	typedef DRXStatus_t(*DRXCtrlFunc_t) (pDRXDemodInstance_t demod,
+					     DRXCtrlIndex_t ctrl,
+					     void *ctrlData);
 
 /**
 * \struct DRXDemodFunc_t
 * \brief A stucture containing all functions of a demodulator.
 */
-typedef struct {
-   u32_t          typeId;                /**< Device type identifier.      */
-   DRXOpenFunc_t  openFunc;              /**< Pointer to Open() function.  */
-   DRXCloseFunc_t closeFunc;             /**< Pointer to Close() function. */
-   DRXCtrlFunc_t  ctrlFunc;              /**< Pointer to Ctrl() function.  */
-} DRXDemodFunc_t, *pDRXDemodFunc_t;
+	typedef struct {
+		u32_t typeId;		 /**< Device type identifier.      */
+		DRXOpenFunc_t openFunc;	 /**< Pointer to Open() function.  */
+		DRXCloseFunc_t closeFunc;/**< Pointer to Close() function. */
+		DRXCtrlFunc_t ctrlFunc;	 /**< Pointer to Ctrl() function.  */
+	} DRXDemodFunc_t, *pDRXDemodFunc_t;
 
 /**
 * \struct DRXDemodInstance_t
 * \brief Top structure of demodulator instance.
 */
-typedef struct DRXDemodInstance_s {
-   /* type specific demodulator data */
-   pDRXDemodFunc_t   myDemodFunct;  /**< demodulator functions                */
-   pDRXAccessFunc_t  myAccessFunct; /**< data access protocol functions       */
-   pTUNERInstance_t  myTuner;       /**< tuner instance,if NULL then baseband */
-   pI2CDeviceAddr_t  myI2CDevAddr;  /**< i2c address and device identifier    */
-   pDRXCommonAttr_t  myCommonAttr;  /**< common DRX attributes                */
-   void*             myExtAttr;     /**< device specific attributes           */
-   /* generic demodulator data */
-} DRXDemodInstance_t;
-
-
+	typedef struct DRXDemodInstance_s {
+		/* type specific demodulator data */
+		pDRXDemodFunc_t myDemodFunct;
+				    /**< demodulator functions                */
+		pDRXAccessFunc_t myAccessFunct;
+				    /**< data access protocol functions       */
+		pTUNERInstance_t myTuner;
+				    /**< tuner instance,if NULL then baseband */
+		pI2CDeviceAddr_t myI2CDevAddr;
+				    /**< i2c address and device identifier    */
+		pDRXCommonAttr_t myCommonAttr;
+				    /**< common DRX attributes                */
+		void *myExtAttr;    /**< device specific attributes           */
+		/* generic demodulator data */
+	} DRXDemodInstance_t;
 
 /*-------------------------------------------------------------------------
 MACROS
@@ -2097,7 +2238,6 @@ Conversion from enum values to human readable form.
 Access macros
 -------------------------------------------------------------------------*/
 
-
 /**
 * \brief Create a compilable reference to the microcode attribute
 * \param d pointer to demod instance
@@ -2494,7 +2634,6 @@ Access macros
       }                                                                    \
    } while ( 0 )
 
-
 /* Configuration functions for usage by Access (XS) Macros */
 
 #ifndef DRX_XS_CFG_BASE
@@ -2522,7 +2661,6 @@ Access macros
 #define DRX_GET_QAM_LOCKRANGE( d, x ) DRX_ACCESSMACRO_GET( (d), (x), \
 	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t, DRX_UNKNOWN )
 
-
 /**
 * \brief Macro to check if std is an ATV standard
 * \retval TRUE std is an ATV standard
@@ -2560,24 +2698,20 @@ Access macros
 */
 #define DRX_ISDVBTSTD( std ) ( (std) == DRX_STANDARD_DVBT )
 
-
-
-
 /*-------------------------------------------------------------------------
 Exported FUNCTIONS
 -------------------------------------------------------------------------*/
 
-DRXStatus_t DRX_Init( pDRXDemodInstance_t demods[] );
+	DRXStatus_t DRX_Init(pDRXDemodInstance_t demods[]);
 
-DRXStatus_t DRX_Term( void );
+	DRXStatus_t DRX_Term(void);
 
-DRXStatus_t DRX_Open(pDRXDemodInstance_t demod);
+	DRXStatus_t DRX_Open(pDRXDemodInstance_t demod);
 
-DRXStatus_t DRX_Close(pDRXDemodInstance_t demod);
+	DRXStatus_t DRX_Close(pDRXDemodInstance_t demod);
 
-DRXStatus_t DRX_Ctrl(pDRXDemodInstance_t demod,
-		     DRXCtrlIndex_t ctrl,
-		     void *ctrlData);
+	DRXStatus_t DRX_Ctrl(pDRXDemodInstance_t demod,
+			     DRXCtrlIndex_t ctrl, void *ctrlData);
 
 /*-------------------------------------------------------------------------
 THE END
@@ -2585,4 +2719,4 @@ THE END
 #ifdef __cplusplus
 }
 #endif
-#endif /* __DRXDRIVER_H__ */
+#endif				/* __DRXDRIVER_H__ */

commit ca3355a94755cad2a334354b1a9bcbab9239bec9
Author: Devin Heitmueller <dheitmueller@kernellabs.com>
Date:   Sun Jul 4 18:42:11 2010 -0300

    [media] drx-j: put under 3-clause BSD license
    
    Relicense the drx-j driver under a standard 3-clause BSD license, which makes
    it GPL compatible.
    
    This was done explicitly with permission from Trident Microsystems.
    
    Signed-off-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
index d3bfe0676581..053334455831 100644
--- a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -1,38 +1,38 @@
+/*
+  Copyright (c), 2004-2005,2007-2010 Trident Microsystems, Inc.
+  All rights reserved.
+
+  Redistribution and use in source and binary forms, with or without
+  modification, are permitted provided that the following conditions are met:
+
+  * Redistributions of source code must retain the above copyright notice,
+    this list of conditions and the following disclaimer.
+  * Redistributions in binary form must reproduce the above copyright notice,
+    this list of conditions and the following disclaimer in the documentation
+	and/or other materials provided with the distribution.
+  * Neither the name of Trident Microsystems nor Hauppauge Computer Works
+    nor the names of its contributors may be used to endorse or promote
+	products derived from this software without specific prior written
+	permission.
+
+  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+  POSSIBILITY OF SUCH DAMAGE.
+*/
+
 /**
 * \file $Id: drx_driver.h,v 1.84 2010/01/14 22:47:50 dingtao Exp $
 *
 * \brief DRX driver API
 *
-* $(c) 2004-2010 Trident Microsystems, Inc. - All rights reserved.
-*
-* This software and related documentation (the 'Software') are intellectual
-* property owned by Trident and are copyright of Trident, unless specifically
-* noted otherwise.
-*
-* Any use of the Software is permitted only pursuant to the terms of the
-* license agreement, if any, which accompanies, is included with or applicable
-* to the Software ('License Agreement') or upon express written consent of
-* Trident. Any copying, reproduction or redistribution of the Software in
-* whole or in part by any means not in accordance with the License Agreement
-* or as agreed in writing by Trident is expressly prohibited.
-*
-* THE SOFTWARE IS WARRANTED, IF AT ALL, ONLY ACCORDING TO THE TERMS OF THE
-* LICENSE AGREEMENT. EXCEPT AS WARRANTED IN THE LICENSE AGREEMENT THE SOFTWARE
-* IS DELIVERED 'AS IS' AND TRIDENT HEREBY DISCLAIMS ALL WARRANTIES AND
-* CONDITIONS WITH REGARD TO THE SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
-* AND CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIT
-* ENJOYMENT, TITLE AND NON-INFRINGEMENT OF ANY THIRD PARTY INTELLECTUAL
-* PROPERTY OR OTHER RIGHTS WHICH MAY RESULT FROM THE USE OR THE INABILITY
-* TO USE THE SOFTWARE.
-*
-* IN NO EVENT SHALL TRIDENT BE LIABLE FOR INDIRECT, INCIDENTAL, CONSEQUENTIAL,
-* PUNITIVE, SPECIAL OR OTHER DAMAGES WHATSOEVER INCLUDING WITHOUT LIMITATION,
-* DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS
-* INFORMATION, AND THE LIKE, ARISING OUT OF OR RELATING TO THE USE OF OR THE
-* INABILITY TO USE THE SOFTWARE, EVEN IF TRIDENT HAS BEEN ADVISED OF THE
-* POSSIBILITY OF SUCH DAMAGES, EXCEPT PERSONAL INJURY OR DEATH RESULTING FROM
-* TRIDENT'S NEGLIGENCE.                                                        $
-*
 */
 #ifndef __DRXDRIVER_H__
 #define __DRXDRIVER_H__

commit 38b2df95c53be4bd5421d933ca0dabbcb82741d0
Author: Devin Heitmueller <dheitmueller@kernellabs.com>
Date:   Mon Aug 13 21:18:02 2012 -0300

    [media] drx-j: add a driver for Trident drx-j frontend
    
    Add support for the Trident DRX-J driver, including a card profile for the
    PCTV 80e which uses the chip.
    
    Thanks to Trident for allowing the release of this code under a BSD license,
    and of course Hauppauge/PCTV for pushing for its release to the community.
    
    [pdickeybeta@gmail.com: modified to fix compilation errors and also to move
     the driver files from the drx39xy subdirectory to the frontends directory]
    
    [m.chehab@samsung.com: fix merge conflicts, commented drx-j compilation and
     added EM28XX_R06_I2C_CLK setup also to the board setup]
    
    Signed-off-by: Devin Heitmueller <dheitmueller@kernellabs.com>
    Signed-off-by: Mauro Carvalho Chehab <m.chehab@samsung.com>

diff --git a/drivers/media/dvb-frontends/drx39xyj/drx_driver.h b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
new file mode 100644
index 000000000000..d3bfe0676581
--- /dev/null
+++ b/drivers/media/dvb-frontends/drx39xyj/drx_driver.h
@@ -0,0 +1,2588 @@
+/**
+* \file $Id: drx_driver.h,v 1.84 2010/01/14 22:47:50 dingtao Exp $
+*
+* \brief DRX driver API
+*
+* $(c) 2004-2010 Trident Microsystems, Inc. - All rights reserved.
+*
+* This software and related documentation (the 'Software') are intellectual
+* property owned by Trident and are copyright of Trident, unless specifically
+* noted otherwise.
+*
+* Any use of the Software is permitted only pursuant to the terms of the
+* license agreement, if any, which accompanies, is included with or applicable
+* to the Software ('License Agreement') or upon express written consent of
+* Trident. Any copying, reproduction or redistribution of the Software in
+* whole or in part by any means not in accordance with the License Agreement
+* or as agreed in writing by Trident is expressly prohibited.
+*
+* THE SOFTWARE IS WARRANTED, IF AT ALL, ONLY ACCORDING TO THE TERMS OF THE
+* LICENSE AGREEMENT. EXCEPT AS WARRANTED IN THE LICENSE AGREEMENT THE SOFTWARE
+* IS DELIVERED 'AS IS' AND TRIDENT HEREBY DISCLAIMS ALL WARRANTIES AND
+* CONDITIONS WITH REGARD TO THE SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES
+* AND CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIT
+* ENJOYMENT, TITLE AND NON-INFRINGEMENT OF ANY THIRD PARTY INTELLECTUAL
+* PROPERTY OR OTHER RIGHTS WHICH MAY RESULT FROM THE USE OR THE INABILITY
+* TO USE THE SOFTWARE.
+*
+* IN NO EVENT SHALL TRIDENT BE LIABLE FOR INDIRECT, INCIDENTAL, CONSEQUENTIAL,
+* PUNITIVE, SPECIAL OR OTHER DAMAGES WHATSOEVER INCLUDING WITHOUT LIMITATION,
+* DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS
+* INFORMATION, AND THE LIKE, ARISING OUT OF OR RELATING TO THE USE OF OR THE
+* INABILITY TO USE THE SOFTWARE, EVEN IF TRIDENT HAS BEEN ADVISED OF THE
+* POSSIBILITY OF SUCH DAMAGES, EXCEPT PERSONAL INJURY OR DEATH RESULTING FROM
+* TRIDENT'S NEGLIGENCE.                                                        $
+*
+*/
+#ifndef __DRXDRIVER_H__
+#define __DRXDRIVER_H__
+/*-------------------------------------------------------------------------
+INCLUDES
+-------------------------------------------------------------------------*/
+#include "bsp_types.h"
+#include "bsp_i2c.h"
+#include "bsp_tuner.h"
+#include "bsp_host.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+/*-------------------------------------------------------------------------
+TYPEDEFS
+-------------------------------------------------------------------------*/
+
+/*-------------------------------------------------------------------------
+DEFINES
+-------------------------------------------------------------------------*/
+
+/**************
+*
+* This section configures the DRX Data Access Protocols (DAPs).
+*
+**************/
+
+/**
+* \def DRXDAP_SINGLE_MASTER
+* \brief Enable I2C single or I2C multimaster mode on host.
+*
+* Set to 1 to enable single master mode
+* Set to 0 to enable multi master mode
+*
+* The actual DAP implementation may be restricted to only one of the modes.
+* A compiler warning or error will be generated if the DAP implementation
+* overides or cannot handle the mode defined below.
+*
+*/
+#ifndef DRXDAP_SINGLE_MASTER
+#define DRXDAP_SINGLE_MASTER 0
+#endif
+
+/**
+* \def DRXDAP_MAX_WCHUNKSIZE
+* \brief Defines maximum chunksize of an i2c write action by host.
+*
+* This indicates the maximum size of data the I2C device driver is able to
+* write at a time. This includes I2C device address and register addressing.
+*
+* This maximum size may be restricted by the actual DAP implementation.
+* A compiler warning or error will be generated if the DAP implementation
+* overides or cannot handle the chunksize defined below.
+*
+* Beware that the DAP uses  DRXDAP_MAX_WCHUNKSIZE to create a temporary data
+* buffer. Do not undefine or choose too large, unless your system is able to
+* handle a stack buffer of that size.
+*
+*/
+#ifndef DRXDAP_MAX_WCHUNKSIZE
+#define  DRXDAP_MAX_WCHUNKSIZE 60
+#endif
+
+/**
+* \def DRXDAP_MAX_RCHUNKSIZE
+* \brief Defines maximum chunksize of an i2c read action by host.
+*
+* This indicates the maximum size of data the I2C device driver is able to read
+* at a time. Minimum value is 2. Also, the read chunk size must be even.
+*
+* This maximum size may be restricted by the actual DAP implementation.
+* A compiler warning or error will be generated if the DAP implementation
+* overides or cannot handle the chunksize defined below.
+*
+*/
+#ifndef DRXDAP_MAX_RCHUNKSIZE
+#define  DRXDAP_MAX_RCHUNKSIZE 60
+#endif
+
+/**************
+*
+* This section describes drxdriver defines.
+*
+**************/
+
+/**
+* \def DRX_UNKNOWN
+* \brief Generic UNKNOWN value for DRX enumerated types.
+*
+* Used to indicate that the parameter value is unknown or not yet initalized.
+*/
+#ifndef DRX_UNKNOWN
+#define DRX_UNKNOWN (254)
+#endif
+
+/**
+* \def DRX_AUTO
+* \brief Generic AUTO value for DRX enumerated types.
+*
+* Used to instruct the driver to automatically determine the value of the
+* parameter.
+*/
+#ifndef DRX_AUTO
+#define DRX_AUTO    (255)
+#endif
+
+
+/**************
+*
+* This section describes flag definitions for the device capbilities.
+*
+**************/
+
+/**
+* \brief LNA capability flag
+*
+* Device has a Low Noise Amplifier
+*
+*/
+#define DRX_CAPABILITY_HAS_LNA           (1UL <<  0)
+/**
+* \brief OOB-RX capability flag
+*
+* Device has OOB-RX
+*
+*/
+#define DRX_CAPABILITY_HAS_OOBRX         (1UL <<  1)
+/**
+* \brief ATV capability flag
+*
+* Device has ATV
+*
+*/
+#define DRX_CAPABILITY_HAS_ATV           (1UL <<  2)
+/**
+* \brief DVB-T capability flag
+*
+* Device has DVB-T
+*
+*/
+#define DRX_CAPABILITY_HAS_DVBT          (1UL <<  3)
+/**
+* \brief  ITU-B capability flag
+*
+* Device has ITU-B
+*
+*/
+#define DRX_CAPABILITY_HAS_ITUB          (1UL <<  4)
+/**
+* \brief  Audio capability flag
+*
+* Device has Audio
+*
+*/
+#define DRX_CAPABILITY_HAS_AUD           (1UL <<  5)
+/**
+* \brief  SAW switch capability flag
+*
+* Device has SAW switch
+*
+*/
+#define DRX_CAPABILITY_HAS_SAWSW         (1UL <<  6)
+/**
+* \brief  GPIO1 capability flag
+*
+* Device has GPIO1
+*
+*/
+#define DRX_CAPABILITY_HAS_GPIO1         (1UL <<  7)
+/**
+* \brief  GPIO2 capability flag
+*
+* Device has GPIO2
+*
+*/
+#define DRX_CAPABILITY_HAS_GPIO2         (1UL <<  8)
+/**
+* \brief  IRQN capability flag
+*
+* Device has IRQN
+*
+*/
+#define DRX_CAPABILITY_HAS_IRQN          (1UL <<  9)
+/**
+* \brief  8VSB capability flag
+*
+* Device has 8VSB
+*
+*/
+#define DRX_CAPABILITY_HAS_8VSB          (1UL << 10)
+/**
+* \brief  SMA-TX capability flag
+*
+* Device has SMATX
+*
+*/
+#define DRX_CAPABILITY_HAS_SMATX         (1UL << 11)
+/**
+* \brief  SMA-RX capability flag
+*
+* Device has SMARX
+*
+*/
+#define DRX_CAPABILITY_HAS_SMARX         (1UL << 12)
+/**
+* \brief  ITU-A/C capability flag
+*
+* Device has ITU-A/C
+*
+*/
+#define DRX_CAPABILITY_HAS_ITUAC         (1UL << 13)
+
+/*-------------------------------------------------------------------------
+MACROS
+-------------------------------------------------------------------------*/
+/* Macros to stringify the version number */
+#define DRX_VERSIONSTRING( MAJOR, MINOR, PATCH ) \
+	 DRX_VERSIONSTRING_HELP(MAJOR)"." \
+	 DRX_VERSIONSTRING_HELP(MINOR)"." \
+	 DRX_VERSIONSTRING_HELP(PATCH)
+#define DRX_VERSIONSTRING_HELP( NUM ) #NUM
+
+/**
+* \brief Macro to create byte array elements from 16 bit integers.
+* This macro is used to create byte arrays for block writes.
+* Block writes speed up I2C traffic between host and demod.
+* The macro takes care of the required byte order in a 16 bits word.
+* x->lowbyte(x), highbyte(x)
+*/
+#define DRX_16TO8( x ) ((u8_t) (((u16_t)x)    &0xFF)), \
+			((u8_t)((((u16_t)x)>>8)&0xFF))
+
+/**
+* \brief Macro to sign extend signed 9 bit value to signed  16 bit value
+*/
+#define DRX_S9TOS16(x) ((((u16_t)x)&0x100 )?((s16_t)((u16_t)(x)|0xFF00)):(x))
+
+/**
+* \brief Macro to sign extend signed 9 bit value to signed  16 bit value
+*/
+#define DRX_S24TODRXFREQ(x) ( ( ( (u32_t) x ) & 0x00800000UL ) ? \
+				 (  (DRXFrequency_t) \
+				    ( ( (u32_t) x ) | 0xFF000000 ) ) : \
+				 ( (DRXFrequency_t) x ) )
+
+/**
+* \brief Macro to convert 16 bit register value to a DRXFrequency_t
+*/
+#define DRX_U16TODRXFREQ(x)   (  ( x & 0x8000 ) ? \
+				 (  (DRXFrequency_t) \
+				    ( ( (u32_t) x ) | 0xFFFF0000 ) ) : \
+				 ( (DRXFrequency_t) x ) )
+
+/*-------------------------------------------------------------------------
+ENUM
+-------------------------------------------------------------------------*/
+
+/**
+* \enum DRXStandard_t
+* \brief Modulation standards.
+*/
+typedef enum {
+   DRX_STANDARD_DVBT    = 0,           /**< Terrestrial DVB-T.               */
+   DRX_STANDARD_8VSB,                  /**< Terrestrial 8VSB.                */
+   DRX_STANDARD_NTSC,                  /**< Terrestrial\Cable analog NTSC.   */
+   DRX_STANDARD_PAL_SECAM_BG,          /**< Terrestrial analog PAL/SECAM B/G */
+   DRX_STANDARD_PAL_SECAM_DK,          /**< Terrestrial analog PAL/SECAM D/K */
+   DRX_STANDARD_PAL_SECAM_I,           /**< Terrestrial analog PAL/SECAM I   */
+   DRX_STANDARD_PAL_SECAM_L,           /**< Terrestrial analog PAL/SECAM L
+					     with negative modulation        */
+   DRX_STANDARD_PAL_SECAM_LP,          /**< Terrestrial analog PAL/SECAM L
+					     with positive modulation        */
+   DRX_STANDARD_ITU_A,                 /**< Cable ITU ANNEX A.               */
+   DRX_STANDARD_ITU_B,                 /**< Cable ITU ANNEX B.               */
+   DRX_STANDARD_ITU_C,                 /**< Cable ITU ANNEX C.               */
+   DRX_STANDARD_ITU_D,                 /**< Cable ITU ANNEX D.               */
+   DRX_STANDARD_FM,                    /**< Terrestrial\Cable FM radio       */
+   DRX_STANDARD_DTMB,                  /**< Terrestrial DTMB standard (China)*/
+   DRX_STANDARD_UNKNOWN = DRX_UNKNOWN, /**< Standard unknown.                */
+   DRX_STANDARD_AUTO    = DRX_AUTO     /**< Autodetect standard.             */
+} DRXStandard_t, *pDRXStandard_t;
+
+/**
+* \enum DRXStandard_t
+* \brief Modulation sub-standards.
+*/
+typedef enum {
+   DRX_SUBSTANDARD_MAIN = 0,              /**< Main subvariant of standard   */
+   DRX_SUBSTANDARD_ATV_BG_SCANDINAVIA,
+   DRX_SUBSTANDARD_ATV_DK_POLAND,
+   DRX_SUBSTANDARD_ATV_DK_CHINA,
+   DRX_SUBSTANDARD_UNKNOWN = DRX_UNKNOWN, /**< Sub-standard unknown.         */
+   DRX_SUBSTANDARD_AUTO    = DRX_AUTO     /**< Auto (default) sub-standard   */
+} DRXSubstandard_t, *pDRXSubstandard_t;
+
+/**
+* \enum DRXBandwidth_t
+* \brief Channel bandwidth or channel spacing.
+*/
+typedef enum {
+   DRX_BANDWIDTH_8MHZ    = 0,            /**< Bandwidth 8 MHz.   */
+   DRX_BANDWIDTH_7MHZ,                   /**< Bandwidth 7 MHz.   */
+   DRX_BANDWIDTH_6MHZ,                   /**< Bandwidth 6 MHz.   */
+   DRX_BANDWIDTH_UNKNOWN = DRX_UNKNOWN,  /**< Bandwidth unknown. */
+   DRX_BANDWIDTH_AUTO    = DRX_AUTO      /**< Auto Set Bandwidth */
+} DRXBandwidth_t, *pDRXBandwidth_t;
+
+/**
+* \enum DRXMirror_t
+* \brief Indicate if channel spectrum is mirrored or not.
+*/
+typedef enum {
+   DRX_MIRROR_NO     = 0,            /**< Spectrum is not mirrored.           */
+   DRX_MIRROR_YES,                   /**< Spectrum is mirrored.               */
+   DRX_MIRROR_UNKNOWN = DRX_UNKNOWN, /**< Unknown if spectrum is mirrored.    */
+   DRX_MIRROR_AUTO   = DRX_AUTO      /**< Autodetect if spectrum is mirrored. */
+} DRXMirror_t, *pDRXMirror_t;
+
+/**
+* \enum DRXConstellation_t
+* \brief Constellation type of the channel.
+*/
+typedef enum {
+   DRX_CONSTELLATION_BPSK    = 0,            /**< Modulation is BPSK.       */
+   DRX_CONSTELLATION_QPSK,                   /**< Constellation is QPSK.    */
+   DRX_CONSTELLATION_PSK8,                   /**< Constellation is PSK8.    */
+   DRX_CONSTELLATION_QAM16,                  /**< Constellation is QAM16.   */
+   DRX_CONSTELLATION_QAM32,                  /**< Constellation is QAM32.   */
+   DRX_CONSTELLATION_QAM64,                  /**< Constellation is QAM64.   */
+   DRX_CONSTELLATION_QAM128,                 /**< Constellation is QAM128.  */
+   DRX_CONSTELLATION_QAM256,                 /**< Constellation is QAM256.  */
+   DRX_CONSTELLATION_QAM512,                 /**< Constellation is QAM512.  */
+   DRX_CONSTELLATION_QAM1024,                /**< Constellation is QAM1024. */
+   DRX_CONSTELLATION_QPSK_NR,                /**< Constellation is QPSK_NR  */
+   DRX_CONSTELLATION_UNKNOWN = DRX_UNKNOWN,  /**< Constellation unknown.    */
+   DRX_CONSTELLATION_AUTO    = DRX_AUTO      /**< Autodetect constellation. */
+} DRXConstellation_t, *pDRXConstellation_t;
+
+/**
+* \enum DRXHierarchy_t
+* \brief Hierarchy of the channel.
+*/
+typedef enum {
+   DRX_HIERARCHY_NONE    = 0,           /**< None hierarchical channel.     */
+   DRX_HIERARCHY_ALPHA1,                /**< Hierarchical channel, alpha=1. */
+   DRX_HIERARCHY_ALPHA2,                /**< Hierarchical channel, alpha=2. */
+   DRX_HIERARCHY_ALPHA4,                /**< Hierarchical channel, alpha=4. */
+   DRX_HIERARCHY_UNKNOWN = DRX_UNKNOWN, /**< Hierarchy unknown.             */
+   DRX_HIERARCHY_AUTO    = DRX_AUTO     /**< Autodetect hierarchy.          */
+} DRXHierarchy_t, *pDRXHierarchy_t;
+
+/**
+* \enum DRXPriority_t
+* \brief Channel priority in case of hierarchical transmission.
+*/
+typedef enum {
+   DRX_PRIORITY_LOW     = 0,           /**< Low priority channel.  */
+   DRX_PRIORITY_HIGH,                  /**< High priority channel. */
+   DRX_PRIORITY_UNKNOWN = DRX_UNKNOWN  /**< Priority unknown.      */
+} DRXPriority_t, *pDRXPriority_t;
+
+/**
+* \enum DRXCoderate_t
+* \brief Channel priority in case of hierarchical transmission.
+*/
+typedef enum {
+   DRX_CODERATE_1DIV2   = 0,            /**< Code rate 1/2nd.      */
+   DRX_CODERATE_2DIV3,                  /**< Code rate 2/3nd.      */
+   DRX_CODERATE_3DIV4,                  /**< Code rate 3/4nd.      */
+   DRX_CODERATE_5DIV6,                  /**< Code rate 5/6nd.      */
+   DRX_CODERATE_7DIV8,                  /**< Code rate 7/8nd.      */
+   DRX_CODERATE_UNKNOWN = DRX_UNKNOWN,  /**< Code rate unknown.    */
+   DRX_CODERATE_AUTO    = DRX_AUTO      /**< Autodetect code rate. */
+} DRXCoderate_t, *pDRXCoderate_t;
+
+/**
+* \enum DRXGuard_t
+* \brief Guard interval of a channel.
+*/
+typedef enum {
+   DRX_GUARD_1DIV32   = 0,            /**< Guard interval 1/32nd.     */
+   DRX_GUARD_1DIV16,                  /**< Guard interval 1/16th.     */
+   DRX_GUARD_1DIV8,                   /**< Guard interval 1/8th.      */
+   DRX_GUARD_1DIV4,                   /**< Guard interval 1/4th.      */
+   DRX_GUARD_UNKNOWN  = DRX_UNKNOWN,  /**< Guard interval unknown.    */
+   DRX_GUARD_AUTO     = DRX_AUTO      /**< Autodetect guard interval. */
+} DRXGuard_t, *pDRXGuard_t;
+
+/**
+* \enum DRXFftmode_t
+* \brief FFT mode.
+*/
+typedef enum {
+   DRX_FFTMODE_2K      = 0,            /**< 2K FFT mode.         */
+   DRX_FFTMODE_4K,                     /**< 4K FFT mode.         */
+   DRX_FFTMODE_8K,                     /**< 8K FFT mode.         */
+   DRX_FFTMODE_UNKNOWN = DRX_UNKNOWN,  /**< FFT mode unknown.    */
+   DRX_FFTMODE_AUTO    = DRX_AUTO      /**< Autodetect FFT mode. */
+} DRXFftmode_t, *pDRXFftmode_t;
+
+/**
+* \enum DRXClassification_t
+* \brief Channel classification.
+*/
+typedef enum {
+   DRX_CLASSIFICATION_GAUSS   = 0,            /**< Gaussion noise.            */
+   DRX_CLASSIFICATION_HVY_GAUSS,              /**< Heavy Gaussion noise.      */
+   DRX_CLASSIFICATION_COCHANNEL,              /**< Co-channel.                */
+   DRX_CLASSIFICATION_STATIC,                 /**< Static echo.               */
+   DRX_CLASSIFICATION_MOVING,                 /**< Moving echo.               */
+   DRX_CLASSIFICATION_ZERODB,                 /**< Zero dB echo.              */
+   DRX_CLASSIFICATION_UNKNOWN = DRX_UNKNOWN,  /**< Unknown classification     */
+   DRX_CLASSIFICATION_AUTO    = DRX_AUTO      /**< Autodetect classification. */
+} DRXClassification_t, *pDRXClassification_t;
+
+/**
+* /enum DRXInterleaveModes_t
+* /brief Interleave modes
+*/
+typedef enum {
+   DRX_INTERLEAVEMODE_I128_J1    = 0,
+   DRX_INTERLEAVEMODE_I128_J1_V2,
+   DRX_INTERLEAVEMODE_I128_J2,
+   DRX_INTERLEAVEMODE_I64_J2,
+   DRX_INTERLEAVEMODE_I128_J3,
+   DRX_INTERLEAVEMODE_I32_J4,
+   DRX_INTERLEAVEMODE_I128_J4,
+   DRX_INTERLEAVEMODE_I16_J8,
+   DRX_INTERLEAVEMODE_I128_J5,
+   DRX_INTERLEAVEMODE_I8_J16,
+   DRX_INTERLEAVEMODE_I128_J6,
+   DRX_INTERLEAVEMODE_RESERVED_11,
+   DRX_INTERLEAVEMODE_I128_J7,
+   DRX_INTERLEAVEMODE_RESERVED_13,
+   DRX_INTERLEAVEMODE_I128_J8,
+   DRX_INTERLEAVEMODE_RESERVED_15,
+   DRX_INTERLEAVEMODE_I12_J17,
+   DRX_INTERLEAVEMODE_I5_J4,
+   DRX_INTERLEAVEMODE_B52_M240,
+   DRX_INTERLEAVEMODE_B52_M720,
+   DRX_INTERLEAVEMODE_B52_M48,
+   DRX_INTERLEAVEMODE_B52_M0,
+   DRX_INTERLEAVEMODE_UNKNOWN = DRX_UNKNOWN,  /**< Unknown interleave mode    */
+   DRX_INTERLEAVEMODE_AUTO    = DRX_AUTO      /**< Autodetect interleave mode */
+} DRXInterleaveModes_t, *pDRXInterleaveModes_t;
+
+/**
+* \enum DRXCarrier_t
+* \brief Channel Carrier Mode.
+*/
+typedef enum {
+   DRX_CARRIER_MULTI     = 0,                   /**< Multi carrier mode       */
+   DRX_CARRIER_SINGLE,                          /**< Single carrier mode      */
+   DRX_CARRIER_UNKNOWN = DRX_UNKNOWN,           /**< Carrier mode unknown.    */
+   DRX_CARRIER_AUTO = DRX_AUTO                  /**< Autodetect carrier mode  */
+} DRXCarrier_t, *pDRXCarrier_t;
+
+/**
+* \enum DRXFramemode_t
+* \brief Channel Frame Mode.
+*/
+typedef enum {
+   DRX_FRAMEMODE_420     = 0,            /**< 420 with variable PN  */
+   DRX_FRAMEMODE_595,                    /**< 595                   */
+   DRX_FRAMEMODE_945,                    /**< 945 with variable PN  */
+   DRX_FRAMEMODE_420_FIXED_PN,           /**< 420 with fixed PN     */
+   DRX_FRAMEMODE_945_FIXED_PN,           /**< 945 with fixed PN     */
+   DRX_FRAMEMODE_UNKNOWN = DRX_UNKNOWN,  /**< Frame mode unknown.   */
+   DRX_FRAMEMODE_AUTO = DRX_AUTO         /**< Autodetect frame mode */
+} DRXFramemode_t, *pDRXFramemode_t;
+
+/**
+* \enum DRXTPSFrame_t
+* \brief Frame number in current super-frame.
+*/
+typedef enum {
+   DRX_TPS_FRAME1     = 0,                /**< TPS frame 1.       */
+   DRX_TPS_FRAME2,                        /**< TPS frame 2.       */
+   DRX_TPS_FRAME3,                        /**< TPS frame 3.       */
+   DRX_TPS_FRAME4,                        /**< TPS frame 4.       */
+   DRX_TPS_FRAME_UNKNOWN = DRX_UNKNOWN    /**< TPS frame unknown. */
+} DRXTPSFrame_t, *pDRXTPSFrame_t;
+
+/**
+* \enum DRXLDPC_t
+* \brief TPS LDPC .
+*/
+typedef enum {
+   DRX_LDPC_0_4     = 0,                  /**< LDPC 0.4           */
+   DRX_LDPC_0_6,                          /**< LDPC 0.6           */
+   DRX_LDPC_0_8,                          /**< LDPC 0.8           */
+   DRX_LDPC_UNKNOWN = DRX_UNKNOWN,        /**< LDPC unknown.      */
+   DRX_LDPC_AUTO = DRX_AUTO               /**< Autodetect LDPC    */
+} DRXLDPC_t, *pDRXLDPC_t;
+
+/**
+* \enum DRXPilotMode_t
+* \brief Pilot modes in DTMB.
+*/
+typedef enum {
+   DRX_PILOT_ON    = 0,                   /**< Pilot On             */
+   DRX_PILOT_OFF,                         /**< Pilot Off            */
+   DRX_PILOT_UNKNOWN = DRX_UNKNOWN,       /**< Pilot unknown.       */
+   DRX_PILOT_AUTO = DRX_AUTO              /**< Autodetect Pilot     */
+} DRXPilotMode_t, *pDRXPilotMode_t;
+
+
+
+/**
+* \enum DRXCtrlIndex_t
+* \brief Indices of the control functions.
+*/
+typedef u32_t DRXCtrlIndex_t, *pDRXCtrlIndex_t;
+
+#ifndef DRX_CTRL_BASE
+#define DRX_CTRL_BASE          ((DRXCtrlIndex_t)0)
+#endif
+
+#define DRX_CTRL_NOP             ( DRX_CTRL_BASE +  0)/**< No Operation       */
+#define DRX_CTRL_PROBE_DEVICE    ( DRX_CTRL_BASE +  1)/**< Probe device       */
+
+#define DRX_CTRL_LOAD_UCODE      ( DRX_CTRL_BASE +  2)/**< Load microcode     */
+#define DRX_CTRL_VERIFY_UCODE    ( DRX_CTRL_BASE +  3)/**< Verify microcode   */
+#define DRX_CTRL_SET_CHANNEL     ( DRX_CTRL_BASE +  4)/**< Set channel        */
+#define DRX_CTRL_GET_CHANNEL     ( DRX_CTRL_BASE +  5)/**< Get channel        */
+#define DRX_CTRL_LOCK_STATUS     ( DRX_CTRL_BASE +  6)/**< Get lock status    */
+#define DRX_CTRL_SIG_QUALITY     ( DRX_CTRL_BASE +  7)/**< Get signal quality */
+#define DRX_CTRL_SIG_STRENGTH    ( DRX_CTRL_BASE +  8)/**< Get signal strength*/
+#define DRX_CTRL_RF_POWER        ( DRX_CTRL_BASE +  9)/**< Get RF power       */
+#define DRX_CTRL_CONSTEL         ( DRX_CTRL_BASE + 10)/**< Get constel point  */
+#define DRX_CTRL_SCAN_INIT       ( DRX_CTRL_BASE + 11)/**< Initialize scan    */
+#define DRX_CTRL_SCAN_NEXT       ( DRX_CTRL_BASE + 12)/**< Scan for next      */
+#define DRX_CTRL_SCAN_STOP       ( DRX_CTRL_BASE + 13)/**< Stop scan          */
+#define DRX_CTRL_TPS_INFO        ( DRX_CTRL_BASE + 14)/**< Get TPS info       */
+#define DRX_CTRL_SET_CFG         ( DRX_CTRL_BASE + 15)/**< Set configuration  */
+#define DRX_CTRL_GET_CFG         ( DRX_CTRL_BASE + 16)/**< Get configuration  */
+#define DRX_CTRL_VERSION         ( DRX_CTRL_BASE + 17)/**< Get version info   */
+#define DRX_CTRL_I2C_BRIDGE      ( DRX_CTRL_BASE + 18)/**< Open/close  bridge */
+#define DRX_CTRL_SET_STANDARD    ( DRX_CTRL_BASE + 19)/**< Set demod std      */
+#define DRX_CTRL_GET_STANDARD    ( DRX_CTRL_BASE + 20)/**< Get demod std      */
+#define DRX_CTRL_SET_OOB         ( DRX_CTRL_BASE + 21)/**< Set OOB param      */
+#define DRX_CTRL_GET_OOB         ( DRX_CTRL_BASE + 22)/**< Get OOB param      */
+#define DRX_CTRL_AUD_SET_STANDARD (DRX_CTRL_BASE + 23)/**< Set audio param    */
+#define DRX_CTRL_AUD_GET_STANDARD (DRX_CTRL_BASE + 24)/**< Get audio param    */
+#define DRX_CTRL_AUD_GET_STATUS  ( DRX_CTRL_BASE + 25)/**< Read RDS           */
+#define DRX_CTRL_AUD_BEEP        ( DRX_CTRL_BASE + 26)/**< Read RDS           */
+#define DRX_CTRL_I2C_READWRITE   ( DRX_CTRL_BASE + 27)/**< Read/write I2C     */
+#define DRX_CTRL_PROGRAM_TUNER   ( DRX_CTRL_BASE + 28)/**< Program tuner      */
+
+	 /* Professional */
+#define DRX_CTRL_MB_CFG          ( DRX_CTRL_BASE + 29) /**<                   */
+#define DRX_CTRL_MB_READ         ( DRX_CTRL_BASE + 30) /**<                   */
+#define DRX_CTRL_MB_WRITE        ( DRX_CTRL_BASE + 31) /**<                   */
+#define DRX_CTRL_MB_CONSTEL      ( DRX_CTRL_BASE + 32) /**<                   */
+#define DRX_CTRL_MB_MER          ( DRX_CTRL_BASE + 33) /**<                   */
+
+	 /* Misc */
+#define DRX_CTRL_UIO_CFG         DRX_CTRL_SET_UIO_CFG  /**< Configure UIO     */
+#define DRX_CTRL_SET_UIO_CFG     ( DRX_CTRL_BASE + 34) /**< Configure UIO     */
+#define DRX_CTRL_GET_UIO_CFG     ( DRX_CTRL_BASE + 35) /**< Configure UIO     */
+#define DRX_CTRL_UIO_READ        ( DRX_CTRL_BASE + 36) /**< Read from UIO     */
+#define DRX_CTRL_UIO_WRITE       ( DRX_CTRL_BASE + 37) /**< Write to UIO      */
+#define DRX_CTRL_READ_EVENTS     ( DRX_CTRL_BASE + 38) /**< Read events       */
+#define DRX_CTRL_HDL_EVENTS      ( DRX_CTRL_BASE + 39) /**< Handle events     */
+#define DRX_CTRL_POWER_MODE      ( DRX_CTRL_BASE + 40) /**< Set power mode    */
+#define DRX_CTRL_LOAD_FILTER     ( DRX_CTRL_BASE + 41) /**< Load chan. filter */
+#define DRX_CTRL_VALIDATE_UCODE  ( DRX_CTRL_BASE + 42) /**< Validate ucode    */
+#define DRX_CTRL_DUMP_REGISTERS  ( DRX_CTRL_BASE + 43) /**< Dump registers    */
+
+#define DRX_CTRL_MAX             ( DRX_CTRL_BASE + 44) /* never to be used    */
+
+/**
+* \enum DRXUCodeAction_t
+* \brief Used to indicate if firmware has to be uploaded or verified.
+*/
+
+typedef enum {
+   UCODE_UPLOAD,  /**< Upload the microcode image to device        */
+   UCODE_VERIFY   /**< Compare microcode image with code on device */
+} DRXUCodeAction_t, *pDRXUCodeAction_t;
+
+
+/**
+* \enum DRXLockStatus_t
+* \brief Used to reflect current lock status of demodulator.
+*
+* The generic lock states have device dependent semantics.
+*/
+typedef enum{
+   DRX_NEVER_LOCK = 0,        /**< Device will never lock on this signal */
+   DRX_NOT_LOCKED,            /**< Device has no lock at all             */
+   DRX_LOCK_STATE_1,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_2,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_3,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_4,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_5,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_6,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_7,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_8,          /**< Generic lock state                    */
+   DRX_LOCK_STATE_9,          /**< Generic lock state                    */
+   DRX_LOCKED                 /**< Device is in lock                     */
+} DRXLockStatus_t, *pDRXLockStatus_t;
+
+/**
+* \enum DRXUIO_t
+* \brief Used to address a User IO (UIO).
+*/
+typedef enum{
+   DRX_UIO1  ,
+   DRX_UIO2  ,
+   DRX_UIO3  ,
+   DRX_UIO4  ,
+   DRX_UIO5  ,
+   DRX_UIO6  ,
+   DRX_UIO7  ,
+   DRX_UIO8  ,
+   DRX_UIO9  ,
+   DRX_UIO10 ,
+   DRX_UIO11 ,
+   DRX_UIO12 ,
+   DRX_UIO13 ,
+   DRX_UIO14 ,
+   DRX_UIO15 ,
+   DRX_UIO16 ,
+   DRX_UIO17 ,
+   DRX_UIO18 ,
+   DRX_UIO19 ,
+   DRX_UIO20 ,
+   DRX_UIO21 ,
+   DRX_UIO22 ,
+   DRX_UIO23 ,
+   DRX_UIO24 ,
+   DRX_UIO25 ,
+   DRX_UIO26 ,
+   DRX_UIO27 ,
+   DRX_UIO28 ,
+   DRX_UIO29 ,
+   DRX_UIO30 ,
+   DRX_UIO31 ,
+   DRX_UIO32 ,
+   DRX_UIO_MAX = DRX_UIO32
+} DRXUIO_t, *pDRXUIO_t;
+
+/**
+* \enum DRXUIOMode_t
+* \brief Used to configure the modus oprandi of a UIO.
+*
+* DRX_UIO_MODE_FIRMWARE is an old uio mode.
+* It is replaced by the modes DRX_UIO_MODE_FIRMWARE0 .. DRX_UIO_MODE_FIRMWARE9.
+* To be backward compatible DRX_UIO_MODE_FIRMWARE is equivalent to
+* DRX_UIO_MODE_FIRMWARE0.
+*/
+typedef enum{
+   DRX_UIO_MODE_DISABLE   = 0x01,   /**< not used, pin is configured as input */
+   DRX_UIO_MODE_READWRITE = 0x02,   /**< used for read/write by application   */
+   DRX_UIO_MODE_FIRMWARE  = 0x04,   /**< controlled by firmware, function 0   */
+   DRX_UIO_MODE_FIRMWARE0 = DRX_UIO_MODE_FIRMWARE , /**< same as above        */
+   DRX_UIO_MODE_FIRMWARE1 = 0x08,   /**< controlled by firmware, function 1   */
+   DRX_UIO_MODE_FIRMWARE2 = 0x10,   /**< controlled by firmware, function 2   */
+   DRX_UIO_MODE_FIRMWARE3 = 0x20,   /**< controlled by firmware, function 3   */
+   DRX_UIO_MODE_FIRMWARE4 = 0x40,   /**< controlled by firmware, function 4   */
+   DRX_UIO_MODE_FIRMWARE5 = 0x80    /**< controlled by firmware, function 5   */
+} DRXUIOMode_t, *pDRXUIOMode_t;
+
+/**
+* \enum DRXOOBDownstreamStandard_t
+* \brief Used to select OOB standard.
+*
+* Based on ANSI 55-1 and 55-2
+*/
+typedef enum {
+   DRX_OOB_MODE_A = 0,         /**< ANSI 55-1   */
+   DRX_OOB_MODE_B_GRADE_A,     /**< ANSI 55-2 A */
+   DRX_OOB_MODE_B_GRADE_B      /**< ANSI 55-2 B */
+} DRXOOBDownstreamStandard_t, *pDRXOOBDownstreamStandard_t;
+
+
+/*-------------------------------------------------------------------------
+STRUCTS
+-------------------------------------------------------------------------*/
+
+/*============================================================================*/
+/*============================================================================*/
+/*== CTRL CFG related data structures ========================================*/
+/*============================================================================*/
+/*============================================================================*/
+
+/**
+* \enum DRXCfgType_t
+* \brief Generic configuration function identifiers.
+*/
+typedef u32_t DRXCfgType_t, *pDRXCfgType_t;
+
+#ifndef DRX_CFG_BASE
+#define DRX_CFG_BASE          ((DRXCfgType_t)0)
+#endif
+
+#define DRX_CFG_MPEG_OUTPUT         ( DRX_CFG_BASE +  0) /* MPEG TS output    */
+#define DRX_CFG_PKTERR              ( DRX_CFG_BASE +  1) /* Packet Error      */
+#define DRX_CFG_SYMCLK_OFFS         ( DRX_CFG_BASE +  2) /* Symbol Clk Offset */
+#define DRX_CFG_SMA                 ( DRX_CFG_BASE +  3) /* Smart Antenna     */
+#define DRX_CFG_PINSAFE             ( DRX_CFG_BASE +  4) /* Pin safe mode     */
+#define DRX_CFG_SUBSTANDARD         ( DRX_CFG_BASE +  5) /* substandard       */
+#define DRX_CFG_AUD_VOLUME          ( DRX_CFG_BASE +  6) /* volume            */
+#define DRX_CFG_AUD_RDS             ( DRX_CFG_BASE +  7) /* rds               */
+#define DRX_CFG_AUD_AUTOSOUND       ( DRX_CFG_BASE +  8) /* ASS & ASC         */
+#define DRX_CFG_AUD_ASS_THRES       ( DRX_CFG_BASE +  9) /* ASS Thresholds    */
+#define DRX_CFG_AUD_DEVIATION       ( DRX_CFG_BASE + 10) /* Deviation         */
+#define DRX_CFG_AUD_PRESCALE        ( DRX_CFG_BASE + 11) /* Prescale          */
+#define DRX_CFG_AUD_MIXER           ( DRX_CFG_BASE + 12) /* Mixer             */
+#define DRX_CFG_AUD_AVSYNC          ( DRX_CFG_BASE + 13) /* AVSync            */
+#define DRX_CFG_AUD_CARRIER         ( DRX_CFG_BASE + 14) /* Audio carriers    */
+#define DRX_CFG_I2S_OUTPUT          ( DRX_CFG_BASE + 15) /* I2S output        */
+#define DRX_CFG_ATV_STANDARD        ( DRX_CFG_BASE + 16) /* ATV standard      */
+#define DRX_CFG_SQI_SPEED           ( DRX_CFG_BASE + 17) /* SQI speed         */
+#define DRX_CTRL_CFG_MAX            ( DRX_CFG_BASE + 18) /* never to be used  */
+
+#define DRX_CFG_PINS_SAFE_MODE      DRX_CFG_PINSAFE
+/*============================================================================*/
+/*============================================================================*/
+/*== CTRL related data structures ============================================*/
+/*============================================================================*/
+/*============================================================================*/
+
+/**
+* \struct DRXUCodeInfo_t
+* \brief Parameters for microcode upload and verfiy.
+*
+* Used by DRX_CTRL_LOAD_UCODE and DRX_CTRL_VERIFY_UCODE
+*/
+typedef struct {
+   pu8_t    mcData;  /**< Pointer to microcode image. */
+   u16_t    mcSize;  /**< Microcode image size.       */
+} DRXUCodeInfo_t, *pDRXUCodeInfo_t;
+
+/**
+* \struct DRXMcVersionRec_t
+* \brief Microcode version record
+* Version numbers are stored in BCD format, as usual:
+*   o major number = bits 31-20 (first three nibbles of MSW)
+*   o minor number = bits 19-16 (fourth nibble of MSW)
+*   o patch number = bits 15-0  (remaining nibbles in LSW)
+*
+* The device type indicates for which the device is meant. It is based on the
+* JTAG ID, using everything except the bond ID and the metal fix.
+*
+* Special values:
+* - mcDevType == 0         => any device allowed
+* - mcBaseVersion == 0.0.0 => full microcode (mcVersion is the version)
+* - mcBaseVersion != 0.0.0 => patch microcode, the base microcode version
+*                             (mcVersion is the version)
+*/
+#define AUX_VER_RECORD 0x8000
+
+typedef struct {
+   u16_t auxType;       /* type of aux data - 0x8000 for version record     */
+   u32_t mcDevType;     /* device type, based on JTAG ID                    */
+   u32_t mcVersion;     /* version of microcode                             */
+   u32_t mcBaseVersion; /* in case of patch: the original microcode version */
+} DRXMcVersionRec_t, *pDRXMcVersionRec_t;
+
+/*========================================*/
+
+/**
+* \struct DRXFilterInfo_t
+* \brief Parameters for loading filter coefficients
+*
+* Used by DRX_CTRL_LOAD_FILTER
+*/
+typedef struct {
+   pu8_t    dataRe;   /**< pointer to coefficients for RE */
+   pu8_t    dataIm;   /**< pointer to coefficients for IM */
+   u16_t    sizeRe;   /**< size of coefficients for RE    */
+   u16_t    sizeIm;   /**< size of coefficients for IM    */
+} DRXFilterInfo_t, *pDRXFilterInfo_t;
+
+
+
+/*========================================*/
+
+/**
+* \struct DRXChannel_t
+* \brief The set of parameters describing a single channel.
+*
+* Used by DRX_CTRL_SET_CHANNEL and DRX_CTRL_GET_CHANNEL.
+* Only certain fields need to be used for a specfic standard.
+*
+*/
+typedef struct {
+   DRXFrequency_t       frequency;      /**< frequency in kHz                 */
+   DRXBandwidth_t       bandwidth;      /**< bandwidth                        */
+   DRXMirror_t          mirror;         /**< mirrored or not on RF            */
+   DRXConstellation_t   constellation;  /**< constellation                    */
+   DRXHierarchy_t       hierarchy;      /**< hierarchy                        */
+   DRXPriority_t        priority;       /**< priority                         */
+   DRXCoderate_t        coderate;       /**< coderate                         */
+   DRXGuard_t           guard;          /**< guard interval                   */
+   DRXFftmode_t         fftmode;        /**< fftmode                          */
+   DRXClassification_t  classification; /**< classification                   */
+   DRXSymbolrate_t      symbolrate;     /**< symbolrate in symbols/sec        */
+   DRXInterleaveModes_t interleavemode; /**< interleaveMode QAM               */
+   DRXLDPC_t            ldpc;           /**< ldpc                             */
+   DRXCarrier_t         carrier;        /**< carrier                          */
+   DRXFramemode_t       framemode;      /**< frame mode                       */
+   DRXPilotMode_t       pilot;          /**< pilot mode                       */
+} DRXChannel_t, *pDRXChannel_t;
+
+/*========================================*/
+
+/**
+* \struct DRXSigQuality_t
+* Signal quality metrics.
+*
+* Used by DRX_CTRL_SIG_QUALITY.
+*/
+typedef struct {
+   u16_t MER;                  /**< in steps of 0.1 dB                        */
+   u32_t preViterbiBER ;       /**< in steps of 1/scaleFactorBER              */
+   u32_t postViterbiBER ;      /**< in steps of 1/scaleFactorBER              */
+   u32_t scaleFactorBER;       /**< scale factor for BER                      */
+   u16_t packetError ;         /**< number of packet errors                   */
+   u32_t postReedSolomonBER ;  /**< in steps of 1/scaleFactorBER              */
+   u32_t preLdpcBER;           /**< in steps of 1/scaleFactorBER              */
+   u32_t averIter;             /**< in steps of 0.01                          */
+   u16_t indicator;            /**< indicative signal quality low=0..100=high */
+}DRXSigQuality_t, *pDRXSigQuality_t;
+
+
+typedef enum {
+   DRX_SQI_SPEED_FAST = 0,
+   DRX_SQI_SPEED_MEDIUM,
+   DRX_SQI_SPEED_SLOW,
+   DRX_SQI_SPEED_UNKNOWN = DRX_UNKNOWN
+} DRXCfgSqiSpeed_t, *pDRXCfgSqiSpeed_t;
+
+/*========================================*/
+
+/**
+* \struct DRXComplex_t
+* A complex number.
+*
+* Used by DRX_CTRL_CONSTEL.
+*/
+typedef struct {
+   s16_t im; /**< Imaginary part. */
+   s16_t re; /**< Real part.      */
+} DRXComplex_t, *pDRXComplex_t;
+
+
+/*========================================*/
+
+/**
+* \struct DRXFrequencyPlan_t
+* Array element of a frequency plan.
+*
+* Used by DRX_CTRL_SCAN_INIT.
+*/
+typedef struct {
+   DRXFrequency_t first;     /**< First centre frequency in this band        */
+   DRXFrequency_t last;      /**< Last centre frequency in this band         */
+   DRXFrequency_t step;      /**< Stepping frequency in this band            */
+   DRXBandwidth_t bandwidth; /**< Bandwidth within this frequency band       */
+   u16_t          chNumber;  /**< First channel number in this band, or first
+				    index in chNames                         */
+   char         **chNames;   /**< Optional list of channel names in this
+				    band                                     */
+} DRXFrequencyPlan_t, *pDRXFrequencyPlan_t;
+
+/*========================================*/
+
+/**
+* \struct DRXFrequencyPlanInfo_t
+* Array element of a list of frequency plans.
+*
+* Used by frequency_plan.h
+*/
+typedef struct{
+   pDRXFrequencyPlan_t freqPlan;
+   int                 freqPlanSize;
+   char                *freqPlanName;
+}DRXFrequencyPlanInfo_t, *pDRXFrequencyPlanInfo_t;
+
+/*========================================*/
+
+/**
+* /struct DRXScanDataQam_t
+* QAM specific scanning variables
+*/
+typedef struct {
+   pu32_t               symbolrate;       /**<  list of symbolrates to scan   */
+   u16_t                symbolrateSize;   /**<  size of symbolrate array      */
+   pDRXConstellation_t  constellation;    /**<  list of constellations        */
+   u16_t                constellationSize;  /**<  size of constellation array */
+   u16_t                ifAgcThreshold;   /**<  thresholf for IF-AGC based
+						scanning filter               */
+} DRXScanDataQam_t, *pDRXScanDataQam_t;
+
+/*========================================*/
+
+/**
+* /struct DRXScanDataAtv_t
+* ATV specific scanning variables
+*/
+typedef struct {
+   s16_t svrThreshold;  /**< threshold of Sound/Video ratio in 0.1dB steps */
+} DRXScanDataAtv_t, *pDRXScanDataAtv_t;
+
+/*========================================*/
+
+/**
+* \struct DRXScanParam_t
+* Parameters for channel scan.
+*
+* Used by DRX_CTRL_SCAN_INIT.
+*/
+typedef struct {
+   pDRXFrequencyPlan_t frequencyPlan;     /**< Frequency plan (array)*/
+   u16_t               frequencyPlanSize; /**< Number of bands       */
+   u32_t               numTries;          /**< Max channels tried    */
+   DRXFrequency_t      skip;              /**< Minimum frequency step to take
+						after a channel is found */
+   void                *extParams;        /**< Standard specific params */
+} DRXScanParam_t, *pDRXScanParam_t;
+
+/*========================================*/
+
+/**
+* \brief Scan commands.
+* Used by scanning algorithms.
+*/
+typedef enum {
+   DRX_SCAN_COMMAND_INIT = 0,             /**< Initialize scanning */
+   DRX_SCAN_COMMAND_NEXT,                 /**< Next scan           */
+   DRX_SCAN_COMMAND_STOP                  /**< Stop scanning       */
+}DRXScanCommand_t, *pDRXScanCommand_t;
+
+/*========================================*/
+
+/**
+* \brief Inner scan function prototype.
+*/
+typedef DRXStatus_t (*DRXScanFunc_t)  (void*               scanContext,
+				       DRXScanCommand_t    scanCommand,
+				       pDRXChannel_t       scanChannel,
+				       pBool_t             getNextChannel  );
+
+/*========================================*/
+
+/**
+* \struct DRXTPSInfo_t
+* TPS information, DVB-T specific.
+*
+* Used by DRX_CTRL_TPS_INFO.
+*/
+typedef struct {
+   DRXFftmode_t       fftmode;          /**< Fft mode       */
+   DRXGuard_t         guard;            /**< Guard interval */
+   DRXConstellation_t constellation;    /**< Constellation  */
+   DRXHierarchy_t     hierarchy;        /**< Hierarchy      */
+   DRXCoderate_t      highCoderate;     /**< High code rate */
+   DRXCoderate_t      lowCoderate;      /**< Low cod rate   */
+   DRXTPSFrame_t      frame;            /**< Tps frame      */
+   u8_t               length;           /**< Length         */
+   u16_t              cellId;           /**< Cell id        */
+}DRXTPSInfo_t, *pDRXTPSInfo_t;
+
+/*========================================*/
+
+/**
+* \brief Power mode of device.
+*
+* Used by DRX_CTRL_SET_POWER_MODE.
+*/
+typedef enum {
+   DRX_POWER_UP = 0,     /**< Generic         , Power Up Mode   */
+   DRX_POWER_MODE_1,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_2,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_3,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_4,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_5,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_6,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_7,     /**< Device specific , Power Up Mode   */
+   DRX_POWER_MODE_8,     /**< Device specific , Power Up Mode   */
+
+   DRX_POWER_MODE_9,     /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_10,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_11,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_12,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_13,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_14,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_15,    /**< Device specific , Power Down Mode */
+   DRX_POWER_MODE_16,    /**< Device specific , Power Down Mode */
+   DRX_POWER_DOWN = 255  /**< Generic         , Power Down Mode */
+}DRXPowerMode_t, *pDRXPowerMode_t;
+
+/*========================================*/
+
+/**
+* \enum DRXModule_t
+* \brief Software module identification.
+*
+* Used by DRX_CTRL_VERSION.
+*/
+typedef enum {
+   DRX_MODULE_DEVICE,
+   DRX_MODULE_MICROCODE,
+   DRX_MODULE_DRIVERCORE,
+   DRX_MODULE_DEVICEDRIVER,
+   DRX_MODULE_DAP,
+   DRX_MODULE_BSP_I2C,
+   DRX_MODULE_BSP_TUNER,
+   DRX_MODULE_BSP_HOST,
+   DRX_MODULE_UNKNOWN
+} DRXModule_t, *pDRXModule_t;
+
+
+/**
+* \enum DRXVersion_t
+* \brief Version information of one software module.
+*
+* Used by DRX_CTRL_VERSION.
+*/
+typedef struct {
+   DRXModule_t  moduleType;    /**< Type identifier of the module */
+   char        *moduleName;    /**< Name or description of module */
+   u16_t        vMajor;        /**< Major version number          */
+   u16_t        vMinor;        /**< Minor version number          */
+   u16_t        vPatch;        /**< Patch version number          */
+   char        *vString;       /**< Version as text string        */
+} DRXVersion_t, *pDRXVersion_t;
+
+/**
+* \enum DRXVersionList_t
+* \brief List element of NULL terminated, linked list for version information.
+*
+* Used by DRX_CTRL_VERSION.
+*/
+typedef struct DRXVersionList_s {
+   pDRXVersion_t            version;  /**< Version information */
+   struct DRXVersionList_s *next;     /**< Next list element   */
+} DRXVersionList_t, *pDRXVersionList_t;
+
+/*========================================*/
+
+/**
+* \brief Parameters needed to confiugure a UIO.
+*
+* Used by DRX_CTRL_UIO_CFG.
+*/
+typedef struct {
+   DRXUIO_t      uio;  /**< UIO identifier       */
+   DRXUIOMode_t  mode; /**< UIO operational mode */
+} DRXUIOCfg_t, *pDRXUIOCfg_t;
+
+/*========================================*/
+
+/**
+* \brief Parameters needed to read from or write to a UIO.
+*
+* Used by DRX_CTRL_UIO_READ and DRX_CTRL_UIO_WRITE.
+*/
+typedef struct {
+   DRXUIO_t uio;   /**< UIO identifier              */
+   Bool_t   value; /**< UIO value (TRUE=1, FALSE=0) */
+} DRXUIOData_t, *pDRXUIOData_t;
+
+/*========================================*/
+
+/**
+* \brief Parameters needed to configure OOB.
+*
+* Used by DRX_CTRL_SET_OOB.
+*/
+typedef struct {
+   DRXFrequency_t               frequency;         /**< Frequency in kHz      */
+   DRXOOBDownstreamStandard_t   standard;          /**< OOB standard          */
+   Bool_t                       spectrumInverted;  /**< If TRUE, then spectrum
+							 is inverted          */
+} DRXOOB_t, *pDRXOOB_t;
+
+
+/*========================================*/
+
+/**
+* \brief Metrics from OOB.
+*
+* Used by DRX_CTRL_GET_OOB.
+*/
+typedef struct {
+   DRXFrequency_t       frequency;        /**< Frequency in Khz         */
+   DRXLockStatus_t      lock;             /**< Lock status              */
+   u32_t                mer;              /**< MER                      */
+   s32_t                symbolRateOffset; /**< Symbolrate offset in ppm */
+} DRXOOBStatus_t, *pDRXOOBStatus_t;
+
+
+/*========================================*/
+
+/**
+* \brief Device dependent configuration data.
+*
+* Used by DRX_CTRL_SET_CFG and DRX_CTRL_GET_CFG.
+* A sort of nested DRX_Ctrl() functionality for device specific controls.
+*/
+typedef struct {
+   DRXCfgType_t cfgType ; /**< Function identifier */
+   void*        cfgData ; /**< Function data */
+} DRXCfg_t, *pDRXCfg_t;
+
+/*========================================*/
+
+/**
+* /struct DRXMpegStartWidth_t
+* MStart width [nr MCLK cycles] for serial MPEG output.
+*/
+
+typedef enum {
+   DRX_MPEG_STR_WIDTH_1,
+   DRX_MPEG_STR_WIDTH_8
+} DRXMPEGStrWidth_t, *pDRXMPEGStrWidth_t;
+
+
+/* CTRL CFG MPEG ouput */
+/**
+* \struct DRXCfgMPEGOutput_t
+* \brief Configuartion parameters for MPEG output control.
+*
+* Used by DRX_CFG_MPEG_OUTPUT, in combination with DRX_CTRL_SET_CFG and
+* DRX_CTRL_GET_CFG.
+*/
+
+typedef struct {
+   Bool_t            enableMPEGOutput;  /**< If TRUE, enable MPEG output      */
+   Bool_t            insertRSByte;      /**< If TRUE, insert RS byte          */
+   Bool_t            enableParallel;    /**< If TRUE, parallel out otherwise
+								     serial   */
+   Bool_t            invertDATA;        /**< If TRUE, invert DATA signals     */
+   Bool_t            invertERR;         /**< If TRUE, invert ERR signal       */
+   Bool_t            invertSTR;         /**< If TRUE, invert STR signals      */
+   Bool_t            invertVAL;         /**< If TRUE, invert VAL signals      */
+   Bool_t            invertCLK;         /**< If TRUE, invert CLK signals      */
+   Bool_t            staticCLK;         /**< If TRUE, static MPEG clockrate
+					     will be used, otherwise clockrate
+					     will adapt to the bitrate of the
+					     TS                               */
+   u32_t             bitrate;           /**< Maximum bitrate in b/s in case
+					     static clockrate is selected     */
+   DRXMPEGStrWidth_t widthSTR;          /**< MPEG start width                 */
+} DRXCfgMPEGOutput_t, *pDRXCfgMPEGOutput_t;
+
+/* CTRL CFG SMA */
+/**
+* /struct DRXCfgSMAIO_t
+* smart antenna i/o.
+*/
+typedef enum DRXCfgSMAIO_t {
+   DRX_SMA_OUTPUT = 0,
+   DRX_SMA_INPUT
+} DRXCfgSMAIO_t, *pDRXCfgSMAIO_t;
+
+/**
+* /struct DRXCfgSMA_t
+* Set smart antenna.
+*/
+typedef struct {
+   DRXCfgSMAIO_t  io;
+   u16_t          ctrlData;
+   Bool_t         smartAntInverted;
+} DRXCfgSMA_t, *pDRXCfgSMA_t;
+
+/*========================================*/
+
+/**
+* \struct DRXI2CData_t
+* \brief Data for I2C via 2nd or 3rd or etc I2C port.
+*
+* Used by DRX_CTRL_I2C_READWRITE.
+* If portNr is equal to primairy portNr BSPI2C will be used.
+*
+*/
+typedef struct {
+   u16_t            portNr;     /**< I2C port number               */
+   pI2CDeviceAddr_t wDevAddr;   /**< Write device address          */
+   u16_t            wCount;     /**< Size of write data in bytes   */
+   pu8_t            wData;      /**< Pointer to write data         */
+   pI2CDeviceAddr_t rDevAddr;   /**< Read device address           */
+   u16_t            rCount;     /**< Size of data to read in bytes */
+   pu8_t            rData;      /**< Pointer to read buffer        */
+} DRXI2CData_t, *pDRXI2CData_t;
+
+/*========================================*/
+
+/**
+* \enum DRXAudStandard_t
+* \brief Audio standard identifier.
+*
+* Used by DRX_CTRL_SET_AUD.
+*/
+typedef enum {
+   DRX_AUD_STANDARD_BTSC,                  /**< set BTSC standard (USA)       */
+   DRX_AUD_STANDARD_A2,                    /**< set A2-Korea FM Stereo        */
+   DRX_AUD_STANDARD_EIAJ,                  /**< set to Japanese FM Stereo     */
+   DRX_AUD_STANDARD_FM_STEREO,             /**< set to FM-Stereo Radio        */
+   DRX_AUD_STANDARD_M_MONO,                /**< for 4.5 MHz mono detected     */
+   DRX_AUD_STANDARD_D_K_MONO,              /**< for 6.5 MHz mono detected     */
+   DRX_AUD_STANDARD_BG_FM,                 /**< set BG_FM standard            */
+   DRX_AUD_STANDARD_D_K1,                  /**< set D_K1 standard             */
+   DRX_AUD_STANDARD_D_K2,                  /**< set D_K2 standard             */
+   DRX_AUD_STANDARD_D_K3,                  /**< set D_K3 standard             */
+   DRX_AUD_STANDARD_BG_NICAM_FM,           /**< set BG_NICAM_FM standard      */
+   DRX_AUD_STANDARD_L_NICAM_AM,            /**< set L_NICAM_AM standard       */
+   DRX_AUD_STANDARD_I_NICAM_FM,            /**< set I_NICAM_FM standard       */
+   DRX_AUD_STANDARD_D_K_NICAM_FM,          /**< set D_K_NICAM_FM standard     */
+   DRX_AUD_STANDARD_NOT_READY,             /**< used to detect audio standard */
+   DRX_AUD_STANDARD_AUTO = DRX_AUTO,       /**< Automatic Standard Detection  */
+   DRX_AUD_STANDARD_UNKNOWN = DRX_UNKNOWN  /**< used as auto and for readback */
+} DRXAudStandard_t, *pDRXAudStandard_t;
+
+/* CTRL_AUD_GET_STATUS    - DRXAudStatus_t */
+/**
+* \enum DRXAudNICAMStatus_t
+* \brief Status of NICAM carrier.
+*/
+typedef enum {
+   DRX_AUD_NICAM_DETECTED = 0,            /**< NICAM carrier detected         */
+   DRX_AUD_NICAM_NOT_DETECTED,            /**< NICAM carrier not detected     */
+   DRX_AUD_NICAM_BAD                      /**< NICAM carrier bad quality      */
+} DRXAudNICAMStatus_t, *pDRXAudNICAMStatus_t;
+
+/**
+* \struct DRXAudStatus_t
+* \brief Audio status characteristics.
+*/
+typedef struct {
+   Bool_t               stereo;           /**< stereo detection               */
+   Bool_t               carrierA;         /**< carrier A detected             */
+   Bool_t               carrierB;         /**< carrier B detected             */
+   Bool_t               sap;              /**< sap / bilingual detection      */
+   Bool_t               rds;              /**< RDS data array present         */
+   DRXAudNICAMStatus_t  nicamStatus;      /**< status of NICAM carrier        */
+   s8_t                 fmIdent;          /**< FM Identification value        */
+} DRXAudStatus_t, *pDRXAudStatus_t;
+
+/* CTRL_AUD_READ_RDS       - DRXRDSdata_t */
+
+/**
+* \struct DRXRDSdata_t
+* \brief Raw RDS data array.
+*/
+typedef struct {
+   Bool_t               valid;            /**< RDS data validation            */
+   u16_t                data[18];         /**< data from one RDS data array   */
+} DRXCfgAudRDS_t, *pDRXCfgAudRDS_t;
+
+/* DRX_CFG_AUD_VOLUME      - DRXCfgAudVolume_t - set/get */
+/**
+* \enum DRXAudAVCDecayTime_t
+* \brief Automatic volume control configuration.
+*/
+typedef enum {
+   DRX_AUD_AVC_OFF,                       /**< Automatic volume control off   */
+   DRX_AUD_AVC_DECAYTIME_8S,              /**< level volume in  8 seconds     */
+   DRX_AUD_AVC_DECAYTIME_4S,              /**< level volume in  4 seconds     */
+   DRX_AUD_AVC_DECAYTIME_2S,              /**< level volume in  2 seconds     */
+   DRX_AUD_AVC_DECAYTIME_20MS             /**< level volume in 20 millisec    */
+} DRXAudAVCMode_t, *pDRXAudAVCMode_t;
+
+/**
+* /enum DRXAudMaxAVCGain_t
+* /brief Automatic volume control max gain in audio baseband.
+*/
+typedef enum {
+   DRX_AUD_AVC_MAX_GAIN_0DB,              /**< maximum AVC gain  0 dB         */
+   DRX_AUD_AVC_MAX_GAIN_6DB,              /**< maximum AVC gain  6 dB         */
+   DRX_AUD_AVC_MAX_GAIN_12DB              /**< maximum AVC gain 12 dB         */
+} DRXAudAVCMaxGain_t, *pDRXAudAVCMaxGain_t;
+
+/**
+* /enum DRXAudMaxAVCAtten_t
+* /brief Automatic volume control max attenuation in audio baseband.
+*/
+typedef enum {
+   DRX_AUD_AVC_MAX_ATTEN_12DB,            /**< maximum AVC attenuation 12 dB  */
+   DRX_AUD_AVC_MAX_ATTEN_18DB,            /**< maximum AVC attenuation 18 dB  */
+   DRX_AUD_AVC_MAX_ATTEN_24DB             /**< maximum AVC attenuation 24 dB  */
+} DRXAudAVCMaxAtten_t, *pDRXAudAVCMaxAtten_t;
+/**
+* \struct DRXCfgAudVolume_t
+* \brief Audio volume configuration.
+*/
+typedef struct {
+   Bool_t               mute;             /**< mute overrides volume setting  */
+   s16_t                volume;           /**< volume, range -114 to 12 dB    */
+   DRXAudAVCMode_t      avcMode;          /**< AVC auto volume control mode   */
+   u16_t                avcRefLevel;      /**< AVC reference level            */
+   DRXAudAVCMaxGain_t   avcMaxGain;       /**< AVC max gain selection         */
+   DRXAudAVCMaxAtten_t  avcMaxAtten;      /**< AVC max attenuation selection  */
+   s16_t                strengthLeft;     /**< quasi-peak, left speaker       */
+   s16_t                strengthRight;    /**< quasi-peak, right speaker      */
+} DRXCfgAudVolume_t, *pDRXCfgAudVolume_t;
+
+/* DRX_CFG_I2S_OUTPUT      - DRXCfgI2SOutput_t - set/get */
+/**
+* \enum DRXI2SMode_t
+* \brief I2S output mode.
+*/
+typedef enum {
+   DRX_I2S_MODE_MASTER,                   /**< I2S is in master mode          */
+   DRX_I2S_MODE_SLAVE                     /**< I2S is in slave mode           */
+} DRXI2SMode_t, *pDRXI2SMode_t;
+
+/**
+* \enum DRXI2SWordLength_t
+* \brief Width of I2S data.
+*/
+typedef enum {
+   DRX_I2S_WORDLENGTH_32 = 0,             /**< I2S data is 32 bit wide        */
+   DRX_I2S_WORDLENGTH_16 = 1              /**< I2S data is 16 bit wide        */
+} DRXI2SWordLength_t, *pDRXI2SWordLength_t;
+
+/**
+* \enum DRXI2SFormat_t
+* \brief Data wordstrobe alignment for I2S.
+*/
+typedef enum {
+   DRX_I2S_FORMAT_WS_WITH_DATA,     /**< I2S data and wordstrobe are aligned  */
+   DRX_I2S_FORMAT_WS_ADVANCED       /**< I2S data one cycle after wordstrobe  */
+} DRXI2SFormat_t, *pDRXI2SFormat_t;
+
+/**
+* \enum DRXI2SPolarity_t
+* \brief Polarity of I2S data.
+*/
+typedef enum {
+   DRX_I2S_POLARITY_RIGHT,             /**< wordstrobe - right high, left low */
+   DRX_I2S_POLARITY_LEFT               /**< wordstrobe - right low, left high */
+} DRXI2SPolarity_t, *pDRXI2SPolarity_t;
+
+
+
+/**
+* \struct DRXCfgI2SOutput_t
+* \brief I2S output configuration.
+*/
+typedef struct {
+   Bool_t               outputEnable;     /**< I2S output enable              */
+   u32_t                frequency;        /**< range from 8000-48000 Hz       */
+   DRXI2SMode_t         mode;             /**< I2S mode, master or slave      */
+   DRXI2SWordLength_t   wordLength;       /**< I2S wordlength, 16 or 32 bits  */
+   DRXI2SPolarity_t     polarity;         /**< I2S wordstrobe polarity        */
+   DRXI2SFormat_t       format;           /**< I2S wordstrobe delay to data   */
+} DRXCfgI2SOutput_t, *pDRXCfgI2SOutput_t;
+
+
+/* ------------------------------expert interface-----------------------------*/
+/**
+* /enum DRXAudFMDeemphasis_t
+* setting for FM-Deemphasis in audio demodulator.
+*
+*/
+typedef enum {
+   DRX_AUD_FM_DEEMPH_50US,
+   DRX_AUD_FM_DEEMPH_75US,
+   DRX_AUD_FM_DEEMPH_OFF
+} DRXAudFMDeemphasis_t, *pDRXAudFMDeemphasis_t;
+
+/**
+* /enum DRXAudDeviation_t
+* setting for deviation mode in audio demodulator.
+*
+*/
+typedef enum {
+   DRX_AUD_DEVIATION_NORMAL,
+   DRX_AUD_DEVIATION_HIGH
+} DRXCfgAudDeviation_t, *pDRXCfgAudDeviation_t;
+
+/**
+* /enum DRXNoCarrierOption_t
+* setting for carrier, mute/noise.
+*
+*/
+typedef enum {
+   DRX_NO_CARRIER_MUTE,
+   DRX_NO_CARRIER_NOISE
+} DRXNoCarrierOption_t, *pDRXNoCarrierOption_t;
+
+
+/**
+* \enum DRXAudAutoSound_t
+* \brief Automatic Sound
+*/
+typedef enum {
+   DRX_AUD_AUTO_SOUND_OFF = 0,
+   DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_ON,
+   DRX_AUD_AUTO_SOUND_SELECT_ON_CHANGE_OFF
+} DRXCfgAudAutoSound_t, *pDRXCfgAudAutoSound_t;
+
+/**
+* \enum DRXAudASSThres_t
+* \brief Automatic Sound Select Thresholds
+*/
+typedef struct {
+   u16_t a2;    /* A2 Threshold for ASS configuration */
+   u16_t btsc;  /* BTSC Threshold for ASS configuration */
+   u16_t nicam; /* Nicam Threshold for ASS configuration */
+} DRXCfgAudASSThres_t, *pDRXCfgAudASSThres_t;
+
+/**
+* \struct DRXAudCarrier_t
+* \brief Carrier detection related parameters
+*/
+typedef struct {
+   u16_t thres;  /* carrier detetcion threshold for primary carrier (A) */
+   DRXNoCarrierOption_t opt;    /* Mute or noise at no carrier detection (A) */
+   DRXFrequency_t shift;     /* DC level of incoming signal (A) */
+   DRXFrequency_t dco;       /* frequency adjustment (A) */
+} DRXAudCarrier_t, *pDRXCfgAudCarrier_t;
+
+/**
+* \struct DRXCfgAudCarriers_t
+* \brief combining carrier A & B to one struct
+*/
+typedef struct {
+   DRXAudCarrier_t a;
+   DRXAudCarrier_t b;
+} DRXCfgAudCarriers_t, *pDRXCfgAudCarriers_t;
+
+/**
+* /enum DRXAudI2SSrc_t
+* Selection of audio source
+*/
+typedef enum {
+   DRX_AUD_SRC_MONO,
+   DRX_AUD_SRC_STEREO_OR_AB,
+   DRX_AUD_SRC_STEREO_OR_A,
+   DRX_AUD_SRC_STEREO_OR_B
+} DRXAudI2SSrc_t, *pDRXAudI2SSrc_t;
+
+
+/**
+* \enum DRXAudI2SMatrix_t
+* \brief Used for selecting I2S output.
+*/
+typedef enum {
+   DRX_AUD_I2S_MATRIX_A_MONO,           /**< A sound only, stereo or mono     */
+   DRX_AUD_I2S_MATRIX_B_MONO,           /**< B sound only, stereo or mono     */
+   DRX_AUD_I2S_MATRIX_STEREO,           /**< A+B sound, transparant           */
+   DRX_AUD_I2S_MATRIX_MONO              /**< A+B mixed to mono sum, (L+R)/2   */
+} DRXAudI2SMatrix_t, *pDRXAudI2SMatrix_t;
+
+
+/**
+* /enum DRXAudFMMatrix_t
+* setting for FM-Matrix in audio demodulator.
+*
+*/
+typedef enum {
+   DRX_AUD_FM_MATRIX_NO_MATRIX,
+   DRX_AUD_FM_MATRIX_GERMAN,
+   DRX_AUD_FM_MATRIX_KOREAN,
+   DRX_AUD_FM_MATRIX_SOUND_A,
+   DRX_AUD_FM_MATRIX_SOUND_B
+} DRXAudFMMatrix_t, *pDRXAudFMMatrix_t;
+
+/**
+* \struct DRXAudMatrices_t
+* \brief Mixer settings
+*/
+typedef struct {
+   DRXAudI2SSrc_t       sourceI2S;
+   DRXAudI2SMatrix_t    matrixI2S;
+   DRXAudFMMatrix_t     matrixFm;
+} DRXCfgAudMixer_t, *pDRXCfgAudMixer_t;
+
+/**
+* \enum DRXI2SVidSync_t
+* \brief Audio/video synchronization, interacts with I2S mode.
+* AUTO_1 and AUTO_2 are for automatic video standard detection with preference
+* for NTSC or Monochrome, because the frequencies are too close (59.94 & 60 Hz)
+*/
+typedef enum {
+   DRX_AUD_AVSYNC_OFF,             /**< audio/video synchronization is off   */
+   DRX_AUD_AVSYNC_NTSC,            /**< it is an NTSC system                 */
+   DRX_AUD_AVSYNC_MONOCHROME,      /**< it is a MONOCHROME system            */
+   DRX_AUD_AVSYNC_PAL_SECAM        /**< it is a PAL/SECAM system             */
+} DRXCfgAudAVSync_t, *pDRXCfgAudAVSync_t;
+
+/**
+* \struct DRXCfgAudPrescale_t
+* \brief Prescalers
+*/
+typedef struct {
+   u16_t fmDeviation;
+   s16_t nicamGain;
+} DRXCfgAudPrescale_t, *pDRXCfgAudPrescale_t;
+
+/**
+* \struct DRXAudBeep_t
+* \brief Beep
+*/
+typedef struct {
+   s16_t    volume;     /* dB */
+   u16_t    frequency;  /* Hz */
+   Bool_t   mute;
+} DRXAudBeep_t, *pDRXAudBeep_t;
+
+
+/**
+* \enum DRXAudBtscDetect_t
+* \brief BTSC detetcion mode
+*/
+typedef enum {
+   DRX_BTSC_STEREO,
+   DRX_BTSC_MONO_AND_SAP
+} DRXAudBtscDetect_t, *pDRXAudBtscDetect_t;
+
+/**
+* \struct DRXAudData_t
+* \brief Audio data structure
+*/
+typedef struct
+{
+   /* audio storage */
+   Bool_t                  audioIsActive;
+   DRXAudStandard_t        audioStandard;
+   DRXCfgI2SOutput_t       i2sdata;
+   DRXCfgAudVolume_t       volume;
+   DRXCfgAudAutoSound_t    autoSound;
+   DRXCfgAudASSThres_t     assThresholds;
+   DRXCfgAudCarriers_t     carriers;
+   DRXCfgAudMixer_t        mixer;
+   DRXCfgAudDeviation_t    deviation;
+   DRXCfgAudAVSync_t       avSync;
+   DRXCfgAudPrescale_t     prescale;
+   DRXAudFMDeemphasis_t    deemph;
+   DRXAudBtscDetect_t      btscDetect;
+   /* rds */
+   u16_t                rdsDataCounter;
+   Bool_t               rdsDataPresent;
+} DRXAudData_t, *pDRXAudData_t;
+
+
+/**
+* \enum DRXQamLockRange_t
+* \brief QAM lock range mode
+*/
+typedef enum
+{
+   DRX_QAM_LOCKRANGE_NORMAL,
+   DRX_QAM_LOCKRANGE_EXTENDED
+}DRXQamLockRange_t, *pDRXQamLockRange_t;
+
+/*============================================================================*/
+/*============================================================================*/
+/*== Data access structures ==================================================*/
+/*============================================================================*/
+/*============================================================================*/
+
+/* Address on device */
+typedef u32_t DRXaddr_t, *pDRXaddr_t;
+
+/* Protocol specific flags */
+typedef u32_t DRXflags_t, *pDRXflags_t;
+
+/* Write block of data to device */
+typedef DRXStatus_t (*DRXWriteBlockFunc_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 u16_t            datasize,      /* size of data in bytes        */
+	 pu8_t            data,          /* data to send                 */
+	 DRXflags_t       flags);
+
+/* Read block of data from device */
+typedef DRXStatus_t (*DRXReadBlockFunc_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 u16_t            datasize,      /* size of data in bytes        */
+	 pu8_t            data,          /* receive buffer               */
+	 DRXflags_t       flags);
+
+/* Write 8-bits value to device */
+typedef DRXStatus_t (*DRXWriteReg8Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 u8_t             data,          /* data to send                 */
+	 DRXflags_t       flags);
+
+/* Read 8-bits value to device */
+typedef DRXStatus_t (*DRXReadReg8Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 pu8_t            data,          /* receive buffer               */
+	 DRXflags_t       flags);
+
+/* Read modify write 8-bits value to device */
+typedef DRXStatus_t (*DRXReadModifyWriteReg8Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
+	 DRXaddr_t        waddr,         /* write address of register   */
+	 DRXaddr_t        raddr,         /* read  address of register   */
+	 u8_t             wdata,         /* data to write               */
+	 pu8_t            rdata);        /* data to read                */
+
+/* Write 16-bits value to device */
+typedef DRXStatus_t (*DRXWriteReg16Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 u16_t            data,          /* data to send                 */
+	 DRXflags_t       flags);
+
+/* Read 16-bits value to device */
+typedef DRXStatus_t (*DRXReadReg16Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 pu16_t           data,          /* receive buffer               */
+	 DRXflags_t       flags);
+
+/* Read modify write 16-bits value to device */
+typedef DRXStatus_t (*DRXReadModifyWriteReg16Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
+	 DRXaddr_t        waddr,         /* write address of register   */
+	 DRXaddr_t        raddr,         /* read  address of register   */
+	 u16_t            wdata,         /* data to write               */
+	 pu16_t           rdata);        /* data to read                */
+
+/* Write 32-bits value to device */
+typedef DRXStatus_t (*DRXWriteReg32Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 u32_t            data,          /* data to send                 */
+	 DRXflags_t       flags);
+
+/* Read 32-bits value to device */
+typedef DRXStatus_t (*DRXReadReg32Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device        */
+	 DRXaddr_t        addr,          /* address of register/memory   */
+	 pu32_t           data,          /* receive buffer               */
+	 DRXflags_t       flags);
+
+/* Read modify write 32-bits value to device */
+typedef DRXStatus_t (*DRXReadModifyWriteReg32Func_t) (
+	 pI2CDeviceAddr_t devAddr,       /* address of I2C device       */
+	 DRXaddr_t        waddr,         /* write address of register   */
+	 DRXaddr_t        raddr,         /* read  address of register   */
+	 u32_t            wdata,         /* data to write               */
+	 pu32_t           rdata);        /* data to read                */
+
+/**
+* \struct DRXAccessFunc_t
+* \brief Interface to an access protocol.
+*/
+typedef struct {
+   pDRXVersion_t                   protocolVersion;
+   DRXWriteBlockFunc_t             writeBlockFunc;
+   DRXReadBlockFunc_t              readBlockFunc;
+   DRXWriteReg8Func_t              writeReg8Func;
+   DRXReadReg8Func_t               readReg8Func;
+   DRXReadModifyWriteReg8Func_t    readModifyWriteReg8Func;
+   DRXWriteReg16Func_t             writeReg16Func;
+   DRXReadReg16Func_t              readReg16Func;
+   DRXReadModifyWriteReg16Func_t   readModifyWriteReg16Func;
+   DRXWriteReg32Func_t             writeReg32Func;
+   DRXReadReg32Func_t              readReg32Func;
+   DRXReadModifyWriteReg32Func_t   readModifyWriteReg32Func;
+} DRXAccessFunc_t, *pDRXAccessFunc_t;
+
+/* Register address and data for register dump function */
+typedef struct {
+
+   DRXaddr_t      address;
+   u32_t          data;
+
+} DRXRegDump_t, *pDRXRegDump_t ;
+
+/*============================================================================*/
+/*============================================================================*/
+/*== Demod instance data structures ==========================================*/
+/*============================================================================*/
+/*============================================================================*/
+
+/**
+* \struct DRXCommonAttr_t
+* \brief Set of common attributes, shared by all DRX devices.
+*/
+typedef struct {
+   /* Microcode (firmware) attributes */
+   pu8_t          microcode;       /**< Pointer to microcode image.           */
+   u16_t          microcodeSize;   /**< Size of microcode image in bytes.     */
+   Bool_t         verifyMicrocode; /**< Use microcode verify or not.          */
+   DRXMcVersionRec_t mcversion;    /**< Version record of microcode from file */
+
+   /* Clocks and tuner attributes */
+   DRXFrequency_t intermediateFreq;  /**< IF,if tuner instance not used. (kHz)*/
+   DRXFrequency_t sysClockFreq;      /**< Systemclock frequency.  (kHz)       */
+   DRXFrequency_t oscClockFreq;      /**< Oscillator clock frequency.  (kHz)  */
+   s16_t          oscClockDeviation; /**< Oscillator clock deviation.  (ppm)  */
+   Bool_t         mirrorFreqSpect;   /**< Mirror IF frequency spectrum or not.*/
+
+   /* Initial MPEG output attributes */
+   DRXCfgMPEGOutput_t mpegCfg;       /**< MPEG configuration                  */
+
+   Bool_t         isOpened;          /**< if TRUE instance is already opened. */
+
+   /* Channel scan */
+   pDRXScanParam_t scanParam;         /**< scan parameters                    */
+   u16_t           scanFreqPlanIndex; /**< next index in freq plan            */
+   DRXFrequency_t  scanNextFrequency; /**< next freq to scan                  */
+   Bool_t          scanReady;         /**< scan ready flag                    */
+   u32_t           scanMaxChannels;   /**< number of channels in freqplan     */
+   u32_t           scanChannelsScanned; /**< number of channels scanned       */
+   /* Channel scan - inner loop: demod related */
+   DRXScanFunc_t   scanFunction;      /**< function to check channel          */
+   /* Channel scan - inner loop: SYSObj related */
+   void*           scanContext;       /**< Context Pointer of SYSObj          */
+   /* Channel scan - parameters for default DTV scan function in core driver  */
+   u16_t           scanDemodLockTimeout; /**< millisecs to wait for lock      */
+   DRXLockStatus_t scanDesiredLock;   /**< lock requirement for channel found */
+   /* scanActive can be used by SetChannel to decide how to program the tuner,
+      fast or slow (but stable). Usually fast during scan. */
+   Bool_t          scanActive;        /**< TRUE when scan routines are active */
+
+   /* Power management */
+   DRXPowerMode_t  currentPowerMode;  /**< current power management mode      */
+
+   /* Tuner */
+   u8_t            tunerPortNr;       /**< nr of I2C port to wich tuner is    */
+   DRXFrequency_t  tunerMinFreqRF;    /**< minimum RF input frequency, in kHz */
+   DRXFrequency_t  tunerMaxFreqRF;    /**< maximum RF input frequency, in kHz */
+   Bool_t          tunerRfAgcPol;     /**< if TRUE invert RF AGC polarity     */
+   Bool_t          tunerIfAgcPol;     /**< if TRUE invert IF AGC polarity     */
+   Bool_t          tunerSlowMode;     /**< if TRUE invert IF AGC polarity     */
+
+   DRXChannel_t    currentChannel;    /**< current channel parameters         */
+   DRXStandard_t   currentStandard;   /**< current standard selection         */
+   DRXStandard_t   prevStandard;      /**< previous standard selection        */
+   DRXStandard_t   diCacheStandard;   /**< standard in DI cache if available  */
+   Bool_t          useBootloader;     /**< use bootloader in open             */
+   u32_t           capabilities;      /**< capabilities flags                 */
+   u32_t           productId;         /**< product ID inc. metal fix number   */
+
+} DRXCommonAttr_t, *pDRXCommonAttr_t;
+
+
+/*
+* Generic functions for DRX devices.
+*/
+typedef struct DRXDemodInstance_s *pDRXDemodInstance_t;
+
+typedef DRXStatus_t (*DRXOpenFunc_t)  (pDRXDemodInstance_t demod);
+typedef DRXStatus_t (*DRXCloseFunc_t) (pDRXDemodInstance_t demod);
+typedef DRXStatus_t (*DRXCtrlFunc_t)  (pDRXDemodInstance_t demod,
+				       DRXCtrlIndex_t ctrl,
+				       void *ctrlData);
+
+/**
+* \struct DRXDemodFunc_t
+* \brief A stucture containing all functions of a demodulator.
+*/
+typedef struct {
+   u32_t          typeId;                /**< Device type identifier.      */
+   DRXOpenFunc_t  openFunc;              /**< Pointer to Open() function.  */
+   DRXCloseFunc_t closeFunc;             /**< Pointer to Close() function. */
+   DRXCtrlFunc_t  ctrlFunc;              /**< Pointer to Ctrl() function.  */
+} DRXDemodFunc_t, *pDRXDemodFunc_t;
+
+/**
+* \struct DRXDemodInstance_t
+* \brief Top structure of demodulator instance.
+*/
+typedef struct DRXDemodInstance_s {
+   /* type specific demodulator data */
+   pDRXDemodFunc_t   myDemodFunct;  /**< demodulator functions                */
+   pDRXAccessFunc_t  myAccessFunct; /**< data access protocol functions       */
+   pTUNERInstance_t  myTuner;       /**< tuner instance,if NULL then baseband */
+   pI2CDeviceAddr_t  myI2CDevAddr;  /**< i2c address and device identifier    */
+   pDRXCommonAttr_t  myCommonAttr;  /**< common DRX attributes                */
+   void*             myExtAttr;     /**< device specific attributes           */
+   /* generic demodulator data */
+} DRXDemodInstance_t;
+
+
+
+/*-------------------------------------------------------------------------
+MACROS
+Conversion from enum values to human readable form.
+-------------------------------------------------------------------------*/
+
+/* standard */
+
+#define DRX_STR_STANDARD(x) ( \
+   ( x == DRX_STANDARD_DVBT             )  ? "DVB-T"            : \
+   ( x == DRX_STANDARD_8VSB             )  ? "8VSB"             : \
+   ( x == DRX_STANDARD_NTSC             )  ? "NTSC"             : \
+   ( x == DRX_STANDARD_PAL_SECAM_BG     )  ? "PAL/SECAM B/G"    : \
+   ( x == DRX_STANDARD_PAL_SECAM_DK     )  ? "PAL/SECAM D/K"    : \
+   ( x == DRX_STANDARD_PAL_SECAM_I      )  ? "PAL/SECAM I"      : \
+   ( x == DRX_STANDARD_PAL_SECAM_L      )  ? "PAL/SECAM L"      : \
+   ( x == DRX_STANDARD_PAL_SECAM_LP     )  ? "PAL/SECAM LP"     : \
+   ( x == DRX_STANDARD_ITU_A            )  ? "ITU-A"            : \
+   ( x == DRX_STANDARD_ITU_B            )  ? "ITU-B"            : \
+   ( x == DRX_STANDARD_ITU_C            )  ? "ITU-C"            : \
+   ( x == DRX_STANDARD_ITU_D            )  ? "ITU-D"            : \
+   ( x == DRX_STANDARD_FM               )  ? "FM"               : \
+   ( x == DRX_STANDARD_DTMB             )  ? "DTMB"             : \
+   ( x == DRX_STANDARD_AUTO             )  ? "Auto"             : \
+   ( x == DRX_STANDARD_UNKNOWN          )  ? "Unknown"          : \
+					     "(Invalid)"  )
+
+/* channel */
+
+#define DRX_STR_BANDWIDTH(x) ( \
+   ( x == DRX_BANDWIDTH_8MHZ           )  ?  "8 MHz"            : \
+   ( x == DRX_BANDWIDTH_7MHZ           )  ?  "7 MHz"            : \
+   ( x == DRX_BANDWIDTH_6MHZ           )  ?  "6 MHz"            : \
+   ( x == DRX_BANDWIDTH_AUTO           )  ?  "Auto"             : \
+   ( x == DRX_BANDWIDTH_UNKNOWN        )  ?  "Unknown"          : \
+					     "(Invalid)"  )
+#define DRX_STR_FFTMODE(x) ( \
+   ( x == DRX_FFTMODE_2K               )  ?  "2k"               : \
+   ( x == DRX_FFTMODE_4K               )  ?  "4k"               : \
+   ( x == DRX_FFTMODE_8K               )  ?  "8k"               : \
+   ( x == DRX_FFTMODE_AUTO             )  ?  "Auto"             : \
+   ( x == DRX_FFTMODE_UNKNOWN          )  ?  "Unknown"          : \
+					     "(Invalid)"  )
+#define DRX_STR_GUARD(x) ( \
+   ( x == DRX_GUARD_1DIV32             )  ?  "1/32nd"           : \
+   ( x == DRX_GUARD_1DIV16             )  ?  "1/16th"           : \
+   ( x == DRX_GUARD_1DIV8              )  ?  "1/8th"            : \
+   ( x == DRX_GUARD_1DIV4              )  ?  "1/4th"            : \
+   ( x == DRX_GUARD_AUTO               )  ?  "Auto"             : \
+   ( x == DRX_GUARD_UNKNOWN            )  ?  "Unknown"          : \
+					     "(Invalid)"  )
+#define DRX_STR_CONSTELLATION(x) ( \
+   ( x == DRX_CONSTELLATION_BPSK       )  ?  "BPSK"            : \
+   ( x == DRX_CONSTELLATION_QPSK       )  ?  "QPSK"            : \
+   ( x == DRX_CONSTELLATION_PSK8       )  ?  "PSK8"            : \
+   ( x == DRX_CONSTELLATION_QAM16      )  ?  "QAM16"           : \
+   ( x == DRX_CONSTELLATION_QAM32      )  ?  "QAM32"           : \
+   ( x == DRX_CONSTELLATION_QAM64      )  ?  "QAM64"           : \
+   ( x == DRX_CONSTELLATION_QAM128     )  ?  "QAM128"          : \
+   ( x == DRX_CONSTELLATION_QAM256     )  ?  "QAM256"          : \
+   ( x == DRX_CONSTELLATION_QAM512     )  ?  "QAM512"          : \
+   ( x == DRX_CONSTELLATION_QAM1024    )  ?  "QAM1024"         : \
+   ( x == DRX_CONSTELLATION_QPSK_NR    )  ?  "QPSK_NR"            : \
+   ( x == DRX_CONSTELLATION_AUTO       )  ?  "Auto"            : \
+   ( x == DRX_CONSTELLATION_UNKNOWN    )  ?  "Unknown"         : \
+					     "(Invalid)" )
+#define DRX_STR_CODERATE(x) ( \
+   ( x == DRX_CODERATE_1DIV2           )  ?  "1/2nd"           : \
+   ( x == DRX_CODERATE_2DIV3           )  ?  "2/3rd"           : \
+   ( x == DRX_CODERATE_3DIV4           )  ?  "3/4th"           : \
+   ( x == DRX_CODERATE_5DIV6           )  ?  "5/6th"           : \
+   ( x == DRX_CODERATE_7DIV8           )  ?  "7/8th"           : \
+   ( x == DRX_CODERATE_AUTO            )  ?  "Auto"            : \
+   ( x == DRX_CODERATE_UNKNOWN         )  ?  "Unknown"         : \
+					     "(Invalid)" )
+#define DRX_STR_HIERARCHY(x) ( \
+   ( x == DRX_HIERARCHY_NONE           )  ?  "None"            : \
+   ( x == DRX_HIERARCHY_ALPHA1         )  ?  "Alpha=1"         : \
+   ( x == DRX_HIERARCHY_ALPHA2         )  ?  "Alpha=2"         : \
+   ( x == DRX_HIERARCHY_ALPHA4         )  ?  "Alpha=4"         : \
+   ( x == DRX_HIERARCHY_AUTO           )  ?  "Auto"            : \
+   ( x == DRX_HIERARCHY_UNKNOWN        )  ?  "Unknown"         : \
+					     "(Invalid)" )
+#define DRX_STR_PRIORITY(x) ( \
+   ( x == DRX_PRIORITY_LOW             )  ?  "Low"             : \
+   ( x == DRX_PRIORITY_HIGH            )  ?  "High"            : \
+   ( x == DRX_PRIORITY_UNKNOWN         )  ?  "Unknown"         : \
+					     "(Invalid)" )
+#define DRX_STR_MIRROR(x) ( \
+   ( x == DRX_MIRROR_NO                )  ?  "Normal"          : \
+   ( x == DRX_MIRROR_YES               )  ?  "Mirrored"        : \
+   ( x == DRX_MIRROR_AUTO              )  ?  "Auto"            : \
+   ( x == DRX_MIRROR_UNKNOWN           )  ?  "Unknown"         : \
+					     "(Invalid)" )
+#define DRX_STR_CLASSIFICATION(x) ( \
+   ( x == DRX_CLASSIFICATION_GAUSS     )  ?  "Gaussion"        : \
+   ( x == DRX_CLASSIFICATION_HVY_GAUSS )  ?  "Heavy Gaussion"  : \
+   ( x == DRX_CLASSIFICATION_COCHANNEL )  ?  "Co-channel"      : \
+   ( x == DRX_CLASSIFICATION_STATIC    )  ?  "Static echo"     : \
+   ( x == DRX_CLASSIFICATION_MOVING    )  ?  "Moving echo"     : \
+   ( x == DRX_CLASSIFICATION_ZERODB    )  ?  "Zero dB echo"    : \
+   ( x == DRX_CLASSIFICATION_UNKNOWN   )  ?  "Unknown"         : \
+   ( x == DRX_CLASSIFICATION_AUTO      )  ?  "Auto"            : \
+					     "(Invalid)" )
+
+#define DRX_STR_INTERLEAVEMODE(x) ( \
+   ( x == DRX_INTERLEAVEMODE_I128_J1     ) ? "I128_J1"         : \
+   ( x == DRX_INTERLEAVEMODE_I128_J1_V2  ) ? "I128_J1_V2"      : \
+   ( x == DRX_INTERLEAVEMODE_I128_J2     ) ? "I128_J2"         : \
+   ( x == DRX_INTERLEAVEMODE_I64_J2      ) ? "I64_J2"          : \
+   ( x == DRX_INTERLEAVEMODE_I128_J3     ) ? "I128_J3"         : \
+   ( x == DRX_INTERLEAVEMODE_I32_J4      ) ? "I32_J4"          : \
+   ( x == DRX_INTERLEAVEMODE_I128_J4     ) ? "I128_J4"         : \
+   ( x == DRX_INTERLEAVEMODE_I16_J8      ) ? "I16_J8"          : \
+   ( x == DRX_INTERLEAVEMODE_I128_J5     ) ? "I128_J5"         : \
+   ( x == DRX_INTERLEAVEMODE_I8_J16      ) ? "I8_J16"          : \
+   ( x == DRX_INTERLEAVEMODE_I128_J6     ) ? "I128_J6"         : \
+   ( x == DRX_INTERLEAVEMODE_RESERVED_11 ) ? "Reserved 11"     : \
+   ( x == DRX_INTERLEAVEMODE_I128_J7     ) ? "I128_J7"         : \
+   ( x == DRX_INTERLEAVEMODE_RESERVED_13 ) ? "Reserved 13"     : \
+   ( x == DRX_INTERLEAVEMODE_I128_J8     ) ? "I128_J8"         : \
+   ( x == DRX_INTERLEAVEMODE_RESERVED_15 ) ? "Reserved 15"     : \
+   ( x == DRX_INTERLEAVEMODE_I12_J17     ) ? "I12_J17"         : \
+   ( x == DRX_INTERLEAVEMODE_I5_J4       ) ? "I5_J4"           : \
+   ( x == DRX_INTERLEAVEMODE_B52_M240    ) ? "B52_M240"        : \
+   ( x == DRX_INTERLEAVEMODE_B52_M720    ) ? "B52_M720"        : \
+   ( x == DRX_INTERLEAVEMODE_B52_M48     ) ? "B52_M48"         : \
+   ( x == DRX_INTERLEAVEMODE_B52_M0      ) ? "B52_M0"          : \
+   ( x == DRX_INTERLEAVEMODE_UNKNOWN     ) ? "Unknown"         : \
+   ( x == DRX_INTERLEAVEMODE_AUTO        ) ? "Auto"            : \
+					     "(Invalid)" )
+
+#define DRX_STR_LDPC(x) ( \
+   ( x == DRX_LDPC_0_4                   ) ? "0.4"             : \
+   ( x == DRX_LDPC_0_6                   ) ? "0.6"             : \
+   ( x == DRX_LDPC_0_8                   ) ? "0.8"             : \
+   ( x == DRX_LDPC_AUTO                  ) ? "Auto"            : \
+   ( x == DRX_LDPC_UNKNOWN               ) ? "Unknown"         : \
+					     "(Invalid)" )
+
+#define DRX_STR_CARRIER(x) ( \
+   ( x == DRX_CARRIER_MULTI              ) ? "Multi"           : \
+   ( x == DRX_CARRIER_SINGLE             ) ? "Single"          : \
+   ( x == DRX_CARRIER_AUTO               ) ? "Auto"            : \
+   ( x == DRX_CARRIER_UNKNOWN            ) ? "Unknown"         : \
+					     "(Invalid)" )
+
+#define DRX_STR_FRAMEMODE(x) ( \
+   ( x == DRX_FRAMEMODE_420          )  ? "420"                : \
+   ( x == DRX_FRAMEMODE_595          )  ? "595"                : \
+   ( x == DRX_FRAMEMODE_945          )  ? "945"                : \
+   ( x == DRX_FRAMEMODE_420_FIXED_PN )  ? "420 with fixed PN"  : \
+   ( x == DRX_FRAMEMODE_945_FIXED_PN )  ? "945 with fixed PN"  : \
+   ( x == DRX_FRAMEMODE_AUTO         )  ? "Auto"               : \
+   ( x == DRX_FRAMEMODE_UNKNOWN      )  ? "Unknown"            : \
+					  "(Invalid)" )
+
+#define DRX_STR_PILOT(x) ( \
+   ( x == DRX_PILOT_ON                 ) ?   "On"              : \
+   ( x == DRX_PILOT_OFF                ) ?   "Off"             : \
+   ( x == DRX_PILOT_AUTO               ) ?   "Auto"            : \
+   ( x == DRX_PILOT_UNKNOWN            ) ?   "Unknown"         : \
+					     "(Invalid)" )
+/* TPS */
+
+#define DRX_STR_TPS_FRAME(x)  ( \
+   ( x == DRX_TPS_FRAME1               )  ?  "Frame1"          : \
+   ( x == DRX_TPS_FRAME2               )  ?  "Frame2"          : \
+   ( x == DRX_TPS_FRAME3               )  ?  "Frame3"          : \
+   ( x == DRX_TPS_FRAME4               )  ?  "Frame4"          : \
+   ( x == DRX_TPS_FRAME_UNKNOWN        )  ?  "Unknown"         : \
+					     "(Invalid)" )
+
+/* lock status */
+
+#define DRX_STR_LOCKSTATUS(x) ( \
+   ( x == DRX_NEVER_LOCK               )  ?  "Never"           : \
+   ( x == DRX_NOT_LOCKED               )  ?  "No"              : \
+   ( x == DRX_LOCKED                   )  ?  "Locked"          : \
+   ( x == DRX_LOCK_STATE_1             )  ?  "Lock state 1"    : \
+   ( x == DRX_LOCK_STATE_2             )  ?  "Lock state 2"    : \
+   ( x == DRX_LOCK_STATE_3             )  ?  "Lock state 3"    : \
+   ( x == DRX_LOCK_STATE_4             )  ?  "Lock state 4"    : \
+   ( x == DRX_LOCK_STATE_5             )  ?  "Lock state 5"    : \
+   ( x == DRX_LOCK_STATE_6             )  ?  "Lock state 6"    : \
+   ( x == DRX_LOCK_STATE_7             )  ?  "Lock state 7"    : \
+   ( x == DRX_LOCK_STATE_8             )  ?  "Lock state 8"    : \
+   ( x == DRX_LOCK_STATE_9             )  ?  "Lock state 9"    : \
+					     "(Invalid)" )
+
+/* version information , modules */
+#define DRX_STR_MODULE(x) ( \
+   ( x == DRX_MODULE_DEVICE            )  ?  "Device"                : \
+   ( x == DRX_MODULE_MICROCODE         )  ?  "Microcode"             : \
+   ( x == DRX_MODULE_DRIVERCORE        )  ?  "CoreDriver"            : \
+   ( x == DRX_MODULE_DEVICEDRIVER      )  ?  "DeviceDriver"          : \
+   ( x == DRX_MODULE_BSP_I2C           )  ?  "BSP I2C"               : \
+   ( x == DRX_MODULE_BSP_TUNER         )  ?  "BSP Tuner"             : \
+   ( x == DRX_MODULE_BSP_HOST          )  ?  "BSP Host"              : \
+   ( x == DRX_MODULE_DAP               )  ?  "Data Access Protocol"  : \
+   ( x == DRX_MODULE_UNKNOWN           )  ?  "Unknown"               : \
+					     "(Invalid)" )
+
+#define DRX_STR_POWER_MODE(x) ( \
+   ( x == DRX_POWER_UP                 )  ?  "DRX_POWER_UP    "  : \
+   ( x == DRX_POWER_MODE_1             )  ?  "DRX_POWER_MODE_1"  : \
+   ( x == DRX_POWER_MODE_2             )  ?  "DRX_POWER_MODE_2"  : \
+   ( x == DRX_POWER_MODE_3             )  ?  "DRX_POWER_MODE_3"  : \
+   ( x == DRX_POWER_MODE_4             )  ?  "DRX_POWER_MODE_4"  : \
+   ( x == DRX_POWER_MODE_5             )  ?  "DRX_POWER_MODE_5"  : \
+   ( x == DRX_POWER_MODE_6             )  ?  "DRX_POWER_MODE_6"  : \
+   ( x == DRX_POWER_MODE_7             )  ?  "DRX_POWER_MODE_7"  : \
+   ( x == DRX_POWER_MODE_8             )  ?  "DRX_POWER_MODE_8"  : \
+   ( x == DRX_POWER_MODE_9             )  ?  "DRX_POWER_MODE_9"  : \
+   ( x == DRX_POWER_MODE_10            )  ?  "DRX_POWER_MODE_10" : \
+   ( x == DRX_POWER_MODE_11            )  ?  "DRX_POWER_MODE_11" : \
+   ( x == DRX_POWER_MODE_12            )  ?  "DRX_POWER_MODE_12" : \
+   ( x == DRX_POWER_MODE_13            )  ?  "DRX_POWER_MODE_13" : \
+   ( x == DRX_POWER_MODE_14            )  ?  "DRX_POWER_MODE_14" : \
+   ( x == DRX_POWER_MODE_15            )  ?  "DRX_POWER_MODE_15" : \
+   ( x == DRX_POWER_MODE_16            )  ?  "DRX_POWER_MODE_16" : \
+   ( x == DRX_POWER_DOWN               )  ?  "DRX_POWER_DOWN  " : \
+					     "(Invalid)" )
+
+#define DRX_STR_OOB_STANDARD(x) ( \
+   ( x == DRX_OOB_MODE_A            )  ?  "ANSI 55-1  " : \
+   ( x == DRX_OOB_MODE_B_GRADE_A    )  ?  "ANSI 55-2 A" : \
+   ( x == DRX_OOB_MODE_B_GRADE_B    )  ?  "ANSI 55-2 B" : \
+					     "(Invalid)" )
+
+#define DRX_STR_AUD_STANDARD(x) ( \
+   ( x == DRX_AUD_STANDARD_BTSC         )  ? "BTSC"                     : \
+   ( x == DRX_AUD_STANDARD_A2           )  ? "A2"                       : \
+   ( x == DRX_AUD_STANDARD_EIAJ         )  ? "EIAJ"                     : \
+   ( x == DRX_AUD_STANDARD_FM_STEREO    )  ? "FM Stereo"                : \
+   ( x == DRX_AUD_STANDARD_AUTO         )  ? "Auto"                     : \
+   ( x == DRX_AUD_STANDARD_M_MONO       )  ? "M-Standard Mono"          : \
+   ( x == DRX_AUD_STANDARD_D_K_MONO     )  ? "D/K Mono FM"              : \
+   ( x == DRX_AUD_STANDARD_BG_FM        )  ? "B/G-Dual Carrier FM (A2)" : \
+   ( x == DRX_AUD_STANDARD_D_K1         )  ? "D/K1-Dual Carrier FM"     : \
+   ( x == DRX_AUD_STANDARD_D_K2         )  ? "D/K2-Dual Carrier FM"     : \
+   ( x == DRX_AUD_STANDARD_D_K3         )  ? "D/K3-Dual Carrier FM"     : \
+   ( x == DRX_AUD_STANDARD_BG_NICAM_FM  )  ? "B/G-NICAM-FM"             : \
+   ( x == DRX_AUD_STANDARD_L_NICAM_AM   )  ? "L-NICAM-AM"               : \
+   ( x == DRX_AUD_STANDARD_I_NICAM_FM   )  ? "I-NICAM-FM"               : \
+   ( x == DRX_AUD_STANDARD_D_K_NICAM_FM )  ? "D/K-NICAM-FM"             : \
+   ( x == DRX_AUD_STANDARD_UNKNOWN      )  ? "Unknown"                  : \
+					     "(Invalid)"  )
+#define DRX_STR_AUD_STEREO(x) ( \
+   ( x == TRUE                          )  ? "Stereo"           : \
+   ( x == FALSE                         )  ? "Mono"             : \
+					     "(Invalid)"  )
+
+#define DRX_STR_AUD_SAP(x) ( \
+   ( x == TRUE                          )  ? "Present"          : \
+   ( x == FALSE                         )  ? "Not present"      : \
+					     "(Invalid)"  )
+
+#define DRX_STR_AUD_CARRIER(x) ( \
+   ( x == TRUE                          )  ? "Present"          : \
+   ( x == FALSE                         )  ? "Not present"      : \
+					     "(Invalid)"  )
+
+#define DRX_STR_AUD_RDS(x) ( \
+   ( x == TRUE                          )  ? "Available"        : \
+   ( x == FALSE                         )  ? "Not Available"    : \
+					     "(Invalid)"  )
+
+#define DRX_STR_AUD_NICAM_STATUS(x) ( \
+   ( x == DRX_AUD_NICAM_DETECTED        )  ? "Detected"         : \
+   ( x == DRX_AUD_NICAM_NOT_DETECTED    )  ? "Not detected"     : \
+   ( x == DRX_AUD_NICAM_BAD             )  ? "Bad"              : \
+					     "(Invalid)"  )
+
+#define DRX_STR_RDS_VALID(x) ( \
+   ( x == TRUE                          )  ? "Valid"            : \
+   ( x == FALSE                         )  ? "Not Valid"        : \
+					     "(Invalid)"  )
+
+/*-------------------------------------------------------------------------
+Access macros
+-------------------------------------------------------------------------*/
+
+
+/**
+* \brief Create a compilable reference to the microcode attribute
+* \param d pointer to demod instance
+*
+* Used as main reference to an attribute field.
+* Used by both macro implementation and function implementation.
+* These macros are defined to avoid duplication of code in macro and function
+* definitions that handle access of demod common or extended attributes.
+*
+*/
+
+#define DRX_ATTR_MCRECORD( d )        ((d)->myCommonAttr->mcversion)
+#define DRX_ATTR_MIRRORFREQSPECT( d ) ((d)->myCommonAttr->mirrorFreqSpect)
+#define DRX_ATTR_CURRENTPOWERMODE( d )((d)->myCommonAttr->currentPowerMode)
+#define DRX_ATTR_ISOPENED( d )        ((d)->myCommonAttr->isOpened)
+#define DRX_ATTR_USEBOOTLOADER( d )   ((d)->myCommonAttr->useBootloader)
+#define DRX_ATTR_CURRENTSTANDARD( d ) ((d)->myCommonAttr->currentStandard)
+#define DRX_ATTR_PREVSTANDARD( d )    ((d)->myCommonAttr->prevStandard)
+#define DRX_ATTR_CACHESTANDARD( d )   ((d)->myCommonAttr->diCacheStandard)
+#define DRX_ATTR_CURRENTCHANNEL( d )  ((d)->myCommonAttr->currentChannel)
+#define DRX_ATTR_MICROCODE( d )       ((d)->myCommonAttr->microcode)
+#define DRX_ATTR_MICROCODESIZE( d )   ((d)->myCommonAttr->microcodeSize)
+#define DRX_ATTR_VERIFYMICROCODE( d ) ((d)->myCommonAttr->verifyMicrocode)
+#define DRX_ATTR_CAPABILITIES( d )    ((d)->myCommonAttr->capabilities)
+#define DRX_ATTR_PRODUCTID( d )       ((d)->myCommonAttr->productId)
+#define DRX_ATTR_INTERMEDIATEFREQ( d) ((d)->myCommonAttr->intermediateFreq)
+#define DRX_ATTR_SYSCLOCKFREQ( d)     ((d)->myCommonAttr->sysClockFreq)
+#define DRX_ATTR_TUNERRFAGCPOL( d )   ((d)->myCommonAttr->tunerRfAgcPol)
+#define DRX_ATTR_TUNERIFAGCPOL( d)    ((d)->myCommonAttr->tunerIfAgcPol)
+#define DRX_ATTR_TUNERSLOWMODE( d)    ((d)->myCommonAttr->tunerSlowMode)
+#define DRX_ATTR_TUNERSPORTNR( d)     ((d)->myCommonAttr->tunerPortNr)
+#define DRX_ATTR_TUNER( d )           ((d)->myTuner)
+#define DRX_ATTR_I2CADDR( d )         ((d)->myI2CDevAddr->i2cAddr)
+#define DRX_ATTR_I2CDEVID( d )        ((d)->myI2CDevAddr->i2cDevId)
+
+/**
+* \brief Actual access macro's
+* \param d pointer to demod instance
+* \param x value to set ar to get
+*
+* SET macro's must be used to set the value of an attribute.
+* GET macro's must be used to retrieve the value of an attribute.
+*
+*/
+
+/**************************/
+
+#define DRX_SET_MIRRORFREQSPECT( d, x )                     \
+   do {                                                     \
+      DRX_ATTR_MIRRORFREQSPECT( d ) = (x);                  \
+   } while(0)
+
+#define DRX_GET_MIRRORFREQSPECT( d, x )                     \
+   do {                                                     \
+      (x)=DRX_ATTR_MIRRORFREQSPECT( d );                    \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_CURRENTPOWERMODE( d, x )                    \
+   do {                                                     \
+      DRX_ATTR_CURRENTPOWERMODE( d ) = (x);                 \
+   } while(0)
+
+#define DRX_GET_CURRENTPOWERMODE( d, x )                    \
+   do {                                                     \
+      (x)=DRX_ATTR_CURRENTPOWERMODE( d );                   \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_MICROCODE( d, x )                           \
+   do {                                                     \
+      DRX_ATTR_MICROCODE( d ) = (x);                        \
+   } while(0)
+
+#define DRX_GET_MICROCODE( d, x )                           \
+   do {                                                     \
+      (x)=DRX_ATTR_MICROCODE( d );                          \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_MICROCODESIZE( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_MICROCODESIZE(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_MICROCODESIZE( d, x )                       \
+   do {                                                     \
+      (x)=DRX_ATTR_MICROCODESIZE(d);                        \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_VERIFYMICROCODE( d, x )                     \
+   do {                                                     \
+      DRX_ATTR_VERIFYMICROCODE(d) = (x);                    \
+   } while(0)
+
+#define DRX_GET_VERIFYMICROCODE( d, x )                     \
+   do {                                                     \
+      (x)=DRX_ATTR_VERIFYMICROCODE(d);                      \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_MCVERTYPE( d, x )                           \
+   do {                                                     \
+      DRX_ATTR_MCRECORD(d).auxType = (x);                   \
+   } while (0)
+
+#define DRX_GET_MCVERTYPE( d, x )                           \
+   do {                                                     \
+      (x) = DRX_ATTR_MCRECORD(d).auxType;                   \
+   } while (0)
+
+/**************************/
+
+#define DRX_ISMCVERTYPE(x) ((x) == AUX_VER_RECORD)
+
+/**************************/
+
+#define DRX_SET_MCDEV( d, x )                               \
+   do {                                                     \
+      DRX_ATTR_MCRECORD(d).mcDevType = (x);                 \
+   } while (0)
+
+#define DRX_GET_MCDEV( d, x )                               \
+   do {                                                     \
+      (x) = DRX_ATTR_MCRECORD(d).mcDevType;                 \
+   } while (0)
+
+/**************************/
+
+#define DRX_SET_MCVERSION( d, x )                           \
+   do {                                                     \
+      DRX_ATTR_MCRECORD(d).mcVersion = (x);                 \
+   } while (0)
+
+#define DRX_GET_MCVERSION( d, x )                           \
+   do {                                                     \
+      (x) = DRX_ATTR_MCRECORD(d).mcVersion;                 \
+   } while (0)
+
+/**************************/
+#define DRX_SET_MCPATCH( d, x )                             \
+   do {                                                     \
+      DRX_ATTR_MCRECORD(d).mcBaseVersion = (x);             \
+   } while (0)
+
+#define DRX_GET_MCPATCH( d, x )                             \
+   do {                                                     \
+      (x) = DRX_ATTR_MCRECORD(d).mcBaseVersion;             \
+   } while (0)
+
+/**************************/
+
+#define DRX_SET_I2CADDR( d, x )                             \
+   do {                                                     \
+      DRX_ATTR_I2CADDR(d) = (x);                            \
+   } while(0)
+
+#define DRX_GET_I2CADDR( d, x )                             \
+   do {                                                     \
+      (x)=DRX_ATTR_I2CADDR(d);                              \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_I2CDEVID( d, x )                            \
+   do {                                                     \
+      DRX_ATTR_I2CDEVID(d) = (x);                           \
+   } while(0)
+
+#define DRX_GET_I2CDEVID( d, x )                            \
+   do {                                                     \
+      (x)=DRX_ATTR_I2CDEVID(d);                             \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_USEBOOTLOADER( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_USEBOOTLOADER(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_USEBOOTLOADER( d, x)                        \
+   do {                                                     \
+      (x)=DRX_ATTR_USEBOOTLOADER(d);                        \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_CURRENTSTANDARD( d, x )                     \
+   do {                                                     \
+      DRX_ATTR_CURRENTSTANDARD(d) = (x);                    \
+   } while(0)
+
+#define DRX_GET_CURRENTSTANDARD( d, x)                      \
+   do {                                                     \
+      (x)=DRX_ATTR_CURRENTSTANDARD(d);                      \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_PREVSTANDARD( d, x )                        \
+   do {                                                     \
+      DRX_ATTR_PREVSTANDARD(d) = (x);                       \
+   } while(0)
+
+#define DRX_GET_PREVSTANDARD( d, x)                         \
+   do {                                                     \
+      (x)=DRX_ATTR_PREVSTANDARD(d);                         \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_CACHESTANDARD( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_CACHESTANDARD(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_CACHESTANDARD( d, x)                        \
+   do {                                                     \
+      (x)=DRX_ATTR_CACHESTANDARD(d);                        \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_CURRENTCHANNEL( d, x )                      \
+   do {                                                     \
+      DRX_ATTR_CURRENTCHANNEL(d) = (x);                     \
+   } while(0)
+
+#define DRX_GET_CURRENTCHANNEL( d, x)                       \
+   do {                                                     \
+      (x)=DRX_ATTR_CURRENTCHANNEL(d);                       \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_ISOPENED( d, x )                            \
+   do {                                                     \
+      DRX_ATTR_ISOPENED(d) = (x);                           \
+   } while(0)
+
+#define DRX_GET_ISOPENED( d, x)                             \
+   do {                                                     \
+      (x) = DRX_ATTR_ISOPENED(d);                           \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_TUNER( d, x )                               \
+   do {                                                     \
+      DRX_ATTR_TUNER(d) = (x);                              \
+   } while(0)
+
+#define DRX_GET_TUNER( d, x)                                \
+   do {                                                     \
+      (x) = DRX_ATTR_TUNER(d);                              \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_CAPABILITIES( d, x )                        \
+   do {                                                     \
+      DRX_ATTR_CAPABILITIES(d) = (x);                       \
+   } while(0)
+
+#define DRX_GET_CAPABILITIES( d, x)                         \
+   do {                                                     \
+      (x) = DRX_ATTR_CAPABILITIES(d);                       \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_PRODUCTID( d, x )                           \
+   do {                                                     \
+      DRX_ATTR_PRODUCTID(d) |= (x << 4);                    \
+   } while(0)
+
+#define DRX_GET_PRODUCTID( d, x)                            \
+   do {                                                     \
+      (x) = (DRX_ATTR_PRODUCTID(d) >> 4);                   \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_MFX( d, x )                                 \
+   do {                                                     \
+      DRX_ATTR_PRODUCTID(d) |= (x);                         \
+   } while(0)
+
+#define DRX_GET_MFX( d, x)                                  \
+   do {                                                     \
+      (x) = (DRX_ATTR_PRODUCTID(d) & 0xF);                  \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_INTERMEDIATEFREQ( d, x )                    \
+   do {                                                     \
+      DRX_ATTR_INTERMEDIATEFREQ(d) = (x);                   \
+   } while(0)
+
+#define DRX_GET_INTERMEDIATEFREQ( d, x)                     \
+   do {                                                     \
+      (x) = DRX_ATTR_INTERMEDIATEFREQ(d);                   \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_SYSCLOCKFREQ( d, x )                        \
+   do {                                                     \
+      DRX_ATTR_SYSCLOCKFREQ(d) = (x);                       \
+   } while(0)
+
+#define DRX_GET_SYSCLOCKFREQ( d, x)                         \
+   do {                                                     \
+      (x) = DRX_ATTR_SYSCLOCKFREQ(d);                       \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_TUNERRFAGCPOL( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_TUNERRFAGCPOL(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_TUNERRFAGCPOL( d, x)                        \
+   do {                                                     \
+      (x) = DRX_ATTR_TUNERRFAGCPOL(d);                      \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_TUNERIFAGCPOL( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_TUNERIFAGCPOL(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_TUNERIFAGCPOL( d, x)                        \
+   do {                                                     \
+      (x) = DRX_ATTR_TUNERIFAGCPOL(d);                      \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_TUNERSLOWMODE( d, x )                       \
+   do {                                                     \
+      DRX_ATTR_TUNERSLOWMODE(d) = (x);                      \
+   } while(0)
+
+#define DRX_GET_TUNERSLOWMODE( d, x)                        \
+   do {                                                     \
+      (x) = DRX_ATTR_TUNERSLOWMODE(d);                      \
+   } while(0)
+
+/**************************/
+
+#define DRX_SET_TUNERPORTNR( d, x )                         \
+   do {                                                     \
+      DRX_ATTR_TUNERSPORTNR(d) = (x);                       \
+   } while(0)
+
+/**************************/
+
+/* Macros with device-specific handling are converted to CFG functions */
+
+#define DRX_ACCESSMACRO_SET( demod, value, cfgName, dataType )             \
+   do {                                                                    \
+      DRXCfg_t config;                                                     \
+      dataType cfgData;                                                    \
+      config.cfgType = cfgName;                                            \
+      config.cfgData = &cfgData;                                           \
+      cfgData = value;                                                     \
+      DRX_Ctrl( demod, DRX_CTRL_SET_CFG, &config );                        \
+   } while ( 0 )
+
+#define DRX_ACCESSMACRO_GET( demod, value, cfgName, dataType, errorValue ) \
+   do {                                                                    \
+      DRXStatus_t cfgStatus;                                               \
+      DRXCfg_t    config;                                                  \
+      dataType    cfgData;                                                 \
+      config.cfgType = cfgName;                                            \
+      config.cfgData = &cfgData;                                           \
+      cfgStatus = DRX_Ctrl( demod, DRX_CTRL_GET_CFG, &config );            \
+      if ( cfgStatus == DRX_STS_OK ) {                                     \
+	 value = cfgData;                                                  \
+      } else {                                                             \
+	 value = (dataType)errorValue;                                     \
+      }                                                                    \
+   } while ( 0 )
+
+
+/* Configuration functions for usage by Access (XS) Macros */
+
+#ifndef DRX_XS_CFG_BASE
+#define DRX_XS_CFG_BASE (500)
+#endif
+
+#define DRX_XS_CFG_PRESET          ( DRX_XS_CFG_BASE + 0 )
+#define DRX_XS_CFG_AUD_BTSC_DETECT ( DRX_XS_CFG_BASE + 1 )
+#define DRX_XS_CFG_QAM_LOCKRANGE   ( DRX_XS_CFG_BASE + 2 )
+
+/* Access Macros with device-specific handling */
+
+#define DRX_SET_PRESET( d, x ) \
+   DRX_ACCESSMACRO_SET( (d), (x), DRX_XS_CFG_PRESET, char* )
+#define DRX_GET_PRESET( d, x ) \
+   DRX_ACCESSMACRO_GET( (d), (x), DRX_XS_CFG_PRESET, char*, "ERROR" )
+
+#define DRX_SET_AUD_BTSC_DETECT( d, x ) DRX_ACCESSMACRO_SET( (d), (x), \
+	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t )
+#define DRX_GET_AUD_BTSC_DETECT( d, x ) DRX_ACCESSMACRO_GET( (d), (x), \
+	 DRX_XS_CFG_AUD_BTSC_DETECT, DRXAudBtscDetect_t, DRX_UNKNOWN )
+
+#define DRX_SET_QAM_LOCKRANGE( d, x ) DRX_ACCESSMACRO_SET( (d), (x), \
+	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t )
+#define DRX_GET_QAM_LOCKRANGE( d, x ) DRX_ACCESSMACRO_GET( (d), (x), \
+	 DRX_XS_CFG_QAM_LOCKRANGE, DRXQamLockRange_t, DRX_UNKNOWN )
+
+
+/**
+* \brief Macro to check if std is an ATV standard
+* \retval TRUE std is an ATV standard
+* \retval FALSE std is an ATV standard
+*/
+#define DRX_ISATVSTD( std ) ( ( (std) == DRX_STANDARD_PAL_SECAM_BG ) || \
+			      ( (std) == DRX_STANDARD_PAL_SECAM_DK ) || \
+			      ( (std) == DRX_STANDARD_PAL_SECAM_I  ) || \
+			      ( (std) == DRX_STANDARD_PAL_SECAM_L  ) || \
+			      ( (std) == DRX_STANDARD_PAL_SECAM_LP ) || \
+			      ( (std) == DRX_STANDARD_NTSC ) || \
+			      ( (std) == DRX_STANDARD_FM ) )
+
+/**
+* \brief Macro to check if std is an QAM standard
+* \retval TRUE std is an QAM standards
+* \retval FALSE std is an QAM standards
+*/
+#define DRX_ISQAMSTD( std ) ( ( (std) == DRX_STANDARD_ITU_A ) || \
+			      ( (std) == DRX_STANDARD_ITU_B ) || \
+			      ( (std) == DRX_STANDARD_ITU_C ) || \
+			      ( (std) == DRX_STANDARD_ITU_D ))
+
+/**
+* \brief Macro to check if std is VSB standard
+* \retval TRUE std is VSB standard
+* \retval FALSE std is not VSB standard
+*/
+#define DRX_ISVSBSTD( std ) ( (std) == DRX_STANDARD_8VSB )
+
+/**
+* \brief Macro to check if std is DVBT standard
+* \retval TRUE std is DVBT standard
+* \retval FALSE std is not DVBT standard
+*/
+#define DRX_ISDVBTSTD( std ) ( (std) == DRX_STANDARD_DVBT )
+
+
+
+
+/*-------------------------------------------------------------------------
+Exported FUNCTIONS
+-------------------------------------------------------------------------*/
+
+DRXStatus_t DRX_Init( pDRXDemodInstance_t demods[] );
+
+DRXStatus_t DRX_Term( void );
+
+DRXStatus_t DRX_Open(pDRXDemodInstance_t demod);
+
+DRXStatus_t DRX_Close(pDRXDemodInstance_t demod);
+
+DRXStatus_t DRX_Ctrl(pDRXDemodInstance_t demod,
+		     DRXCtrlIndex_t ctrl,
+		     void *ctrlData);
+
+/*-------------------------------------------------------------------------
+THE END
+-------------------------------------------------------------------------*/
+#ifdef __cplusplus
+}
+#endif
+#endif /* __DRXDRIVER_H__ */
