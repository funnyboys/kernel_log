commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 398767526276..7d922950caaf 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -1,13 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Mediated device interal definitions
  *
  * Copyright (c) 2016, NVIDIA CORPORATION. All rights reserved.
  *     Author: Neo Jia <cjia@nvidia.com>
  *             Kirti Wankhede <kwankhede@nvidia.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef MDEV_PRIVATE_H

commit 5715c4dd66a315515eedef3fc4cbe1bf4620f009
Author: Parav Pandit <parav@mellanox.com>
Date:   Thu Jun 6 10:52:33 2019 -0600

    vfio/mdev: Synchronize device create/remove with parent removal
    
    In following sequences, child devices created while removing mdev parent
    device can be left out, or it may lead to race of removing half
    initialized child mdev devices.
    
    issue-1:
    --------
           cpu-0                         cpu-1
           -----                         -----
                                      mdev_unregister_device()
                                        device_for_each_child()
                                          mdev_device_remove_cb()
                                            mdev_device_remove()
    create_store()
      mdev_device_create()                   [...]
        device_add()
                                      parent_remove_sysfs_files()
    
    /* BUG: device added by cpu-0
     * whose parent is getting removed
     * and it won't process this mdev.
     */
    
    issue-2:
    --------
    Below crash is observed when user initiated remove is in progress
    and mdev_unregister_driver() completes parent unregistration.
    
           cpu-0                         cpu-1
           -----                         -----
    remove_store()
       mdev_device_remove()
       active = false;
                                      mdev_unregister_device()
                                      parent device removed.
       [...]
       parents->ops->remove()
     /*
      * BUG: Accessing invalid parent.
      */
    
    This is similar race like create() racing with mdev_unregister_device().
    
    BUG: unable to handle kernel paging request at ffffffffc0585668
    PGD e8f618067 P4D e8f618067 PUD e8f61a067 PMD 85adca067 PTE 0
    Oops: 0000 [#1] SMP PTI
    CPU: 41 PID: 37403 Comm: bash Kdump: loaded Not tainted 5.1.0-rc6-vdevbus+ #6
    Hardware name: Supermicro SYS-6028U-TR4+/X10DRU-i+, BIOS 2.0b 08/09/2016
    RIP: 0010:mdev_device_remove+0xfa/0x140 [mdev]
    Call Trace:
     remove_store+0x71/0x90 [mdev]
     kernfs_fop_write+0x113/0x1a0
     vfs_write+0xad/0x1b0
     ksys_write+0x5a/0xe0
     do_syscall_64+0x5a/0x210
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Therefore, mdev core is improved as below to overcome above issues.
    
    Wait for any ongoing mdev create() and remove() to finish before
    unregistering parent device.
    This continues to allow multiple create and remove to progress in
    parallel for different mdev devices as most common case.
    At the same time guard parent removal while parent is being accessed by
    create() and remove() callbacks.
    create()/remove() and unregister_device() are synchronized by the rwsem.
    
    Refactor device removal code to mdev_device_remove_common() to avoid
    acquiring unreg_sem of the parent.
    
    Fixes: 7b96953bc640 ("vfio: Mediated device Core driver")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 924ed2274941..398767526276 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -23,6 +23,8 @@ struct mdev_parent {
 	struct list_head next;
 	struct kset *mdev_types_kset;
 	struct list_head type_list;
+	/* Synchronize device creation/removal with parent unregistration */
+	struct rw_semaphore unreg_sem;
 };
 
 struct mdev_device {

commit 522ecce08ab20b57342d65b05601818e0f95fb2c
Author: Parav Pandit <parav@mellanox.com>
Date:   Thu Jun 6 10:52:32 2019 -0600

    vfio/mdev: Improve the create/remove sequence
    
    This patch addresses below two issues and prepares the code to address
    3rd issue listed below.
    
    1. mdev device is placed on the mdev bus before it is created in the
    vendor driver. Once a device is placed on the mdev bus without creating
    its supporting underlying vendor device, mdev driver's probe() gets
    triggered.  However there isn't a stable mdev available to work on.
    
       create_store()
         mdev_create_device()
           device_register()
              ...
             vfio_mdev_probe()
            [...]
            parent->ops->create()
              vfio_ap_mdev_create()
                mdev_set_drvdata(mdev, matrix_mdev);
                /* Valid pointer set above */
    
    Due to this way of initialization, mdev driver who wants to use the mdev,
    doesn't have a valid mdev to work on.
    
    2. Current creation sequence is,
       parent->ops_create()
       groups_register()
    
    Remove sequence is,
       parent->ops->remove()
       groups_unregister()
    
    However, remove sequence should be exact mirror of creation sequence.
    Once this is achieved, all users of the mdev will be terminated first
    before removing underlying vendor device.
    (Follow standard linux driver model).
    At that point vendor's remove() ops shouldn't fail because taking the
    device off the bus should terminate any usage.
    
    3. When remove operation fails, mdev sysfs removal attempts to add the
    file back on already removed device. Following call trace [1] is observed.
    
    [1] call trace:
    kernel: WARNING: CPU: 2 PID: 9348 at fs/sysfs/file.c:327 sysfs_create_file_ns+0x7f/0x90
    kernel: CPU: 2 PID: 9348 Comm: bash Kdump: loaded Not tainted 5.1.0-rc6-vdevbus+ #6
    kernel: Hardware name: Supermicro SYS-6028U-TR4+/X10DRU-i+, BIOS 2.0b 08/09/2016
    kernel: RIP: 0010:sysfs_create_file_ns+0x7f/0x90
    kernel: Call Trace:
    kernel: remove_store+0xdc/0x100 [mdev]
    kernel: kernfs_fop_write+0x113/0x1a0
    kernel: vfs_write+0xad/0x1b0
    kernel: ksys_write+0x5a/0xe0
    kernel: do_syscall_64+0x5a/0x210
    kernel: entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Therefore, mdev core is improved in following ways.
    
    1. Split the device registration/deregistration sequence so that some
    things can be done between initialization of the device and hooking it
    up to the bus respectively after deregistering it from the bus but
    before giving up our final reference.
    In particular, this means invoking the ->create() and ->remove()
    callbacks in those new windows. This gives the vendor driver an
    initialized mdev device to work with during creation.
    At the same time, a bus driver who wish to bind to mdev driver also
    gets initialized mdev device.
    
    This follows standard Linux kernel bus and device model.
    
    2. During remove flow, first remove the device from the bus. This
    ensures that any bus specific devices are removed.
    Once device is taken off the mdev bus, invoke remove() of mdev
    from the vendor driver.
    
    3. The driver core device model provides way to register and auto
    unregister the device sysfs attribute groups at dev->groups.
    Make use of dev->groups to let core create the groups and eliminate
    code to avoid explicit groups creation and removal.
    
    To ensure, that new sequence is solid, a below stack dump of a
    process is taken who attempts to remove the device while device is in
    use by vfio driver and user application.
    This stack dump validates that vfio driver guards against such device
    removal when device is in use.
    
     cat /proc/21962/stack
    [<0>] vfio_del_group_dev+0x216/0x3c0 [vfio]
    [<0>] mdev_remove+0x21/0x40 [mdev]
    [<0>] device_release_driver_internal+0xe8/0x1b0
    [<0>] bus_remove_device+0xf9/0x170
    [<0>] device_del+0x168/0x350
    [<0>] mdev_device_remove_common+0x1d/0x50 [mdev]
    [<0>] mdev_device_remove+0x8c/0xd0 [mdev]
    [<0>] remove_store+0x71/0x90 [mdev]
    [<0>] kernfs_fop_write+0x113/0x1a0
    [<0>] vfs_write+0xad/0x1b0
    [<0>] ksys_write+0x5a/0xe0
    [<0>] do_syscall_64+0x5a/0x210
    [<0>] entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [<0>] 0xffffffffffffffff
    
    This prepares the code to eliminate calling device_create_file() in
    subsequent patch.
    
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 36cbbdb754de..924ed2274941 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -60,6 +60,6 @@ void mdev_remove_sysfs_files(struct device *dev, struct mdev_type *type);
 
 int  mdev_device_create(struct kobject *kobj,
 			struct device *dev, const guid_t *uuid);
-int  mdev_device_remove(struct device *dev, bool force_remove);
+int  mdev_device_remove(struct device *dev);
 
 #endif /* MDEV_PRIVATE_H */

commit a13f0655503a4a89df67fdc7cac6a7810795d4b3
Merge: 55472bae5331 b5531563e8a0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 13 09:23:18 2019 -0400

    Merge tag 'iommu-updates-v5.2' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/joro/iommu
    
    Pull IOMMU updates from Joerg Roedel:
    
     - ATS support for ARM-SMMU-v3.
    
     - AUX domain support in the IOMMU-API and the Intel VT-d driver. This
       adds support for multiple DMA address spaces per (PCI-)device. The
       use-case is to multiplex devices between host and KVM guests in a
       more flexible way than supported by SR-IOV.
    
     - the rest are smaller cleanups and fixes, two of which needed to be
       reverted after testing in linux-next.
    
    * tag 'iommu-updates-v5.2' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/joro/iommu: (45 commits)
      Revert "iommu/amd: Flush not present cache in iommu_map_page"
      Revert "iommu/amd: Remove the leftover of bypass support"
      iommu/vt-d: Fix leak in intel_pasid_alloc_table on error path
      iommu/vt-d: Make kernel parameter igfx_off work with vIOMMU
      iommu/vt-d: Set intel_iommu_gfx_mapped correctly
      iommu/amd: Flush not present cache in iommu_map_page
      iommu/vt-d: Cleanup: no spaces at the start of a line
      iommu/vt-d: Don't request page request irq under dmar_global_lock
      iommu/vt-d: Use struct_size() helper
      iommu/mediatek: Fix leaked of_node references
      iommu/amd: Remove amd_iommu_pd_list
      iommu/arm-smmu: Log CBFRSYNRA register on context fault
      iommu/arm-smmu-v3: Don't disable SMMU in kdump kernel
      iommu/arm-smmu-v3: Disable tagged pointers
      iommu/arm-smmu-v3: Add support for PCI ATS
      iommu/arm-smmu-v3: Link domains and devices
      iommu/arm-smmu-v3: Add a master->domain pointer
      iommu/arm-smmu-v3: Store SteamIDs in master
      iommu/arm-smmu-v3: Rename arm_smmu_master_data to arm_smmu_master
      ACPI/IORT: Check ATS capability in root complex nodes
      ...

commit f707d837b6c24792a724ec51117c0fdb92bd352f
Author: Parav Pandit <parav@mellanox.com>
Date:   Tue Apr 30 17:49:29 2019 -0500

    vfio/mdev: Removed unused kref
    
    Remove unused kref from the mdev_device structure.
    
    Fixes: 7b96953bc640 ("vfio: Mediated device Core driver")
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Kirti Wankhede <kwankhede@nvidia.com>
    Reviewed-by: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 379758c52b1b..ddcf9c72bd8a 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -30,7 +30,6 @@ struct mdev_device {
 	struct mdev_parent *parent;
 	guid_t uuid;
 	void *driver_data;
-	struct kref ref;
 	struct list_head next;
 	struct kobject *type_kobj;
 	bool active;

commit 8ac13175cbe985e78bd41f9637b613b59df36936
Author: Lu Baolu <baolu.lu@linux.intel.com>
Date:   Fri Apr 12 12:13:24 2019 +0800

    vfio/mdev: Add iommu related member in mdev_device
    
    A parent device might create different types of mediated
    devices. For example, a mediated device could be created
    by the parent device with full isolation and protection
    provided by the IOMMU. One usage case could be found on
    Intel platforms where a mediated device is an assignable
    subset of a PCI, the DMA requests on behalf of it are all
    tagged with a PASID. Since IOMMU supports PASID-granular
    translations (scalable mode in VT-d 3.0), this mediated
    device could be individually protected and isolated by an
    IOMMU.
    
    This patch adds a new member in the struct mdev_device to
    indicate that the mediated device represented by mdev could
    be isolated and protected by attaching a domain to a device
    represented by mdev->iommu_device. It also adds a helper to
    add or set the iommu device.
    
    * mdev_device->iommu_device
      - This, if set, indicates that the mediated device could
        be fully isolated and protected by IOMMU via attaching
        an iommu domain to this device. If empty, it indicates
        using vendor defined isolation, hence bypass IOMMU.
    
    * mdev_set/get_iommu_device(dev, iommu_device)
      - Set or get the iommu device which represents this mdev
        in IOMMU's device scope. Drivers don't need to set the
        iommu device if it uses vendor defined isolation.
    
    Cc: Ashok Raj <ashok.raj@intel.com>
    Cc: Jacob Pan <jacob.jun.pan@linux.intel.com>
    Cc: Kevin Tian <kevin.tian@intel.com>
    Cc: Liu Yi L <yi.l.liu@intel.com>
    Suggested-by: Kevin Tian <kevin.tian@intel.com>
    Suggested-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Lu Baolu <baolu.lu@linux.intel.com>
    Reviewed-by: Jean-Philippe Brucker <jean-philippe.brucker@arm.com>
    Reviewed-by: Kirti Wankhede <kwankhede@nvidia.com>
    Acked-by: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 379758c52b1b..f4eba723fea5 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -33,6 +33,7 @@ struct mdev_device {
 	struct kref ref;
 	struct list_head next;
 	struct kobject *type_kobj;
+	struct device *iommu_device;
 	bool active;
 };
 

commit 278bca7f318e6a29f482eabbca52db538dc5d4e6
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Thu Jan 10 21:00:27 2019 +0200

    vfio-mdev: Switch to use new generic UUID API
    
    There are new types and helpers that are supposed to be used in new code.
    
    As a preparation to get rid of legacy types and API functions do
    the conversion here.
    
    Cc: Kirti Wankhede <kwankhede@nvidia.com>
    Cc: Alex Williamson <alex.williamson@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index b5819b7d7ef7..379758c52b1b 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -28,7 +28,7 @@ struct mdev_parent {
 struct mdev_device {
 	struct device dev;
 	struct mdev_parent *parent;
-	uuid_le uuid;
+	guid_t uuid;
 	void *driver_data;
 	struct kref ref;
 	struct list_head next;
@@ -58,7 +58,8 @@ void parent_remove_sysfs_files(struct mdev_parent *parent);
 int  mdev_create_sysfs_files(struct device *dev, struct mdev_type *type);
 void mdev_remove_sysfs_files(struct device *dev, struct mdev_type *type);
 
-int  mdev_device_create(struct kobject *kobj, struct device *dev, uuid_le uuid);
+int  mdev_device_create(struct kobject *kobj,
+			struct device *dev, const guid_t *uuid);
 int  mdev_device_remove(struct device *dev, bool force_remove);
 
 #endif /* MDEV_PRIVATE_H */

commit 002fe996f67f4f46d8917b14cfb6e4313c20685a
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Tue May 15 13:53:55 2018 -0600

    vfio/mdev: Check globally for duplicate devices
    
    When we create an mdev device, we check for duplicates against the
    parent device and return -EEXIST if found, but the mdev device
    namespace is global since we'll link all devices from the bus.  We do
    catch this later in sysfs_do_create_link_sd() to return -EEXIST, but
    with it comes a kernel warning and stack trace for trying to create
    duplicate sysfs links, which makes it an undesirable response.
    
    Therefore we should really be looking for duplicates across all mdev
    parent devices, or as implemented here, against our mdev device list.
    Using mdev_list to prevent duplicates means that we can remove
    mdev_parent.lock, but in order not to serialize mdev device creation
    and removal globally, we add mdev_device.active which allows UUIDs to
    be reserved such that we can drop the mdev_list_lock before the mdev
    device is fully in place.
    
    Two behavioral notes; first, mdev_parent.lock had the side-effect of
    serializing mdev create and remove ops per parent device.  This was
    an implementation detail, not an intentional guarantee provided to
    the mdev vendor drivers.  Vendor drivers can trivially provide this
    serialization internally if necessary.  Second, review comments note
    the new -EAGAIN behavior when the device, and in particular the remove
    attribute, becomes visible in sysfs.  If a remove is triggered prior
    to completion of mdev_device_create() the user will see a -EAGAIN
    error.  While the errno is different, receiving an error during this
    period is not, the previous implementation returned -ENODEV for the
    same condition.  Furthermore, the consistency to the user is improved
    in the case where mdev_device_remove_ops() returns error.  Previously
    concurrent calls to mdev_device_remove() could see the device
    disappear with -ENODEV and return in the case of error.  Now a user
    would see -EAGAIN while the device is in this transitory state.
    
    Reviewed-by: Kirti Wankhede <kwankhede@nvidia.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Acked-by: Halil Pasic <pasic@linux.ibm.com>
    Acked-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index a9cefd70a705..b5819b7d7ef7 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -20,7 +20,6 @@ struct mdev_parent {
 	struct device *dev;
 	const struct mdev_parent_ops *ops;
 	struct kref ref;
-	struct mutex lock;
 	struct list_head next;
 	struct kset *mdev_types_kset;
 	struct list_head type_list;
@@ -34,6 +33,7 @@ struct mdev_device {
 	struct kref ref;
 	struct list_head next;
 	struct kobject *type_kobj;
+	bool active;
 };
 
 #define to_mdev_device(dev)	container_of(dev, struct mdev_device, dev)

commit 99e3123e3d72616a829dad6d25aa005ef1ef9b13
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Fri Dec 30 08:13:44 2016 -0700

    vfio-mdev: Make mdev_device private and abstract interfaces
    
    Abstract access to mdev_device so that we can define which interfaces
    are public rather than relying on comments in the structure.
    
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Zhi Wang <zhi.a.wang@intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed-by: Jike Song <jike.song@intel.com>
    Reviewed by: Kirti Wankhede <kwankhede@nvidia.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index b05dd22fc9a6..a9cefd70a705 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -26,6 +26,19 @@ struct mdev_parent {
 	struct list_head type_list;
 };
 
+struct mdev_device {
+	struct device dev;
+	struct mdev_parent *parent;
+	uuid_le uuid;
+	void *driver_data;
+	struct kref ref;
+	struct list_head next;
+	struct kobject *type_kobj;
+};
+
+#define to_mdev_device(dev)	container_of(dev, struct mdev_device, dev)
+#define dev_is_mdev(d)		((d)->bus == &mdev_bus_type)
+
 struct mdev_type {
 	struct kobject kobj;
 	struct kobject *devices_kobj;

commit 9372e6feaafb65d88f667ffb5b7b425f8568344f
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Fri Dec 30 08:13:41 2016 -0700

    vfio-mdev: Make mdev_parent private
    
    Rather than hoping for good behavior by marking some elements
    internal, enforce it by making the entire structure private and
    creating an accessor function for the one useful external field.
    
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Zhi Wang <zhi.a.wang@intel.com>
    Cc: Jike Song <jike.song@intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed by: Kirti Wankhede <kwankhede@nvidia.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index 0b72c2d9ee40..b05dd22fc9a6 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -16,6 +16,16 @@
 int  mdev_bus_register(void);
 void mdev_bus_unregister(void);
 
+struct mdev_parent {
+	struct device *dev;
+	const struct mdev_parent_ops *ops;
+	struct kref ref;
+	struct mutex lock;
+	struct list_head next;
+	struct kset *mdev_types_kset;
+	struct list_head type_list;
+};
+
 struct mdev_type {
 	struct kobject kobj;
 	struct kobject *devices_kobj;

commit 42930553a7c11f06351bc08b889808d0f6020f08
Author: Alex Williamson <alex.williamson@redhat.com>
Date:   Fri Dec 30 08:13:38 2016 -0700

    vfio-mdev: de-polute the namespace, rename parent_device & parent_ops
    
    Add an mdev_ prefix so we're not poluting the namespace so much.
    
    Cc: Zhenyu Wang <zhenyuw@linux.intel.com>
    Cc: Zhi Wang <zhi.a.wang@intel.com>
    Cc: Jike Song <jike.song@intel.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>
    Reviewed by: Kirti Wankhede <kwankhede@nvidia.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
index d35097cbf3d7..0b72c2d9ee40 100644
--- a/drivers/vfio/mdev/mdev_private.h
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -19,7 +19,7 @@ void mdev_bus_unregister(void);
 struct mdev_type {
 	struct kobject kobj;
 	struct kobject *devices_kobj;
-	struct parent_device *parent;
+	struct mdev_parent *parent;
 	struct list_head next;
 	struct attribute_group *group;
 };
@@ -29,8 +29,8 @@ struct mdev_type {
 #define to_mdev_type(_kobj)		\
 	container_of(_kobj, struct mdev_type, kobj)
 
-int  parent_create_sysfs_files(struct parent_device *parent);
-void parent_remove_sysfs_files(struct parent_device *parent);
+int  parent_create_sysfs_files(struct mdev_parent *parent);
+void parent_remove_sysfs_files(struct mdev_parent *parent);
 
 int  mdev_create_sysfs_files(struct device *dev, struct mdev_type *type);
 void mdev_remove_sysfs_files(struct device *dev, struct mdev_type *type);

commit 7b96953bc640b6b25665fe17ffca4b668b371f14
Author: Kirti Wankhede <kwankhede@nvidia.com>
Date:   Thu Nov 17 02:16:13 2016 +0530

    vfio: Mediated device Core driver
    
    Design for Mediated Device Driver:
    Main purpose of this driver is to provide a common interface for mediated
    device management that can be used by different drivers of different
    devices.
    
    This module provides a generic interface to create the device, add it to
    mediated bus, add device to IOMMU group and then add it to vfio group.
    
    Below is the high Level block diagram, with Nvidia, Intel and IBM devices
    as example, since these are the devices which are going to actively use
    this module as of now.
    
     +---------------+
     |               |
     | +-----------+ |  mdev_register_driver() +--------------+
     | |           | +<------------------------+ __init()     |
     | |  mdev     | |                         |              |
     | |  bus      | +------------------------>+              |<-> VFIO user
     | |  driver   | |     probe()/remove()    | vfio_mdev.ko |    APIs
     | |           | |                         |              |
     | +-----------+ |                         +--------------+
     |               |
     |  MDEV CORE    |
     |   MODULE      |
     |   mdev.ko     |
     | +-----------+ |  mdev_register_device() +--------------+
     | |           | +<------------------------+              |
     | |           | |                         |  nvidia.ko   |<-> physical
     | |           | +------------------------>+              |    device
     | |           | |        callback         +--------------+
     | | Physical  | |
     | |  device   | |  mdev_register_device() +--------------+
     | | interface | |<------------------------+              |
     | |           | |                         |  i915.ko     |<-> physical
     | |           | +------------------------>+              |    device
     | |           | |        callback         +--------------+
     | |           | |
     | |           | |  mdev_register_device() +--------------+
     | |           | +<------------------------+              |
     | |           | |                         | ccw_device.ko|<-> physical
     | |           | +------------------------>+              |    device
     | |           | |        callback         +--------------+
     | +-----------+ |
     +---------------+
    
    Core driver provides two types of registration interfaces:
    1. Registration interface for mediated bus driver:
    
    /**
      * struct mdev_driver - Mediated device's driver
      * @name: driver name
      * @probe: called when new device created
      * @remove:called when device removed
      * @driver:device driver structure
      *
      **/
    struct mdev_driver {
             const char *name;
             int  (*probe)  (struct device *dev);
             void (*remove) (struct device *dev);
             struct device_driver    driver;
    };
    
    Mediated bus driver for mdev device should use this interface to register
    and unregister with core driver respectively:
    
    int  mdev_register_driver(struct mdev_driver *drv, struct module *owner);
    void mdev_unregister_driver(struct mdev_driver *drv);
    
    Mediated bus driver is responsible to add/delete mediated devices to/from
    VFIO group when devices are bound and unbound to the driver.
    
    2. Physical device driver interface
    This interface provides vendor driver the set APIs to manage physical
    device related work in its driver. APIs are :
    
    * dev_attr_groups: attributes of the parent device.
    * mdev_attr_groups: attributes of the mediated device.
    * supported_type_groups: attributes to define supported type. This is
                             mandatory field.
    * create: to allocate basic resources in vendor driver for a mediated
             device. This is mandatory to be provided by vendor driver.
    * remove: to free resources in vendor driver when mediated device is
             destroyed. This is mandatory to be provided by vendor driver.
    * open: open callback of mediated device
    * release: release callback of mediated device
    * read : read emulation callback.
    * write: write emulation callback.
    * ioctl: ioctl callback.
    * mmap: mmap emulation callback.
    
    Drivers should use these interfaces to register and unregister device to
    mdev core driver respectively:
    
    extern int  mdev_register_device(struct device *dev,
                                     const struct parent_ops *ops);
    extern void mdev_unregister_device(struct device *dev);
    
    There are no locks to serialize above callbacks in mdev driver and
    vfio_mdev driver. If required, vendor driver can have locks to serialize
    above APIs in their driver.
    
    Signed-off-by: Kirti Wankhede <kwankhede@nvidia.com>
    Signed-off-by: Neo Jia <cjia@nvidia.com>
    Reviewed-by: Jike Song <jike.song@intel.com>
    Reviewed-by: Dong Jia Shi <bjsdjshi@linux.vnet.ibm.com>
    Signed-off-by: Alex Williamson <alex.williamson@redhat.com>

diff --git a/drivers/vfio/mdev/mdev_private.h b/drivers/vfio/mdev/mdev_private.h
new file mode 100644
index 000000000000..d35097cbf3d7
--- /dev/null
+++ b/drivers/vfio/mdev/mdev_private.h
@@ -0,0 +1,41 @@
+/*
+ * Mediated device interal definitions
+ *
+ * Copyright (c) 2016, NVIDIA CORPORATION. All rights reserved.
+ *     Author: Neo Jia <cjia@nvidia.com>
+ *             Kirti Wankhede <kwankhede@nvidia.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef MDEV_PRIVATE_H
+#define MDEV_PRIVATE_H
+
+int  mdev_bus_register(void);
+void mdev_bus_unregister(void);
+
+struct mdev_type {
+	struct kobject kobj;
+	struct kobject *devices_kobj;
+	struct parent_device *parent;
+	struct list_head next;
+	struct attribute_group *group;
+};
+
+#define to_mdev_type_attr(_attr)	\
+	container_of(_attr, struct mdev_type_attribute, attr)
+#define to_mdev_type(_kobj)		\
+	container_of(_kobj, struct mdev_type, kobj)
+
+int  parent_create_sysfs_files(struct parent_device *parent);
+void parent_remove_sysfs_files(struct parent_device *parent);
+
+int  mdev_create_sysfs_files(struct device *dev, struct mdev_type *type);
+void mdev_remove_sysfs_files(struct device *dev, struct mdev_type *type);
+
+int  mdev_device_create(struct kobject *kobj, struct device *dev, uuid_le uuid);
+int  mdev_device_remove(struct device *dev, bool force_remove);
+
+#endif /* MDEV_PRIVATE_H */
