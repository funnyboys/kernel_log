commit 401fee8195d401b2b94dee57383f627050724d5b
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 12 09:02:02 2019 +0200

    platform/x86: asus-wmi: Only Tell EC the OS will handle display hotkeys from asus_nb_wmi
    
    Commit 78f3ac76d9e5 ("platform/x86: asus-wmi: Tell the EC the OS will
    handle the display off hotkey") causes the backlight to be permanently off
    on various EeePC laptop models using the eeepc-wmi driver (Asus EeePC
    1015BX, Asus EeePC 1025C).
    
    The asus_wmi_set_devstate(ASUS_WMI_DEVID_BACKLIGHT, 2, NULL) call added
    by that commit is made conditional in this commit and only enabled in
    the quirk_entry structs in the asus-nb-wmi driver fixing the broken
    display / backlight on various EeePC laptop models.
    
    Cc: João Paulo Rechi Vita <jprvita@endlessm.com>
    Fixes: 78f3ac76d9e5 ("platform/x86: asus-wmi: Tell the EC the OS will handle the display off hotkey")
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 0930be770688..4f31b68642a0 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -31,6 +31,7 @@ struct quirk_entry {
 	bool store_backlight_power;
 	bool wmi_backlight_power;
 	bool wmi_backlight_native;
+	bool wmi_backlight_set_devstate;
 	bool wmi_force_als_set;
 	int wapf;
 	/*

commit 1a59d1b8e05ea6ab45f7e18897de1ef0e6bc3da6
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:05 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 156
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version this program is distributed in the
      hope that it will be useful but without any warranty without even
      the implied warranty of merchantability or fitness for a particular
      purpose see the gnu general public license for more details you
      should have received a copy of the gnu general public license along
      with this program if not write to the free software foundation inc
      59 temple place suite 330 boston ma 02111 1307 usa
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 1334 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070033.113240726@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 6c1311f4b04d..0930be770688 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * Asus PC WMI hotkey driver
  *
@@ -8,20 +9,6 @@
  * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>
  * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>
  * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
 #ifndef _ASUS_WMI_H_

commit e9b615186805e2c18a0ac76aca62c1543ecfdbb8
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Fri Apr 28 16:19:49 2017 +0200

    platform/x86: asus-wmi: try to set als by default
    
    some laptops, for example ASUS UX330UAK, have brocken als_get function
    but working als_set funktion. In this case, ALS will stay turned off.
    
                 Method (WMNB, 3, Serialized)
                {
                ...
                   If (Local0 == 0x53545344)
                    {
                    ...
                        If (IIA0 == 0x00050001)
                        {
                            If (!ALSP)
                            {
                                Return (0x02)
                            }
    
                            Local0 = (GALS & 0x10)    <<<---- bug,
                                                        should be: (GALS () & 0x10)
                            If (Local0)
                            {
                                Return (0x00050001)
                            }
                            Else
                            {
                                Return (0x00050000)
                            }
                        }
    
                 .....
                    If (Local0 == 0x53564544)
                    {
                    ...
                        If (IIA0 == 0x00050001)
                        {
                            Return (ALSC (IIA1))
                        }
    
                      ......
                        Method (GALS, 0, NotSerialized)
                        {
                            Local0 = Zero
                            Local0 |= 0x20
                            If (ALAE)
                            {
                                Local0 |= 0x10
                            }
    
                            Local1 = 0x0A
                            Local1 <<= 0x08
                            Local0 |= Local1
                            Return (Local0)
                        }
    
    Since it works without problems on Windows I assume ASUS WMI driver for Win
    never trying to get ALS state, and instead it is setting it by default to ON.
    
    This patch will do the same. Turn ALS on by default.
    
    Signed-off-by: Oleksij Rempel <linux@rempel-privat.de>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index c9589d9342bb..6c1311f4b04d 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -44,6 +44,7 @@ struct quirk_entry {
 	bool store_backlight_power;
 	bool wmi_backlight_power;
 	bool wmi_backlight_native;
+	bool wmi_force_als_set;
 	int wapf;
 	/*
 	 * For machines with AMD graphic chips, it will send out WMI event

commit d1c4e9bf73e739b937ddd9dc4cf0f6de2e6117da
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Mon Feb 20 14:50:23 2017 -0500

    platform/x86: asus-wmi: Remove quirk_no_rfkill
    
    With the detection introduced in the previous patches, we don't need
    these static DMI-based quirks anymore.
    
    This reverts the following commits:
    56a37a72002b "asus-wmi: Add quirk_no_rfkill_wapf4 for the Asus X456UA"
    a961a285b479 "asus-wmi: Add quirk_no_rfkill_wapf4 for the Asus X456UF"
    6b7ff2af5286 "asus-wmi: Add quirk_no_rfkill for the Asus Z550MA"
    02db9ff7af18 "asus-wmi: Add quirk_no_rfkill for the Asus U303LB"
    2d735244b798 "asus-wmi: Add quirk_no_rfkill for the Asus N552VW"
    a977e59c0c67 "asus-wmi: Create quirk for airplane_mode LED"
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    [dvhart: minor commit message corrections]
    Signed-off-by: Darren Hart (VMware) <dvhart@infradead.org>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index fdff626c3b51..c9589d9342bb 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -39,7 +39,6 @@ struct key_entry;
 struct asus_wmi;
 
 struct quirk_entry {
-	bool no_rfkill;
 	bool hotplug_wireless;
 	bool scalar_panel_brightness;
 	bool store_backlight_power;

commit 8023eff10e7b0327898f17f0b553d2e45c71cef3
Author: Kai-Chuan Hsieh <kai.chiuan@gmail.com>
Date:   Thu Sep 1 23:55:55 2016 +0800

    platform/x86: asus-wmi: Set specified XUSB2PR value for X550LB
    
    The bluetooth adapter Atheros AR3012 can't be enumerated
    and make the bluetooth function broken.
    
    T:  Bus=02 Lev=01 Prnt=01 Port=05 Cnt=02 Dev#=  5 Spd=12  MxCh= 0
    D:  Ver= 1.10 Cls=e0(wlcon) Sub=01 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=13d3 ProdID=3362 Rev=00.02
    S:  Manufacturer=Atheros Communications
    S:  Product=Bluetooth USB Host Controller
    S:  SerialNumber=Alaska Day 2006
    C:  #Ifs= 2 Cfg#= 1 Atr=e0 MxPwr=100mA
    I:  If#= 0 Alt= 0 #EPs= 3 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    I:  If#= 1 Alt= 0 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    
    The error is:
    
     usb 2-6: device not accepting address 7, error -62
     usb usb2-port6: unable to enumerate USB device
    
    It is caused by adapter's connected port is mapped to xHC
    controller, but the xHCI is not supported by the usb device.
    
    The output of 'sudo lspci -nnxxx -s 00:14.0':
    
     00:14.0 USB controller [0c03]: Intel Corporation 8 Series USB xHCI HC [8086:9c31] (rev 04)
     00: 86 80 31 9c 06 04 90 02 04 30 03 0c 00 00 00 00
     10: 04 00 a0 f7 00 00 00 00 00 00 00 00 00 00 00 00
     20: 00 00 00 00 00 00 00 00 00 00 00 00 43 10 1f 20
     30: 00 00 00 00 70 00 00 00 00 00 00 00 0b 01 00 00
     40: fd 01 36 80 89 c6 0f 80 00 00 00 00 00 00 00 00
     50: 5f 2e ce 0f 00 00 00 00 00 00 00 00 00 00 00 00
     60: 30 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     70: 01 80 c2 c1 08 00 00 00 00 00 00 00 00 00 00 00
     80: 05 00 87 00 0c a0 e0 fe 00 00 00 00 a1 41 00 00
     90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     a0: 00 01 04 00 00 00 00 00 00 00 00 00 00 00 00 00
     b0: 0f 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00
     c0: 03 c0 30 00 00 00 00 00 03 0c 00 00 00 00 00 00
     d0: f9 01 00 00 f9 01 00 00 0f 00 00 00 0f 00 00 00
     e0: 00 08 00 00 00 00 00 00 00 00 00 00 d8 d8 00 00
     f0: 00 00 00 00 00 00 00 00 b1 0f 04 08 00 00 00 00
    
    By referencing Intel Platform Controller Hub(PCH) datasheet,
    the xHC USB 2.0 Port Routing(XUSB2PR) at offset 0xD0-0xD3h
    decides the setting of mapping the port to EHCI controller or
    xHC controller. And the port mapped to xHC will enable xHCI
    during bus resume.
    
    The setting of disabling bluetooth adapter's connected port is
    0x000001D9. The value can be obtained by few times 1 bit flip
    operation. The suited configuration should have the 'lsusb -t'
    result with bluetooth using ehci:
    
    /:  Bus 03.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/4p, 5000M
    /:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/9p, 480M
        |__ Port 5: Dev 2, If 0, Class=Video, Driver=uvcvideo, 480M
        |__ Port 5: Dev 2, If 1, Class=Video, Driver=uvcvideo, 480M
    /:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=ehci-pci/2p, 480M
        |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/8p, 480M
            |__ Port 6: Dev 3, If 0, Class=Wireless, Driver=btusb, 12M
            |__ Port 6: Dev 3, If 1, Class=Wireless, Driver=btusb, 12M
    
    Signed-off-by: Kai-Chuan Hsieh <kai.chiuan@gmail.com>
    Acked-by: Corentin Chary <corentin.chary@gmail.com>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    [andy: resolve merge conflict in asus-wmi.h]
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 0e19014e9f54..fdff626c3b51 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -53,6 +53,7 @@ struct quirk_entry {
 	 * and let the ACPI interrupt to send out the key event.
 	 */
 	int no_display_toggle;
+	u32 xusb2pr;
 
 	bool (*i8042_filter)(unsigned char data, unsigned char str,
 			     struct serio *serio);

commit b5643539b82559b858b8efe3fc8343f66cf9a0b5
Author: Oleksij Rempel <linux@rempel-privat.de>
Date:   Mon Sep 12 17:48:17 2016 +0200

    platform/x86: asus-wmi: Filter buggy scan codes on ASUS Q500A
    
    Some revisions of the ASUS Q500A series have a keyboard related
    issue which is reproducible only after Windows with installed ASUS
    tools is started.
    
    In this case the Linux side will have a blocked keyboard or
    report incorrect or incomplete hotkey events.
    
    To make Linux work properly again, a complete power down
    (unplug power supply and remove battery) is needed.
    
    Linux/atkbd after a clean start will get the following code on VOLUME_UP
    key: {0xe0, 0x30, 0xe0, 0xb0}. After Windows, the same key will generate
    this codes: {0xe1, 0x23, 0xe0, 0x30, 0xe0, 0xb0}. As result atkdb will
    be confused by buggy codes.
    
    This patch is filtering this buggy code out.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=119391
    
    Signed-off-by: Oleksij Rempel <linux@rempel-privat.de>
    Cc: Alex Henrie <alexhenrie24@gmail.com>
    Cc: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Cc: Corentin Chary <corentin.chary@gmail.com>
    Cc: acpi4asus-user@lists.sourceforge.net
    Cc: platform-driver-x86@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    
    [dvhart: Add return after pr_warn to avoid false confirmation of filter]
    
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 5e220411056d..0e19014e9f54 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -28,6 +28,7 @@
 #define _ASUS_WMI_H_
 
 #include <linux/platform_device.h>
+#include <linux/i8042.h>
 
 #define ASUS_WMI_KEY_IGNORE (-1)
 #define ASUS_WMI_BRN_DOWN	0x20
@@ -52,6 +53,9 @@ struct quirk_entry {
 	 * and let the ACPI interrupt to send out the key event.
 	 */
 	int no_display_toggle;
+
+	bool (*i8042_filter)(unsigned char data, unsigned char str,
+			     struct serio *serio);
 };
 
 struct asus_wmi_driver {

commit 999d4376c62828b260fbb59d5ab6bc28918ca448
Author: zino lin <linzino7@gmail.com>
Date:   Sun Aug 28 16:12:06 2016 +0800

    platform/x86: asus-wmi: fix asus ux303ub brightness issue
    
    acpi_video0 doesn't work, asus-wmi brightness interface doesn't work, too.
    So, we use native brightness interface to handle the brightness adjustion,
    and add quirk_asus_ux303ub.
    
    Signed-off-by: zino lin <linzino7@gmail.com>
    Acked-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 5de1df510ebd..5e220411056d 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -43,6 +43,7 @@ struct quirk_entry {
 	bool scalar_panel_brightness;
 	bool store_backlight_power;
 	bool wmi_backlight_power;
+	bool wmi_backlight_native;
 	int wapf;
 	/*
 	 * For machines with AMD graphic chips, it will send out WMI event

commit a977e59c0c67c9d492bb16677ce66d67cae0ebd8
Author: João Paulo Rechi Vita <jprvita@gmail.com>
Date:   Mon Jun 13 16:57:31 2016 -0400

    asus-wmi: Create quirk for airplane_mode LED
    
    Some Asus laptops that have an airplane-mode indicator LED, also have
    the WMI WLAN user bit set, and the following bits in their DSDT:
    
    Scope (_SB)
    {
      (...)
      Device (ATKD)
      {
        (...)
        Method (WMNB, 3, Serialized)
        {
          (...)
          If (LEqual (IIA0, 0x00010002))
          {
            OWGD (IIA1)
            Return (One)
          }
        }
      }
    }
    
    So when asus-wmi uses ASUS_WMI_DEVID_WLAN_LED (0x00010002) to store the
    wlan state, it drives the airplane-mode indicator LED (through the call
    to OWGD) in an inverted fashion: the LED is ON when airplane mode is OFF
    (since wlan is ON), and vice-versa.
    
    This commit creates a quirk to not register a RFKill switch at all for
    these laptops, to allow the asus-wireless driver to drive the airplane
    mode LED correctly through the ASHS ACPI device. It also adds a match to
    that quirk for the Asus X555UB, which is affected by this problem.
    
    Signed-off-by: João Paulo Rechi Vita <jprvita@endlessm.com>
    Reviewed-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Darren Hart <dvhart@linux.intel.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 4da4c8bafe70..5de1df510ebd 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -38,6 +38,7 @@ struct key_entry;
 struct asus_wmi;
 
 struct quirk_entry {
+	bool no_rfkill;
 	bool hotplug_wireless;
 	bool scalar_panel_brightness;
 	bool store_backlight_power;

commit 3ba0302bdd57d225b52c4b4b36975196c1572b3f
Author: Corentin Chary <corentin.chary@gmail.com>
Date:   Thu Nov 29 09:12:38 2012 +0100

    asus-wmi: always report brightness key events
    
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <matthew.garrett@nebula.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 776524c725de..4da4c8bafe70 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -30,6 +30,8 @@
 #include <linux/platform_device.h>
 
 #define ASUS_WMI_KEY_IGNORE (-1)
+#define ASUS_WMI_BRN_DOWN	0x20
+#define ASUS_WMI_BRN_UP		0x2f
 
 struct module;
 struct key_entry;

commit a2a96f0c7221806c8a8072b662e6deaa119833da
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Wed Oct 3 11:26:31 2012 +0200

    asus-wmi: add display toggle quirk
    
    For machines with AMD graphic chips, it will send out WMI event and ACPI
    interrupt at the same time while hitting the hotkey. BIOS will notify the
    system the next display output mode throught WMI event code, so that
    windows' application can show an OSD to tell the user which mode will be
    taken effect. User can hit the display toggle key many times within 2
    seconds to choose the mode they want. After 2 seconds, WMI dirver should
    send a WMIMethod(SDSP) command to tell the BIOS which mode the user chose.
    And then BIOS will raise another ACPI interrupt to tell the system to
    really switch the display mode.
    
    In Linux desktop, we don't have this kind of OSD to let users to choose
    the mode they want, so we don't need to call WMIMethod(SDSP) to have
    another ACPI interrupt. To simplify the problem, we just have to ignore
    the WMI event, and let the first ACPI interrupt to send out the key event.
    
    For the need, here comes another quirk to add machines with this kind of
    behavior. When the WMI driver receives the display toggle WMI event, and
    found the machin is in the list, it will do nothing and let ACPI video
    driver to report the key event.
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Corentin Chary <corentincj@iksaif.net>
    Signed-off-by: Matthew Garrett <matthew.garrett@nebula.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 4c9bd38bb0a2..776524c725de 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -41,6 +41,13 @@ struct quirk_entry {
 	bool store_backlight_power;
 	bool wmi_backlight_power;
 	int wapf;
+	/*
+	 * For machines with AMD graphic chips, it will send out WMI event
+	 * and ACPI interrupt at the same time while hitting the hotkey.
+	 * To simplify the problem, we just have to ignore the WMI event,
+	 * and let the ACPI interrupt to send out the key event.
+	 */
+	int no_display_toggle;
 };
 
 struct asus_wmi_driver {

commit a50bd128f28cf81c1250874fc53728e113f12957
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Thu Jul 26 17:13:31 2012 +0800

    asus-wmi: record wlan status while controlled by userapp
    
    If the user bit is set, that mean BIOS can't set and record the wlan
    status, it will report the value read from id ASUS_WMI_DEVID_WLAN_LED
    (0x00010012) while we query the wlan status by id ASUS_WMI_DEVID_WLAN
    (0x00010011) through WMI.
    So, we have to record wlan status in id ASUS_WMI_DEVID_WLAN_LED
    (0x00010012) while setting the wlan status through WMI.
    This is also the behavior that windows app will do.
    
    Quote from ASUS application engineer
    ===
    When you call WMIMethod(DSTS, 0x00010011) to get WLAN status, it may return
    
    (1) 0x00050001 (On)
    (2) 0x00050000 (Off)
    (3) 0x00030001 (On)
    (4) 0x00030000 (Off)
    (5) 0x00000002 (Unknown)
    
    (1), (2) means that the model has hardware GPIO for WLAN, you can call
    WMIMethod(DEVS, 0x00010011, 1 or 0) to turn WLAN on/off.
    (3), (4) means that the model doesn’t have hardware GPIO, you need to use
    API or driver library to turn WLAN on/off, and call
    WMIMethod(DEVS, 0x00010012, 1 or 0) to set WLAN LED status.
    After you set WLAN LED status, you can see the WLAN status is changed with
    WMIMethod(DSTS, 0x00010011). Because the status is recorded lastly
    (ex: Windows), you can use it for synchronization.
    (5) means that the model doesn’t have WLAN device.
    
    WLAN is the ONLY special case with upper rule.
    
    For other device, like Bluetooth, you just need use
    WMIMethod(DSTS, 0x00010013) to get, and WMIMethod(DEVS, 0x00010013, 1 or 0)
    to set.
    ===
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 9c1da8b81bea..4c9bd38bb0a2 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -46,6 +46,7 @@ struct quirk_entry {
 struct asus_wmi_driver {
 	int			brightness;
 	int			panel_power;
+	int			wlan_ctrl_by_user;
 
 	const char		*name;
 	struct module		*owner;

commit 272c77d55672ef92eda9d5e24a5a7ac62df9c431
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Wed Jun 13 09:32:06 2012 +0200

    asus-wmi: control backlight power through WMI, not ACPI
    
    BugLink: https://bugs.launchpad.net/bugs/1000146
    
    Some h/w that can adjust screen brightness through ACPI functions, but
    can't turn on/off the backlight power correctly. So, we list those h/w in
    quirks and try to turn on/off the backlight power through WMI.
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index d43b66742004..9c1da8b81bea 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -39,6 +39,7 @@ struct quirk_entry {
 	bool hotplug_wireless;
 	bool scalar_panel_brightness;
 	bool store_backlight_power;
+	bool wmi_backlight_power;
 	int wapf;
 };
 

commit 6a2bcccdb3206950d28e343476d9050e23e79b7e
Author: Corentin Chary <corentin.chary@gmail.com>
Date:   Tue Mar 20 09:53:10 2012 +0100

    asus-wmi: move WAPF variable into quirks_entry
    
    Some models work better with different values of wapf, so move the
    variable into quriks_entry to make it more easy to give a specific
    value to different models.
    
    Based on original patch from AceLan Kao <acelan.kao@canonical.com>
    
    Cc: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 35003e4f1316..d43b66742004 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -39,10 +39,10 @@ struct quirk_entry {
 	bool hotplug_wireless;
 	bool scalar_panel_brightness;
 	bool store_backlight_power;
+	int wapf;
 };
 
 struct asus_wmi_driver {
-	int			wapf;
 	int			brightness;
 	int			panel_power;
 

commit 6e0044bedc1fc94a61cc32fa25dcab9a4e4a9218
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Mar 20 09:53:09 2012 +0100

    asus-wmi: store backlight power status for AIO machine
    
    Due to some implementation reasons, ASUS ET2012 All-in-One machines
    can't report the correct backlight power status, it will always return
    1. To track the backlight power status correctly, we have to store the
    status by ourselves.
    
    BTW, by the BIOS design, the backlight power will be turn on/off
    sequently, no matter what the value of the parameter will be.
    More over, the brightness adjustment command will turn on the backlight
    power. Those behaviors will make us fail to track the backlight power
    status.
    For example, While we are trying to turn on the backlight power,
    we will send out the brightness adjustment command and then trying to
    figure out if we have to turn on the backlight power, then send out
    the command. But, the real case is that, the backlight power turns on
    while sending the brightness adjustment command, and then we send out
    the command to turn on the backlight power, it actually will turn off
    the backlight power and the backlight power status we recorded becomes
    wrong. So, we have to seperate these two commands by a if statement.
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index ac7dd4eaebd0..35003e4f1316 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -38,11 +38,13 @@ struct asus_wmi;
 struct quirk_entry {
 	bool hotplug_wireless;
 	bool scalar_panel_brightness;
+	bool store_backlight_power;
 };
 
 struct asus_wmi_driver {
 	int			wapf;
 	int			brightness;
+	int			panel_power;
 
 	const char		*name;
 	struct module		*owner;

commit c87992d1fa51a6a3d8f0e980ca4d2bdec7e78a17
Author: AceLan Kao <acelan.kao@canonical.com>
Date:   Tue Mar 20 09:53:08 2012 +0100

    asus-wmi: add scalar board brightness adj. support
    
    Some ASUS ET2012E/I All-in-One machines that use a scalar board
    to control the brightness, and they only accept brightness up and down
    command. So, I introduced a get_scalar_command() function to pass the
    command to the scalar board through WMI.
    
    Besides, we have to store the brightness value locally, for we need the
    old value to know the brightness value is increasing or decreasing.
    
    BTW, since there is no way to retrieve the actual brightness(it would be
    a fixed value), and the max brightness value would be fixed to 1, so we
    have to keep passing the brightness up/down command when we reached the
    max brightness value or 0.
    
    Signed-off-by: AceLan Kao <acelan.kao@canonical.com>
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 8147c10161cc..ac7dd4eaebd0 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -35,9 +35,14 @@ struct module;
 struct key_entry;
 struct asus_wmi;
 
+struct quirk_entry {
+	bool hotplug_wireless;
+	bool scalar_panel_brightness;
+};
+
 struct asus_wmi_driver {
-	bool			hotplug_wireless;
 	int			wapf;
+	int			brightness;
 
 	const char		*name;
 	struct module		*owner;
@@ -47,13 +52,14 @@ struct asus_wmi_driver {
 	const struct key_entry	*keymap;
 	const char		*input_name;
 	const char		*input_phys;
+	struct quirk_entry	*quirks;
 	/* Returns new code, value, and autorelease values in arguments.
 	 * Return ASUS_WMI_KEY_IGNORE in code if event should be ignored. */
 	void (*key_filter) (struct asus_wmi_driver *driver, int *code,
 			    unsigned int *value, bool *autorelease);
 
 	int (*probe) (struct platform_device *device);
-	void (*quirks) (struct asus_wmi_driver *driver);
+	void (*detect_quirks) (struct asus_wmi_driver *driver);
 
 	struct platform_driver	platform_driver;
 	struct platform_device *platform_device;

commit fddbfed595b307f9dddc7a86ddfbcbcb80141e28
Author: Corentin Chary <corentin.chary@gmail.com>
Date:   Fri Jul 1 11:34:39 2011 +0200

    asus-wmi: add CWAP support and clarify the meaning of WAPF bits
    
    ref: http://dev.iksaif.net/projects/3/wiki/Asus-laptop_WAPF
    
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index 4da61033bcb9..8147c10161cc 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -37,6 +37,7 @@ struct asus_wmi;
 
 struct asus_wmi_driver {
 	bool			hotplug_wireless;
+	int			wapf;
 
 	const char		*name;
 	struct module		*owner;

commit c4453f6a7ceff330ff37a9712ee8305fc3f8e9b6
Author: Seth Forshee <seth.forshee@canonical.com>
Date:   Fri Jul 1 11:34:27 2011 +0200

    asus-wmi: Add callback for hotkey filtering
    
    This is required for the T101MT home key, which behaves differently
    than other hotkeys.
    
    Signed-off-by: Seth Forshee <seth.forshee@canonical.com>
    Signed-off-by: Corentin Chary <corentin.chary@gmail.com>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
index c044522c8766..4da61033bcb9 100644
--- a/drivers/platform/x86/asus-wmi.h
+++ b/drivers/platform/x86/asus-wmi.h
@@ -29,6 +29,8 @@
 
 #include <linux/platform_device.h>
 
+#define ASUS_WMI_KEY_IGNORE (-1)
+
 struct module;
 struct key_entry;
 struct asus_wmi;
@@ -44,6 +46,10 @@ struct asus_wmi_driver {
 	const struct key_entry	*keymap;
 	const char		*input_name;
 	const char		*input_phys;
+	/* Returns new code, value, and autorelease values in arguments.
+	 * Return ASUS_WMI_KEY_IGNORE in code if event should be ignored. */
+	void (*key_filter) (struct asus_wmi_driver *driver, int *code,
+			    unsigned int *value, bool *autorelease);
 
 	int (*probe) (struct platform_device *device);
 	void (*quirks) (struct asus_wmi_driver *driver);

commit e12e6d94db24e9050821965aa75c95e8d2c65f10
Author: Corentin Chary <corentincj@iksaif.net>
Date:   Sat Feb 26 10:20:31 2011 +0100

    eeepc-wmi: asus generic asus-wmi.ko module
    
    New Asus notebooks are using a WMI device similar to
    the one used in Eee PCs. Since we don't want to load
    eeepc-wmi module on Asus notebooks, and we want to
    keep the eeepc-wmi module for backward compatibility,
    this patch introduce a new module, named asus-wmi, that
    will be used by eeepc-wmi and the new Asus Notebook WMI
    Driver.
    
    eeepc-wmi's input device strings (device name and phys)
    are kept, but rfkill and led names are changed (s/eeepc/asus/).
    This should not break anything since rfkill are used by type or
    index, not by name, and the eeepc::touchpad led wasn't working
    correctly before 2.6.39 anyway.
    
    Signed-off-by: Corentin Chary <corentincj@iksaif.net>
    Signed-off-by: Matthew Garrett <mjg@redhat.com>

diff --git a/drivers/platform/x86/asus-wmi.h b/drivers/platform/x86/asus-wmi.h
new file mode 100644
index 000000000000..c044522c8766
--- /dev/null
+++ b/drivers/platform/x86/asus-wmi.h
@@ -0,0 +1,58 @@
+/*
+ * Asus PC WMI hotkey driver
+ *
+ * Copyright(C) 2010 Intel Corporation.
+ * Copyright(C) 2010-2011 Corentin Chary <corentin.chary@gmail.com>
+ *
+ * Portions based on wistron_btns.c:
+ * Copyright (C) 2005 Miloslav Trmac <mitr@volny.cz>
+ * Copyright (C) 2005 Bernhard Rosenkraenzer <bero@arklinux.org>
+ * Copyright (C) 2005 Dmitry Torokhov <dtor@mail.ru>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef _ASUS_WMI_H_
+#define _ASUS_WMI_H_
+
+#include <linux/platform_device.h>
+
+struct module;
+struct key_entry;
+struct asus_wmi;
+
+struct asus_wmi_driver {
+	bool			hotplug_wireless;
+
+	const char		*name;
+	struct module		*owner;
+
+	const char		*event_guid;
+
+	const struct key_entry	*keymap;
+	const char		*input_name;
+	const char		*input_phys;
+
+	int (*probe) (struct platform_device *device);
+	void (*quirks) (struct asus_wmi_driver *driver);
+
+	struct platform_driver	platform_driver;
+	struct platform_device *platform_device;
+};
+
+int asus_wmi_register_driver(struct asus_wmi_driver *driver);
+void asus_wmi_unregister_driver(struct asus_wmi_driver *driver);
+
+#endif /* !_ASUS_WMI_H_ */
