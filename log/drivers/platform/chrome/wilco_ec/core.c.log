commit a532149c992eed9f8523d4ed5960b0068f213cd7
Author: Stephen Boyd <swboyd@chromium.org>
Date:   Tue Jan 21 16:40:32 2020 -0800

    platform/chrome: wilco_ec: Add newlines to printks
    
    printk messages all require newlines, or it looks very odd in the log
    when messages are not on different lines. Add them.
    
    Cc: Nick Crews <ncrews@chromium.org>
    Cc: Daniel Campello <campello@chromium.org>
    Cc: Enric Balletbo i Serra <enric.balletbo@collabora.com>
    Signed-off-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 2d5f027d8770..5b42992bff38 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -94,7 +94,7 @@ static int wilco_ec_probe(struct platform_device *pdev)
 
 	ret = wilco_ec_add_sysfs(ec);
 	if (ret < 0) {
-		dev_err(dev, "Failed to create sysfs entries: %d", ret);
+		dev_err(dev, "Failed to create sysfs entries: %d\n", ret);
 		goto unregister_rtc;
 	}
 

commit ffd7263e63fe80a39c1222a6d68e05095ed04d03
Author: Daniel Campello <campello@chromium.org>
Date:   Wed Jan 8 09:35:20 2020 -0700

    platform/chrome: wilco_ec: Fix unregistration order
    
    The unregistration should happen in the opposite order of
    the registration, so change it accordingly.
    
    No real issue has been noticed, but it is good practice to
    keep the correct unregistration order.
    
    Signed-off-by: Daniel Campello <campello@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 5210c357feef..2d5f027d8770 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -137,9 +137,9 @@ static int wilco_ec_remove(struct platform_device *pdev)
 {
 	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
 
+	platform_device_unregister(ec->telem_pdev);
 	platform_device_unregister(ec->charger_pdev);
 	wilco_ec_remove_sysfs(ec);
-	platform_device_unregister(ec->telem_pdev);
 	platform_device_unregister(ec->rtc_pdev);
 	if (ec->debugfs_pdev)
 		platform_device_unregister(ec->debugfs_pdev);

commit 119a3cb6d687259f2be333351c1c5d634204e68b
Author: Daniel Campello <campello@chromium.org>
Date:   Wed Nov 6 09:33:19 2019 -0700

    platform/chrome: wilco_ec: Add keyboard backlight LED support
    
    The EC is in charge of controlling the keyboard backlight on
    the Wilco platform. We expose a standard LED class device
    named platform::kbd_backlight.
    
    Since the EC will never change the backlight level of its own accord,
    we don't need to implement a brightness_get() method.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Signed-off-by: Daniel Campello <campello@chromium.org>
    Reviewed-by: Daniel Campello <campello@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 9a438ebae3ed..5210c357feef 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -5,10 +5,6 @@
  * Copyright 2018 Google LLC
  *
  * This is the entry point for the drivers that control the Wilco EC.
- * This driver is responsible for several tasks:
- * - Initialize the register interface that is used by wilco_ec_mailbox()
- * - Create a platform device which is picked up by the debugfs driver
- * - Create a platform device which is picked up by the RTC driver
  */
 
 #include <linux/acpi.h>
@@ -87,6 +83,15 @@ static int wilco_ec_probe(struct platform_device *pdev)
 		goto unregister_debugfs;
 	}
 
+	/* Set up the keyboard backlight LEDs. */
+	ret = wilco_keyboard_leds_init(ec);
+	if (ret < 0) {
+		dev_err(dev,
+			"Failed to initialize keyboard LEDs: %d\n",
+			ret);
+		goto unregister_rtc;
+	}
+
 	ret = wilco_ec_add_sysfs(ec);
 	if (ret < 0) {
 		dev_err(dev, "Failed to create sysfs entries: %d", ret);

commit 3c4d77b68928df6c2bf07f4c3ba8e5d5e490bf4e
Author: Nick Crews <ncrews@chromium.org>
Date:   Thu Oct 24 16:28:05 2019 -0600

    platform/chrome: wilco_ec: Add charging config driver
    
    Add a device to control the charging algorithm used on Wilco devices,
    which will be picked up by the drivers/power/supply/wilco-charger.c
    driver. See Documentation/ABI/testing/sysfs-class-power-wilco for the
    userspace interface and other info.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 3724bf4b77c6..9a438ebae3ed 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -93,6 +93,16 @@ static int wilco_ec_probe(struct platform_device *pdev)
 		goto unregister_rtc;
 	}
 
+	/* Register child device to be found by charger config driver. */
+	ec->charger_pdev = platform_device_register_data(dev, "wilco-charger",
+							 PLATFORM_DEVID_AUTO,
+							 NULL, 0);
+	if (IS_ERR(ec->charger_pdev)) {
+		dev_err(dev, "Failed to create charger platform device\n");
+		ret = PTR_ERR(ec->charger_pdev);
+		goto remove_sysfs;
+	}
+
 	/* Register child device that will be found by the telemetry driver. */
 	ec->telem_pdev = platform_device_register_data(dev, "wilco_telem",
 						       PLATFORM_DEVID_AUTO,
@@ -100,11 +110,13 @@ static int wilco_ec_probe(struct platform_device *pdev)
 	if (IS_ERR(ec->telem_pdev)) {
 		dev_err(dev, "Failed to create telemetry platform device\n");
 		ret = PTR_ERR(ec->telem_pdev);
-		goto remove_sysfs;
+		goto unregister_charge_config;
 	}
 
 	return 0;
 
+unregister_charge_config:
+	platform_device_unregister(ec->charger_pdev);
 remove_sysfs:
 	wilco_ec_remove_sysfs(ec);
 unregister_rtc:
@@ -120,6 +132,7 @@ static int wilco_ec_remove(struct platform_device *pdev)
 {
 	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
 
+	platform_device_unregister(ec->charger_pdev);
 	wilco_ec_remove_sysfs(ec);
 	platform_device_unregister(ec->telem_pdev);
 	platform_device_unregister(ec->rtc_pdev);

commit 1210d1e6bad1e7ccccb19627b880a50d7c15dd51
Author: Nick Crews <ncrews@chromium.org>
Date:   Tue May 21 13:20:45 2019 -0600

    platform/chrome: wilco_ec: Add telemetry char device interface
    
    The Wilco Embedded Controller is able to send telemetry data
    which is useful for enterprise applications. A daemon running on
    the OS sends a command to the EC via a write() to a char device,
    and can read the response with a read(). The write() request is
    verified by the driver to ensure that it is performing only one
    of the whitelisted commands, and that no extraneous data is
    being transmitted to the EC. The response is passed directly
    back to the reader with no modification.
    
    The character device will appear as /dev/wilco_telemN, where N
    is some small non-negative integer, starting with 0. Only one
    process may have the file descriptor open at a time. The calling
    userspace program needs to keep the device file descriptor open
    between the calls to write() and read() in order to preserve the
    response. Up to 32 bytes will be available for reading.
    
    For testing purposes, try requesting the EC's firmware build
    date, by sending the WILCO_EC_TELEM_GET_VERSION command with
    argument index=3. i.e. write [0x38, 0x00, 0x03]
    to the device node. An ASCII string of the build date is
    returned.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 45cf3a5ed062..3724bf4b77c6 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -93,8 +93,20 @@ static int wilco_ec_probe(struct platform_device *pdev)
 		goto unregister_rtc;
 	}
 
+	/* Register child device that will be found by the telemetry driver. */
+	ec->telem_pdev = platform_device_register_data(dev, "wilco_telem",
+						       PLATFORM_DEVID_AUTO,
+						       ec, sizeof(*ec));
+	if (IS_ERR(ec->telem_pdev)) {
+		dev_err(dev, "Failed to create telemetry platform device\n");
+		ret = PTR_ERR(ec->telem_pdev);
+		goto remove_sysfs;
+	}
+
 	return 0;
 
+remove_sysfs:
+	wilco_ec_remove_sysfs(ec);
 unregister_rtc:
 	platform_device_unregister(ec->rtc_pdev);
 unregister_debugfs:
@@ -109,6 +121,7 @@ static int wilco_ec_remove(struct platform_device *pdev)
 	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
 
 	wilco_ec_remove_sysfs(ec);
+	platform_device_unregister(ec->telem_pdev);
 	platform_device_unregister(ec->rtc_pdev);
 	if (ec->debugfs_pdev)
 		platform_device_unregister(ec->debugfs_pdev);

commit 2ad1f7a91449de48d4bd5d1ec361ba7bb9026505
Author: Nick Crews <ncrews@chromium.org>
Date:   Wed May 8 15:38:09 2019 -0600

    platform/chrome: wilco_ec: Remove 256 byte transfers
    
    The 0xF6 command, intended to send and receive 256 byte payloads to
    and from the EC, is not needed. The 0xF5 command for 32 byte
    payloads is sufficient. This patch removes support for the 0xF6
    command and 256 byte payloads.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index abd15d04e57b..45cf3a5ed062 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -52,9 +52,7 @@ static int wilco_ec_probe(struct platform_device *pdev)
 	ec->dev = dev;
 	mutex_init(&ec->mailbox_lock);
 
-	/* Largest data buffer size requirement is extended data response */
-	ec->data_size = sizeof(struct wilco_ec_response) +
-		EC_MAILBOX_DATA_SIZE_EXTENDED;
+	ec->data_size = sizeof(struct wilco_ec_response) + EC_MAILBOX_DATA_SIZE;
 	ec->data_buffer = devm_kzalloc(dev, ec->data_size, GFP_KERNEL);
 	if (!ec->data_buffer)
 		return -ENOMEM;

commit 4c1ca625c622b7a9f04c2949fd1ffdc6effa86de
Author: Nick Crews <ncrews@chromium.org>
Date:   Tue Apr 16 19:20:47 2019 -0600

    platform/chrome: wilco_ec: Add Boot on AC support
    
    Boot on AC is a policy which makes the device boot from S5 when AC
    power is connected. This is useful for users who want to run their
    device headless or with a dock.
    
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 05e1e2be1c91..abd15d04e57b 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -89,8 +89,16 @@ static int wilco_ec_probe(struct platform_device *pdev)
 		goto unregister_debugfs;
 	}
 
+	ret = wilco_ec_add_sysfs(ec);
+	if (ret < 0) {
+		dev_err(dev, "Failed to create sysfs entries: %d", ret);
+		goto unregister_rtc;
+	}
+
 	return 0;
 
+unregister_rtc:
+	platform_device_unregister(ec->rtc_pdev);
 unregister_debugfs:
 	if (ec->debugfs_pdev)
 		platform_device_unregister(ec->debugfs_pdev);
@@ -102,6 +110,7 @@ static int wilco_ec_remove(struct platform_device *pdev)
 {
 	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
 
+	wilco_ec_remove_sysfs(ec);
 	platform_device_unregister(ec->rtc_pdev);
 	if (ec->debugfs_pdev)
 		platform_device_unregister(ec->debugfs_pdev);

commit 0d2f2a3da1f2a9ebeb66bb03073dd149fccf1bdd
Author: Nick Crews <ncrews@chromium.org>
Date:   Fri Feb 8 17:37:19 2019 -0700

    platform/chrome: wilco_ec: Add RTC driver
    
    This Embedded Controller has an internal RTC that is exposed
    as a standard RTC class driver with read/write functionality.
    
    The driver is added to the drivers/rtc/ so that the maintainer of that
    directory will be able to comment on this change, as that maintainer is
    the expert on this system. In addition, the driver code is called
    indirectly after a corresponding device is registered from core.c,
    as opposed to core.c registering the driver callbacks directly.
    
    To test:
    > hwclock --show --rtc /dev/rtc1
    2007-12-31 16:01:20.460959-08:00
    > hwclock --systohc --rtc /dev/rtc1
    > hwclock --show --rtc /dev/rtc1
    2018-11-29 17:08:00.780793-08:00
    
    > hwclock --show --rtc /dev/rtc1
    2007-12-31 16:01:20.460959-08:00
    > hwclock --systohc --rtc /dev/rtc1
    > hwclock --show --rtc /dev/rtc1
    2018-11-29 17:08:00.780793-08:00
    
    Signed-off-by: Duncan Laurie <dlaurie@google.com>
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    Acked-by: Alexandre Belloni <alexandre.belloni@bootlin.com>
    [Fix the sparse warning: symbol 'wilco_ec_rtc_read/write' was not declared]
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index af5fd288b63b..05e1e2be1c91 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -42,6 +42,7 @@ static int wilco_ec_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
 	struct wilco_ec_device *ec;
+	int ret;
 
 	ec = devm_kzalloc(dev, sizeof(*ec), GFP_KERNEL);
 	if (!ec)
@@ -78,13 +79,30 @@ static int wilco_ec_probe(struct platform_device *pdev)
 							 PLATFORM_DEVID_AUTO,
 							 NULL, 0);
 
+	/* Register a child device that will be found by the RTC driver. */
+	ec->rtc_pdev = platform_device_register_data(dev, "rtc-wilco-ec",
+						     PLATFORM_DEVID_AUTO,
+						     NULL, 0);
+	if (IS_ERR(ec->rtc_pdev)) {
+		dev_err(dev, "Failed to create RTC platform device\n");
+		ret = PTR_ERR(ec->rtc_pdev);
+		goto unregister_debugfs;
+	}
+
 	return 0;
+
+unregister_debugfs:
+	if (ec->debugfs_pdev)
+		platform_device_unregister(ec->debugfs_pdev);
+	cros_ec_lpc_mec_destroy();
+	return ret;
 }
 
 static int wilco_ec_remove(struct platform_device *pdev)
 {
 	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
 
+	platform_device_unregister(ec->rtc_pdev);
 	if (ec->debugfs_pdev)
 		platform_device_unregister(ec->debugfs_pdev);
 

commit b787bb126cbcd73754bcbc055ae9f804ac576e4a
Author: Nick Crews <ncrews@chromium.org>
Date:   Fri Feb 8 17:37:18 2019 -0700

    platform/chrome: wilco_ec: Add support for raw commands in debugfs
    
    Add a debugfs attribute that allows sending raw commands to the EC.
    This is useful for development and debug but should not be enabled
    in a production environment.
    
    To test:
    Get the EC firmware build date
    First send the request command
    > echo 00 f0 38 00 03 00 > raw
    Then read the result. "12/21/18" is in the middle of the response
    > cat raw
    00 31 32 2f 32 31 2f 31 38 00 00 0f 01 00 01 00  .12/21/18.......
    
    Get the EC firmware build date
    First send the request command
    > echo 00 f0 38 00 03 00 > raw
    Then read the result. "12/21/18" is in the middle of the response
    > cat raw
    00 31 32 2f 32 31 2f 31 38 00 00 0f 01 00 01 00  .12/21/18.......
    
    Signed-off-by: Duncan Laurie <dlaurie@google.com>
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    [Fix off-by-one error in wilco_ec/debugfs.c]
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
index 20ecc580d108..af5fd288b63b 100644
--- a/drivers/platform/chrome/wilco_ec/core.c
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -69,11 +69,25 @@ static int wilco_ec_probe(struct platform_device *pdev)
 	cros_ec_lpc_mec_init(ec->io_packet->start,
 			     ec->io_packet->start + EC_MAILBOX_DATA_SIZE);
 
+	/*
+	 * Register a child device that will be found by the debugfs driver.
+	 * Ignore failure.
+	 */
+	ec->debugfs_pdev = platform_device_register_data(dev,
+							 "wilco-ec-debugfs",
+							 PLATFORM_DEVID_AUTO,
+							 NULL, 0);
+
 	return 0;
 }
 
 static int wilco_ec_remove(struct platform_device *pdev)
 {
+	struct wilco_ec_device *ec = platform_get_drvdata(pdev);
+
+	if (ec->debugfs_pdev)
+		platform_device_unregister(ec->debugfs_pdev);
+
 	/* Teardown cros_ec interface */
 	cros_ec_lpc_mec_destroy();
 

commit 7b3d4f44abf0e7a1ba762c8a9c99a8b39ee0c8b1
Author: Nick Crews <ncrews@chromium.org>
Date:   Fri Feb 8 17:37:17 2019 -0700

    platform/chrome: Add new driver for Wilco EC
    
    This EC is an incompatible variant of the typical Chrome OS embedded
    controller.  It uses the same low-level communication and a similar
    protocol with some significant differences.  The EC firmware does
    not support the same mailbox commands so it is not registered as a
    cros_ec device type.  This commit exports the wilco_ec_mailbox()
    function so that other modules can use it to communicate with the EC.
    
    Signed-off-by: Duncan Laurie <dlaurie@google.com>
    Signed-off-by: Nick Crews <ncrews@chromium.org>
    [Fix the sparse warning: symbol 'wilco_ec_transfer' was not declared]
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    [Fix Kconfig dependencies for wilco_ec]
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Enric Balletbo i Serra <enric.balletbo@collabora.com>

diff --git a/drivers/platform/chrome/wilco_ec/core.c b/drivers/platform/chrome/wilco_ec/core.c
new file mode 100644
index 000000000000..20ecc580d108
--- /dev/null
+++ b/drivers/platform/chrome/wilco_ec/core.c
@@ -0,0 +1,104 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Core driver for Wilco Embedded Controller
+ *
+ * Copyright 2018 Google LLC
+ *
+ * This is the entry point for the drivers that control the Wilco EC.
+ * This driver is responsible for several tasks:
+ * - Initialize the register interface that is used by wilco_ec_mailbox()
+ * - Create a platform device which is picked up by the debugfs driver
+ * - Create a platform device which is picked up by the RTC driver
+ */
+
+#include <linux/acpi.h>
+#include <linux/device.h>
+#include <linux/ioport.h>
+#include <linux/module.h>
+#include <linux/platform_data/wilco-ec.h>
+#include <linux/platform_device.h>
+
+#include "../cros_ec_lpc_mec.h"
+
+#define DRV_NAME "wilco-ec"
+
+static struct resource *wilco_get_resource(struct platform_device *pdev,
+					   int index)
+{
+	struct device *dev = &pdev->dev;
+	struct resource *res;
+
+	res = platform_get_resource(pdev, IORESOURCE_IO, index);
+	if (!res) {
+		dev_dbg(dev, "Couldn't find IO resource %d\n", index);
+		return res;
+	}
+
+	return devm_request_region(dev, res->start, resource_size(res),
+				   dev_name(dev));
+}
+
+static int wilco_ec_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct wilco_ec_device *ec;
+
+	ec = devm_kzalloc(dev, sizeof(*ec), GFP_KERNEL);
+	if (!ec)
+		return -ENOMEM;
+
+	platform_set_drvdata(pdev, ec);
+	ec->dev = dev;
+	mutex_init(&ec->mailbox_lock);
+
+	/* Largest data buffer size requirement is extended data response */
+	ec->data_size = sizeof(struct wilco_ec_response) +
+		EC_MAILBOX_DATA_SIZE_EXTENDED;
+	ec->data_buffer = devm_kzalloc(dev, ec->data_size, GFP_KERNEL);
+	if (!ec->data_buffer)
+		return -ENOMEM;
+
+	/* Prepare access to IO regions provided by ACPI */
+	ec->io_data = wilco_get_resource(pdev, 0);	/* Host Data */
+	ec->io_command = wilco_get_resource(pdev, 1);	/* Host Command */
+	ec->io_packet = wilco_get_resource(pdev, 2);	/* MEC EMI */
+	if (!ec->io_data || !ec->io_command || !ec->io_packet)
+		return -ENODEV;
+
+	/* Initialize cros_ec register interface for communication */
+	cros_ec_lpc_mec_init(ec->io_packet->start,
+			     ec->io_packet->start + EC_MAILBOX_DATA_SIZE);
+
+	return 0;
+}
+
+static int wilco_ec_remove(struct platform_device *pdev)
+{
+	/* Teardown cros_ec interface */
+	cros_ec_lpc_mec_destroy();
+
+	return 0;
+}
+
+static const struct acpi_device_id wilco_ec_acpi_device_ids[] = {
+	{ "GOOG000C", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(acpi, wilco_ec_acpi_device_ids);
+
+static struct platform_driver wilco_ec_driver = {
+	.driver = {
+		.name = DRV_NAME,
+		.acpi_match_table = wilco_ec_acpi_device_ids,
+	},
+	.probe = wilco_ec_probe,
+	.remove = wilco_ec_remove,
+};
+
+module_platform_driver(wilco_ec_driver);
+
+MODULE_AUTHOR("Nick Crews <ncrews@chromium.org>");
+MODULE_AUTHOR("Duncan Laurie <dlaurie@chromium.org>");
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("ChromeOS Wilco Embedded Controller driver");
+MODULE_ALIAS("platform:" DRV_NAME);
