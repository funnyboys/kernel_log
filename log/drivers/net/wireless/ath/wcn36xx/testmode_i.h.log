commit 87f825e6e246cee0cdeaafd5bba4ef8c6df2748d
Author: Eyal Ilsar <eilsar@codeaurora.org>
Date:   Tue May 22 22:02:56 2018 +0300

    wcn36xx: Add support for Factory Test Mode (FTM)
    
    Introduce infrastructure for supporting Factory Test Mode (FTM) of the
    wireless LAN subsystem. In order for the user space to access the
    firmware in test mode the relevant netlink channel needs to be exposed
    from the kernel driver.
    
    The above is achieved as follows:
    1) Register wcn36xx driver to testmode callback from netlink
    2) Add testmode callback implementation to handle incoming FTM commands
    3) Add FTM command packet structure
    4) Add handling for GET_BUILD_RELEASE_NUMBER (msgid=0x32A2)
    5) Add generic handling for all PTT_MSG packets
    
    Signed-off-by: Eyal Ilsar <eilsar@codeaurora.org>
    Signed-off-by: Ramon Fried <ramon.fried@linaro.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

diff --git a/drivers/net/wireless/ath/wcn36xx/testmode_i.h b/drivers/net/wireless/ath/wcn36xx/testmode_i.h
new file mode 100644
index 000000000000..8a1477ffd5a0
--- /dev/null
+++ b/drivers/net/wireless/ath/wcn36xx/testmode_i.h
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2018, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
+ * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
+ * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
+ * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#define WCN36XX_TM_DATA_MAX_LEN		5000
+
+enum wcn36xx_tm_attr {
+	__WCN36XX_TM_ATTR_INVALID	= 0,
+	WCN36XX_TM_ATTR_CMD		= 1,
+	WCN36XX_TM_ATTR_DATA		= 2,
+
+	/* keep last */
+	__WCN36XX_TM_ATTR_AFTER_LAST,
+	WCN36XX_TM_ATTR_MAX		= __WCN36XX_TM_ATTR_AFTER_LAST - 1,
+};
+
+#define WCN36XX_TM_CMD_PTT 3
