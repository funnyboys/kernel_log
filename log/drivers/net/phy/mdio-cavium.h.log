commit 9aab906a9adc292f2bb7eccfd0b1c0aa862296ca
Author: Nishad Kamdar <nishadkamdar@gmail.com>
Date:   Wed Nov 27 18:49:08 2019 +0530

    net: phy: Use the correct style for SPDX License Identifier
    
    This patch corrects the SPDX License Identifier style in
    header files related to PHY Layer for Ethernet drivers.
    For C header files Documentation/process/license-rules.rst
    mandates C-like comments (opposed to C source files where
    C++ style should be used). This patch also gives an explicit
    block comment to the SPDX License Identifier.
    
    Changes made by using a script provided by Joe Perches here:
    https://lkml.org/lkml/2019/2/7/46.
    
    Suggested-by: Joe Perches <joe@perches.com>
    Signed-off-by: Nishad Kamdar <nishadkamdar@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/phy/mdio-cavium.h b/drivers/net/phy/mdio-cavium.h
index b7f89ad27465..e33d3ea9a907 100644
--- a/drivers/net/phy/mdio-cavium.h
+++ b/drivers/net/phy/mdio-cavium.h
@@ -1,4 +1,4 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  * Copyright (C) 2009-2016 Cavium, Inc.
  */

commit b8fb640643fcdb3bca84137c4cec0c649b25e056
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri Aug 2 23:01:56 2019 -0700

    net: mdio-octeon: Fix Kconfig warnings and build errors
    
    After commit 171a9bae68c7 ("staging/octeon: Allow test build on
    !MIPS"), the following combination of configs cause a few Kconfig
    warnings and build errors (distilled from arm allyesconfig and Randy's
    randconfig builds):
    
        CONFIG_NETDEVICES=y
        CONFIG_STAGING=y
        CONFIG_COMPILE_TEST=y
    
    and CONFIG_OCTEON_ETHERNET as either a module or built-in.
    
    WARNING: unmet direct dependencies detected for MDIO_OCTEON
      Depends on [n]: NETDEVICES [=y] && MDIO_DEVICE [=y] && MDIO_BUS [=y]
    && 64BIT [=n] && HAS_IOMEM [=y] && OF_MDIO [=n]
      Selected by [y]:
      - OCTEON_ETHERNET [=y] && STAGING [=y] && (CAVIUM_OCTEON_SOC ||
    COMPILE_TEST [=y]) && NETDEVICES [=y]
    
    In file included from ../drivers/net/phy/mdio-octeon.c:14:
    ../drivers/net/phy/mdio-cavium.h:111:36: error: implicit declaration of
    function ‘writeq’; did you mean ‘writel’?
    [-Werror=implicit-function-declaration]
      111 | #define oct_mdio_writeq(val, addr) writeq(val, (void *)addr)
          |                                    ^~~~~~
    
    CONFIG_64BIT is not strictly necessary if the proper readq/writeq
    definitions are included from io-64-nonatomic-lo-hi.h.
    
    CONFIG_OF_MDIO is not needed when CONFIG_COMPILE_TEST is enabled because
    of commit f9dc9ac51610 ("of/mdio: Add dummy functions in of_mdio.h.").
    
    Fixes: 171a9bae68c7 ("staging/octeon: Allow test build on !MIPS")
    Reported-by: kbuild test robot <lkp@intel.com>
    Reported-by: Mark Brown <broonie@kernel.org>
    Reported-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org> # build-tested
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/phy/mdio-cavium.h b/drivers/net/phy/mdio-cavium.h
index ed5f9bb5448d..b7f89ad27465 100644
--- a/drivers/net/phy/mdio-cavium.h
+++ b/drivers/net/phy/mdio-cavium.h
@@ -108,6 +108,8 @@ static inline u64 oct_mdio_readq(u64 addr)
 	return cvmx_read_csr(addr);
 }
 #else
+#include <linux/io-64-nonatomic-lo-hi.h>
+
 #define oct_mdio_writeq(val, addr)	writeq(val, (void *)addr)
 #define oct_mdio_readq(addr)		readq((void *)addr)
 #endif

commit 8bbe833a65209632f96931415070bc3a490f2dc9
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Mon Jan 21 19:34:53 2019 +0100

    net: phy: Add SDPX tag based on COPYING file
    
    Some of the PHY and MDIO drivers refer to the COPYING file in the main
    directory of this archive. This is the main license for Linux, thus
    GPLv2 plus syscall extension.
    
    Fixup the MODULE_LICENSE() where needed and add an SDPX header for
    GPLv2.
    
    Cc: David Daney <david.daney@cavium.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/phy/mdio-cavium.h b/drivers/net/phy/mdio-cavium.h
index 4bccd45d24e2..ed5f9bb5448d 100644
--- a/drivers/net/phy/mdio-cavium.h
+++ b/drivers/net/phy/mdio-cavium.h
@@ -1,8 +1,5 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
- * This file is subject to the terms and conditions of the GNU General Public
- * License.  See the file "COPYING" in the main directory of this archive
- * for more details.
- *
  * Copyright (C) 2009-2016 Cavium, Inc.
  */
 

commit 1eefee901fca0208b8a56f20cdc134e2b8638ae7
Author: David Daney <david.daney@cavium.com>
Date:   Fri Mar 11 09:53:10 2016 -0800

    phy: mdio-octeon: Refactor into two files/modules
    
    A follow-on patch uses PCI probing to find the Thunder MDIO hardware.
    In preparation for this, split out the common code into a new file
    mdio-cavium.c, which will be used by both the existing OCTEON driver,
    and the new Thunder PCI based driver.
    
    As part of the refactoring simplify the struct cavium_mdiobus by
    removing fields that are only ever used in the probe function and can
    just as well be local variables.
    
    Use readq/writeq in preference to readq_relaxed/writeq_relaxed as the
    relaxed form was an optimization for an early chip revision, and the
    MDIO drivers are not performance bottlenecks that need optimization in
    the first place.
    
    Signed-off-by: David Daney <david.daney@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/phy/mdio-cavium.h b/drivers/net/phy/mdio-cavium.h
new file mode 100644
index 000000000000..4bccd45d24e2
--- /dev/null
+++ b/drivers/net/phy/mdio-cavium.h
@@ -0,0 +1,119 @@
+/*
+ * This file is subject to the terms and conditions of the GNU General Public
+ * License.  See the file "COPYING" in the main directory of this archive
+ * for more details.
+ *
+ * Copyright (C) 2009-2016 Cavium, Inc.
+ */
+
+enum cavium_mdiobus_mode {
+	UNINIT = 0,
+	C22,
+	C45
+};
+
+#define SMI_CMD		0x0
+#define SMI_WR_DAT	0x8
+#define SMI_RD_DAT	0x10
+#define SMI_CLK		0x18
+#define SMI_EN		0x20
+
+#ifdef __BIG_ENDIAN_BITFIELD
+#define OCT_MDIO_BITFIELD_FIELD(field, more)	\
+	field;					\
+	more
+
+#else
+#define OCT_MDIO_BITFIELD_FIELD(field, more)	\
+	more					\
+	field;
+
+#endif
+
+union cvmx_smix_clk {
+	u64 u64;
+	struct cvmx_smix_clk_s {
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_25_63:39,
+	  OCT_MDIO_BITFIELD_FIELD(u64 mode:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_21_23:3,
+	  OCT_MDIO_BITFIELD_FIELD(u64 sample_hi:5,
+	  OCT_MDIO_BITFIELD_FIELD(u64 sample_mode:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_14_14:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 clk_idle:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 preamble:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 sample:4,
+	  OCT_MDIO_BITFIELD_FIELD(u64 phase:8,
+	  ;))))))))))
+	} s;
+};
+
+union cvmx_smix_cmd {
+	u64 u64;
+	struct cvmx_smix_cmd_s {
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_18_63:46,
+	  OCT_MDIO_BITFIELD_FIELD(u64 phy_op:2,
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_13_15:3,
+	  OCT_MDIO_BITFIELD_FIELD(u64 phy_adr:5,
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_5_7:3,
+	  OCT_MDIO_BITFIELD_FIELD(u64 reg_adr:5,
+	  ;))))))
+	} s;
+};
+
+union cvmx_smix_en {
+	u64 u64;
+	struct cvmx_smix_en_s {
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_1_63:63,
+	  OCT_MDIO_BITFIELD_FIELD(u64 en:1,
+	  ;))
+	} s;
+};
+
+union cvmx_smix_rd_dat {
+	u64 u64;
+	struct cvmx_smix_rd_dat_s {
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_18_63:46,
+	  OCT_MDIO_BITFIELD_FIELD(u64 pending:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 val:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 dat:16,
+	  ;))))
+	} s;
+};
+
+union cvmx_smix_wr_dat {
+	u64 u64;
+	struct cvmx_smix_wr_dat_s {
+	  OCT_MDIO_BITFIELD_FIELD(u64 reserved_18_63:46,
+	  OCT_MDIO_BITFIELD_FIELD(u64 pending:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 val:1,
+	  OCT_MDIO_BITFIELD_FIELD(u64 dat:16,
+	  ;))))
+	} s;
+};
+
+struct cavium_mdiobus {
+	struct mii_bus *mii_bus;
+	u64 register_base;
+	enum cavium_mdiobus_mode mode;
+};
+
+#ifdef CONFIG_CAVIUM_OCTEON_SOC
+
+#include <asm/octeon/octeon.h>
+
+static inline void oct_mdio_writeq(u64 val, u64 addr)
+{
+	cvmx_write_csr(addr, val);
+}
+
+static inline u64 oct_mdio_readq(u64 addr)
+{
+	return cvmx_read_csr(addr);
+}
+#else
+#define oct_mdio_writeq(val, addr)	writeq(val, (void *)addr)
+#define oct_mdio_readq(addr)		readq((void *)addr)
+#endif
+
+int cavium_mdiobus_read(struct mii_bus *bus, int phy_id, int regnum);
+int cavium_mdiobus_write(struct mii_bus *bus, int phy_id, int regnum, u16 val);
