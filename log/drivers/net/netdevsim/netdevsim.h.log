commit 0dc8249a2e7ce38d9b307d1277b64f8189f53dfc
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Mar 30 22:38:23 2020 +0300

    netdevsim: Add support for setting of packet trap group parameters
    
    Add a dummy callback to set trap group parameters. Return an error when
    the 'fail_trap_group_set' debugfs file is set in order to exercise error
    paths and verify that error is propagated to user space when should.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 3d37df5057e8..4ded54a21e1e 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -180,6 +180,7 @@ struct nsim_dev {
 	struct nsim_dev_health health;
 	struct flow_action_cookie *fa_cookie;
 	spinlock_t fa_cookie_lock; /* protects fa_cookie */
+	bool fail_trap_group_set;
 	bool fail_trap_policer_set;
 	bool fail_trap_policer_counter_get;
 };

commit ad188458d0123d4e116f14f7eab73d644aed149f
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Mon Mar 30 22:38:20 2020 +0300

    netdevsim: Add devlink-trap policer support
    
    Register three dummy packet trap policers with devlink and implement
    callbacks to change their parameters and read their counters.
    
    This will be used later on in the series to test the devlink-trap
    policer infrastructure.
    
    v2:
    * Remove check about burst size being a power of 2 and instead add a
      debugfs knob to fail the operation
    * Provide max/min rate/burst size when registering policers and remove
      the validity checks from nsim_dev_devlink_trap_policer_set()
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index e46fc565b981..3d37df5057e8 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -180,6 +180,8 @@ struct nsim_dev {
 	struct nsim_dev_health health;
 	struct flow_action_cookie *fa_cookie;
 	spinlock_t fa_cookie_lock; /* protects fa_cookie */
+	bool fail_trap_policer_set;
+	bool fail_trap_policer_counter_get;
 };
 
 static inline struct net *nsim_dev_net(struct nsim_dev *nsim_dev)

commit d3cbb907ae57fe5da314b51d949b617b538bdeae
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Feb 25 11:45:26 2020 +0100

    netdevsim: add ACL trap reporting cookie as a metadata
    
    Add new trap ACL which reports flow action cookie in a metadata. Allow
    used to setup the cookie using debugfs file.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 2eb7b0dc1594..e46fc565b981 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -178,6 +178,8 @@ struct nsim_dev {
 	bool fail_reload;
 	struct devlink_region *dummy_region;
 	struct nsim_dev_health health;
+	struct flow_action_cookie *fa_cookie;
+	spinlock_t fa_cookie_lock; /* protects fa_cookie */
 };
 
 static inline struct net *nsim_dev_net(struct nsim_dev *nsim_dev)

commit 8526ad9646b17c59b6d430d8baa8f152a14fe177
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 1 16:43:13 2020 +0000

    netdevsim: fix panic in nsim_dev_take_snapshot_write()
    
    nsim_dev_take_snapshot_write() uses nsim_dev and nsim_dev->dummy_region.
    So, during this function, these data shouldn't be removed.
    But there is no protecting stuff in this function.
    
    There are two similar cases.
    1. reload case
    reload could be called during nsim_dev_take_snapshot_write().
    When reload is being executed, nsim_dev_reload_down() is called and it
    calls nsim_dev_reload_destroy(). nsim_dev_reload_destroy() calls
    devlink_region_destroy() to destroy nsim_dev->dummy_region.
    So, during nsim_dev_take_snapshot_write(), nsim_dev->dummy_region()
    would be removed.
    At this point, snapshot_write() would access freed pointer.
    In order to fix this case, take_snapshot file will be removed before
    devlink_region_destroy().
    The take_snapshot file will be re-created by ->reload_up().
    
    2. del_device_store case
    del_device_store() also could call nsim_dev_reload_destroy()
    during nsim_dev_take_snapshot_write(). If so, panic would occur.
    This problem is actually the same problem with the first case.
    So, this problem will be fixed by the first case's solution.
    
    Test commands:
        modprobe netdevsim
        while :
        do
            echo 1 > /sys/bus/netdevsim/new_device &
            echo 1 > /sys/bus/netdevsim/del_device &
            devlink dev reload netdevsim/netdevsim1 &
            echo 1 > /sys/kernel/debug/netdevsim/netdevsim1/take_snapshot &
        done
    
    Splat looks like:
    [   45.564513][  T975] general protection fault, probably for non-canonical address 0xdffffc000000003a: 0000 [#1] SMP DEI
    [   45.566131][  T975] KASAN: null-ptr-deref in range [0x00000000000001d0-0x00000000000001d7]
    [   45.566135][  T975] CPU: 1 PID: 975 Comm: bash Not tainted 5.5.0+ #322
    [   45.569020][  T975] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   45.569026][  T975] RIP: 0010:__mutex_lock+0x10a/0x14b0
    [   45.570518][  T975] Code: 08 84 d2 0f 85 7f 12 00 00 44 8b 0d 10 23 65 02 45 85 c9 75 29 49 8d 7f 68 48 b8 00 00 00 0f
    [   45.570522][  T975] RSP: 0018:ffff888046ccfbf0 EFLAGS: 00010206
    [   45.572305][  T975] RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [   45.572308][  T975] RDX: 000000000000003a RSI: ffffffffac926440 RDI: 00000000000001d0
    [   45.576843][  T975] RBP: ffff888046ccfd70 R08: ffffffffab610645 R09: 0000000000000000
    [   45.576847][  T975] R10: ffff888046ccfd90 R11: ffffed100d6360ad R12: 0000000000000000
    [   45.578471][  T975] R13: dffffc0000000000 R14: ffffffffae1976c0 R15: 0000000000000168
    [   45.578475][  T975] FS:  00007f614d6e7740(0000) GS:ffff88806c400000(0000) knlGS:0000000000000000
    [   45.581492][  T975] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   45.582942][  T975] CR2: 00005618677d1cf0 CR3: 000000005fb9c002 CR4: 00000000000606e0
    [   45.584543][  T975] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   45.586633][  T975] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   45.589889][  T975] Call Trace:
    [   45.591445][  T975]  ? devlink_region_snapshot_create+0x55/0x4a0
    [   45.601250][  T975]  ? mutex_lock_io_nested+0x1380/0x1380
    [   45.602817][  T975]  ? mutex_lock_io_nested+0x1380/0x1380
    [   45.603875][  T975]  ? mark_held_locks+0xa5/0xe0
    [   45.604769][  T975]  ? _raw_spin_unlock_irqrestore+0x2d/0x50
    [   45.606147][  T975]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   45.607723][  T975]  ? crng_backtrack_protect+0x80/0x80
    [   45.613530][  T975]  ? wait_for_completion+0x390/0x390
    [   45.615152][  T975]  ? devlink_region_snapshot_create+0x55/0x4a0
    [   45.616834][  T975]  devlink_region_snapshot_create+0x55/0x4a0
    [ ... ]
    
    Fixes: 4418f862d675 ("netdevsim: implement support for devlink region and snapshots")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index be100b11a055..2eb7b0dc1594 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -160,6 +160,7 @@ struct nsim_dev {
 	struct nsim_trap_data *trap_data;
 	struct dentry *ddir;
 	struct dentry *ports_ddir;
+	struct dentry *take_snapshot;
 	struct bpf_offload_dev *bpf_dev;
 	bool bpf_bind_accept;
 	u32 bpf_bind_verifier_delay;

commit 6ab63366e1ec4ec1900f253aa64727b4b5f4ee73
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 1 16:43:04 2020 +0000

    netdevsim: disable devlink reload when resources are being used
    
    devlink reload destroys resources and allocates resources again.
    So, when devices and ports resources are being used, devlink reload
    function should not be executed. In order to avoid this race, a new
    lock is added and new_port() and del_port() call devlink_reload_disable()
    and devlink_reload_enable().
    
    Thread0                      Thread1
    {new/del}_port()             {new/del}_port()
    devlink_reload_disable()
                                 devlink_reload_disable()
    devlink_reload_enable()
                                 //here
                                 devlink_reload_enable()
    
    Before Thread1's devlink_reload_enable(), the devlink is already allowed
    to execute reload because Thread0 allows it. devlink reload disable/enable
    variable type is bool. So the above case would exist.
    So, disable/enable should be executed atomically.
    In order to do that, a new lock is used.
    
    Test commands:
        modprobe netdevsim
        echo 1 > /sys/bus/netdevsim/new_device
        while :
        do
            echo 1 > /sys/devices/netdevsim1/new_port &
            echo 1 > /sys/devices/netdevsim1/del_port &
            devlink dev reload netdevsim/netdevsim1 &
        done
    
    Splat looks like:
    [   23.342145][  T932] DEBUG_LOCKS_WARN_ON(mutex_is_locked(lock))
    [   23.342159][  T932] WARNING: CPU: 0 PID: 932 at kernel/locking/mutex-debug.c:103 mutex_destroy+0xc7/0xf0
    [   23.344182][  T932] Modules linked in: netdevsim openvswitch nsh nf_conncount nf_nat nf_conntrack nf_defrag_ipv6 nf_dx
    [   23.346485][  T932] CPU: 0 PID: 932 Comm: devlink Not tainted 5.5.0+ #322
    [   23.347696][  T932] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   23.348893][  T932] RIP: 0010:mutex_destroy+0xc7/0xf0
    [   23.349505][  T932] Code: e0 07 83 c0 03 38 d0 7c 04 84 d2 75 2e 8b 05 00 ac b0 02 85 c0 75 8b 48 c7 c6 00 5e 07 96 40
    [   23.351887][  T932] RSP: 0018:ffff88806208f810 EFLAGS: 00010286
    [   23.353963][  T932] RAX: dffffc0000000008 RBX: ffff888067f6f2c0 RCX: ffffffff942c4bd4
    [   23.355222][  T932] RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffffffff96dac5b4
    [   23.356169][  T932] RBP: ffff888067f6f000 R08: fffffbfff2d235a5 R09: fffffbfff2d235a5
    [   23.357160][  T932] R10: 0000000000000001 R11: fffffbfff2d235a4 R12: ffff888067f6f208
    [   23.358288][  T932] R13: ffff88806208fa70 R14: ffff888067f6f000 R15: ffff888069ce3800
    [   23.359307][  T932] FS:  00007fe2a3876740(0000) GS:ffff88806c000000(0000) knlGS:0000000000000000
    [   23.360473][  T932] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   23.361319][  T932] CR2: 00005561357aa000 CR3: 000000005227a006 CR4: 00000000000606f0
    [   23.362323][  T932] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   23.363417][  T932] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   23.364414][  T932] Call Trace:
    [   23.364828][  T932]  nsim_dev_reload_destroy+0x77/0xb0 [netdevsim]
    [   23.365655][  T932]  nsim_dev_reload_down+0x84/0xb0 [netdevsim]
    [   23.366433][  T932]  devlink_reload+0xb1/0x350
    [   23.367010][  T932]  genl_rcv_msg+0x580/0xe90
    
    [ ...]
    
    [   23.531729][ T1305] kernel BUG at lib/list_debug.c:53!
    [   23.532523][ T1305] invalid opcode: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   23.533467][ T1305] CPU: 2 PID: 1305 Comm: bash Tainted: G        W         5.5.0+ #322
    [   23.534962][ T1305] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   23.536503][ T1305] RIP: 0010:__list_del_entry_valid+0xe6/0x150
    [   23.538346][ T1305] Code: 89 ea 48 c7 c7 00 73 1e 96 e8 df f7 4c ff 0f 0b 48 c7 c7 60 73 1e 96 e8 d1 f7 4c ff 0f 0b 44
    [   23.541068][ T1305] RSP: 0018:ffff888047c27b58 EFLAGS: 00010282
    [   23.542001][ T1305] RAX: 0000000000000054 RBX: ffff888067f6f318 RCX: 0000000000000000
    [   23.543051][ T1305] RDX: 0000000000000054 RSI: 0000000000000008 RDI: ffffed1008f84f61
    [   23.544072][ T1305] RBP: ffff88804aa0fca0 R08: ffffed100d940539 R09: ffffed100d940539
    [   23.545085][ T1305] R10: 0000000000000001 R11: ffffed100d940538 R12: ffff888047c27cb0
    [   23.546422][ T1305] R13: ffff88806208b840 R14: ffffffff981976c0 R15: ffff888067f6f2c0
    [   23.547406][ T1305] FS:  00007f76c0431740(0000) GS:ffff88806c800000(0000) knlGS:0000000000000000
    [   23.548527][ T1305] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   23.549389][ T1305] CR2: 00007f5048f1a2f8 CR3: 000000004b310006 CR4: 00000000000606e0
    [   23.550636][ T1305] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   23.551578][ T1305] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   23.552597][ T1305] Call Trace:
    [   23.553004][ T1305]  mutex_remove_waiter+0x101/0x520
    [   23.553646][ T1305]  __mutex_lock+0xac7/0x14b0
    [   23.554218][ T1305]  ? nsim_dev_port_del+0x4e/0x140 [netdevsim]
    [   23.554908][ T1305]  ? mutex_lock_io_nested+0x1380/0x1380
    [   23.555570][ T1305]  ? _parse_integer+0xf0/0xf0
    [   23.556043][ T1305]  ? kstrtouint+0x86/0x110
    [   23.556504][ T1305]  ? nsim_dev_port_del+0x4e/0x140 [netdevsim]
    [   23.557133][ T1305]  nsim_dev_port_del+0x4e/0x140 [netdevsim]
    [   23.558024][ T1305]  del_port_store+0xcc/0xf0 [netdevsim]
    [ ... ]
    
    Fixes: 75ba029f3c07 ("netdevsim: implement proper devlink reload")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index ea3931391ce2..be100b11a055 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -240,6 +240,8 @@ struct nsim_bus_dev {
 				  */
 	unsigned int num_vfs;
 	struct nsim_vf_config *vfconfigs;
+	/* Lock for devlink->reload_enabled in netdevsim module */
+	struct mutex nsim_bus_reload_lock;
 	bool init;
 };
 

commit f5cd21605ecd249e5fc715411df22cc1bc877b32
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Sat Feb 1 16:42:54 2020 +0000

    netdevsim: fix using uninitialized resources
    
    When module is being initialized, __init() calls bus_register() and
    driver_register().
    These functions internally create various resources and sysfs files.
    The sysfs files are used for basic operations(add/del device).
    /sys/bus/netdevsim/new_device
    /sys/bus/netdevsim/del_device
    
    These sysfs files use netdevsim resources, they are mostly allocated
    and initialized in ->probe() function, which is nsim_dev_probe().
    But, sysfs files could be executed before ->probe() is finished.
    So, accessing uninitialized data would occur.
    
    Another problem is very similar.
    /sys/bus/netdevsim/new_device internally creates sysfs files.
    /sys/devices/netdevsim<id>/new_port
    /sys/devices/netdevsim<id>/del_port
    
    These sysfs files also use netdevsim resources, they are mostly allocated
    and initialized in creating device routine, which is nsim_bus_dev_new().
    But they also could be executed before nsim_bus_dev_new() is finished.
    So, accessing uninitialized data would occur.
    
    To fix these problems, this patch adds flags, which means whether the
    operation is finished or not.
    The flag variable 'nsim_bus_enable' means whether netdevsim bus was
    initialized or not.
    This is protected by nsim_bus_dev_list_lock.
    The flag variable 'nsim_bus_dev->init' means whether nsim_bus_dev was
    initialized or not.
    This could be used in {new/del}_port_store() with no lock.
    
    Test commands:
        #SHELL1
        modprobe netdevsim
        while :
        do
            echo "1 1" > /sys/bus/netdevsim/new_device
            echo "1 1" > /sys/bus/netdevsim/del_device
        done
    
        #SHELL2
        while :
        do
            echo 1 > /sys/devices/netdevsim1/new_port
            echo 1 > /sys/devices/netdevsim1/del_port
        done
    
    Splat looks like:
    [   47.508954][ T1008] general protection fault, probably for non-canonical address 0xdffffc0000000021: 0000 I
    [   47.510793][ T1008] KASAN: null-ptr-deref in range [0x0000000000000108-0x000000000000010f]
    [   47.511963][ T1008] CPU: 2 PID: 1008 Comm: bash Not tainted 5.5.0+ #322
    [   47.512823][ T1008] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   47.514041][ T1008] RIP: 0010:__mutex_lock+0x10a/0x14b0
    [   47.514699][ T1008] Code: 08 84 d2 0f 85 7f 12 00 00 44 8b 0d 10 23 65 02 45 85 c9 75 29 49 8d 7f 68 48 b8 00 00 00 0f
    [   47.517163][ T1008] RSP: 0018:ffff888059b4fbb0 EFLAGS: 00010206
    [   47.517802][ T1008] RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
    [   47.518941][ T1008] RDX: 0000000000000021 RSI: ffffffff85926440 RDI: 0000000000000108
    [   47.519732][ T1008] RBP: ffff888059b4fd30 R08: ffffffffc073fad0 R09: 0000000000000000
    [   47.520729][ T1008] R10: ffff888059b4fd50 R11: ffff88804bb38040 R12: 0000000000000000
    [   47.521702][ T1008] R13: dffffc0000000000 R14: ffffffff871976c0 R15: 00000000000000a0
    [   47.522760][ T1008] FS:  00007fd4be05a740(0000) GS:ffff88806c800000(0000) knlGS:0000000000000000
    [   47.523877][ T1008] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   47.524627][ T1008] CR2: 0000561c82b69cf0 CR3: 0000000065dd6004 CR4: 00000000000606e0
    [   47.527662][ T1008] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   47.528604][ T1008] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   47.529531][ T1008] Call Trace:
    [   47.529874][ T1008]  ? nsim_dev_port_add+0x50/0x150 [netdevsim]
    [   47.530470][ T1008]  ? mutex_lock_io_nested+0x1380/0x1380
    [   47.531018][ T1008]  ? _kstrtoull+0x76/0x160
    [   47.531449][ T1008]  ? _parse_integer+0xf0/0xf0
    [   47.531874][ T1008]  ? kernfs_fop_write+0x1cf/0x410
    [   47.532330][ T1008]  ? sysfs_file_ops+0x160/0x160
    [   47.532773][ T1008]  ? kstrtouint+0x86/0x110
    [   47.533168][ T1008]  ? nsim_dev_port_add+0x50/0x150 [netdevsim]
    [   47.533721][ T1008]  nsim_dev_port_add+0x50/0x150 [netdevsim]
    [   47.534336][ T1008]  ? sysfs_file_ops+0x160/0x160
    [   47.534858][ T1008]  new_port_store+0x99/0xb0 [netdevsim]
    [   47.535439][ T1008]  ? del_port_store+0xb0/0xb0 [netdevsim]
    [   47.536035][ T1008]  ? sysfs_file_ops+0x112/0x160
    [   47.536544][ T1008]  ? sysfs_kf_write+0x3b/0x180
    [   47.537029][ T1008]  kernfs_fop_write+0x276/0x410
    [   47.537548][ T1008]  ? __sb_start_write+0x215/0x2e0
    [   47.538110][ T1008]  vfs_write+0x197/0x4a0
    [ ... ]
    
    Fixes: f9d9db47d3ba ("netdevsim: add bus attributes to add new and delete devices")
    Fixes: 794b2c05ca1c ("netdevsim: extend device attrs to support port addition and deletion")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 94df795ef4d3..ea3931391ce2 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -240,6 +240,7 @@ struct nsim_bus_dev {
 				  */
 	unsigned int num_vfs;
 	struct nsim_vf_config *vfconfigs;
+	bool init;
 };
 
 int nsim_bus_init(void);

commit 82c93a87bf8bc0cdb5ec2ab99da7d87715ff889f
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Oct 10 15:18:50 2019 +0200

    netdevsim: implement couple of testing devlink health reporters
    
    Implement "empty" and "dummy" reporters. The first one is really simple
    and does nothing. The other one has debugfs files to trigger breakage
    and it is able to do recovery. The ops also implement dummy fmsg
    content.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 24358385d869..94df795ef4d3 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -134,6 +134,18 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
+struct nsim_dev_health {
+	struct devlink_health_reporter *empty_reporter;
+	struct devlink_health_reporter *dummy_reporter;
+	struct dentry *ddir;
+	char *recovered_break_msg;
+	u32 binary_len;
+	bool fail_recover;
+};
+
+int nsim_dev_health_init(struct nsim_dev *nsim_dev, struct devlink *devlink);
+void nsim_dev_health_exit(struct nsim_dev *nsim_dev);
+
 struct nsim_dev_port {
 	struct list_head list;
 	struct devlink_port devlink_port;
@@ -164,6 +176,7 @@ struct nsim_dev {
 	bool dont_allow_reload;
 	bool fail_reload;
 	struct devlink_region *dummy_region;
+	struct nsim_dev_health health;
 };
 
 static inline struct net *nsim_dev_net(struct nsim_dev *nsim_dev)

commit 155ddfc5e54a68f0e8d20f31f2b4b6b25e1071b5
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sun Oct 6 08:30:01 2019 +0200

    netdevsim: add couple of debugfs bools to debug devlink reload
    
    Add flag to disallow reload and another one that causes reload to
    always fail.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 8168a5475fe7..24358385d869 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -161,6 +161,8 @@ struct nsim_dev {
 	bool fw_update_status;
 	u32 max_macs;
 	bool test1;
+	bool dont_allow_reload;
+	bool fail_reload;
 	struct devlink_region *dummy_region;
 };
 

commit 7b60027bbc6738b067bb9ed732a8c56b0ac430b2
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sat Oct 5 08:10:32 2019 +0200

    netdevsim: create devlink and netdev instances in namespace
    
    When user does create new netdevsim instance using sysfs bus file,
    create the devlink instance and related netdev instance in the namespace
    of the caller.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 198ca31cec94..8168a5475fe7 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -220,6 +220,9 @@ struct nsim_bus_dev {
 	struct device dev;
 	struct list_head list;
 	unsigned int port_count;
+	struct net *initial_net; /* Purpose of this is to carry net pointer
+				  * during the probe time only.
+				  */
 	unsigned int num_vfs;
 	struct nsim_vf_config *vfconfigs;
 };

commit 90d299138dd42579084715d6d25f9c27b63211af
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Oct 3 11:49:37 2019 +0200

    netdevsim: register port netdevices into net of device
    
    Register newly created port netdevice into net namespace
    that the parent device belongs to.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 702d951fe160..198ca31cec94 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -164,6 +164,11 @@ struct nsim_dev {
 	struct devlink_region *dummy_region;
 };
 
+static inline struct net *nsim_dev_net(struct nsim_dev *nsim_dev)
+{
+	return devlink_net(priv_to_devlink(nsim_dev));
+}
+
 int nsim_dev_init(void);
 void nsim_dev_exit(void);
 int nsim_dev_probe(struct nsim_bus_dev *nsim_bus_dev);

commit 75ba029f3c07f4755b88ee3a9c441e9ffb468e6a
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Oct 3 11:49:36 2019 +0200

    netdevsim: implement proper devlink reload
    
    During devlink reload, all driver objects should be reinstantiated with
    the exception of devlink instance and devlink resources and params.
    Move existing devlink_resource_size_get() calls into fib_create() just
    before fib notifier is registered. Also, make sure that extack is
    propagated down to fib_notifier_register() call.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index ac506cf253b6..702d951fe160 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -173,13 +173,11 @@ int nsim_dev_port_add(struct nsim_bus_dev *nsim_bus_dev,
 int nsim_dev_port_del(struct nsim_bus_dev *nsim_bus_dev,
 		      unsigned int port_index);
 
-struct nsim_fib_data *nsim_fib_create(struct devlink *devlink);
-void nsim_fib_destroy(struct devlink *devlink, struct nsim_fib_data *data);
+struct nsim_fib_data *nsim_fib_create(struct devlink *devlink,
+				      struct netlink_ext_ack *extack);
+void nsim_fib_destroy(struct devlink *devlink, struct nsim_fib_data *fib_data);
 u64 nsim_fib_get_val(struct nsim_fib_data *fib_data,
 		     enum nsim_resource_id res_id, bool max);
-int nsim_fib_set_max(struct nsim_fib_data *fib_data,
-		     enum nsim_resource_id res_id, u64 val,
-		     struct netlink_ext_ack *extack);
 
 #if IS_ENABLED(CONFIG_XFRM_OFFLOAD)
 void nsim_ipsec_init(struct netdevsim *ns);

commit a5facc4cac4dc504397428c936ef1492ce4edd19
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Oct 3 11:49:26 2019 +0200

    netdevsim: change fib accounting and limitations to be per-device
    
    Currently, the accounting is done per-namespace. However, devlink
    instance is always in init_net namespace for now, so only the accounting
    related to init_net is used. Limitations set using devlink resources
    are only considered for init_net. nsim_devlink_net() always
    returns init_net always.
    
    Make the accounting per-device. This brings no functional change.
    Per-device accounting has the same values as per-net.
    For a single netdevsim instance, the behaviour is exactly the same
    as before. When multiple netdevsim instances are created, each
    can have different limits.
    
    This is in prepare to implement proper devlink netns support. After
    that, the devlink instance which would exist in particular netns would
    account and limit that netns.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 66bf13765ad0..ac506cf253b6 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -173,10 +173,12 @@ int nsim_dev_port_add(struct nsim_bus_dev *nsim_bus_dev,
 int nsim_dev_port_del(struct nsim_bus_dev *nsim_bus_dev,
 		      unsigned int port_index);
 
-int nsim_fib_init(void);
-void nsim_fib_exit(void);
-u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
-int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val,
+struct nsim_fib_data *nsim_fib_create(struct devlink *devlink);
+void nsim_fib_destroy(struct devlink *devlink, struct nsim_fib_data *data);
+u64 nsim_fib_get_val(struct nsim_fib_data *fib_data,
+		     enum nsim_resource_id res_id, bool max);
+int nsim_fib_set_max(struct nsim_fib_data *fib_data,
+		     enum nsim_resource_id res_id, u64 val,
 		     struct netlink_ext_ack *extack);
 
 #if IS_ENABLED(CONFIG_XFRM_OFFLOAD)

commit 446bf64b613c4433dac4b15f4eaf326beaad3c8e
Merge: 20e79a0a2cfd 06821504fd47
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Aug 19 11:54:03 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Merge conflict of mlx5 resolved using instructions in merge
    commit 9566e650bf7fdf58384bb06df634f7531ca3a97e.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit da58f90f11f597520f226caff1d3cfc115abedc9
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Sat Aug 17 16:28:20 2019 +0300

    netdevsim: Add devlink-trap support
    
    Have netdevsim register its trap groups and traps with devlink during
    initialization and periodically report trapped packets to devlink core.
    
    Since netdevsim is not a real device, the trapped packets are emulated
    using a workqueue that periodically reports a UDP packet with a random
    5-tuple from each active packet trap and from each running netdev.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Acked-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 4c758c6919f5..262a6978bbca 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -145,6 +145,7 @@ struct nsim_dev_port {
 struct nsim_dev {
 	struct nsim_bus_dev *nsim_bus_dev;
 	struct nsim_fib_data *fib_data;
+	struct nsim_trap_data *trap_data;
 	struct dentry *ddir;
 	struct dentry *ports_ddir;
 	struct bpf_offload_dev *bpf_dev;

commit 4418f862d675011a242a4e687d74ea107e6a40ed
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Aug 15 15:46:33 2019 +0200

    netdevsim: implement support for devlink region and snapshots
    
    Implement dummy region of size 32K and allow user to create snapshots
    or random data using debugfs file trigger.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 95751a817508..4c758c6919f5 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -160,6 +160,7 @@ struct nsim_dev {
 	bool fw_update_status;
 	u32 max_macs;
 	bool test1;
+	struct devlink_region *dummy_region;
 };
 
 int nsim_dev_init(void);

commit 150e8f8a1bae1dea75f4217f483ac95ca48c979a
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Aug 9 13:05:12 2019 +0200

    netdevsim: register couple of devlink params
    
    Register couple of devlink params, one generic, one driver-specific.
    Make the values available over debugfs.
    
    Example:
    $ echo "111" > /sys/bus/netdevsim/new_device
    $ devlink dev param
    netdevsim/netdevsim111:
      name max_macs type generic
        values:
          cmode driverinit value 32
      name test1 type driver-specific
        values:
          cmode driverinit value true
    $ cat /sys/kernel/debug/netdevsim/netdevsim111/max_macs
    32
    $ cat /sys/kernel/debug/netdevsim/netdevsim111/test1
    Y
    $ devlink dev param set netdevsim/netdevsim111 name max_macs cmode driverinit value 16
    $ devlink dev param set netdevsim/netdevsim111 name test1 cmode driverinit value false
    $ devlink dev reload netdevsim/netdevsim111
    $ cat /sys/kernel/debug/netdevsim/netdevsim111/max_macs
    16
    $ cat /sys/kernel/debug/netdevsim/netdevsim111/test1
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 79c05af2a7c0..95751a817508 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -158,6 +158,8 @@ struct nsim_dev {
 	struct list_head port_list;
 	struct mutex port_list_lock; /* protects port list */
 	bool fw_update_status;
+	u32 max_macs;
+	bool test1;
 };
 
 int nsim_dev_init(void);

commit 59c84b9fcf42c99a945d5fdc49220d854e539690
Author: David Ahern <dsahern@gmail.com>
Date:   Tue Aug 6 12:15:17 2019 -0700

    netdevsim: Restore per-network namespace accounting for fib entries
    
    Prior to the commit in the fixes tag, the resource controller in netdevsim
    tracked fib entries and rules per network namespace. Restore that behavior.
    
    Fixes: 5fc494225c1e ("netdevsim: create devlink instance per netdevsim instance")
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 79c05af2a7c0..9404637d34b7 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -169,12 +169,10 @@ int nsim_dev_port_add(struct nsim_bus_dev *nsim_bus_dev,
 int nsim_dev_port_del(struct nsim_bus_dev *nsim_bus_dev,
 		      unsigned int port_index);
 
-struct nsim_fib_data *nsim_fib_create(void);
-void nsim_fib_destroy(struct nsim_fib_data *fib_data);
-u64 nsim_fib_get_val(struct nsim_fib_data *fib_data,
-		     enum nsim_resource_id res_id, bool max);
-int nsim_fib_set_max(struct nsim_fib_data *fib_data,
-		     enum nsim_resource_id res_id, u64 val,
+int nsim_fib_init(void);
+void nsim_fib_exit(void);
+u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
+int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val,
 		     struct netlink_ext_ack *extack);
 
 #if IS_ENABLED(CONFIG_XFRM_OFFLOAD)

commit fa4dfc4a94da180a5ab7e91a501fed86352abfd4
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Jun 4 15:40:43 2019 +0200

    netdevsim: implement fake flash updating with notifications
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 3f398797c2bc..79c05af2a7c0 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -157,6 +157,7 @@ struct nsim_dev {
 	struct netdev_phys_item_id switch_id;
 	struct list_head port_list;
 	struct mutex port_list_lock; /* protects port list */
+	bool fw_update_status;
 };
 
 int nsim_dev_init(void);

commit e05b2d141fef22cfac1928cf0eb6890e5dae4216
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:55 2019 +0200

    netdevsim: move netdev creation/destruction to dev probe
    
    Remove the existing way to create netdevsim over rtnetlink and move the
    netdev creation/destruction to dev probe, so for every probed port,
    a netdevsim-netdev instance is created.
    
    Adjust selftests to work with new interface.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 6b60589cab91..3f398797c2bc 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -51,6 +51,7 @@ struct nsim_ipsec {
 struct netdevsim {
 	struct net_device *netdev;
 	struct nsim_dev *nsim_dev;
+	struct nsim_dev_port *nsim_dev_port;
 
 	u64 tx_packets;
 	u64 tx_bytes;
@@ -58,8 +59,6 @@ struct netdevsim {
 
 	struct nsim_bus_dev *nsim_bus_dev;
 
-	struct dentry *ddir;
-
 	struct bpf_prog	*bpf_offloaded;
 	u32 bpf_offloaded_id;
 
@@ -75,6 +74,10 @@ struct netdevsim {
 	struct nsim_ipsec ipsec;
 };
 
+struct netdevsim *
+nsim_create(struct nsim_dev *nsim_dev, struct nsim_dev_port *nsim_dev_port);
+void nsim_destroy(struct netdevsim *ns);
+
 #ifdef CONFIG_BPF_SYSCALL
 int nsim_bpf_dev_init(struct nsim_dev *nsim_dev);
 void nsim_bpf_dev_exit(struct nsim_dev *nsim_dev);
@@ -136,6 +139,7 @@ struct nsim_dev_port {
 	struct devlink_port devlink_port;
 	unsigned int port_index;
 	struct dentry *ddir;
+	struct netdevsim *ns;
 };
 
 struct nsim_dev {
@@ -212,8 +216,5 @@ struct nsim_bus_dev {
 	struct nsim_vf_config *vfconfigs;
 };
 
-struct nsim_bus_dev *nsim_bus_dev_new(unsigned int id, unsigned int port_count);
-struct nsim_bus_dev *nsim_bus_dev_new_with_ns(struct netdevsim *ns);
-void nsim_bus_dev_del(struct nsim_bus_dev *nsim_bus_dev);
 int nsim_bus_init(void);
 void nsim_bus_exit(void);

commit 794b2c05ca1c4ded4a023d11833e3855a0ed6ea8
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:54 2019 +0200

    netdevsim: extend device attrs to support port addition and deletion
    
    In order to test flows in core, it is beneficial to maintain previously
    supported possibility to add and delete ports during netdevsim lifetime.
    Do it by extending device sysfs attrs by "new_port" and "del_port".
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 0e6ca85e5487..6b60589cab91 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -152,12 +152,17 @@ struct nsim_dev {
 	struct list_head bpf_bound_maps;
 	struct netdev_phys_item_id switch_id;
 	struct list_head port_list;
+	struct mutex port_list_lock; /* protects port list */
 };
 
 int nsim_dev_init(void);
 void nsim_dev_exit(void);
 int nsim_dev_probe(struct nsim_bus_dev *nsim_bus_dev);
 void nsim_dev_remove(struct nsim_bus_dev *nsim_bus_dev);
+int nsim_dev_port_add(struct nsim_bus_dev *nsim_bus_dev,
+		      unsigned int port_index);
+int nsim_dev_port_del(struct nsim_bus_dev *nsim_bus_dev,
+		      unsigned int port_index);
 
 struct nsim_fib_data *nsim_fib_create(void);
 void nsim_fib_destroy(struct nsim_fib_data *fib_data);

commit 8320d145912738655cf631d27aa1829d8b17804e
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:53 2019 +0200

    netdevsim: implement dev probe/remove skeleton with port initialization
    
    Implement netdevsim bus probing of netdevsim devices. For every probed
    device create a devlink instance. According to the user-passed value,
    create a number of ports represented by devlink port instances.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index e951b1ccc3f2..0e6ca85e5487 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -18,6 +18,7 @@
 #include <linux/list.h>
 #include <linux/netdevice.h>
 #include <linux/u64_stats_sync.h>
+#include <net/devlink.h>
 #include <net/xdp.h>
 
 #define DRV_NAME	"netdevsim"
@@ -130,6 +131,13 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
+struct nsim_dev_port {
+	struct list_head list;
+	struct devlink_port devlink_port;
+	unsigned int port_index;
+	struct dentry *ddir;
+};
+
 struct nsim_dev {
 	struct nsim_bus_dev *nsim_bus_dev;
 	struct nsim_fib_data *fib_data;
@@ -143,14 +151,13 @@ struct nsim_dev {
 	struct list_head bpf_bound_progs;
 	struct list_head bpf_bound_maps;
 	struct netdev_phys_item_id switch_id;
+	struct list_head port_list;
 };
 
-struct nsim_dev *
-nsim_dev_create_with_ns(struct nsim_bus_dev *nsim_bus_dev,
-			struct netdevsim *ns);
-void nsim_dev_destroy(struct nsim_dev *nsim_dev);
 int nsim_dev_init(void);
 void nsim_dev_exit(void);
+int nsim_dev_probe(struct nsim_bus_dev *nsim_bus_dev);
+void nsim_dev_remove(struct nsim_bus_dev *nsim_bus_dev);
 
 struct nsim_fib_data *nsim_fib_create(void);
 void nsim_fib_destroy(struct nsim_fib_data *fib_data);
@@ -201,6 +208,7 @@ struct nsim_bus_dev {
 };
 
 struct nsim_bus_dev *nsim_bus_dev_new(unsigned int id, unsigned int port_count);
+struct nsim_bus_dev *nsim_bus_dev_new_with_ns(struct netdevsim *ns);
 void nsim_bus_dev_del(struct nsim_bus_dev *nsim_bus_dev);
 int nsim_bus_init(void);
 void nsim_bus_exit(void);

commit ab1d0cc004d706523dcad7cdad97a2b94eecf169
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:52 2019 +0200

    netdevsim: change debugfs tree topology
    
    With the model where dev is represented by devlink and ports are
    represented by devlink ports, make debugfs file names independent
    on netdev names. Change the topology to the one illustrated
    by the following example:
    
    $ ls /sys/kernel/debug/netdevsim/
    netdevsim1
    $ ls /sys/kernel/debug/netdevsim/netdevsim1/
    bpf_bind_accept  bpf_bind_verifier_delay  bpf_bound_progs  ports
    $ ls /sys/kernel/debug/netdevsim/netdevsim1/ports/
    0  1
    $ ls /sys/kernel/debug/netdevsim/netdevsim1/ports/0/
    bpf_map_accept  bpf_offloaded_id  bpf_tc_accept  bpf_tc_non_bound_accept  bpf_xdpdrv_accept  bpf_xdpoffload_accept  dev  ipsec
    $ ls /sys/kernel/debug/netdevsim/netdevsim1/ports/0/dev -l
    lrwxrwxrwx 1 root root 0 Apr 13 15:58 /sys/kernel/debug/netdevsim/netdevsim1/ports/0/dev -> ../../../netdevsim1
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 17639c7c9032..e951b1ccc3f2 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -134,6 +134,7 @@ struct nsim_dev {
 	struct nsim_bus_dev *nsim_bus_dev;
 	struct nsim_fib_data *fib_data;
 	struct dentry *ddir;
+	struct dentry *ports_ddir;
 	struct bpf_offload_dev *bpf_dev;
 	bool bpf_bind_accept;
 	u32 bpf_bind_verifier_delay;

commit 514cf64cc5353929fbfb82ed1bda24588acaf96a
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:51 2019 +0200

    netdevsim: generate random switch id instead of using dev id
    
    Current implementation of parent_id/switch_id does not follow the
    original idea of being unique. The values are "0", "1", etc. Instead of
    that, generate 32 random bytes.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 4ef44a9538db..17639c7c9032 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -141,6 +141,7 @@ struct nsim_dev {
 	u32 prog_id_gen;
 	struct list_head bpf_bound_progs;
 	struct list_head bpf_bound_maps;
+	struct netdev_phys_item_id switch_id;
 };
 
 struct nsim_dev *

commit d514f41e793d2cbc737ba107d7ae26f387f5eecf
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:50 2019 +0200

    netdevsim: merge sdev into dev
    
    As previously introduce dev which is mapped 1:1 to a bus device covers
    the purpose of the original shared device, merge the sdev code into dev.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index d6b3668f9afd..4ef44a9538db 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -26,37 +26,6 @@
 
 #define NSIM_EA(extack, msg)	NL_SET_ERR_MSG_MOD((extack), msg)
 
-struct bpf_prog;
-struct bpf_offload_dev;
-struct dentry;
-struct nsim_vf_config;
-struct nsim_fib_data;
-
-struct netdevsim_shared_dev {
-	unsigned int refcnt;
-	u32 switch_id;
-
-	struct dentry *ddir;
-
-	struct bpf_offload_dev *bpf_dev;
-
-	bool bpf_bind_accept;
-	u32 bpf_bind_verifier_delay;
-
-	struct dentry *ddir_bpf_bound_progs;
-	u32 prog_id_gen;
-
-	struct list_head bpf_bound_progs;
-	struct list_head bpf_bound_maps;
-};
-
-struct netdevsim;
-
-struct netdevsim_shared_dev *nsim_sdev_get(struct netdevsim *joinns);
-void nsim_sdev_put(struct netdevsim_shared_dev *sdev);
-int nsim_sdev_init(void);
-void nsim_sdev_exit(void);
-
 #define NSIM_IPSEC_MAX_SA_COUNT		33
 #define NSIM_IPSEC_VALID		BIT(31)
 
@@ -87,7 +56,6 @@ struct netdevsim {
 	struct u64_stats_sync syncp;
 
 	struct nsim_bus_dev *nsim_bus_dev;
-	struct netdevsim_shared_dev *sdev;
 
 	struct dentry *ddir;
 
@@ -107,6 +75,8 @@ struct netdevsim {
 };
 
 #ifdef CONFIG_BPF_SYSCALL
+int nsim_bpf_dev_init(struct nsim_dev *nsim_dev);
+void nsim_bpf_dev_exit(struct nsim_dev *nsim_dev);
 int nsim_bpf_init(struct netdevsim *ns);
 void nsim_bpf_uninit(struct netdevsim *ns);
 int nsim_bpf(struct net_device *dev, struct netdev_bpf *bpf);
@@ -114,6 +84,15 @@ int nsim_bpf_disable_tc(struct netdevsim *ns);
 int nsim_bpf_setup_tc_block_cb(enum tc_setup_type type,
 			       void *type_data, void *cb_priv);
 #else
+
+static inline int nsim_bpf_dev_init(struct nsim_dev *nsim_dev)
+{
+	return 0;
+}
+
+static inline void nsim_bpf_dev_exit(struct nsim_dev *nsim_dev)
+{
+}
 static inline int nsim_bpf_init(struct netdevsim *ns)
 {
 	return 0;
@@ -152,13 +131,24 @@ enum nsim_resource_id {
 };
 
 struct nsim_dev {
+	struct nsim_bus_dev *nsim_bus_dev;
 	struct nsim_fib_data *fib_data;
+	struct dentry *ddir;
+	struct bpf_offload_dev *bpf_dev;
+	bool bpf_bind_accept;
+	u32 bpf_bind_verifier_delay;
+	struct dentry *ddir_bpf_bound_progs;
+	u32 prog_id_gen;
+	struct list_head bpf_bound_progs;
+	struct list_head bpf_bound_maps;
 };
 
 struct nsim_dev *
 nsim_dev_create_with_ns(struct nsim_bus_dev *nsim_bus_dev,
 			struct netdevsim *ns);
 void nsim_dev_destroy(struct nsim_dev *nsim_dev);
+int nsim_dev_init(void);
+void nsim_dev_exit(void);
 
 struct nsim_fib_data *nsim_fib_create(void);
 void nsim_fib_destroy(struct nsim_fib_data *fib_data);

commit a60f9e48b7707b70a0701dd841e43492e1e68371
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:49 2019 +0200

    netdevsim: rename dev_init/exit() functions and make them independent on ns
    
    These functions are going to be called from bus probe/release(),
    therefore make them independent on ns struct and rename accordingly.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 8d61fcb55f39..d6b3668f9afd 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -80,6 +80,7 @@ struct nsim_ipsec {
 
 struct netdevsim {
 	struct net_device *netdev;
+	struct nsim_dev *nsim_dev;
 
 	u64 tx_packets;
 	u64 tx_bytes;
@@ -102,7 +103,6 @@ struct netdevsim {
 	bool bpf_xdpoffload_accept;
 
 	bool bpf_map_accept;
-	struct devlink *devlink;
 	struct nsim_ipsec ipsec;
 };
 
@@ -151,8 +151,14 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
-int nsim_dev_init(struct netdevsim *ns);
-void nsim_dev_exit(struct netdevsim *ns);
+struct nsim_dev {
+	struct nsim_fib_data *fib_data;
+};
+
+struct nsim_dev *
+nsim_dev_create_with_ns(struct nsim_bus_dev *nsim_bus_dev,
+			struct netdevsim *ns);
+void nsim_dev_destroy(struct nsim_dev *nsim_dev);
 
 struct nsim_fib_data *nsim_fib_create(void);
 void nsim_fib_destroy(struct nsim_fib_data *fib_data);

commit f9d9db47d3ba87309e022efa33b438e5ef329411
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:48 2019 +0200

    netdevsim: add bus attributes to add new and delete devices
    
    Add a way to add new netdevsim device on netdevsim bus and also to
    delete existing netdevsim device from the bus. Track the bus devices
    in using a list.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 528d1e7d3e6b..8d61fcb55f39 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -196,11 +196,13 @@ struct nsim_vf_config {
 
 struct nsim_bus_dev {
 	struct device dev;
+	struct list_head list;
+	unsigned int port_count;
 	unsigned int num_vfs;
 	struct nsim_vf_config *vfconfigs;
 };
 
-struct nsim_bus_dev *nsim_bus_dev_new(void);
+struct nsim_bus_dev *nsim_bus_dev_new(unsigned int id, unsigned int port_count);
 void nsim_bus_dev_del(struct nsim_bus_dev *nsim_bus_dev);
 int nsim_bus_init(void);
 void nsim_bus_exit(void);

commit 40e4fe4ce115c409c3e2fbb247085103ef1cc755
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:45 2019 +0200

    netdevsim: move device registration and related code to bus.c
    
    Move netdevsim device registration into bus.c and alongside with that
    the related sysfs attributes. Introduce new struct nsim_bus_dev to
    represent a netdevsim device on netdevsim bus.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 7a144aa7965a..528d1e7d3e6b 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -85,14 +85,11 @@ struct netdevsim {
 	u64 tx_bytes;
 	struct u64_stats_sync syncp;
 
-	struct device dev;
+	struct nsim_bus_dev *nsim_bus_dev;
 	struct netdevsim_shared_dev *sdev;
 
 	struct dentry *ddir;
 
-	unsigned int num_vfs;
-	struct nsim_vf_config *vfconfigs;
-
 	struct bpf_prog	*bpf_offloaded;
 	u32 bpf_offloaded_id;
 
@@ -184,14 +181,26 @@ static inline bool nsim_ipsec_tx(struct netdevsim *ns, struct sk_buff *skb)
 }
 #endif
 
-static inline struct netdevsim *to_nsim(struct device *ptr)
-{
-	return container_of(ptr, struct netdevsim, dev);
-}
-
-int nsim_num_vf(struct device *dev);
+struct nsim_vf_config {
+	int link_state;
+	u16 min_tx_rate;
+	u16 max_tx_rate;
+	u16 vlan;
+	__be16 vlan_proto;
+	u16 qos;
+	u8 vf_mac[ETH_ALEN];
+	bool spoofchk_enabled;
+	bool trusted;
+	bool rss_query_enabled;
+};
 
-extern struct bus_type nsim_bus;
+struct nsim_bus_dev {
+	struct device dev;
+	unsigned int num_vfs;
+	struct nsim_vf_config *vfconfigs;
+};
 
+struct nsim_bus_dev *nsim_bus_dev_new(void);
+void nsim_bus_dev_del(struct nsim_bus_dev *nsim_bus_dev);
 int nsim_bus_init(void);
 void nsim_bus_exit(void);

commit 925f5afedb93f7c80958c6bf7ce6cc31542076dc
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:44 2019 +0200

    netdevsim: put netdevsim bus code into separate file
    
    As the code related to netdevsim bus is going to get bigger, move the
    existing code to a separate file.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 23d19b461873..7a144aa7965a 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -188,3 +188,10 @@ static inline struct netdevsim *to_nsim(struct device *ptr)
 {
 	return container_of(ptr, struct netdevsim, dev);
 }
+
+int nsim_num_vf(struct device *dev);
+
+extern struct bus_type nsim_bus;
+
+int nsim_bus_init(void);
+void nsim_bus_exit(void);

commit 8fb4bc6fd5bd5bab9a34581e45b00d9a041d1d71
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:43 2019 +0200

    netdevsim: rename devlink.c to dev.c to contain per-dev(asic) items
    
    The existing devlink.c code is going to be extended to represent asic
    device on a bus. As this is about more than just devlink,
    rename the file. Do appropriate prefix renaming alongside with that.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index df50eb19715d..23d19b461873 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -154,8 +154,8 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
-int nsim_devlink_init(struct netdevsim *ns);
-void nsim_devlink_exit(struct netdevsim *ns);
+int nsim_dev_init(struct netdevsim *ns);
+void nsim_dev_exit(struct netdevsim *ns);
 
 struct nsim_fib_data *nsim_fib_create(void);
 void nsim_fib_destroy(struct nsim_fib_data *fib_data);

commit 5fc494225c1eb81309cc4c91f183cd30e4edb674
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Thu Apr 25 15:59:42 2019 +0200

    netdevsim: create devlink instance per netdevsim instance
    
    Currently there is one devlink instance created per network namespace.
    That is quite odd considering the fact that devlink instance should
    represent an ASIC. The following patches are going to move the devlink
    instance even more down to a bus device, but until then, have one
    devlink instance per netdevsim instance. Struct nsim_devlink is
    introduced to hold fib setting.
    
    The changes in the fib code are only related to holding the
    configuration per devlink instance instead of network namespace.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 2667f9b0e1f9..df50eb19715d 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -30,6 +30,7 @@ struct bpf_prog;
 struct bpf_offload_dev;
 struct dentry;
 struct nsim_vf_config;
+struct nsim_fib_data;
 
 struct netdevsim_shared_dev {
 	unsigned int refcnt;
@@ -153,16 +154,15 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
-int nsim_devlink_setup(struct netdevsim *ns);
-void nsim_devlink_teardown(struct netdevsim *ns);
+int nsim_devlink_init(struct netdevsim *ns);
+void nsim_devlink_exit(struct netdevsim *ns);
 
-int nsim_devlink_init(void);
-void nsim_devlink_exit(void);
-
-int nsim_fib_init(void);
-void nsim_fib_exit(void);
-u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
-int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val,
+struct nsim_fib_data *nsim_fib_create(void);
+void nsim_fib_destroy(struct nsim_fib_data *fib_data);
+u64 nsim_fib_get_val(struct nsim_fib_data *fib_data,
+		     enum nsim_resource_id res_id, bool max);
+int nsim_fib_set_max(struct nsim_fib_data *fib_data,
+		     enum nsim_resource_id res_id, u64 val,
 		     struct netlink_ext_ack *extack);
 
 #if IS_ENABLED(CONFIG_XFRM_OFFLOAD)

commit 38f58c972334833e0e0804a32e8cee8d8d475cb7
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Apr 12 14:49:27 2019 +0200

    netdevsim: move sdev specific bpf debugfs files to sdev dir
    
    Some netdevsim bpf debugfs files are per-sdev, yet they are defined per
    netdevsim instance. Move them under sdev directory.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index e5d6fea246a5..2667f9b0e1f9 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -39,6 +39,9 @@ struct netdevsim_shared_dev {
 
 	struct bpf_offload_dev *bpf_dev;
 
+	bool bpf_bind_accept;
+	u32 bpf_bind_verifier_delay;
+
 	struct dentry *ddir_bpf_bound_progs;
 	u32 prog_id_gen;
 
@@ -95,9 +98,6 @@ struct netdevsim {
 	struct xdp_attachment_info xdp;
 	struct xdp_attachment_info xdp_hw;
 
-	bool bpf_bind_accept;
-	u32 bpf_bind_verifier_delay;
-
 	bool bpf_tc_accept;
 	bool bpf_tc_non_bound_accept;
 	bool bpf_xdpdrv_accept;

commit af9095f00d348aebb532b3c443f9397029a98d3e
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Fri Apr 12 14:49:26 2019 +0200

    netdevsim: move shared dev creation and destruction into separate file
    
    To make code easier to read, move shared dev bits into a separate file.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index f04050bcb177..e5d6fea246a5 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -46,6 +46,13 @@ struct netdevsim_shared_dev {
 	struct list_head bpf_bound_maps;
 };
 
+struct netdevsim;
+
+struct netdevsim_shared_dev *nsim_sdev_get(struct netdevsim *joinns);
+void nsim_sdev_put(struct netdevsim_shared_dev *sdev);
+int nsim_sdev_init(void);
+void nsim_sdev_exit(void);
+
 #define NSIM_IPSEC_MAX_SA_COUNT		33
 #define NSIM_IPSEC_VALID		BIT(31)
 

commit 027d4ca6f0f589ae18c5086ddb04cd1819708ffa
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Apr 9 17:14:54 2019 +0200

    netdevsim: assume CONFIG_NET_DEVLINK is always enabled
    
    Since commit f6b19b354d50 ("net: devlink: select NET_DEVLINK
    from drivers") adds implicit select of NET_DEVLINK for
    netdevsim, the code does not have to deal with the case
    when CONFIG_NET_DEVLINK is not enabled. So remove the ifcase.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 384c254fafc5..f04050bcb177 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -97,9 +97,7 @@ struct netdevsim {
 	bool bpf_xdpoffload_accept;
 
 	bool bpf_map_accept;
-#if IS_ENABLED(CONFIG_NET_DEVLINK)
 	struct devlink *devlink;
-#endif
 	struct nsim_ipsec ipsec;
 };
 
@@ -138,7 +136,6 @@ nsim_bpf_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 }
 #endif
 
-#if IS_ENABLED(CONFIG_NET_DEVLINK)
 enum nsim_resource_id {
 	NSIM_RESOURCE_NONE,   /* DEVLINK_RESOURCE_ID_PARENT_TOP */
 	NSIM_RESOURCE_IPV4,
@@ -160,25 +157,6 @@ void nsim_fib_exit(void);
 u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
 int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val,
 		     struct netlink_ext_ack *extack);
-#else
-static inline int nsim_devlink_setup(struct netdevsim *ns)
-{
-	return 0;
-}
-
-static inline void nsim_devlink_teardown(struct netdevsim *ns)
-{
-}
-
-static inline int nsim_devlink_init(void)
-{
-	return 0;
-}
-
-static inline void nsim_devlink_exit(void)
-{
-}
-#endif
 
 #if IS_ENABLED(CONFIG_XFRM_OFFLOAD)
 void nsim_ipsec_init(struct netdevsim *ns);

commit f61b6db378539e69d8525a1b5001637df1e13040
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Thu Jul 26 14:25:26 2018 -0700

    netdevsim: make debug dirs' dentries static
    
    The root directories of netdevsim should only be used by the core
    to create per-device subdirectories, so limit their visibility to
    the core file.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 02be199eb005..384c254fafc5 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -103,9 +103,6 @@ struct netdevsim {
 	struct nsim_ipsec ipsec;
 };
 
-extern struct dentry *nsim_ddir;
-extern struct dentry *nsim_sdev_ddir;
-
 #ifdef CONFIG_BPF_SYSCALL
 int nsim_bpf_init(struct netdevsim *ns);
 void nsim_bpf_uninit(struct netdevsim *ns);

commit 602144c224604f1cbff02ee2d1cf46825269ecbd
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 17 10:53:25 2018 -0700

    bpf: offload: keep the offload state per-ASIC
    
    Create a higher-level entity to represent a device/ASIC to allow
    programs and maps to be shared between device ports.  The extra
    work is required to make sure we don't destroy BPF objects as
    soon as the netdev for which they were loaded gets destroyed,
    as other ports may still be using them.  When netdev goes away
    all of its BPF objects will be moved to other netdevs of the
    device, and only destroyed when last netdev is unregistered.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Acked-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 98f26fa1e671..02be199eb005 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -27,6 +27,7 @@
 #define NSIM_EA(extack, msg)	NL_SET_ERR_MSG_MOD((extack), msg)
 
 struct bpf_prog;
+struct bpf_offload_dev;
 struct dentry;
 struct nsim_vf_config;
 
@@ -36,6 +37,8 @@ struct netdevsim_shared_dev {
 
 	struct dentry *ddir;
 
+	struct bpf_offload_dev *bpf_dev;
+
 	struct dentry *ddir_bpf_bound_progs;
 	u32 prog_id_gen;
 

commit d6d6071388e9fc81e11c6f4392666a9f072befe6
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 17 10:53:21 2018 -0700

    netdevsim: associate bound programs with shared dev
    
    Move bound program information from netdevsim to shared sub-object,
    as programs will soon be shared between netdevs of the same ASIC.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 8743ce74d2d9..98f26fa1e671 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -35,6 +35,12 @@ struct netdevsim_shared_dev {
 	u32 switch_id;
 
 	struct dentry *ddir;
+
+	struct dentry *ddir_bpf_bound_progs;
+	u32 prog_id_gen;
+
+	struct list_head bpf_bound_progs;
+	struct list_head bpf_bound_maps;
 };
 
 #define NSIM_IPSEC_MAX_SA_COUNT		33
@@ -79,12 +85,8 @@ struct netdevsim {
 	struct xdp_attachment_info xdp;
 	struct xdp_attachment_info xdp_hw;
 
-	u32 prog_id_gen;
-
 	bool bpf_bind_accept;
 	u32 bpf_bind_verifier_delay;
-	struct dentry *ddir_bpf_bound_progs;
-	struct list_head bpf_bound_progs;
 
 	bool bpf_tc_accept;
 	bool bpf_tc_non_bound_accept;
@@ -92,7 +94,6 @@ struct netdevsim {
 	bool bpf_xdpoffload_accept;
 
 	bool bpf_map_accept;
-	struct list_head bpf_bound_maps;
 #if IS_ENABLED(CONFIG_NET_DEVLINK)
 	struct devlink *devlink;
 #endif

commit eeeaaf185eca5790529fa184c89452ead7c8c859
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 17 10:53:20 2018 -0700

    netdevsim: add shared netdevsim devices
    
    Factor out sharable netdevsim sub-object and use IFLA_LINK to link
    netdevsims together at creation time.  Sharable object will have
    its own DebugFS directory.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index e2f232325259..8743ce74d2d9 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -30,6 +30,13 @@ struct bpf_prog;
 struct dentry;
 struct nsim_vf_config;
 
+struct netdevsim_shared_dev {
+	unsigned int refcnt;
+	u32 switch_id;
+
+	struct dentry *ddir;
+};
+
 #define NSIM_IPSEC_MAX_SA_COUNT		33
 #define NSIM_IPSEC_VALID		BIT(31)
 
@@ -59,7 +66,7 @@ struct netdevsim {
 	struct u64_stats_sync syncp;
 
 	struct device dev;
-	u32 switch_id;
+	struct netdevsim_shared_dev *sdev;
 
 	struct dentry *ddir;
 
@@ -93,6 +100,7 @@ struct netdevsim {
 };
 
 extern struct dentry *nsim_ddir;
+extern struct dentry *nsim_sdev_ddir;
 
 #ifdef CONFIG_BPF_SYSCALL
 int nsim_bpf_init(struct netdevsim *ns);

commit 5f07655b803eca4c215bac9aa61f4bf19f6ecd5e
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jul 17 10:53:19 2018 -0700

    netdevsim: add switch_id attribute
    
    Grouping netdevsim devices into "ASICs" will soon be supported.
    Add switch_id attribute to all netdevsims.  For now each netdevsim
    will have its switch_id matching the device id.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 0aeabbe81cc6..e2f232325259 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -59,6 +59,7 @@ struct netdevsim {
 	struct u64_stats_sync syncp;
 
 	struct device dev;
+	u32 switch_id;
 
 	struct dentry *ddir;
 

commit 799e173d7125155c00e9492c8212c5e41333049f
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Jul 11 20:36:42 2018 -0700

    netdevsim: add support for simultaneous driver and hw XDP
    
    Allow netdevsim to accept driver and offload attachment of XDP
    BPF programs at the same time.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 69ffb4a2d14b..0aeabbe81cc6 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -69,7 +69,7 @@ struct netdevsim {
 	u32 bpf_offloaded_id;
 
 	struct xdp_attachment_info xdp;
-	int xdp_prog_mode;
+	struct xdp_attachment_info xdp_hw;
 
 	u32 prog_id_gen;
 

commit 05296620f6d14dce0030b87e1e57891a770fb65c
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Jul 11 20:36:40 2018 -0700

    xdp: factor out common program/flags handling from drivers
    
    Basic operations drivers perform during xdp setup and query can
    be moved to helpers in the core.  Encapsulate program and flags
    into a structure and add helpers.  Note that the structure is
    intended as the "main" program information source in the driver.
    Most drivers will additionally place the program pointer in their
    fast path or ring structures.
    
    The helpers don't have a huge impact now, but they will
    decrease the code duplication when programs can be installed
    in HW and driver at the same time.  Encapsulating the basic
    operations in helpers will hopefully also reduce the number
    of changes to drivers which adopt them.
    
    Helpers could really be static inline, but they depend on
    definition of struct netdev_bpf which means they'd have
    to be placed in netdevice.h, an already 4500 line header.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index d8a7cc995e88..69ffb4a2d14b 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -18,6 +18,7 @@
 #include <linux/list.h>
 #include <linux/netdevice.h>
 #include <linux/u64_stats_sync.h>
+#include <net/xdp.h>
 
 #define DRV_NAME	"netdevsim"
 
@@ -67,9 +68,8 @@ struct netdevsim {
 	struct bpf_prog	*bpf_offloaded;
 	u32 bpf_offloaded_id;
 
-	u32 xdp_flags;
+	struct xdp_attachment_info xdp;
 	int xdp_prog_mode;
-	struct bpf_prog	*xdp_prog;
 
 	u32 prog_id_gen;
 

commit 7699353da875c2ae0d87a4f5a995c144115b31bb
Author: Shannon Nelson <shannon.nelson@oracle.com>
Date:   Tue Jun 26 10:07:54 2018 -0700

    netdevsim: add ipsec offload testing
    
    Implement the IPsec/XFRM offload API for testing.
    
    Signed-off-by: Shannon Nelson <shannon.nelson@oracle.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 8ca50b72c328..d8a7cc995e88 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -29,6 +29,27 @@ struct bpf_prog;
 struct dentry;
 struct nsim_vf_config;
 
+#define NSIM_IPSEC_MAX_SA_COUNT		33
+#define NSIM_IPSEC_VALID		BIT(31)
+
+struct nsim_sa {
+	struct xfrm_state *xs;
+	__be32 ipaddr[4];
+	u32 key[4];
+	u32 salt;
+	bool used;
+	bool crypt;
+	bool rx;
+};
+
+struct nsim_ipsec {
+	struct nsim_sa sa[NSIM_IPSEC_MAX_SA_COUNT];
+	struct dentry *pfile;
+	u32 count;
+	u32 tx;
+	u32 ok;
+};
+
 struct netdevsim {
 	struct net_device *netdev;
 
@@ -67,6 +88,7 @@ struct netdevsim {
 #if IS_ENABLED(CONFIG_NET_DEVLINK)
 	struct devlink *devlink;
 #endif
+	struct nsim_ipsec ipsec;
 };
 
 extern struct dentry *nsim_ddir;
@@ -148,6 +170,25 @@ static inline void nsim_devlink_exit(void)
 }
 #endif
 
+#if IS_ENABLED(CONFIG_XFRM_OFFLOAD)
+void nsim_ipsec_init(struct netdevsim *ns);
+void nsim_ipsec_teardown(struct netdevsim *ns);
+bool nsim_ipsec_tx(struct netdevsim *ns, struct sk_buff *skb);
+#else
+static inline void nsim_ipsec_init(struct netdevsim *ns)
+{
+}
+
+static inline void nsim_ipsec_teardown(struct netdevsim *ns)
+{
+}
+
+static inline bool nsim_ipsec_tx(struct netdevsim *ns, struct sk_buff *skb)
+{
+	return true;
+}
+#endif
+
 static inline struct netdevsim *to_nsim(struct device *ptr)
 {
 	return container_of(ptr, struct netdevsim, dev);

commit 7fa76d777ec53eeece1546b737a3b93b37639575
Author: David Ahern <dsahern@gmail.com>
Date:   Tue Jun 5 08:14:10 2018 -0700

    netdevsim: Add extack error message for devlink reload
    
    devlink reset command can fail if a FIB resource limit is set to a value
    lower than the current occupancy. Return a proper message indicating the
    reason for the failure.
    
    $ devlink resource sh netdevsim/netdevsim0
    netdevsim/netdevsim0:
      name IPv4 size unlimited unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
        resources:
          name fib size unlimited occ 43 unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
          name fib-rules size unlimited occ 4 unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
      name IPv6 size unlimited unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
        resources:
          name fib size unlimited occ 54 unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
          name fib-rules size unlimited occ 3 unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables none
    
    $ devlink resource set netdevsim/netdevsim0 path /IPv4/fib size 40
    
    $ devlink dev  reload netdevsim/netdevsim0
    Error: netdevsim: New size is less than current occupancy.
    devlink answers: Invalid argument
    
    Signed-off-by: David Ahern <dsahern@gmail.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 3a8581af3b85..8ca50b72c328 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -126,7 +126,8 @@ void nsim_devlink_exit(void);
 int nsim_fib_init(void);
 void nsim_fib_exit(void);
 u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
-int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val);
+int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val,
+		     struct netlink_ext_ack *extack);
 #else
 static inline int nsim_devlink_setup(struct netdevsim *ns)
 {

commit ef817102586cca428d6fe0803cc232a3c929141f
Author: David Ahern <dsa@cumulusnetworks.com>
Date:   Fri Mar 30 09:28:51 2018 -0700

    netdevsim: Change nsim_devlink_setup to return error to caller
    
    Change nsim_devlink_setup to return any error back to the caller and
    update nsim_init to handle it.
    
    Requested-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David Ahern <dsa@cumulusnetworks.com>
    Acked-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index afb8cf90c0fd..3a8581af3b85 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -117,7 +117,7 @@ enum nsim_resource_id {
 	NSIM_RESOURCE_IPV6_FIB_RULES,
 };
 
-void nsim_devlink_setup(struct netdevsim *ns);
+int nsim_devlink_setup(struct netdevsim *ns);
 void nsim_devlink_teardown(struct netdevsim *ns);
 
 int nsim_devlink_init(void);
@@ -128,8 +128,9 @@ void nsim_fib_exit(void);
 u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
 int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val);
 #else
-static inline void nsim_devlink_setup(struct netdevsim *ns)
+static inline int nsim_devlink_setup(struct netdevsim *ns)
 {
+	return 0;
 }
 
 static inline void nsim_devlink_teardown(struct netdevsim *ns)

commit 37923ed6b8cea94d7d76038e2f72c57a0b45daab
Author: David Ahern <dsa@cumulusnetworks.com>
Date:   Tue Mar 27 18:22:00 2018 -0700

    netdevsim: Add simple FIB resource controller via devlink
    
    Add devlink support to netdevsim and use it to implement a simple,
    profile based resource controller. Only one controller is needed
    per namespace, so the first netdevsim netdevice in a namespace
    registers with devlink. If that device is deleted, the resource
    settings are deleted.
    
    The resource controller allows a user to limit the number of IPv4 and
    IPv6 FIB entries and FIB rules. The resource paths are:
        /IPv4
        /IPv4/fib
        /IPv4/fib-rules
        /IPv6
        /IPv6/fib
        /IPv6/fib-rules
    
    The IPv4 and IPv6 top level resources are unlimited in size and can not
    be changed. From there, the number of FIB entries and FIB rule entries
    are unlimited by default. A user can specify a limit for the fib and
    fib-rules resources:
    
        $ devlink resource set netdevsim/netdevsim0 path /IPv4/fib size 96
        $ devlink resource set netdevsim/netdevsim0 path /IPv4/fib-rules size 16
        $ devlink resource set netdevsim/netdevsim0 path /IPv6/fib size 64
        $ devlink resource set netdevsim/netdevsim0 path /IPv6/fib-rules size 16
        $ devlink dev reload netdevsim/netdevsim0
    
    such that the number of rules or routes is limited (96 ipv4 routes in the
    example above):
        $ for n in $(seq 1 32); do ip ro add 10.99.$n.0/24 dev eth1; done
        Error: netdevsim: Exceeded number of supported fib entries.
    
        $ devlink resource show netdevsim/netdevsim0
        netdevsim/netdevsim0:
          name IPv4 size unlimited unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables non
            resources:
              name fib size 96 occ 96 unit entry size_min 0 size_max unlimited size_gran 1 dpipe_tables
        ...
    
    With this template in place for resource management, it is fairly trivial
    to extend and shows one way to implement a simple counter based resource
    controller typical of network profiles.
    
    Currently, devlink only supports initial namespace. Code is in place to
    adapt netdevsim to a per namespace controller once the network namespace
    issues are resolved.
    
    Signed-off-by: David Ahern <dsa@cumulusnetworks.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index ea081c10efb8..afb8cf90c0fd 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -64,6 +64,9 @@ struct netdevsim {
 
 	bool bpf_map_accept;
 	struct list_head bpf_bound_maps;
+#if IS_ENABLED(CONFIG_NET_DEVLINK)
+	struct devlink *devlink;
+#endif
 };
 
 extern struct dentry *nsim_ddir;
@@ -103,6 +106,46 @@ nsim_bpf_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
 }
 #endif
 
+#if IS_ENABLED(CONFIG_NET_DEVLINK)
+enum nsim_resource_id {
+	NSIM_RESOURCE_NONE,   /* DEVLINK_RESOURCE_ID_PARENT_TOP */
+	NSIM_RESOURCE_IPV4,
+	NSIM_RESOURCE_IPV4_FIB,
+	NSIM_RESOURCE_IPV4_FIB_RULES,
+	NSIM_RESOURCE_IPV6,
+	NSIM_RESOURCE_IPV6_FIB,
+	NSIM_RESOURCE_IPV6_FIB_RULES,
+};
+
+void nsim_devlink_setup(struct netdevsim *ns);
+void nsim_devlink_teardown(struct netdevsim *ns);
+
+int nsim_devlink_init(void);
+void nsim_devlink_exit(void);
+
+int nsim_fib_init(void);
+void nsim_fib_exit(void);
+u64 nsim_fib_get_val(struct net *net, enum nsim_resource_id res_id, bool max);
+int nsim_fib_set_max(struct net *net, enum nsim_resource_id res_id, u64 val);
+#else
+static inline void nsim_devlink_setup(struct netdevsim *ns)
+{
+}
+
+static inline void nsim_devlink_teardown(struct netdevsim *ns)
+{
+}
+
+static inline int nsim_devlink_init(void)
+{
+	return 0;
+}
+
+static inline void nsim_devlink_exit(void)
+{
+}
+#endif
+
 static inline struct netdevsim *to_nsim(struct device *ptr)
 {
 	return container_of(ptr, struct netdevsim, dev);

commit 7c5db7e7292f7f3244f895e7fa301dcff647e07e
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Tue Jan 23 11:22:54 2018 -0800

    netdevsim: don't compile BPF code if syscall not enabled
    
    We should not compile netdevsim/bpf.c if BPF syscall is not
    enabled.  Otherwise bpf core would have to provide wrappers
    for all functions offload drivers may call, even though
    system will never see a BPF object.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index b80361200302..ea081c10efb8 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -68,12 +68,40 @@ struct netdevsim {
 
 extern struct dentry *nsim_ddir;
 
+#ifdef CONFIG_BPF_SYSCALL
 int nsim_bpf_init(struct netdevsim *ns);
 void nsim_bpf_uninit(struct netdevsim *ns);
 int nsim_bpf(struct net_device *dev, struct netdev_bpf *bpf);
 int nsim_bpf_disable_tc(struct netdevsim *ns);
 int nsim_bpf_setup_tc_block_cb(enum tc_setup_type type,
 			       void *type_data, void *cb_priv);
+#else
+static inline int nsim_bpf_init(struct netdevsim *ns)
+{
+	return 0;
+}
+
+static inline void nsim_bpf_uninit(struct netdevsim *ns)
+{
+}
+
+static inline int nsim_bpf(struct net_device *dev, struct netdev_bpf *bpf)
+{
+	return bpf->command == XDP_QUERY_PROG ? 0 : -EOPNOTSUPP;
+}
+
+static inline int nsim_bpf_disable_tc(struct netdevsim *ns)
+{
+	return 0;
+}
+
+static inline int
+nsim_bpf_setup_tc_block_cb(enum tc_setup_type type, void *type_data,
+			   void *cb_priv)
+{
+	return -EOPNOTSUPP;
+}
+#endif
 
 static inline struct netdevsim *to_nsim(struct device *ptr)
 {

commit 395cacb5f1a0a290f1ae9ca4692c400d2b57a705
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Jan 17 19:13:30 2018 -0800

    netdevsim: bpf: support fake map offload
    
    Add to netdevsim ability to pretend it's offloading BPF maps.
    We only allow allocation of tiny 2 entry maps, to keep things
    simple.  Mutex lock may seem heavy for the operations we
    perform, but we want to make sure callbacks can sleep.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 32270de9395a..b80361200302 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -61,6 +61,9 @@ struct netdevsim {
 	bool bpf_tc_non_bound_accept;
 	bool bpf_xdpdrv_accept;
 	bool bpf_xdpoffload_accept;
+
+	bool bpf_map_accept;
+	struct list_head bpf_bound_maps;
 };
 
 extern struct dentry *nsim_ddir;

commit 79579220566cd33fe3b15ce8249c57e10251b258
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Fri Dec 1 15:09:01 2017 -0800

    netdevsim: add SR-IOV functionality
    
    dummy driver was extended with VF-related netdev APIs for testing
    SR-IOV-related software.  netdevsim did not exist back then.
    Implement SR-IOV functionality in netdevsim.  Notable difference
    is that since netdevsim has no module parameters, we will actually
    create a device with sriov_numvfs attribute for each netdev.
    The zero MAC address is accepted as some HW use it to mean any
    address is allowed.  Link state is also now validated.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 8779e6a8f885..32270de9395a 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -13,6 +13,7 @@
  * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
  */
 
+#include <linux/device.h>
 #include <linux/kernel.h>
 #include <linux/list.h>
 #include <linux/netdevice.h>
@@ -26,6 +27,7 @@
 
 struct bpf_prog;
 struct dentry;
+struct nsim_vf_config;
 
 struct netdevsim {
 	struct net_device *netdev;
@@ -34,8 +36,13 @@ struct netdevsim {
 	u64 tx_bytes;
 	struct u64_stats_sync syncp;
 
+	struct device dev;
+
 	struct dentry *ddir;
 
+	unsigned int num_vfs;
+	struct nsim_vf_config *vfconfigs;
+
 	struct bpf_prog	*bpf_offloaded;
 	u32 bpf_offloaded_id;
 
@@ -64,3 +71,8 @@ int nsim_bpf(struct net_device *dev, struct netdev_bpf *bpf);
 int nsim_bpf_disable_tc(struct netdevsim *ns);
 int nsim_bpf_setup_tc_block_cb(enum tc_setup_type type,
 			       void *type_data, void *cb_priv);
+
+static inline struct netdevsim *to_nsim(struct device *ptr)
+{
+	return container_of(ptr, struct netdevsim, dev);
+}

commit 31d3ad832948c75139b0e5b653912f7898a1d5d5
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Fri Dec 1 15:08:59 2017 -0800

    netdevsim: add bpf offload support
    
    Add support for loading programs for netdevsim devices and
    expose the related information via DebugFS.  Both offload
    of XDP and cls_bpf programs is supported.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
index 4558c6f11598..8779e6a8f885 100644
--- a/drivers/net/netdevsim/netdevsim.h
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -14,13 +14,53 @@
  */
 
 #include <linux/kernel.h>
+#include <linux/list.h>
 #include <linux/netdevice.h>
 #include <linux/u64_stats_sync.h>
 
 #define DRV_NAME	"netdevsim"
 
+#define NSIM_XDP_MAX_MTU	4000
+
+#define NSIM_EA(extack, msg)	NL_SET_ERR_MSG_MOD((extack), msg)
+
+struct bpf_prog;
+struct dentry;
+
 struct netdevsim {
+	struct net_device *netdev;
+
 	u64 tx_packets;
 	u64 tx_bytes;
 	struct u64_stats_sync syncp;
+
+	struct dentry *ddir;
+
+	struct bpf_prog	*bpf_offloaded;
+	u32 bpf_offloaded_id;
+
+	u32 xdp_flags;
+	int xdp_prog_mode;
+	struct bpf_prog	*xdp_prog;
+
+	u32 prog_id_gen;
+
+	bool bpf_bind_accept;
+	u32 bpf_bind_verifier_delay;
+	struct dentry *ddir_bpf_bound_progs;
+	struct list_head bpf_bound_progs;
+
+	bool bpf_tc_accept;
+	bool bpf_tc_non_bound_accept;
+	bool bpf_xdpdrv_accept;
+	bool bpf_xdpoffload_accept;
 };
+
+extern struct dentry *nsim_ddir;
+
+int nsim_bpf_init(struct netdevsim *ns);
+void nsim_bpf_uninit(struct netdevsim *ns);
+int nsim_bpf(struct net_device *dev, struct netdev_bpf *bpf);
+int nsim_bpf_disable_tc(struct netdevsim *ns);
+int nsim_bpf_setup_tc_block_cb(enum tc_setup_type type,
+			       void *type_data, void *cb_priv);

commit 83c9e13aa39aed5cf9a2f8dd69770b7c35ba1281
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Fri Dec 1 15:08:58 2017 -0800

    netdevsim: add software driver for testing offloads
    
    To be able to run selftests without any hardware required we
    need a software model.  The model can also serve as an example
    implementation for those implementing actual HW offloads.
    The dummy driver have previously been extended to test SR-IOV,
    but the general consensus seems to be against adding further
    features to it.
    
    Add a new driver for purposes of software modelling only.
    eBPF and SR-IOV will be added here shortly, others are invited
    to further extend the driver with their offload models.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Simon Horman <simon.horman@netronome.com>
    Reviewed-by: Quentin Monnet <quentin.monnet@netronome.com>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

diff --git a/drivers/net/netdevsim/netdevsim.h b/drivers/net/netdevsim/netdevsim.h
new file mode 100644
index 000000000000..4558c6f11598
--- /dev/null
+++ b/drivers/net/netdevsim/netdevsim.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2017 Netronome Systems, Inc.
+ *
+ * This software is licensed under the GNU General License Version 2,
+ * June 1991 as shown in the file COPYING in the top-level directory of this
+ * source tree.
+ *
+ * THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
+ * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+ * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE
+ * OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
+ * THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+ */
+
+#include <linux/kernel.h>
+#include <linux/netdevice.h>
+#include <linux/u64_stats_sync.h>
+
+#define DRV_NAME	"netdevsim"
+
+struct netdevsim {
+	u64 tx_packets;
+	u64 tx_bytes;
+	struct u64_stats_sync syncp;
+};
