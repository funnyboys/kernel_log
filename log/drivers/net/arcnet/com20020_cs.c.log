commit 0fec65130b9f11a73d74f47025491f97f82ba070
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:06:06 2015 -0700

    arcnet: com20020: Use arcnet_<I/O> routines
    
    Simplify and make consistent the current uses of inb/outb
    by using the newly introduced arcnet_<I/O> equivalents.
    
    o Add new #defines for register offsets
      There is an register offset, 8, that is unnamed and used as-is.
    o Remove old #defines that included the ioaddr
    o Remove obfuscating macros by expanding them in-place where appropriate
    o Create static inline com20020_set_subaddress for the SET_SUBADR macro
    
    There is an unused arcnet config entry CONFIGSA100_CT6001 which added a
    special #define BUS_ALIGN which was introduced but never used in fullhist git
    tree commit 22cfce4b82b0 ("[ARCNET]: Fixes.") in Nov 2004 for Linux v2.6.10.
    
    This BUS_ALIGN #define tries to allow 8 bit devices to work on a 16 bit
    bus by aligning addresses to 16 bit boundaries.
    
    Move this currently unused CONFIG_SA1100_CT6001 BUS_ALIGN macro from
    com20020.h to arcdevice.h.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 5fdde6946427..cf607ffcf358 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -56,25 +56,26 @@ static void regdump(struct net_device *dev)
 	int count;
 
 	netdev_dbg(dev, "register dump:\n");
-	for (count = ioaddr; count < ioaddr + 16; count++) {
+	for (count = 0; count < 16; count++) {
 		if (!(count % 16))
-			pr_cont("%04X:", count);
-		pr_cont(" %02X", inb(count));
+			pr_cont("%04X:", ioaddr + count);
+		pr_cont(" %02X", arcnet_inb(ioaddr, count));
 	}
 	pr_cont("\n");
 
 	netdev_dbg(dev, "buffer0 dump:\n");
 	/* set up the address register */
 	count = 0;
-	outb((count >> 8) | RDDATAflag | AUTOINCflag, _ADDR_HI);
-	outb(count & 0xff, _ADDR_LO);
+	arcnet_outb((count >> 8) | RDDATAflag | AUTOINCflag,
+		    ioaddr, com20020_REG_W_ADDR_HI);
+	arcnet_outb(count & 0xff, ioaddr, COM20020_REG_W_ADDR_LO);
 
 	for (count = 0; count < 256 + 32; count++) {
 		if (!(count % 16))
 			pr_cont("%04X:", count);
 
 		/* copy the data */
-		pr_cont(" %02X", inb(_MEMDATA));
+		pr_cont(" %02X", arcnet_inb(ioaddr, COM20020_REG_RW_MEMDATA));
 	}
 	pr_cont("\n");
 #endif
@@ -292,7 +293,9 @@ static int com20020_resume(struct pcmcia_device *link)
 		int ioaddr = dev->base_addr;
 		struct arcnet_local *lp = netdev_priv(dev);
 
-		ARCRESET;
+		arcnet_outb(lp->config | 0x80, ioaddr, COM20020_REG_W_CONFIG);
+		udelay(5);
+		arcnet_outb(lp->config, ioaddr, COM20020_REG_W_CONFIG);
 	}
 
 	return 0;

commit 26c6d281688e8bb8154fa78c60e551d024f5d0b8
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:06:03 2015 -0700

    arcnet: Move files out of include/linux
    
    These #include files don't need to be in the include/linux directory
    as they can be local to drivers/net/arcnet/
    
    Move them and update the #include statements.
    
    Update the MAINTAINERS file pattern by deleting arcdevice from the
    NETWORKING block as arcnet is currently unmaintained.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 854169489b68..5fdde6946427 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -42,13 +42,12 @@
 #include <linux/delay.h>
 #include <linux/module.h>
 #include <linux/netdevice.h>
-#include <linux/arcdevice.h>
-#include <linux/com20020.h>
-
+#include <linux/io.h>
 #include <pcmcia/cistpl.h>
 #include <pcmcia/ds.h>
 
-#include <linux/io.h>
+#include "arcdevice.h"
+#include "com20020.h"
 
 static void regdump(struct net_device *dev)
 {

commit 05a24b234b9dda3720208b74503f2cf1d05774ee
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:56 2015 -0700

    arcnet: Convert printk to pr_<level>
    
    Use the more current logging style.
    
    Remove #define VERSION, use pr_info normally.
    Add pr_fmt with "arcnet:" prefixes and KBUILD_MODNAME.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 13fe53864383..854169489b68 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -31,6 +31,9 @@
  *
  * **********************
  */
+
+#define pr_fmt(fmt) "arcnet:" KBUILD_MODNAME ": " fmt
+
 #include <linux/kernel.h>
 #include <linux/ptrace.h>
 #include <linux/slab.h>
@@ -47,8 +50,6 @@
 
 #include <linux/io.h>
 
-#define VERSION "arcnet: COM20020 PCMCIA support loaded.\n"
-
 static void regdump(struct net_device *dev)
 {
 #ifdef DEBUG

commit f2f0a16bf89a1bbf2f774e060de85ffbd8fff162
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:52 2015 -0700

    arcnet: Use network block comment style
    
    Conformity can be useful.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 437b456afe68..13fe53864383 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -162,8 +162,7 @@ static void com20020_detach(struct pcmcia_device *link)
 
 	unregister_netdev(dev);
 
-	/*
-	 * this is necessary because we register our IRQ separately
+	/* this is necessary because we register our IRQ separately
 	 * from card services.
 	 */
 	if (dev->irq)

commit 5e7ef9134ce1b8ae8d686ce08b9746b32535964d
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:51 2015 -0700

    arcnet: Use include/linux path for asm
    
    Use the preferred kernel include path for asm paths.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 532410bb3dd8..437b456afe68 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -45,7 +45,7 @@
 #include <pcmcia/cistpl.h>
 #include <pcmcia/ds.h>
 
-#include <asm/io.h>
+#include <linux/io.h>
 
 #define VERSION "arcnet: COM20020 PCMCIA support loaded.\n"
 

commit 7f5e760c1b269044a4ba1b269263beca80ae2741
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:49 2015 -0700

    arcnet: Use normal kernel brace style
    
    Move braces normal kernel locations.
    Add missing braces.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 2eafb298626b..532410bb3dd8 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -56,8 +56,7 @@ static void regdump(struct net_device *dev)
 	int count;
 
 	netdev_dbg(dev, "register dump:\n");
-	for (count = ioaddr; count < ioaddr + 16; count++)
-	{
+	for (count = ioaddr; count < ioaddr + 16; count++) {
 		if (!(count % 16))
 			pr_cont("%04X:", count);
 		pr_cont(" %02X", inb(count));
@@ -70,8 +69,7 @@ static void regdump(struct net_device *dev)
 	outb((count >> 8) | RDDATAflag | AUTOINCflag, _ADDR_HI);
 	outb(count & 0xff, _ADDR_LO);
 
-	for (count = 0; count < 256 + 32; count++)
-	{
+	for (count = 0; count < 256 + 32; count++) {
 		if (!(count % 16))
 			pr_cont("%04X:", count);
 
@@ -175,11 +173,9 @@ static void com20020_detach(struct pcmcia_device *link)
 
 	/* Unlink device structure, free bits */
 	dev_dbg(&link->dev, "unlinking...\n");
-	if (link->priv)
-	{
+	if (link->priv) {
 		dev = info->dev;
-		if (dev)
-		{
+		if (dev) {
 			dev_dbg(&link->dev, "kfree...\n");
 			free_netdev(dev);
 		}
@@ -210,21 +206,18 @@ static int com20020_config(struct pcmcia_device *link)
 	i = -ENODEV;
 	link->io_lines = 16;
 
-	if (!link->resource[0]->start)
-	{
-		for (ioaddr = 0x100; ioaddr < 0x400; ioaddr += 0x10)
-		{
+	if (!link->resource[0]->start) {
+		for (ioaddr = 0x100; ioaddr < 0x400; ioaddr += 0x10) {
 			link->resource[0]->start = ioaddr;
 			i = pcmcia_request_io(link);
 			if (i == 0)
 				break;
 		}
-	}
-	else
+	} else {
 		i = pcmcia_request_io(link);
+	}
 
-	if (i != 0)
-	{
+	if (i != 0) {
 		dev_dbg(&link->dev, "requestIO failed totally!\n");
 		goto failed;
 	}
@@ -234,8 +227,7 @@ static int com20020_config(struct pcmcia_device *link)
 
 	dev_dbg(&link->dev, "request IRQ %d\n",
 		link->irq);
-	if (!link->irq)
-	{
+	if (!link->irq) {
 		dev_dbg(&link->dev, "requestIRQ failed totally!\n");
 		goto failed;
 	}
@@ -246,8 +238,7 @@ static int com20020_config(struct pcmcia_device *link)
 	if (ret)
 		goto failed;
 
-	if (com20020_check(dev))
-	{
+	if (com20020_check(dev)) {
 		regdump(dev);
 		goto failed;
 	}

commit 01a1d5ac4e1a5890fd6c0d0ae900e1b6e4f851d6
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:48 2015 -0700

    arcnet: Add and remove blank lines
    
    Use a more current kernel line style.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index f68752102379..2eafb298626b 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -49,7 +49,6 @@
 
 #define VERSION "arcnet: COM20020 PCMCIA support loaded.\n"
 
-
 static void regdump(struct net_device *dev)
 {
 #ifdef DEBUG
@@ -83,8 +82,6 @@ static void regdump(struct net_device *dev)
 #endif
 }
 
-
-
 /*====================================================================*/
 
 /* Parameters that can be set with 'insmod' */
@@ -304,6 +301,7 @@ static int com20020_resume(struct pcmcia_device *link)
 	if (link->open) {
 		int ioaddr = dev->base_addr;
 		struct arcnet_local *lp = netdev_priv(dev);
+
 		ARCRESET;
 	}
 

commit cb334648a10c7fa6f0f163c22602f4dc1c6d56b4
Author: Joe Perches <joe@perches.com>
Date:   Tue May 5 10:05:47 2015 -0700

    arcnet: Use normal kernel spacing style
    
    Standardized spacing is easier to read.
    
    git diff -w shows no differences.
    objdiff shows no differences.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 057d9582132a..f68752102379 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -1,6 +1,6 @@
 /*
  * Linux ARCnet driver - COM20020 PCMCIA support
- * 
+ *
  * Written 1994-1999 by Avery Pennarun,
  *    based on an ISA version by David Woodhouse.
  * Derived from ibmtr_cs.c by Steve Kipisz (pcmcia-cs 3.1.4)
@@ -19,14 +19,14 @@
  * Director, National Security Agency.  This software may only be used
  * and distributed according to the terms of the GNU General Public License as
  * modified by SRC, incorporated herein by reference.
- * 
+ *
  * **********************
  * Changes:
  * Arnaldo Carvalho de Melo <acme@conectiva.com.br> - 08/08/2000
  * - reorganize kmallocs in com20020_attach, checking all for failure
  *   and releasing the previous allocations if one fails
  * **********************
- * 
+ *
  * For more details, see drivers/net/arcnet.c
  *
  * **********************
@@ -53,33 +53,33 @@
 static void regdump(struct net_device *dev)
 {
 #ifdef DEBUG
-    int ioaddr = dev->base_addr;
-    int count;
-    
-    netdev_dbg(dev, "register dump:\n");
-    for (count = ioaddr; count < ioaddr + 16; count++)
-    {
-	if (!(count % 16))
-	    pr_cont("%04X:", count);
-	pr_cont(" %02X", inb(count));
-    }
-    pr_cont("\n");
-    
-    netdev_dbg(dev, "buffer0 dump:\n");
+	int ioaddr = dev->base_addr;
+	int count;
+
+	netdev_dbg(dev, "register dump:\n");
+	for (count = ioaddr; count < ioaddr + 16; count++)
+	{
+		if (!(count % 16))
+			pr_cont("%04X:", count);
+		pr_cont(" %02X", inb(count));
+	}
+	pr_cont("\n");
+
+	netdev_dbg(dev, "buffer0 dump:\n");
 	/* set up the address register */
-        count = 0;
+	count = 0;
 	outb((count >> 8) | RDDATAflag | AUTOINCflag, _ADDR_HI);
 	outb(count & 0xff, _ADDR_LO);
-    
-    for (count = 0; count < 256+32; count++)
-    {
-	if (!(count % 16))
-	    pr_cont("%04X:", count);
-	
-	/* copy the data */
-	pr_cont(" %02X", inb(_MEMDATA));
-    }
-    pr_cont("\n");
+
+	for (count = 0; count < 256 + 32; count++)
+	{
+		if (!(count % 16))
+			pr_cont("%04X:", count);
+
+		/* copy the data */
+		pr_cont(" %02X", inb(_MEMDATA));
+	}
+	pr_cont("\n");
 #endif
 }
 
@@ -114,169 +114,169 @@ static void com20020_detach(struct pcmcia_device *p_dev);
 
 static int com20020_probe(struct pcmcia_device *p_dev)
 {
-    struct com20020_dev *info;
-    struct net_device *dev;
-    struct arcnet_local *lp;
+	struct com20020_dev *info;
+	struct net_device *dev;
+	struct arcnet_local *lp;
 
-    dev_dbg(&p_dev->dev, "com20020_attach()\n");
+	dev_dbg(&p_dev->dev, "com20020_attach()\n");
 
-    /* Create new network device */
-    info = kzalloc(sizeof(*info), GFP_KERNEL);
-    if (!info)
-	goto fail_alloc_info;
+	/* Create new network device */
+	info = kzalloc(sizeof(*info), GFP_KERNEL);
+	if (!info)
+		goto fail_alloc_info;
 
-    dev = alloc_arcdev("");
-    if (!dev)
-	goto fail_alloc_dev;
+	dev = alloc_arcdev("");
+	if (!dev)
+		goto fail_alloc_dev;
 
-    lp = netdev_priv(dev);
-    lp->timeout = timeout;
-    lp->backplane = backplane;
-    lp->clockp = clockp;
-    lp->clockm = clockm & 3;
-    lp->hw.owner = THIS_MODULE;
+	lp = netdev_priv(dev);
+	lp->timeout = timeout;
+	lp->backplane = backplane;
+	lp->clockp = clockp;
+	lp->clockm = clockm & 3;
+	lp->hw.owner = THIS_MODULE;
 
-    /* fill in our module parameters as defaults */
-    dev->dev_addr[0] = node;
+	/* fill in our module parameters as defaults */
+	dev->dev_addr[0] = node;
 
-    p_dev->resource[0]->flags |= IO_DATA_PATH_WIDTH_8;
-    p_dev->resource[0]->end = 16;
-    p_dev->config_flags |= CONF_ENABLE_IRQ;
+	p_dev->resource[0]->flags |= IO_DATA_PATH_WIDTH_8;
+	p_dev->resource[0]->end = 16;
+	p_dev->config_flags |= CONF_ENABLE_IRQ;
 
-    info->dev = dev;
-    p_dev->priv = info;
+	info->dev = dev;
+	p_dev->priv = info;
 
-    return com20020_config(p_dev);
+	return com20020_config(p_dev);
 
 fail_alloc_dev:
-    kfree(info);
+	kfree(info);
 fail_alloc_info:
-    return -ENOMEM;
+	return -ENOMEM;
 } /* com20020_attach */
 
 static void com20020_detach(struct pcmcia_device *link)
 {
-    struct com20020_dev *info = link->priv;
-    struct net_device *dev = info->dev;
+	struct com20020_dev *info = link->priv;
+	struct net_device *dev = info->dev;
 
-    dev_dbg(&link->dev, "detach...\n");
+	dev_dbg(&link->dev, "detach...\n");
 
-    dev_dbg(&link->dev, "com20020_detach\n");
+	dev_dbg(&link->dev, "com20020_detach\n");
 
-    dev_dbg(&link->dev, "unregister...\n");
+	dev_dbg(&link->dev, "unregister...\n");
 
-    unregister_netdev(dev);
+	unregister_netdev(dev);
 
-    /*
-     * this is necessary because we register our IRQ separately
-     * from card services.
-     */
-    if (dev->irq)
-	    free_irq(dev->irq, dev);
+	/*
+	 * this is necessary because we register our IRQ separately
+	 * from card services.
+	 */
+	if (dev->irq)
+		free_irq(dev->irq, dev);
 
-    com20020_release(link);
+	com20020_release(link);
 
-    /* Unlink device structure, free bits */
-    dev_dbg(&link->dev, "unlinking...\n");
-    if (link->priv)
-    {
-	dev = info->dev;
-	if (dev)
+	/* Unlink device structure, free bits */
+	dev_dbg(&link->dev, "unlinking...\n");
+	if (link->priv)
 	{
-	    dev_dbg(&link->dev, "kfree...\n");
-	    free_netdev(dev);
+		dev = info->dev;
+		if (dev)
+		{
+			dev_dbg(&link->dev, "kfree...\n");
+			free_netdev(dev);
+		}
+		dev_dbg(&link->dev, "kfree2...\n");
+		kfree(info);
 	}
-	dev_dbg(&link->dev, "kfree2...\n");
-	kfree(info);
-    }
 
 } /* com20020_detach */
 
 static int com20020_config(struct pcmcia_device *link)
 {
-    struct arcnet_local *lp;
-    struct com20020_dev *info;
-    struct net_device *dev;
-    int i, ret;
-    int ioaddr;
+	struct arcnet_local *lp;
+	struct com20020_dev *info;
+	struct net_device *dev;
+	int i, ret;
+	int ioaddr;
+
+	info = link->priv;
+	dev = info->dev;
 
-    info = link->priv;
-    dev = info->dev;
+	dev_dbg(&link->dev, "config...\n");
 
-    dev_dbg(&link->dev, "config...\n");
+	dev_dbg(&link->dev, "com20020_config\n");
 
-    dev_dbg(&link->dev, "com20020_config\n");
+	dev_dbg(&link->dev, "baseport1 is %Xh\n",
+		(unsigned int)link->resource[0]->start);
 
-    dev_dbg(&link->dev, "baseport1 is %Xh\n",
-	    (unsigned int) link->resource[0]->start);
+	i = -ENODEV;
+	link->io_lines = 16;
 
-    i = -ENODEV;
-    link->io_lines = 16;
+	if (!link->resource[0]->start)
+	{
+		for (ioaddr = 0x100; ioaddr < 0x400; ioaddr += 0x10)
+		{
+			link->resource[0]->start = ioaddr;
+			i = pcmcia_request_io(link);
+			if (i == 0)
+				break;
+		}
+	}
+	else
+		i = pcmcia_request_io(link);
+
+	if (i != 0)
+	{
+		dev_dbg(&link->dev, "requestIO failed totally!\n");
+		goto failed;
+	}
+
+	ioaddr = dev->base_addr = link->resource[0]->start;
+	dev_dbg(&link->dev, "got ioaddr %Xh\n", ioaddr);
+
+	dev_dbg(&link->dev, "request IRQ %d\n",
+		link->irq);
+	if (!link->irq)
+	{
+		dev_dbg(&link->dev, "requestIRQ failed totally!\n");
+		goto failed;
+	}
 
-    if (!link->resource[0]->start)
-    {
-	for (ioaddr = 0x100; ioaddr < 0x400; ioaddr += 0x10)
+	dev->irq = link->irq;
+
+	ret = pcmcia_enable_device(link);
+	if (ret)
+		goto failed;
+
+	if (com20020_check(dev))
 	{
-	    link->resource[0]->start = ioaddr;
-	    i = pcmcia_request_io(link);
-	    if (i == 0)
-		break;
+		regdump(dev);
+		goto failed;
 	}
-    }
-    else
-	i = pcmcia_request_io(link);
-    
-    if (i != 0)
-    {
-	dev_dbg(&link->dev, "requestIO failed totally!\n");
-	goto failed;
-    }
-	
-    ioaddr = dev->base_addr = link->resource[0]->start;
-    dev_dbg(&link->dev, "got ioaddr %Xh\n", ioaddr);
-
-    dev_dbg(&link->dev, "request IRQ %d\n",
-	    link->irq);
-    if (!link->irq)
-    {
-	dev_dbg(&link->dev, "requestIRQ failed totally!\n");
-	goto failed;
-    }
-
-    dev->irq = link->irq;
-
-    ret = pcmcia_enable_device(link);
-    if (ret)
-	    goto failed;
-
-    if (com20020_check(dev))
-    {
-	regdump(dev);
-	goto failed;
-    }
-    
-    lp = netdev_priv(dev);
-    lp->card_name = "PCMCIA COM20020";
-    lp->card_flags = ARC_CAN_10MBIT; /* pretend all of them can 10Mbit */
-
-    SET_NETDEV_DEV(dev, &link->dev);
-
-    i = com20020_found(dev, 0);	/* calls register_netdev */
-    
-    if (i != 0) {
-	dev_notice(&link->dev,
-		   "com20020_found() failed\n");
-	goto failed;
-    }
-
-    netdev_dbg(dev, "port %#3lx, irq %d\n",
-	       dev->base_addr, dev->irq);
-    return 0;
+
+	lp = netdev_priv(dev);
+	lp->card_name = "PCMCIA COM20020";
+	lp->card_flags = ARC_CAN_10MBIT; /* pretend all of them can 10Mbit */
+
+	SET_NETDEV_DEV(dev, &link->dev);
+
+	i = com20020_found(dev, 0);	/* calls register_netdev */
+
+	if (i != 0) {
+		dev_notice(&link->dev,
+			   "com20020_found() failed\n");
+		goto failed;
+	}
+
+	netdev_dbg(dev, "port %#3lx, irq %d\n",
+		   dev->base_addr, dev->irq);
+	return 0;
 
 failed:
-    dev_dbg(&link->dev, "com20020_config failed...\n");
-    com20020_release(link);
-    return -ENODEV;
+	dev_dbg(&link->dev, "com20020_config failed...\n");
+	com20020_release(link);
+	return -ENODEV;
 } /* com20020_config */
 
 static void com20020_release(struct pcmcia_device *link)
@@ -312,9 +312,9 @@ static int com20020_resume(struct pcmcia_device *link)
 
 static const struct pcmcia_device_id com20020_ids[] = {
 	PCMCIA_DEVICE_PROD_ID12("Contemporary Control Systems, Inc.",
-			"PCM20 Arcnet Adapter", 0x59991666, 0x95dfffaf),
+				"PCM20 Arcnet Adapter", 0x59991666, 0x95dfffaf),
 	PCMCIA_DEVICE_PROD_ID12("SoHard AG",
-			"SH ARC PCMCIA", 0xf8991729, 0x69dff0c7),
+				"SH ARC PCMCIA", 0xf8991729, 0x69dff0c7),
 	PCMCIA_DEVICE_NULL
 };
 MODULE_DEVICE_TABLE(pcmcia, com20020_ids);

commit c51da42a6346c0c747e70a4f5ae873da1150a784
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Mon Sep 29 11:55:37 2014 +0200

    ARCNET: add support for multi interfaces on com20020
    
    The com20020-pci driver is currently designed to instance
    one netdev with one pci device. This patch adds support to
    instance many cards with one pci device, depending on the device
    data in the private data.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 1a790a20210d..057d9582132a 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -112,10 +112,6 @@ static void com20020_detach(struct pcmcia_device *p_dev);
 
 /*====================================================================*/
 
-struct com20020_dev {
-    struct net_device       *dev;
-};
-
 static int com20020_probe(struct pcmcia_device *p_dev)
 {
     struct com20020_dev *info;

commit 2dfd2533e9e700661e5c9e87831fb1c4d8340176
Author: Himangi Saraogi <himangi774@gmail.com>
Date:   Sat Aug 9 21:37:18 2014 +0530

    com20020_cs: Remove typedef com20020_dev_t
    
    The Linux kernel coding style guidelines suggest not using typedefs
    for structure types. This patch gets rid of the typedef for
    com20020_dev_t. Also, the name of the struct is changed to drop the
    _t, to make the name look less typedef-like.
    
    The following Coccinelle semantic patch detects the case:
    
    @tn@
    identifier i;
    type td;
    @@
    
    -typedef
     struct i { ... }
    -td
     ;
    
    @@
    type tn.td;
    identifier tn.i;
    @@
    
    -td
    + struct i
    
    Signed-off-by: Himangi Saraogi <himangi774@gmail.com>
    Acked-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 326a612a2730..1a790a20210d 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -112,20 +112,20 @@ static void com20020_detach(struct pcmcia_device *p_dev);
 
 /*====================================================================*/
 
-typedef struct com20020_dev_t {
+struct com20020_dev {
     struct net_device       *dev;
-} com20020_dev_t;
+};
 
 static int com20020_probe(struct pcmcia_device *p_dev)
 {
-    com20020_dev_t *info;
+    struct com20020_dev *info;
     struct net_device *dev;
     struct arcnet_local *lp;
 
     dev_dbg(&p_dev->dev, "com20020_attach()\n");
 
     /* Create new network device */
-    info = kzalloc(sizeof(struct com20020_dev_t), GFP_KERNEL);
+    info = kzalloc(sizeof(*info), GFP_KERNEL);
     if (!info)
 	goto fail_alloc_info;
 
@@ -160,7 +160,7 @@ static int com20020_probe(struct pcmcia_device *p_dev)
 
 static void com20020_detach(struct pcmcia_device *link)
 {
-    struct com20020_dev_t *info = link->priv;
+    struct com20020_dev *info = link->priv;
     struct net_device *dev = info->dev;
 
     dev_dbg(&link->dev, "detach...\n");
@@ -199,7 +199,7 @@ static void com20020_detach(struct pcmcia_device *link)
 static int com20020_config(struct pcmcia_device *link)
 {
     struct arcnet_local *lp;
-    com20020_dev_t *info;
+    struct com20020_dev *info;
     struct net_device *dev;
     int i, ret;
     int ioaddr;
@@ -291,7 +291,7 @@ static void com20020_release(struct pcmcia_device *link)
 
 static int com20020_suspend(struct pcmcia_device *link)
 {
-	com20020_dev_t *info = link->priv;
+	struct com20020_dev *info = link->priv;
 	struct net_device *dev = info->dev;
 
 	if (link->open)
@@ -302,7 +302,7 @@ static int com20020_suspend(struct pcmcia_device *link)
 
 static int com20020_resume(struct pcmcia_device *link)
 {
-	com20020_dev_t *info = link->priv;
+	struct com20020_dev *info = link->priv;
 	struct net_device *dev = info->dev;
 
 	if (link->open) {

commit a81ab36bf52d0ca3a32251a923be1dbced726141
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jan 8 15:32:47 2014 -0500

    drivers/net: delete non-required instances of include <linux/init.h>
    
    None of these files are actually using any __init type directives
    and hence don't need to include <linux/init.h>.   Most are just a
    left over from __devinit and __cpuinit removal, or simply due to
    code getting copied from one driver to the next.
    
    This covers everything under drivers/net except for wireless, which
    has been submitted separately.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 74dc1875f9cd..326a612a2730 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -32,7 +32,6 @@
  * **********************
  */
 #include <linux/kernel.h>
-#include <linux/init.h>
 #include <linux/ptrace.h>
 #include <linux/slab.h>
 #include <linux/string.h>

commit fdd3f29eddd1b7c26b3b42e3633afcb22a28fcb3
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Mar 6 11:27:43 2013 -0700

    drivers/net: use module_pcmcia_driver() in pcmcia drivers
    
    Use the new module_pcmcia_driver() macro to remove the boilerplate
    module init/exit code in the pcmcia drivers.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 5bed4c4e2508..74dc1875f9cd 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -333,16 +333,4 @@ static struct pcmcia_driver com20020_cs_driver = {
 	.suspend	= com20020_suspend,
 	.resume		= com20020_resume,
 };
-
-static int __init init_com20020_cs(void)
-{
-	return pcmcia_register_driver(&com20020_cs_driver);
-}
-
-static void __exit exit_com20020_cs(void)
-{
-	pcmcia_unregister_driver(&com20020_cs_driver);
-}
-
-module_init(init_com20020_cs);
-module_exit(exit_com20020_cs);
+module_pcmcia_driver(com20020_cs_driver);

commit 9ffc93f203c18a70623f21950f1dd473c9ec48cd
Author: David Howells <dhowells@redhat.com>
Date:   Wed Mar 28 18:30:03 2012 +0100

    Remove all #inclusions of asm/system.h
    
    Remove all #inclusions of asm/system.h preparatory to splitting and killing
    it.  Performed with the following command:
    
    perl -p -i -e 's!^#\s*include\s*<asm/system[.]h>.*\n!!' `grep -Irl '^#\s*include\s*<asm/system[.]h>' *`
    
    Signed-off-by: David Howells <dhowells@redhat.com>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
index 980e65c14936..5bed4c4e2508 100644
--- a/drivers/net/arcnet/com20020_cs.c
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -47,7 +47,6 @@
 #include <pcmcia/ds.h>
 
 #include <asm/io.h>
-#include <asm/system.h>
 
 #define VERSION "arcnet: COM20020 PCMCIA support loaded.\n"
 

commit 330278cde612888e79fc4ab13d8f725258e903dd
Author: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
Date:   Mon Aug 22 18:04:50 2011 -0700

    com20020_cs: Move the PCMCIA Arcnet driver
    
    Move the COM20020 PCMICA Arcnet driver into drivers/net/arcnet/ with
    the other Arcnet drivers.  Made the necessary Kconfig and Makefile
    changes as well.
    
    Since this was the "last" PCMCIA driver in drivers/net/pcmcia/, this patch
    also cleans up the references to drivers/net/pcmcia.
    
    CC: Arnaldo Carvalho de Melo <acme@ghostprotocols.net>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

diff --git a/drivers/net/arcnet/com20020_cs.c b/drivers/net/arcnet/com20020_cs.c
new file mode 100644
index 000000000000..980e65c14936
--- /dev/null
+++ b/drivers/net/arcnet/com20020_cs.c
@@ -0,0 +1,349 @@
+/*
+ * Linux ARCnet driver - COM20020 PCMCIA support
+ * 
+ * Written 1994-1999 by Avery Pennarun,
+ *    based on an ISA version by David Woodhouse.
+ * Derived from ibmtr_cs.c by Steve Kipisz (pcmcia-cs 3.1.4)
+ *    which was derived from pcnet_cs.c by David Hinds.
+ * Some additional portions derived from skeleton.c by Donald Becker.
+ *
+ * Special thanks to Contemporary Controls, Inc. (www.ccontrols.com)
+ *  for sponsoring the further development of this driver.
+ *
+ * **********************
+ *
+ * The original copyright of skeleton.c was as follows:
+ *
+ * skeleton.c Written 1993 by Donald Becker.
+ * Copyright 1993 United States Government as represented by the
+ * Director, National Security Agency.  This software may only be used
+ * and distributed according to the terms of the GNU General Public License as
+ * modified by SRC, incorporated herein by reference.
+ * 
+ * **********************
+ * Changes:
+ * Arnaldo Carvalho de Melo <acme@conectiva.com.br> - 08/08/2000
+ * - reorganize kmallocs in com20020_attach, checking all for failure
+ *   and releasing the previous allocations if one fails
+ * **********************
+ * 
+ * For more details, see drivers/net/arcnet.c
+ *
+ * **********************
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/ptrace.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/timer.h>
+#include <linux/delay.h>
+#include <linux/module.h>
+#include <linux/netdevice.h>
+#include <linux/arcdevice.h>
+#include <linux/com20020.h>
+
+#include <pcmcia/cistpl.h>
+#include <pcmcia/ds.h>
+
+#include <asm/io.h>
+#include <asm/system.h>
+
+#define VERSION "arcnet: COM20020 PCMCIA support loaded.\n"
+
+
+static void regdump(struct net_device *dev)
+{
+#ifdef DEBUG
+    int ioaddr = dev->base_addr;
+    int count;
+    
+    netdev_dbg(dev, "register dump:\n");
+    for (count = ioaddr; count < ioaddr + 16; count++)
+    {
+	if (!(count % 16))
+	    pr_cont("%04X:", count);
+	pr_cont(" %02X", inb(count));
+    }
+    pr_cont("\n");
+    
+    netdev_dbg(dev, "buffer0 dump:\n");
+	/* set up the address register */
+        count = 0;
+	outb((count >> 8) | RDDATAflag | AUTOINCflag, _ADDR_HI);
+	outb(count & 0xff, _ADDR_LO);
+    
+    for (count = 0; count < 256+32; count++)
+    {
+	if (!(count % 16))
+	    pr_cont("%04X:", count);
+	
+	/* copy the data */
+	pr_cont(" %02X", inb(_MEMDATA));
+    }
+    pr_cont("\n");
+#endif
+}
+
+
+
+/*====================================================================*/
+
+/* Parameters that can be set with 'insmod' */
+
+static int node;
+static int timeout = 3;
+static int backplane;
+static int clockp;
+static int clockm;
+
+module_param(node, int, 0);
+module_param(timeout, int, 0);
+module_param(backplane, int, 0);
+module_param(clockp, int, 0);
+module_param(clockm, int, 0);
+
+MODULE_LICENSE("GPL");
+
+/*====================================================================*/
+
+static int com20020_config(struct pcmcia_device *link);
+static void com20020_release(struct pcmcia_device *link);
+
+static void com20020_detach(struct pcmcia_device *p_dev);
+
+/*====================================================================*/
+
+typedef struct com20020_dev_t {
+    struct net_device       *dev;
+} com20020_dev_t;
+
+static int com20020_probe(struct pcmcia_device *p_dev)
+{
+    com20020_dev_t *info;
+    struct net_device *dev;
+    struct arcnet_local *lp;
+
+    dev_dbg(&p_dev->dev, "com20020_attach()\n");
+
+    /* Create new network device */
+    info = kzalloc(sizeof(struct com20020_dev_t), GFP_KERNEL);
+    if (!info)
+	goto fail_alloc_info;
+
+    dev = alloc_arcdev("");
+    if (!dev)
+	goto fail_alloc_dev;
+
+    lp = netdev_priv(dev);
+    lp->timeout = timeout;
+    lp->backplane = backplane;
+    lp->clockp = clockp;
+    lp->clockm = clockm & 3;
+    lp->hw.owner = THIS_MODULE;
+
+    /* fill in our module parameters as defaults */
+    dev->dev_addr[0] = node;
+
+    p_dev->resource[0]->flags |= IO_DATA_PATH_WIDTH_8;
+    p_dev->resource[0]->end = 16;
+    p_dev->config_flags |= CONF_ENABLE_IRQ;
+
+    info->dev = dev;
+    p_dev->priv = info;
+
+    return com20020_config(p_dev);
+
+fail_alloc_dev:
+    kfree(info);
+fail_alloc_info:
+    return -ENOMEM;
+} /* com20020_attach */
+
+static void com20020_detach(struct pcmcia_device *link)
+{
+    struct com20020_dev_t *info = link->priv;
+    struct net_device *dev = info->dev;
+
+    dev_dbg(&link->dev, "detach...\n");
+
+    dev_dbg(&link->dev, "com20020_detach\n");
+
+    dev_dbg(&link->dev, "unregister...\n");
+
+    unregister_netdev(dev);
+
+    /*
+     * this is necessary because we register our IRQ separately
+     * from card services.
+     */
+    if (dev->irq)
+	    free_irq(dev->irq, dev);
+
+    com20020_release(link);
+
+    /* Unlink device structure, free bits */
+    dev_dbg(&link->dev, "unlinking...\n");
+    if (link->priv)
+    {
+	dev = info->dev;
+	if (dev)
+	{
+	    dev_dbg(&link->dev, "kfree...\n");
+	    free_netdev(dev);
+	}
+	dev_dbg(&link->dev, "kfree2...\n");
+	kfree(info);
+    }
+
+} /* com20020_detach */
+
+static int com20020_config(struct pcmcia_device *link)
+{
+    struct arcnet_local *lp;
+    com20020_dev_t *info;
+    struct net_device *dev;
+    int i, ret;
+    int ioaddr;
+
+    info = link->priv;
+    dev = info->dev;
+
+    dev_dbg(&link->dev, "config...\n");
+
+    dev_dbg(&link->dev, "com20020_config\n");
+
+    dev_dbg(&link->dev, "baseport1 is %Xh\n",
+	    (unsigned int) link->resource[0]->start);
+
+    i = -ENODEV;
+    link->io_lines = 16;
+
+    if (!link->resource[0]->start)
+    {
+	for (ioaddr = 0x100; ioaddr < 0x400; ioaddr += 0x10)
+	{
+	    link->resource[0]->start = ioaddr;
+	    i = pcmcia_request_io(link);
+	    if (i == 0)
+		break;
+	}
+    }
+    else
+	i = pcmcia_request_io(link);
+    
+    if (i != 0)
+    {
+	dev_dbg(&link->dev, "requestIO failed totally!\n");
+	goto failed;
+    }
+	
+    ioaddr = dev->base_addr = link->resource[0]->start;
+    dev_dbg(&link->dev, "got ioaddr %Xh\n", ioaddr);
+
+    dev_dbg(&link->dev, "request IRQ %d\n",
+	    link->irq);
+    if (!link->irq)
+    {
+	dev_dbg(&link->dev, "requestIRQ failed totally!\n");
+	goto failed;
+    }
+
+    dev->irq = link->irq;
+
+    ret = pcmcia_enable_device(link);
+    if (ret)
+	    goto failed;
+
+    if (com20020_check(dev))
+    {
+	regdump(dev);
+	goto failed;
+    }
+    
+    lp = netdev_priv(dev);
+    lp->card_name = "PCMCIA COM20020";
+    lp->card_flags = ARC_CAN_10MBIT; /* pretend all of them can 10Mbit */
+
+    SET_NETDEV_DEV(dev, &link->dev);
+
+    i = com20020_found(dev, 0);	/* calls register_netdev */
+    
+    if (i != 0) {
+	dev_notice(&link->dev,
+		   "com20020_found() failed\n");
+	goto failed;
+    }
+
+    netdev_dbg(dev, "port %#3lx, irq %d\n",
+	       dev->base_addr, dev->irq);
+    return 0;
+
+failed:
+    dev_dbg(&link->dev, "com20020_config failed...\n");
+    com20020_release(link);
+    return -ENODEV;
+} /* com20020_config */
+
+static void com20020_release(struct pcmcia_device *link)
+{
+	dev_dbg(&link->dev, "com20020_release\n");
+	pcmcia_disable_device(link);
+}
+
+static int com20020_suspend(struct pcmcia_device *link)
+{
+	com20020_dev_t *info = link->priv;
+	struct net_device *dev = info->dev;
+
+	if (link->open)
+		netif_device_detach(dev);
+
+	return 0;
+}
+
+static int com20020_resume(struct pcmcia_device *link)
+{
+	com20020_dev_t *info = link->priv;
+	struct net_device *dev = info->dev;
+
+	if (link->open) {
+		int ioaddr = dev->base_addr;
+		struct arcnet_local *lp = netdev_priv(dev);
+		ARCRESET;
+	}
+
+	return 0;
+}
+
+static const struct pcmcia_device_id com20020_ids[] = {
+	PCMCIA_DEVICE_PROD_ID12("Contemporary Control Systems, Inc.",
+			"PCM20 Arcnet Adapter", 0x59991666, 0x95dfffaf),
+	PCMCIA_DEVICE_PROD_ID12("SoHard AG",
+			"SH ARC PCMCIA", 0xf8991729, 0x69dff0c7),
+	PCMCIA_DEVICE_NULL
+};
+MODULE_DEVICE_TABLE(pcmcia, com20020_ids);
+
+static struct pcmcia_driver com20020_cs_driver = {
+	.owner		= THIS_MODULE,
+	.name		= "com20020_cs",
+	.probe		= com20020_probe,
+	.remove		= com20020_detach,
+	.id_table	= com20020_ids,
+	.suspend	= com20020_suspend,
+	.resume		= com20020_resume,
+};
+
+static int __init init_com20020_cs(void)
+{
+	return pcmcia_register_driver(&com20020_cs_driver);
+}
+
+static void __exit exit_com20020_cs(void)
+{
+	pcmcia_unregister_driver(&com20020_cs_driver);
+}
+
+module_init(init_com20020_cs);
+module_exit(exit_com20020_cs);
