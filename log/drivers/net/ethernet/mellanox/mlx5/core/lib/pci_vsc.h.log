commit 1ef6f1a17e56f9126472d2c50818f468f1fc43d2
Author: Feras Daoud <ferasda@mellanox.com>
Date:   Sun Dec 2 14:41:22 2018 +0200

    net/mlx5: Control CR-space access by different PFs
    
    Since the FW can be shared between different PFs/VFs it is common
    that more than one health poll will detected a failure, this can
    lead to multiple resets which are unneeded.
    
    The solution is to use a FW locking mechanism using semaphore space
    to provide a way to allow only one device to collect the cr-dump and
    to issue a sw-reset.
    
    Signed-off-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h b/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h
index 28ea6bfa439f..64272a6d7754 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h
@@ -4,6 +4,11 @@
 #ifndef __MLX5_PCI_VSC_H__
 #define __MLX5_PCI_VSC_H__
 
+enum mlx5_vsc_state {
+	MLX5_VSC_UNLOCK,
+	MLX5_VSC_LOCK,
+};
+
 enum {
 	MLX5_VSC_SPACE_SCAN_CRSPACE = 0x7,
 };
@@ -21,4 +26,7 @@ static inline bool mlx5_vsc_accessible(struct mlx5_core_dev *dev)
 	return !!dev->vsc_addr;
 }
 
+int mlx5_vsc_sem_set_space(struct mlx5_core_dev *dev, u16 space,
+			   enum mlx5_vsc_state state);
+
 #endif /* __MLX5_PCI_VSC_H__ */

commit b25bbc2f24dcab9cd186ef4003c39bf51ad0454c
Author: Alex Vesker <valex@mellanox.com>
Date:   Thu Jun 28 15:05:58 2018 +0300

    net/mlx5: Add Vendor Specific Capability access gateway
    
    The Vendor Specific Capability (VSC) is used to activate a gateway
    interfacing with the device. The gateway is used to read or write
    device configurations, which are organized in different domains (spaces).
    A configuration access may result in multiple actions, reads, writes.
    
    Example usages are accessing the Crspace domain to read the crspace or
    locking a device semaphore using the Semaphore domain.
    
    The configuration access use pci_cfg_access to prevent parallel access to
    the VSC space by the driver and userspace calls.
    
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Signed-off-by: Feras Daoud <ferasda@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h b/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h
new file mode 100644
index 000000000000..28ea6bfa439f
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/pci_vsc.h
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
+/* Copyright (c) 2019 Mellanox Technologies */
+
+#ifndef __MLX5_PCI_VSC_H__
+#define __MLX5_PCI_VSC_H__
+
+enum {
+	MLX5_VSC_SPACE_SCAN_CRSPACE = 0x7,
+};
+
+void mlx5_pci_vsc_init(struct mlx5_core_dev *dev);
+int mlx5_vsc_gw_lock(struct mlx5_core_dev *dev);
+int mlx5_vsc_gw_unlock(struct mlx5_core_dev *dev);
+int mlx5_vsc_gw_set_space(struct mlx5_core_dev *dev, u16 space,
+			  u32 *ret_space_size);
+int mlx5_vsc_gw_read_block_fast(struct mlx5_core_dev *dev, u32 *data,
+				int length);
+
+static inline bool mlx5_vsc_accessible(struct mlx5_core_dev *dev)
+{
+	return !!dev->vsc_addr;
+}
+
+#endif /* __MLX5_PCI_VSC_H__ */
