commit 0ccc171ea6a2fa34a6b898329c0a447c84e27057
Author: Yevgeny Kliteynik <kliteyn@mellanox.com>
Date:   Wed Jan 30 17:21:55 2019 +0200

    net/mlx5: Geneve, Manage Geneve TLV options
    
    Use Geneve TLV Options object to manage the flex parser matching
    on the 32-bit options data.
    
    When the first flow with a certain class/type values is requested to
    be offloaded, create a FW object with FW command (Geneve TLV Options
    general object) and start counting the number of flows using this object.
    
    During this time, any request with a different class/type values will
    fail to be offloaded.
    Once the refcount reaches 0, destroy the TLV options general object,
    and can now offload a flow with any class/type parameters.
    
    Geneve TLV Options object is added to core device.
    It is currently used to manage Geneve TLV options general
    object allocation in FW and its reference counting only.
    In the future it will also be used for managing geneve ports
    by registering callbacks for ndo_udp_tunnel_add/del.
    
    Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
    Signed-off-by: Yevgeny Kliteynik <kliteyn@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/lib/geneve.h b/drivers/net/ethernet/mellanox/mlx5/core/lib/geneve.h
new file mode 100644
index 000000000000..adee0cbba19c
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/lib/geneve.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0 OR Linux-OpenIB */
+/* Copyright (c) 2019 Mellanox Technologies. */
+
+#ifndef __MLX5_GENEVE_H__
+#define __MLX5_GENEVE_H__
+
+#include <net/geneve.h>
+#include <linux/mlx5/driver.h>
+
+struct mlx5_geneve;
+
+#ifdef CONFIG_MLX5_ESWITCH
+
+struct mlx5_geneve *mlx5_geneve_create(struct mlx5_core_dev *mdev);
+void mlx5_geneve_destroy(struct mlx5_geneve *geneve);
+
+int mlx5_geneve_tlv_option_add(struct mlx5_geneve *geneve, struct geneve_opt *opt);
+void mlx5_geneve_tlv_option_del(struct mlx5_geneve *geneve);
+
+#else /* CONFIG_MLX5_ESWITCH */
+
+static inline struct mlx5_geneve
+*mlx5_geneve_create(struct mlx5_core_dev *mdev) { return NULL; }
+static inline void
+mlx5_geneve_destroy(struct mlx5_geneve *geneve) {}
+static inline int
+mlx5_geneve_tlv_option_add(struct mlx5_geneve *geneve, struct geneve_opt *opt) { return 0; }
+static inline void
+mlx5_geneve_tlv_option_del(struct mlx5_geneve *geneve) {}
+
+#endif /* CONFIG_MLX5_ESWITCH */
+
+#endif /* __MLX5_GENEVE_H__ */
