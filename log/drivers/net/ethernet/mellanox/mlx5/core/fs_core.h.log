commit 9254f8ed15b6dcc9b04b9ad32863a7518cc5a5b1
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon May 4 08:30:10 2020 +0300

    net/mlx5: Add support in forward to namespace
    
    Currently, fs_core supports rule of forward the traffic
    to continue matching in the next priority, now we add support
    to forward the traffic matching in the next namespace.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Reviewed-by: Mark Zhang <markz@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 508108c58dae..825b662f809b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -138,6 +138,7 @@ struct fs_node {
 
 struct mlx5_flow_rule {
 	struct fs_node				node;
+	struct mlx5_flow_table			*ft;
 	struct mlx5_flow_destination		dest_attr;
 	/* next_ft should be accessed under chain_lock and only of
 	 * destination type is FWD_NEXT_fT.
@@ -175,6 +176,7 @@ struct mlx5_flow_table {
 	u32				flags;
 	struct rhltable			fgs_hash;
 	enum mlx5_flow_table_miss_action def_miss_action;
+	struct mlx5_flow_namespace	*ns;
 };
 
 struct mlx5_ft_underlay_qp {

commit 24670b1a31661815777c2e88b94c162e47ea43fc
Author: Michael Guralnik <michaelgur@mellanox.com>
Date:   Tue Mar 24 08:14:24 2020 +0200

    net/mlx5: Add support for RDMA TX steering
    
    Add new RDMA TX flow steering namespace. Flow steering rules in
    this namespace are used to filter transmitted RDMA traffic.
    
    Link: https://lore.kernel.org/r/20200324061425.1570190-2-leon@kernel.org
    Signed-off-by: Michael Guralnik <michaelgur@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index be5f5e32c1e8..508108c58dae 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -86,7 +86,8 @@ enum fs_flow_table_type {
 	FS_FT_SNIFFER_RX	= 0X5,
 	FS_FT_SNIFFER_TX	= 0X6,
 	FS_FT_RDMA_RX		= 0X7,
-	FS_FT_MAX_TYPE = FS_FT_RDMA_RX,
+	FS_FT_RDMA_TX		= 0X8,
+	FS_FT_MAX_TYPE = FS_FT_RDMA_TX,
 };
 
 enum fs_flow_table_op_mod {
@@ -116,6 +117,7 @@ struct mlx5_flow_steering {
 	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_rx_root_ns;
 	struct mlx5_flow_root_namespace	*rdma_rx_root_ns;
+	struct mlx5_flow_root_namespace	*rdma_tx_root_ns;
 	struct mlx5_flow_root_namespace	*egress_root_ns;
 };
 
@@ -316,7 +318,8 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 	(type == FS_FT_SNIFFER_RX) ? MLX5_CAP_FLOWTABLE_SNIFFER_RX(mdev, cap) :		\
 	(type == FS_FT_SNIFFER_TX) ? MLX5_CAP_FLOWTABLE_SNIFFER_TX(mdev, cap) :		\
 	(type == FS_FT_RDMA_RX) ? MLX5_CAP_FLOWTABLE_RDMA_RX(mdev, cap) :		\
-	(BUILD_BUG_ON_ZERO(FS_FT_RDMA_RX != FS_FT_MAX_TYPE))\
+	(type == FS_FT_RDMA_TX) ? MLX5_CAP_FLOWTABLE_RDMA_TX(mdev, cap) :      \
+	(BUILD_BUG_ON_ZERO(FS_FT_RDMA_TX != FS_FT_MAX_TYPE))\
 	)
 
 #endif

commit 79cdb0aaea8b5478db34afa1d4d5ecc808689a67
Author: Paul Blakey <paulb@mellanox.com>
Date:   Thu Nov 14 17:02:59 2019 +0200

    net/mlx5: Allow creating autogroups with reserved entries
    
    Exclude the last n entries for an autogrouped flow table.
    
    Reserving entries at the end of the FT will ensure that this FG will be
    the last to be evaluated. This will be used in the next patch to create
    a miss group enabling custom actions on FT miss.
    
    Signed-off-by: Paul Blakey <paulb@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index c2621b911563..be5f5e32c1e8 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -164,6 +164,7 @@ struct mlx5_flow_table {
 		unsigned int		required_groups;
 		unsigned int		group_size;
 		unsigned int		num_groups;
+		unsigned int		max_fte;
 	} autogroup;
 	/* Protect fwd_rules */
 	struct mutex			lock;

commit 1f0593e791ed3fb4074d4470a261cde62d806ed5
Author: Parav Pandit <parav@mellanox.com>
Date:   Wed Dec 11 00:35:18 2019 -0600

    Revert "net/mlx5: Support lockless FTE read lookups"
    
    This reverts commit 7dee607ed0e04500459db53001d8e02f8831f084.
    
    During cleanup path, FTE's parent node group is removed which is
    referenced by the FTE while freeing the FTE.
    Hence FTE's lockless read lookup optimization done in cited commit is
    not possible at the moment.
    
    Hence, revert the commit.
    
    This avoid below KAZAN call trace.
    
    [  110.390896] BUG: KASAN: use-after-free in find_root.isra.14+0x56/0x60
    [mlx5_core]
    [  110.391048] Read of size 4 at addr ffff888c19e6d220 by task
    swapper/12/0
    
    [  110.391219] CPU: 12 PID: 0 Comm: swapper/12 Not tainted 5.5.0-rc1+
    [  110.391222] Hardware name: HP ProLiant DL380p Gen8, BIOS P70
    08/02/2014
    [  110.391225] Call Trace:
    [  110.391229]  <IRQ>
    [  110.391246]  dump_stack+0x95/0xd5
    [  110.391307]  ? find_root.isra.14+0x56/0x60 [mlx5_core]
    [  110.391320]  print_address_description.constprop.5+0x20/0x320
    [  110.391379]  ? find_root.isra.14+0x56/0x60 [mlx5_core]
    [  110.391435]  ? find_root.isra.14+0x56/0x60 [mlx5_core]
    [  110.391441]  __kasan_report+0x149/0x18c
    [  110.391499]  ? find_root.isra.14+0x56/0x60 [mlx5_core]
    [  110.391504]  kasan_report+0x12/0x20
    [  110.391511]  __asan_report_load4_noabort+0x14/0x20
    [  110.391567]  find_root.isra.14+0x56/0x60 [mlx5_core]
    [  110.391625]  del_sw_fte_rcu+0x4a/0x100 [mlx5_core]
    [  110.391633]  rcu_core+0x404/0x1950
    [  110.391640]  ? rcu_accelerate_cbs_unlocked+0x100/0x100
    [  110.391649]  ? run_rebalance_domains+0x201/0x280
    [  110.391654]  rcu_core_si+0xe/0x10
    [  110.391661]  __do_softirq+0x181/0x66c
    [  110.391670]  irq_exit+0x12c/0x150
    [  110.391675]  smp_apic_timer_interrupt+0xf0/0x370
    [  110.391681]  apic_timer_interrupt+0xf/0x20
    [  110.391684]  </IRQ>
    [  110.391695] RIP: 0010:cpuidle_enter_state+0xfa/0xba0
    [  110.391703] Code: 3d c3 9b b5 50 e8 56 75 6e fe 48 89 45 c8 0f 1f 44
    00 00 31 ff e8 a6 94 6e fe 45 84 ff 0f 85 f6 02 00 00 fb 66 0f 1f 44 00
    00 <45> 85 f6 0f 88 db 06 00 00 4d 63 fe 4b 8d 04 7f 49 8d 04 87 49 8d
    [  110.391706] RSP: 0018:ffff888c23a6fce8 EFLAGS: 00000246 ORIG_RAX:
    ffffffffffffff13
    [  110.391712] RAX: dffffc0000000000 RBX: ffffe8ffff7002f8 RCX:
    000000000000001f
    [  110.391715] RDX: 1ffff11184ee6cb5 RSI: 0000000040277d83 RDI:
    ffff888c277365a8
    [  110.391718] RBP: ffff888c23a6fd40 R08: 0000000000000002 R09:
    0000000000035280
    [  110.391721] R10: ffff888c23a6fc80 R11: ffffed11847485d0 R12:
    ffffffffb1017740
    [  110.391723] R13: 0000000000000003 R14: 0000000000000003 R15:
    0000000000000000
    [  110.391732]  ? cpuidle_enter_state+0xea/0xba0
    [  110.391738]  cpuidle_enter+0x4f/0xa0
    [  110.391747]  call_cpuidle+0x6d/0xc0
    [  110.391752]  do_idle+0x360/0x430
    [  110.391758]  ? arch_cpu_idle_exit+0x40/0x40
    [  110.391765]  ? complete+0x67/0x80
    [  110.391771]  cpu_startup_entry+0x1d/0x20
    [  110.391779]  start_secondary+0x2f3/0x3c0
    [  110.391784]  ? set_cpu_sibling_map+0x2500/0x2500
    [  110.391795]  secondary_startup_64+0xa4/0xb0
    
    [  110.391841] Allocated by task 290:
    [  110.391917]  save_stack+0x21/0x90
    [  110.391921]  __kasan_kmalloc.constprop.8+0xa7/0xd0
    [  110.391925]  kasan_kmalloc+0x9/0x10
    [  110.391929]  kmem_cache_alloc_trace+0xf6/0x270
    [  110.391987]  create_root_ns.isra.36+0x58/0x260 [mlx5_core]
    [  110.392044]  mlx5_init_fs+0x5fd/0x1ee0 [mlx5_core]
    [  110.392092]  mlx5_load_one+0xc7a/0x3860 [mlx5_core]
    [  110.392139]  init_one+0x6ff/0xf90 [mlx5_core]
    [  110.392145]  local_pci_probe+0xde/0x190
    [  110.392150]  work_for_cpu_fn+0x56/0xa0
    [  110.392153]  process_one_work+0x678/0x1140
    [  110.392157]  worker_thread+0x573/0xba0
    [  110.392162]  kthread+0x341/0x400
    [  110.392166]  ret_from_fork+0x1f/0x40
    
    [  110.392218] Freed by task 2742:
    [  110.392288]  save_stack+0x21/0x90
    [  110.392292]  __kasan_slab_free+0x137/0x190
    [  110.392296]  kasan_slab_free+0xe/0x10
    [  110.392299]  kfree+0x94/0x250
    [  110.392357]  tree_put_node+0x257/0x360 [mlx5_core]
    [  110.392413]  tree_remove_node+0x63/0xb0 [mlx5_core]
    [  110.392469]  clean_tree+0x199/0x240 [mlx5_core]
    [  110.392525]  mlx5_cleanup_fs+0x76/0x580 [mlx5_core]
    [  110.392572]  mlx5_unload+0x22/0xc0 [mlx5_core]
    [  110.392619]  mlx5_unload_one+0x99/0x260 [mlx5_core]
    [  110.392666]  remove_one+0x61/0x160 [mlx5_core]
    [  110.392671]  pci_device_remove+0x10b/0x2c0
    [  110.392677]  device_release_driver_internal+0x1e4/0x490
    [  110.392681]  device_driver_detach+0x36/0x40
    [  110.392685]  unbind_store+0x147/0x200
    [  110.392688]  drv_attr_store+0x6f/0xb0
    [  110.392693]  sysfs_kf_write+0x127/0x1d0
    [  110.392697]  kernfs_fop_write+0x296/0x420
    [  110.392702]  __vfs_write+0x66/0x110
    [  110.392707]  vfs_write+0x1a0/0x500
    [  110.392711]  ksys_write+0x164/0x250
    [  110.392715]  __x64_sys_write+0x73/0xb0
    [  110.392720]  do_syscall_64+0x9f/0x3a0
    [  110.392725]  entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    Fixes: 7dee607ed0e0 ("net/mlx5: Support lockless FTE read lookups")
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index e8cd997f413e..c2621b911563 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -203,7 +203,6 @@ struct fs_fte {
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 	struct rhash_head		hash;
-	struct rcu_head	rcu;
 	int				modify_mask;
 };
 

commit a9f852e92e40992c4ff09ac3940f7725e016317a
Merge: 3243e04ab1c0 34c36f4564b8
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Fri Nov 22 16:27:24 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Minor conflict in drivers/s390/net/qeth_l2_main.c, kept the lock
    from commit c8183f548902 ("s390/qeth: fix potential deadlock on
    workqueue flush"), removed the code which was removed by commit
    9897d583b015 ("s390/qeth: consolidate some duplicated HW cmd code").
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commit 97fd8da281f80e7e69e0114bc906575734d4dfaf
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Sep 5 09:56:10 2019 +0300

    net/mlx5: Fix auto group size calculation
    
    Once all the large flow groups (defined by the user when the flow table
    is created - max_num_groups) were created, then all the following new
    flow groups will have only one flow table entry, even though the flow table
    has place to larger groups.
    Fix the condition to prefer large flow group.
    
    Fixes: f0d22d187473 ("net/mlx5_core: Introduce flow steering autogrouped flow table")
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 00717eba2256..c2621b911563 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -162,6 +162,7 @@ struct mlx5_flow_table {
 	struct {
 		bool			active;
 		unsigned int		required_groups;
+		unsigned int		group_size;
 		unsigned int		num_groups;
 	} autogroup;
 	/* Protect fwd_rules */

commit 7dee607ed0e04500459db53001d8e02f8831f084
Author: Parav Pandit <parav@mellanox.com>
Date:   Wed Sep 18 18:50:32 2019 -0500

    net/mlx5: Support lockless FTE read lookups
    
    During connection tracking offloads with high number of connections,
    (40K connections per second), flow table group lock contention is
    observed.
    To improve the performance by reducing lock contention, lockless
    FTE read lookup is performed as described below.
    
    Each flow table entry is refcounted.
    Flow table entry is removed when refcount drops to zero.
    rhash table allows rcu protected lookup.
    Each hash table entry insertion and removal is write lock protected.
    
    Hence, it is possible to perform lockless lookup in rhash table using
    following scheme.
    
    (a) Guard FTE entry lookup per group using rcu read lock.
    (b) Before freeing the FTE entry, wait for all readers to finish
    accessing the FTE.
    
    Below example of one reader and write in parallel racing, shows
    protection in effect with rcu lock.
    
    lookup_fte_locked()
      rcu_read_lock();
      search_hash_table()
                                      existing_flow_group_write_lock();
                                      tree_put_node(fte)
                                        drop_ref_cnt(fte)
                                        del_sw_fte(fte)
                                        del_hash_table_entry();
                                        call_rcu();
                                      existing_flow_group_write_unlock();
      get_ref_cnt(fte) fails
      rcu_read_unlock();
                                      rcu grace period();
                                        [..]
                                        kmem_cache_free(fte);
    
    Signed-off-by: Parav Pandit <parav@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 00717eba2256..f278298b0f6e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -202,6 +202,7 @@ struct fs_fte {
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 	struct rhash_head		hash;
+	struct rcu_head	rcu;
 	int				modify_mask;
 };
 

commit 38b9d1c62a6e9428048e4d080d2aabd0dc2e7f88
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Aug 18 19:15:22 2019 +0300

    net/mlx5: Add API to set the namespace steering mode
    
    Add API to set the flow steering root namesapce mode.
    Setting new mode should be called before any steering operation
    is executed on the namespace.
    This API is going to be used by steering users such switchdev.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index a133ec5487ae..00717eba2256 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -98,9 +98,15 @@ enum fs_fte_status {
 	FS_FTE_STATUS_EXISTING = 1UL << 0,
 };
 
+enum mlx5_flow_steering_mode {
+	MLX5_FLOW_STEERING_MODE_DMFS,
+	MLX5_FLOW_STEERING_MODE_SMFS
+};
+
 struct mlx5_flow_steering {
 	struct mlx5_core_dev *dev;
-	struct kmem_cache               *fgs_cache;
+	enum   mlx5_flow_steering_mode	mode;
+	struct kmem_cache		*fgs_cache;
 	struct kmem_cache               *ftes_cache;
 	struct mlx5_flow_root_namespace *root_ns;
 	struct mlx5_flow_root_namespace *fdb_root_ns;
@@ -235,6 +241,7 @@ struct mlx5_flow_group {
 
 struct mlx5_flow_root_namespace {
 	struct mlx5_flow_namespace	ns;
+	enum   mlx5_flow_steering_mode	mode;
 	struct mlx5_fs_dr_domain	fs_dr_domain;
 	enum   fs_flow_table_type	table_type;
 	struct mlx5_core_dev		*dev;
@@ -258,6 +265,9 @@ const struct mlx5_flow_cmds *mlx5_fs_cmd_get_fw_cmds(void);
 int mlx5_flow_namespace_set_peer(struct mlx5_flow_root_namespace *ns,
 				 struct mlx5_flow_root_namespace *peer_ns);
 
+int mlx5_flow_namespace_set_mode(struct mlx5_flow_namespace *ns,
+				 enum mlx5_flow_steering_mode mode);
+
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 

commit 6a48faeeca10a57d13deb29069591fc20a6e8117
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Tue Aug 20 10:06:48 2019 +0300

    net/mlx5: Add direct rule fs_cmd implementation
    
    Add support to create flow steering objects
    via direct rule API (SW steering).
    New layer is added - fs_dr, this layer translates the command that
    fs_core sends to the FW into direct rule API. In case that direct
    rule is not supported in some feature then -EOPNOTSUPP is
    returned.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index ea0f221685ab..a133ec5487ae 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -37,16 +37,23 @@
 #include <linux/mlx5/fs.h>
 #include <linux/rhashtable.h>
 #include <linux/llist.h>
+#include <steering/fs_dr.h>
 
 struct mlx5_modify_hdr {
 	enum mlx5_flow_namespace_type ns_type;
-	u32 id;
+	union {
+		struct mlx5_fs_dr_action action;
+		u32 id;
+	};
 };
 
 struct mlx5_pkt_reformat {
 	enum mlx5_flow_namespace_type ns_type;
 	int reformat_type; /* from mlx5_ifc */
-	u32 id;
+	union {
+		struct mlx5_fs_dr_action action;
+		u32 id;
+	};
 };
 
 /* FS_TYPE_PRIO_CHAINS is a PRIO that will have namespaces only,
@@ -139,6 +146,7 @@ struct mlx5_flow_handle {
 /* Type of children is mlx5_flow_group */
 struct mlx5_flow_table {
 	struct fs_node			node;
+	struct mlx5_fs_dr_table		fs_dr_table;
 	u32				id;
 	u16				vport;
 	unsigned int			max_fte;
@@ -179,6 +187,7 @@ struct mlx5_ft_underlay_qp {
 /* Type of children is mlx5_flow_rule */
 struct fs_fte {
 	struct fs_node			node;
+	struct mlx5_fs_dr_rule		fs_dr_rule;
 	u32				val[MLX5_ST_SZ_DW_MATCH_PARAM];
 	u32				dests_size;
 	u32				index;
@@ -214,6 +223,7 @@ struct mlx5_flow_group_mask {
 /* Type of children is fs_fte */
 struct mlx5_flow_group {
 	struct fs_node			node;
+	struct mlx5_fs_dr_matcher	fs_dr_matcher;
 	struct mlx5_flow_group_mask	mask;
 	u32				start_index;
 	u32				max_ftes;
@@ -225,6 +235,7 @@ struct mlx5_flow_group {
 
 struct mlx5_flow_root_namespace {
 	struct mlx5_flow_namespace	ns;
+	struct mlx5_fs_dr_domain	fs_dr_domain;
 	enum   fs_flow_table_type	table_type;
 	struct mlx5_core_dev		*dev;
 	struct mlx5_flow_table		*root_ft;
@@ -242,6 +253,11 @@ void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
 void mlx5_fc_update_sampling_interval(struct mlx5_core_dev *dev,
 				      unsigned long interval);
 
+const struct mlx5_flow_cmds *mlx5_fs_cmd_get_fw_cmds(void);
+
+int mlx5_flow_namespace_set_peer(struct mlx5_flow_root_namespace *ns,
+				 struct mlx5_flow_root_namespace *peer_ns);
+
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 

commit 2b688ea5efdee2868ed23eddfdbe27dbd232edac
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Aug 15 13:54:17 2019 +0300

    net/mlx5: Add flow steering actions to fs_cmd shim layer
    
    Add flow steering actions: modify header and packet reformat
    to the fs_cmd shim layer. This allows each namespace to define
    possibly different functionality for alloc/dealloc action commands.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 0d16b4b5ab83..ea0f221685ab 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -38,6 +38,17 @@
 #include <linux/rhashtable.h>
 #include <linux/llist.h>
 
+struct mlx5_modify_hdr {
+	enum mlx5_flow_namespace_type ns_type;
+	u32 id;
+};
+
+struct mlx5_pkt_reformat {
+	enum mlx5_flow_namespace_type ns_type;
+	int reformat_type; /* from mlx5_ifc */
+	u32 id;
+};
+
 /* FS_TYPE_PRIO_CHAINS is a PRIO that will have namespaces only,
  * and those are in parallel to one another when going over them to connect
  * a new flow table. Meaning the last flow table in a TYPE_PRIO prio in one

commit 537f321097d03c21f46c56741cda0dfa6eeffcdd
Merge: 00ebd4998b53 00679b631edd
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Wed Aug 28 11:45:03 2019 -0700

    Merge branch 'mlx5-next' of git://git.kernel.org/pub/scm/linux/kernel/git/mellanox/linux
    
    mlx5 HW spec and bits updates:
    1) Aya exposes IP-in-IP capability in mlx5_core.
    2) Maxim exposes lag tx port affinity capabilities.
    3) Moshe adds VNIC_ENV internal rq counter bits.
    4) ODP capabilities for DC transport
    
    Misc updates:
    5) Saeed, two compiler warnings cleanups
    6) Add XRQ legacy commands opcodes
    7) Use refcount_t for refcount
    8) fix a -Wstringop-truncation warning

commit f66ad830b11406cdff84e7d8656a0a9e34b0b606
Author: Mark Zhang <markz@mellanox.com>
Date:   Mon Aug 19 14:36:24 2019 +0300

    net/mlx5: Add per-namespace flow table default miss action support
    
    Currently all the namespaces under the same steering domain share the same
    default table miss action, however in some situations (e.g., RDMA RX)
    different actions are required. This patch adds a per-namespace default
    table miss action instead of using the miss action of the steering domain.
    
    Signed-off-by: Mark Zhang <markz@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index c48c382f926f..69f809831959 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -145,6 +145,7 @@ struct mlx5_flow_table {
 	struct list_head		fwd_rules;
 	u32				flags;
 	struct rhltable			fgs_hash;
+	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 struct mlx5_ft_underlay_qp {
@@ -191,6 +192,7 @@ struct fs_prio {
 struct mlx5_flow_namespace {
 	/* parent == NULL => root ns */
 	struct	fs_node			node;
+	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 struct mlx5_flow_group_mask {
@@ -219,7 +221,6 @@ struct mlx5_flow_root_namespace {
 	struct mutex			chain_lock;
 	struct list_head		underlay_qpns;
 	const struct mlx5_flow_cmds	*cmds;
-	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);

commit 987f6c69dd923069d443f6a37225f5b1630a30f2
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Jul 14 11:33:07 2019 +0300

    net/mlx5: Add missing RDMA_RX capabilities
    
    New flow table type RDMA_RX was added but the MLX5_CAP_FLOW_TABLE_TYPE
    didn't handle this new flow table type.
    This means that MLX5_CAP_FLOW_TABLE_TYPE returns an empty capability to
    this flow table type.
    
    Update both the macro and the maximum supported flow table type to
    RDMA_RX.
    
    Fixes: d83eb50e29de ("net/mlx5: Add support in RDMA RX steering")
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index c48c382f926f..c1252d6be0ef 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -68,7 +68,7 @@ enum fs_flow_table_type {
 	FS_FT_SNIFFER_RX	= 0X5,
 	FS_FT_SNIFFER_TX	= 0X6,
 	FS_FT_RDMA_RX		= 0X7,
-	FS_FT_MAX_TYPE = FS_FT_SNIFFER_TX,
+	FS_FT_MAX_TYPE = FS_FT_RDMA_RX,
 };
 
 enum fs_flow_table_op_mod {
@@ -275,7 +275,8 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 	(type == FS_FT_FDB) ? MLX5_CAP_ESW_FLOWTABLE_FDB(mdev, cap) :		\
 	(type == FS_FT_SNIFFER_RX) ? MLX5_CAP_FLOWTABLE_SNIFFER_RX(mdev, cap) :		\
 	(type == FS_FT_SNIFFER_TX) ? MLX5_CAP_FLOWTABLE_SNIFFER_TX(mdev, cap) :		\
-	(BUILD_BUG_ON_ZERO(FS_FT_SNIFFER_TX != FS_FT_MAX_TYPE))\
+	(type == FS_FT_RDMA_RX) ? MLX5_CAP_FLOWTABLE_RDMA_RX(mdev, cap) :		\
+	(BUILD_BUG_ON_ZERO(FS_FT_RDMA_RX != FS_FT_MAX_TYPE))\
 	)
 
 #endif

commit bb0ee7dcc4ecd6af39823b80ae3995ddc119c373
Author: Jianbo Liu <jianbol@mellanox.com>
Date:   Tue Jun 25 17:47:58 2019 +0000

    net/mlx5: Add flow context for flow tag
    
    Refactor the flow data structures, add new flow_context and move
    flow_tag into it, as flow_tag doesn't belong to the rule action.
    
    Signed-off-by: Jianbo Liu <jianbol@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index a08c3d09a50f..c48c382f926f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -170,6 +170,7 @@ struct fs_fte {
 	u32				val[MLX5_ST_SZ_DW_MATCH_PARAM];
 	u32				dests_size;
 	u32				index;
+	struct mlx5_flow_context	flow_context;
 	struct mlx5_flow_act		action;
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;

commit b169e64a24442e02cafee1586f17fcb713fe65a6
Author: Yevgeny Kliteynik <kliteyn@mellanox.com>
Date:   Mon Apr 29 18:14:20 2019 +0000

    net/mlx5: Geneve, Add flow table capabilities for Geneve decap with TLV options
    
    Introduce specification for Geneve decap flow with encapsulation options
    and allow creation of rules that are matching on Geneve TLV options.
    
    Reviewed-by: Oz Shlomo <ozsh@mellanox.com>
    Signed-off-by: Yevgeny Kliteynik <kliteyn@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 0c6c5fef4548..a08c3d09a50f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -152,7 +152,7 @@ struct mlx5_ft_underlay_qp {
 	u32 qpn;
 };
 
-#define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_800
+#define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_a00
 /* Calculate the fte_match_param length and without the reserved length.
  * Make sure the reserved field is the last.
  */

commit f6f7d6b5bd818cc84eebb55ba6bcba38cfd3b385
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Apr 29 18:14:14 2019 +0000

    net/mlx5: Add new miss flow table action
    
    Flow table supports three types of miss action:
    1. Default miss action - go to default miss table according to table.
    2. Go to specific table.
    3. Switch domain - go to the root table of an alternative steering
       table domain.
    
    New table miss action was added - switch_domain.
    The next domain for RDMA_RX namespace is the NIC RX domain.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index e43c6f6d46a7..0c6c5fef4548 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -218,6 +218,7 @@ struct mlx5_flow_root_namespace {
 	struct mutex			chain_lock;
 	struct list_head		underlay_qpns;
 	const struct mlx5_flow_cmds	*cmds;
+	enum mlx5_flow_table_miss_action def_miss_action;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);

commit d83eb50e29de36ddc819863ab7b9d2da58bccbd0
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Apr 29 18:14:12 2019 +0000

    net/mlx5: Add support in RDMA RX steering
    
    Add new flow steering namespace - MLX5_FLOW_NAMESPACE_RDMA_RX.
    Flow steering rules in this namespace are used to filter
    RDMA traffic.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 87de0e4d9124..e43c6f6d46a7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -67,6 +67,7 @@ enum fs_flow_table_type {
 	FS_FT_FDB             = 0X4,
 	FS_FT_SNIFFER_RX	= 0X5,
 	FS_FT_SNIFFER_TX	= 0X6,
+	FS_FT_RDMA_RX		= 0X7,
 	FS_FT_MAX_TYPE = FS_FT_SNIFFER_TX,
 };
 
@@ -90,6 +91,7 @@ struct mlx5_flow_steering {
 	struct mlx5_flow_root_namespace **esw_ingress_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_rx_root_ns;
+	struct mlx5_flow_root_namespace	*rdma_rx_root_ns;
 	struct mlx5_flow_root_namespace	*egress_root_ns;
 };
 

commit e7aafc8f048050c7f1274db2ff0db60b0cc95700
Author: Eli Britstein <elibr@mellanox.com>
Date:   Tue Jan 8 09:29:22 2019 +0200

    net/mlx5: Add modify FTE helper function
    
    Add modify FTE helper function and use it when deleting a rule, as a
    pre-step towards consolidated FTE modification, with no functional
    change.
    
    Signed-off-by: Eli Britstein <elibr@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 2dc86347af58..87de0e4d9124 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -172,6 +172,7 @@ struct fs_fte {
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 	struct rhash_head		hash;
+	int				modify_mask;
 };
 
 /* Type of children is mlx5_flow_table/namespace */

commit 7300375f181e06ba98183509065c6b71bead442d
Author: Saeed Mahameed <saeedm@mellanox.com>
Date:   Tue Dec 4 18:03:03 2018 -0800

    net/mlx5: Move flow counters data structures from flow steering header
    
    After the following flow counters API refactoring:
    ("net/mlx5: Use flow counter IDs and not the wrapping cache object")
    flow counters private data structures mlx5_fc_cache and mlx5_fc are
    redundantly exposed in fs_core.h, they have nothing to do with flow
    steering core and they are private to fs_counter.c, this patch moves them
    to where they belong and reduces their exposure in the driver.
    
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index b51ad217da32..2dc86347af58 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -145,29 +145,6 @@ struct mlx5_flow_table {
 	struct rhltable			fgs_hash;
 };
 
-struct mlx5_fc_cache {
-	u64 packets;
-	u64 bytes;
-	u64 lastuse;
-};
-
-struct mlx5_fc {
-	struct list_head list;
-	struct llist_node addlist;
-	struct llist_node dellist;
-
-	/* last{packets,bytes} members are used when calculating the delta since
-	 * last reading
-	 */
-	u64 lastpackets;
-	u64 lastbytes;
-
-	u32 id;
-	bool aging;
-
-	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;
-};
-
 struct mlx5_ft_underlay_qp {
 	struct list_head list;
 	u32 qpn;

commit 328edb499f99126946845ece477c9c1afe8631af
Author: Paul Blakey <paulb@mellanox.com>
Date:   Tue Jul 3 11:13:00 2018 +0300

    net/mlx5: Split FDB fast path prio to multiple namespaces
    
    Towards supporting multi-chains and priorities, split the FDB fast path
    to multiple namespaces (sub namespaces), each with multiple priorities.
    
    This patch adds a new flow steering type, FS_TYPE_PRIO_CHAINS, which is
    like current FS_TYPE_PRIO, but may contain only namespaces, and those
    will be in parallel to one another in terms of managing of the flow
    tables connections inside them. Meaning, while searching for the next
    or previous flow table to connect for a new table inside such namespace
    we skip the parallel namespaces in the same level under the
    FS_TYPE_PRIO_CHAINS prio we originated from.
    
    We use this new type for splitting the fast path prio into multiple
    parallel namespaces, each containing normal prios.
    The prios inside them (and their tables) will be connected to one
    another, but not from one parallel namespace to another, instead the
    last prio in each namespace will be connected to the next prio in
    the containing FDB namespace, which is the slow path prio.
    
    Signed-off-by: Paul Blakey <paulb@mellanox.com>
    Acked-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index a06f83c0c2b6..b51ad217da32 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -38,9 +38,21 @@
 #include <linux/rhashtable.h>
 #include <linux/llist.h>
 
+/* FS_TYPE_PRIO_CHAINS is a PRIO that will have namespaces only,
+ * and those are in parallel to one another when going over them to connect
+ * a new flow table. Meaning the last flow table in a TYPE_PRIO prio in one
+ * parallel namespace will not automatically connect to the first flow table
+ * found in any prio in any next namespace, but skip the entire containing
+ * TYPE_PRIO_CHAINS prio.
+ *
+ * This is used to implement tc chains, each chain of prios is a different
+ * namespace inside a containing TYPE_PRIO_CHAINS prio.
+ */
+
 enum fs_node_type {
 	FS_TYPE_NAMESPACE,
 	FS_TYPE_PRIO,
+	FS_TYPE_PRIO_CHAINS,
 	FS_TYPE_FLOW_TABLE,
 	FS_TYPE_FLOW_GROUP,
 	FS_TYPE_FLOW_ENTRY,
@@ -73,6 +85,7 @@ struct mlx5_flow_steering {
 	struct kmem_cache               *ftes_cache;
 	struct mlx5_flow_root_namespace *root_ns;
 	struct mlx5_flow_root_namespace *fdb_root_ns;
+	struct mlx5_flow_namespace	**fdb_sub_ns;
 	struct mlx5_flow_root_namespace **esw_egress_root_ns;
 	struct mlx5_flow_root_namespace **esw_ingress_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;

commit 9aff93d7d0d4b3f3076d7bd12a4ad06ef1cf9804
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Tue Jul 24 09:52:11 2018 +0300

    net/mlx5: Store flow counters in a list
    
    In order to improve performance of flow counter stats query loop that
    traverses all configured flow counters, replace rb_tree with double-linked
    list. This change improves performance of traversing flow counters by
    removing the tree traversal. (profiling data showed that call to rb_next
    was most top CPU consumer)
    
    However, lookup of flow flow counter in list becomes linear, instead of
    logarithmic. This problem is fixed by next patch in series, which adds idr
    for fast lookup. Idr is to be used because it is not an intrusive data
    structure and doesn't require adding any new members to struct mlx5_fc,
    which allows its control data part to stay <= 1 cache line in size.
    
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Amir Vadai <amir@vadai.me>
    Reviewed-by: Paul Blakey <paulb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 617d6239c5f3..a06f83c0c2b6 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -139,7 +139,7 @@ struct mlx5_fc_cache {
 };
 
 struct mlx5_fc {
-	struct rb_node node;
+	struct list_head list;
 	struct llist_node addlist;
 	struct llist_node dellist;
 

commit 6e5e22839136fdb466af0aa46ff2404713dff974
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Mon Jul 23 11:32:05 2018 +0300

    net/mlx5: Add new list to store deleted flow counters
    
    In order to prevent flow counters stats work function from traversing whole
    flow counters tree while searching for deleted flow counters, new list to
    store deleted flow counters is added to struct mlx5_fc_stats. Lockless
    NULL-terminated single linked list data type is used due to following
    reasons:
     - This use case only needs to add single element to list and
     remove/iterate whole list. Lockless list doesn't require any additional
     synchronization for these operations.
     - First cache line of flow counter data structure only has space to store
     single additional pointer, which precludes usage of double linked list.
    
    Remove flow counter 'deleted' flag that is no longer needed.
    
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Amir Vadai <amir@vadai.me>
    Reviewed-by: Paul Blakey <paulb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index f68590291e0c..617d6239c5f3 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -141,6 +141,7 @@ struct mlx5_fc_cache {
 struct mlx5_fc {
 	struct rb_node node;
 	struct llist_node addlist;
+	struct llist_node dellist;
 
 	/* last{packets,bytes} members are used when calculating the delta since
 	 * last reading
@@ -149,7 +150,6 @@ struct mlx5_fc {
 	u64 lastbytes;
 
 	u32 id;
-	bool deleted;
 	bool aging;
 
 	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;

commit 83033688b7ade18d2dbbcefa810f02ff66ba549d
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Mon Jul 23 10:55:39 2018 +0300

    net/mlx5: Change flow counters addlist type to single linked list
    
    In order to prevent flow counters stats work function from traversing whole
    flow counters tree while searching for deleted flow counters, new list to
    store deleted flow counters will be added to struct mlx5_fc_stats. However,
    the flow counter structure itself has no space left to store any more data
    in first cache line. To free space that is needed to store additional list
    node, convert current addlist double linked list (two pointers per node) to
    atomic single linked list (one pointer per node).
    
    Lockless NULL-terminated single linked list data type doesn't require any
    additional external synchronization for operations used by flow counters
    module (add single new element, remove all elements from list and traverse
    them). Remove addlist_lock that is no longer needed.
    
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Acked-by: Amir Vadai <amir@vadai.me>
    Reviewed-by: Paul Blakey <paulb@mellanox.com>
    Reviewed-by: Roi Dayan <roid@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 32070e5d993d..f68590291e0c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -36,6 +36,7 @@
 #include <linux/refcount.h>
 #include <linux/mlx5/fs.h>
 #include <linux/rhashtable.h>
+#include <linux/llist.h>
 
 enum fs_node_type {
 	FS_TYPE_NAMESPACE,
@@ -139,7 +140,7 @@ struct mlx5_fc_cache {
 
 struct mlx5_fc {
 	struct rb_node node;
-	struct list_head list;
+	struct llist_node addlist;
 
 	/* last{packets,bytes} members are used when calculating the delta since
 	 * last reading

commit 0f45e69d625a423d225968c3b59da7f31c5d70b4
Merge: 27d036e33237 1a1e03dc15cf
Author: Jason Gunthorpe <jgg@mellanox.com>
Date:   Mon Jun 4 08:48:11 2018 -0600

    Merge tag 'verbs_flow_counters' of git://git.kernel.org/pub/scm/linux/kernel/git/leon/linux-rdma.git into for-next
    
    Pull verbs counters series from Leon Romanovsky:
    
    ====================
    Verbs flow counters support
    
    This series comes to allow user space applications to monitor real time
    traffic activity and events of the verbs objects it manages, e.g.: ibv_qp,
    ibv_wq, ibv_flow.
    
    The API enables generic counters creation and define mapping to
    association with a verbs object, the current mlx5 driver is using this API
    for flow counters.
    
    With this API, an application can monitor the entire life cycle of object
    activity, defined here as a static counters attachment.  This API also
    allows dynamic counters monitoring of measurement points for a partial
    period in the verbs object life cycle.
    
    In addition it presents the implementation of the generic counters
    interface.
    
    This will be achieved by extending flow creation by adding a new flow
    count specification type which allows the user to associate a previously
    created flow counters using the generic verbs counters interface to the
    created flow, once associated the user could read statistics by using the
    read function of the generic counters interface.
    
    The API includes:
    1. create and destroyed API of a new counters objects
    2. read the counters values from HW
    
    Note:
    Attaching API to allow application to define the measurement points per
    objects is a user space only API and this data is passed to kernel when
    the counted object (e.g. flow) is created with the counters object.
    ===================
    
    * tag 'verbs_flow_counters':
      IB/mlx5: Add counters read support
      IB/mlx5: Add flow counters read support
      IB/mlx5: Add flow counters binding support
      IB/mlx5: Add counters create and destroy support
      IB/uverbs: Add support for flow counters
      IB/core: Add support for flow counters
      IB/core: Support passing uhw for create_flow
      IB/uverbs: Add read counters support
      IB/core: Introduce counters read verb
      IB/uverbs: Add create/destroy counters support
      IB/core: Introduce counters object and its create/destroy
      IB/uverbs: Add an ib_uobject getter to ioctl() infrastructure
      net/mlx5: Export flow counter related API
      net/mlx5: Use flow counter pointer as input to the query function

commit 5f9bf63ae80c4d0e5e986b6c1280bf8174978545
Author: Raed Salem <raeds@mellanox.com>
Date:   Thu May 31 16:43:30 2018 +0300

    net/mlx5: Export flow counter related API
    
    Exports counters API to be used in both IB and EN.
    
    Reviewed-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 276b13d7ea43..4157dd76165e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -233,8 +233,6 @@ void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
 			      unsigned long delay);
 void mlx5_fc_update_sampling_interval(struct mlx5_core_dev *dev,
 				      unsigned long interval);
-int mlx5_fc_query(struct mlx5_core_dev *dev, struct mlx5_fc *counter,
-		  u64 *packets, u64 *bytes);
 
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);

commit 930821e39d0a5f91ed58fea1692afe04f0fe0e1f
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Thu May 31 16:43:29 2018 +0300

    net/mlx5: Use flow counter pointer as input to the query function
    
    This allows to un-expose the details of struct mlx5_fc and keep it
    internal to the core driver.
    
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index e26d3e9d5f9f..276b13d7ea43 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -233,7 +233,7 @@ void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
 			      unsigned long delay);
 void mlx5_fc_update_sampling_interval(struct mlx5_core_dev *dev,
 				      unsigned long interval);
-int mlx5_fc_query(struct mlx5_core_dev *dev, u16 id,
+int mlx5_fc_query(struct mlx5_core_dev *dev, struct mlx5_fc *counter,
 		  u64 *packets, u64 *bytes);
 
 int mlx5_init_fs(struct mlx5_core_dev *dev);

commit 71c6e8638ce3baf9ec16d64d263aab74beac912d
Author: Ariel Levkovich <lariel@mellanox.com>
Date:   Sun May 13 14:33:34 2018 +0300

    IB/mlx5: Add support for MPLS flow specification
    
    This patch introduces support for the MPLS flow spec and
    allows the creation of rules that are matching on the
    MPLS label.
    
    Applying the rule matching depends on the flow specs order and
    the location of the MPLS in the spec list as there are different
    configurations to be made in the device in the cases of MPLSoGRE
    and MPLSoUDP vs. non-encapsulated MPLS.
    
    Reviewed-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Ariel Levkovich <lariel@mellanox.com>
    Signed-off-by: Leon Romanovsky <leonro@mellanox.com>
    Signed-off-by: Jason Gunthorpe <jgg@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index e26d3e9d5f9f..b6da322a8016 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -159,7 +159,7 @@ struct mlx5_ft_underlay_qp {
 	u32 qpn;
 };
 
-#define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_600
+#define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_800
 /* Calculate the fte_match_param length and without the reserved length.
  * Make sure the reserved field is the last.
  */

commit d2ec6a35e834f953790cfea8a4f8a1415d19a431
Author: Matan Barak <matanb@mellanox.com>
Date:   Thu Nov 9 12:12:15 2017 +0000

    net/mlx5: Embed mlx5_flow_act into fs_fte
    
    fte objects contain the match value and action. Currently, extending
    the actions require in adding them both to the API and fs_fte.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Aviad Yehezkel <aviadye@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 8586af9ce514..e26d3e9d5f9f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -176,11 +176,8 @@ struct fs_fte {
 	struct fs_node			node;
 	u32				val[MLX5_ST_SZ_DW_MATCH_PARAM];
 	u32				dests_size;
-	u32				flow_tag;
 	u32				index;
-	u32				action;
-	u32				encap_id;
-	u32				modify_id;
+	struct mlx5_flow_act		action;
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 	struct rhash_head		hash;

commit 5f4183781a303da5ab6731b8c19328c5b9df89fa
Author: Aviad Yehezkel <aviadye@mellanox.com>
Date:   Sun Feb 18 13:17:17 2018 +0200

    net/mlx5: Add empty egress namespace to flow steering core
    
    Currently, we don't support egress flow steering namespace in mlx5
    flow steering core implementation. However, when we want to encrypt
    a packet, we model it as a flow steering rule in the egress path.
    To overcome this, we add an empty egress namespace to flow steering.
    This namespace is initialized only when ipsec support exists.
    In the future, this will grow to a full blown full steering
    implementation, resembling the ingress path.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Aviad Yehezkel <aviadye@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 45791c792296..8586af9ce514 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -48,6 +48,7 @@ enum fs_node_type {
 
 enum fs_flow_table_type {
 	FS_FT_NIC_RX          = 0x0,
+	FS_FT_NIC_TX          = 0x1,
 	FS_FT_ESW_EGRESS_ACL  = 0x2,
 	FS_FT_ESW_INGRESS_ACL = 0x3,
 	FS_FT_FDB             = 0X4,
@@ -75,6 +76,7 @@ struct mlx5_flow_steering {
 	struct mlx5_flow_root_namespace **esw_ingress_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_rx_root_ns;
+	struct mlx5_flow_root_namespace	*egress_root_ns;
 };
 
 struct fs_node {

commit af76c50198d1db136bbf293f3700c80722116831
Author: Matan Barak <matanb@mellanox.com>
Date:   Sun Aug 20 15:46:51 2017 +0300

    net/mlx5: Add shim layer between fs and cmd
    
    The shim layer allows each namespace to define possibly different
    functionality for add/delete/update commands. The shim layer
    introduced here, will be used to support flow steering with the FPGA.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Aviad Yehezkel <aviadye@mellanox.com>
    Signed-off-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 05262708f14b..45791c792296 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -224,6 +224,7 @@ struct mlx5_flow_root_namespace {
 	/* Should be held when chaining flow tables */
 	struct mutex			chain_lock;
 	struct list_head		underlay_qpns;
+	const struct mlx5_flow_cmds	*cmds;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);

commit b8a0dbe3a90b2debd72cd9a304eacac55c44e5a4
Author: Eugenia Emantayev <eugenia@mellanox.com>
Date:   Wed Nov 8 16:51:06 2017 +0200

    net/mlx5e: E-switch, Add steering drop counters
    
    Add flow counters to count packets dropped due to drop rules
    configured in eswitch egress and ingress ACLs.
    These counters will count VFs violations and incoming traffic drops.
    Will be presented on hypervisor via standard 'ip -s link show' command.
    
    Example: "ip -s link show dev enp5s0f0"
    
    6: enp5s0f0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
        link/ether 24:8a:07:a5:28:f0 brd ff:ff:ff:ff:ff:ff
        RX: bytes  packets  errors  dropped overrun mcast
        0          0        0       0       0       2
        TX: bytes  packets  errors  dropped carrier collsns
        1406       17       0       0       0       0
        vf 0 MAC 00:00:ca:fe:ca:fe, vlan 5, spoof checking off, link-state auto, trust off, query_rss off
        RX: bytes  packets  mcast   bcast   dropped
        1666       29       14         32      0
        TX: bytes  packets   dropped
        2880       44       2412
    
    Signed-off-by: Eugenia Emantayev <eugenia@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 3e571045626f..05262708f14b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -233,6 +233,8 @@ void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
 			      unsigned long delay);
 void mlx5_fc_update_sampling_interval(struct mlx5_core_dev *dev,
 				      unsigned long interval);
+int mlx5_fc_query(struct mlx5_core_dev *dev, u16 id,
+		  u64 *packets, u64 *bytes);
 
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);

commit 9b93ab981e3bf62ff95a8cbb6faf652cd400decd
Author: Gal Pressman <galp@mellanox.com>
Date:   Tue Nov 28 11:58:51 2017 +0200

    net/mlx5: Separate ingress/egress namespaces for each vport
    
    Each vport has its own root flow table for the ACL flow tables and root
    flow table is per namespace, therefore we should create a namespace for
    each vport.
    
    Fixes: efdc810ba39d ("net/mlx5: Flow steering, Add vport ACL support")
    Signed-off-by: Gal Pressman <galp@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 397d24a621a4..3e571045626f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -71,8 +71,8 @@ struct mlx5_flow_steering {
 	struct kmem_cache               *ftes_cache;
 	struct mlx5_flow_root_namespace *root_ns;
 	struct mlx5_flow_root_namespace *fdb_root_ns;
-	struct mlx5_flow_root_namespace *esw_egress_root_ns;
-	struct mlx5_flow_root_namespace *esw_ingress_root_ns;
+	struct mlx5_flow_root_namespace **esw_egress_root_ns;
+	struct mlx5_flow_root_namespace **esw_ingress_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;
 	struct mlx5_flow_root_namespace	*sniffer_rx_root_ns;
 };

commit dd8e19456d60a519de1852ae4b1be7d62690d2e0
Author: Elena Reshetova <elena.reshetova@intel.com>
Date:   Fri Oct 20 10:23:41 2017 +0300

    drivers, net, mlx5: convert fs_node.refcount from atomic_t to refcount_t
    
    atomic_t variables are currently used to implement reference
    counters with the following properties:
     - counter is initialized to 1 using atomic_set()
     - a resource is freed upon counter reaching zero
     - once counter reaches zero, its further
       increments aren't allowed
     - counter schema uses basic atomic operations
       (set, inc, inc_not_zero, dec_and_test, etc.)
    
    Such atomic variables should be converted to a newly provided
    refcount_t type and API that prevents accidental counter overflows
    and underflows. This is important since overflows and underflows
    can lead to use-after-free situation and be exploitable.
    
    The variable fs_node.refcount is used as pure reference counter.
    Convert it to refcount_t and fix up the operations.
    
    Suggested-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: David Windsor <dwindsor@gmail.com>
    Reviewed-by: Hans Liljestrand <ishkamiel@gmail.com>
    Signed-off-by: Elena Reshetova <elena.reshetova@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 80f6f3c714c8..397d24a621a4 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -33,6 +33,7 @@
 #ifndef _MLX5_FS_CORE_
 #define _MLX5_FS_CORE_
 
+#include <linux/refcount.h>
 #include <linux/mlx5/fs.h>
 #include <linux/rhashtable.h>
 
@@ -84,7 +85,7 @@ struct fs_node {
 	struct fs_node		*root;
 	/* lock the node for writing and traversing */
 	struct rw_semaphore	lock;
-	atomic_t		refcount;
+	refcount_t		refcount;
 	bool			active;
 	void			(*del_hw_func)(struct fs_node *);
 	void			(*del_sw_func)(struct fs_node *);

commit af28f6f26a67ef850a26c42c49a1d9ca4927e10c
Merge: e4655e4a7913 b5ae577741be
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Oct 16 05:42:41 2017 +0100

    Merge tag 'mlx5-updates-2017-10-11' of git://git.kernel.org/pub/scm/linux/kernel/git/mellanox/linux
    
    Saeed Mahameed says:
    
    ====================
    mlx5-updates-2017-10-11: IPoIB Multi Pkey support
    
    This series provides the support for IPoIB Multi Pkey.
    InfiniBand Pkeys are the equivalent of Ethernet vlans.
    Currently IPoIB device driver supports only default Pkey and IPoIB Pkey child
    interfaces are not supported with IPoIB offloads mode, this series will add
    the support for that by allowing creating mlx5 multiple IPoIB netdevices with
    a non-default Pkey.
    
    mlx5 IPoIB Pkey child interface is smaller version of mlx5i IPoIB interfaces and shares
    most of its resources with the parent IPoIB interface, namely RX steering and ring
    queue resources.
    
    The only mlx5 resources a child Pkey interface will be creating are the TX rings,
    since they should be assigned to a specific Pkey.
    
    mlx5i Pkey netdev is implemented via new mlx5e netdev profile implemented in
    mlx5/core/ipoib/ipoib_vlan.c.
    
    The series starts with a refactoring of mlx5e PTP and mlx5 clock implementation
    to move the code to be part of mlx5 core rather than mlx5e netdevice, in order to
    make mlx5 clock and PTP registration part of the core to be shared with mlx5e
    master Ethernet netdev/IPoIB parent netdev and mlx5_ib in the near future.
    
    Add the support for attaching multiple underlay QPs for the different Pkeys
    in mlx5 core RX steering.
    
    Add Pkey index to rdma_netdev to add the ability to set PKEY index to lower
    IPoIB offload netdev.
    
    Use hash-table to map between DQPN (Destination QP number) to child netdev
    for the IPoIB parent netdev to forward RX packets to the corresponding
    child Pkey netdev, since the RX rings are shared.
    
    The reset of the series adds the ipoib child Pkey: mlx5e netdev profile,
    netdev nods implementation and minimal set of ethtool callbacks.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dae37456c8ac3afe8d5f306717f2b75ed5ca38d9
Author: Alex Vesker <valex@mellanox.com>
Date:   Wed Sep 13 11:37:02 2017 +0300

    net/mlx5: Support for attaching multiple underlay QPs to root flow table
    
    Previous support allowed connecting only a single QPN to the FT.
    Now using a linked list multiple QPNs can be attached to the same FT.
    
    Supporting attaching multiple underlay QPs is required for PKEY
    support in which child and parent share the same FT.
    
    The actual attaching/detaching FW commands will be called inside the
    function symmetrically.
    
    This change requires a change in IPoIB open and close functions, the
    attaching/detaching to/from the FT is done each time we open/close.
    
    Signed-off-by: Alex Vesker <valex@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 48dd78975062..9bc048a89bc0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -147,6 +147,11 @@ struct mlx5_fc {
 	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;
 };
 
+struct mlx5_ft_underlay_qp {
+	struct list_head list;
+	u32 qpn;
+};
+
 #define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_600
 /* Calculate the fte_match_param length and without the reserved length.
  * Make sure the reserved field is the last.
@@ -212,7 +217,7 @@ struct mlx5_flow_root_namespace {
 	struct mlx5_flow_table		*root_ft;
 	/* Should be held when chaining flow tables */
 	struct mutex			chain_lock;
-	u32				underlay_qpn;
+	struct list_head		underlay_qpns;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);

commit 51a0c00c6bf2156099f80c6892fd409a5d217b96
Merge: 28f50eb20931 a369d4ac4dff
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Oct 8 21:07:11 2017 -0700

    Merge tag 'mlx5-updates-2017-10-06' of git://git.kernel.org/pub/scm/linux/kernel/git/mellanox/linux
    
    Saeed Mahameed says:
    
    ====================
    Mellanox, mlx5 updates 2017-10-06
    
    This series includes some shared code updates for kernel 4.15 to both
    net-next and rdma-next trees.
    
    The series includes mlx5 low level flow steering updates and optimizations
    to support firmware command parallelism for flow steering requests from
    Maor Gottlieb and two other small fixes from Matan and Maor.
    
    One fix from Matan adds error handling for when the destination
    list of the flow steering rule is full.
    
    Maor introduced a patch to avoid NULL pointer dereference on steering cleanup.
    
    Then Some refactoring patches needed by the series for code sharing purposes.
    and split the Flow Table Entry (FTE) and Flow Group (FG) creation code to two parts:
        1) Object allocation - allocate the steering node and initialize
        its resources.
    
        2) The firmware command execution.
    
    This change will give us the ability to take write lock on the
    parent node (e.g. FG for FTE creating) only on the software data struct allocation
    and creation part of the procedure where the synchronization is really required,
    and will allow us to execute multiple firmware commands simultaneously and overcome the
    firmware bottleneck.
    
    Refactor the locking scheme of the mlx5 core flow steering as follows:
    
    1) Replace the mutex lock with readers-writers semaphore and take
        the write lock only when necessary (e.g. allocating a new flow
        table entry index or adding a node to the parent's children list).
        When we try to find a suitable child in the parent's children list
        (e.g. search for flow group with the same match_criteria of the rule)
        then we only take the read lock.
    
    2) Add versioning mechanism - each steering entity (FT, FG, FTE, DST)
        will have an incremental version. The version is increased when the
        entity is changed (e.g. when a new FTE was added to FG - the FG's
        version is increased).
        Versioning is used in order to determine if the last traverse of an
        entity's children is valid or a rescan under write lock is required.
    
    Last patch adds FGs and FTEs memory pool, It is useful because these objects
    are not small and could be allocated/deallocated many times.
    
    This support improves the insertion rate of steering rules
    from ~5k/sec to ~40k/sec.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16f1c5bb3ed75b3cf3ced537db40f7e1a244debe
Author: Raed Salem <raeds@mellanox.com>
Date:   Sun Jul 30 11:02:51 2017 +0300

    net/mlx5: Check device capability for maximum flow counters
    
    Added check for the maximal number of flow counters attached
    to rule (FTE).
    
    Fixes: bd5251dbf156b ('net/mlx5_core: Introduce flow steering destination of type counter')
    Signed-off-by: Raed Salem <raeds@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 5509a752f98e..48dd78975062 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -52,6 +52,7 @@ enum fs_flow_table_type {
 	FS_FT_FDB             = 0X4,
 	FS_FT_SNIFFER_RX	= 0X5,
 	FS_FT_SNIFFER_TX	= 0X6,
+	FS_FT_MAX_TYPE = FS_FT_SNIFFER_TX,
 };
 
 enum fs_flow_table_op_mod {
@@ -260,4 +261,14 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 #define fs_for_each_dst(pos, fte)			\
 	fs_list_for_each_entry(pos, &(fte)->node.children)
 
+#define MLX5_CAP_FLOWTABLE_TYPE(mdev, cap, type) (		\
+	(type == FS_FT_NIC_RX) ? MLX5_CAP_FLOWTABLE_NIC_RX(mdev, cap) :		\
+	(type == FS_FT_ESW_EGRESS_ACL) ? MLX5_CAP_ESW_EGRESS_ACL(mdev, cap) :		\
+	(type == FS_FT_ESW_INGRESS_ACL) ? MLX5_CAP_ESW_INGRESS_ACL(mdev, cap) :		\
+	(type == FS_FT_FDB) ? MLX5_CAP_ESW_FLOWTABLE_FDB(mdev, cap) :		\
+	(type == FS_FT_SNIFFER_RX) ? MLX5_CAP_FLOWTABLE_SNIFFER_RX(mdev, cap) :		\
+	(type == FS_FT_SNIFFER_TX) ? MLX5_CAP_FLOWTABLE_SNIFFER_TX(mdev, cap) :		\
+	(BUILD_BUG_ON_ZERO(FS_FT_SNIFFER_TX != FS_FT_MAX_TYPE))\
+	)
+
 #endif

commit a369d4ac4dff92129ea0dfa3d66f45a830e29098
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Aug 27 13:18:40 2017 +0300

    net/mlx5: Add FGs and FTEs memory pool
    
    Add memory pool allocation for flow groups and flow
    table entry.
    
    It is useful because these objects are not small and could
    be allocated/deallocated many times.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 875b753862b0..ebe184515433 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -65,6 +65,8 @@ enum fs_fte_status {
 
 struct mlx5_flow_steering {
 	struct mlx5_core_dev *dev;
+	struct kmem_cache               *fgs_cache;
+	struct kmem_cache               *ftes_cache;
 	struct mlx5_flow_root_namespace *root_ns;
 	struct mlx5_flow_root_namespace *fdb_root_ns;
 	struct mlx5_flow_root_namespace *esw_egress_root_ns;

commit bd71b08ec2ee4504bcc3b37a9283ce15e93dfacd
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Aug 27 09:19:11 2017 +0300

    net/mlx5: Support multiple updates of steering rules in parallel
    
    Most of the time spent on adding new flow steering rule
    is executing the firmware command.
    The most common action is adding a new flow steering entry.
    In order to enhance the update rate we parallelize the
    commands by doing the following:
    
    1) Replace the mutex lock with readers-writers semaphore and take
    the write lock only when necessary (e.g. allocating a new flow
    table entry index or adding a node to the parent's children list).
    When we try to find a suitable child in the parent's children list
    (e.g. search for flow group with the same match_criteria of the rule)
    then we only take the read lock.
    
    2) Add versioning mechanism - each steering entity (FT, FG, FTE, DST)
    will have an incremental version. The version is increased when the
    entity is changed (e.g. when a new FTE was added to FG - the FG's
    version is increased).
    Versioning is used in order to determine if the last traverse of an
    entity's children is valid or a rescan under write lock is required.
    
    This support improves the insertion rate of steering rules
    from ~5k/sec to ~40k/sec.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index b5c079f35051..875b753862b0 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -83,7 +83,9 @@ struct fs_node {
 	struct rw_semaphore	lock;
 	atomic_t		refcount;
 	bool			active;
-	void			(*remove_func)(struct fs_node *);
+	void			(*del_hw_func)(struct fs_node *);
+	void			(*del_sw_func)(struct fs_node *);
+	atomic_t		version;
 };
 
 struct mlx5_flow_rule {

commit c7784b1c8ab3f44dc2e643a8feb77584792c9108
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Aug 27 09:07:44 2017 +0300

    net/mlx5: Replace fs_node mutex with reader/writer semaphore
    
    Currently, steering object is protected by mutex lock, replace
    the mutex lock with reader/writer semaphore .
    In this patch we still use only write semaphore. In downstream
    patches we will switch part of the write locks to read locks.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 6e5d25b4f8de..b5c079f35051 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -80,7 +80,7 @@ struct fs_node {
 	struct fs_node		*parent;
 	struct fs_node		*root;
 	/* lock the node for writing and traversing */
-	struct mutex		lock;
+	struct rw_semaphore	lock;
 	atomic_t		refcount;
 	bool			active;
 	void			(*remove_func)(struct fs_node *);

commit 19f100fef4ad46f21cfdfb1eeeb63fc38c2e57f1
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Wed Jul 26 16:28:26 2017 +0300

    net/mlx5: Refactor FTE and FG creation code
    
    Split the creation code to two parts:
    1) Object allocation - allocate the steering node and initialize
    its resources.
    
    2) The firmware command execution.
    
    Adding active flag to each node - this flag indicates if the
    object exists in the hardware or not, if not we don't free
    the hardware resource in error flow.
    
    This change will give us the ability to take write lock on the
    parent node (e.g. FG for FTE creationg) only on the first part.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 02c969c3d333..6e5d25b4f8de 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -82,6 +82,7 @@ struct fs_node {
 	/* lock the node for writing and traversing */
 	struct mutex		lock;
 	atomic_t		refcount;
+	bool			active;
 	void			(*remove_func)(struct fs_node *);
 };
 

commit 75d1d187b2ac86d1af2f1fd125ec21f104ca34b0
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Sun Jul 16 15:18:45 2017 +0300

    net/mlx5: Move the entry index allocator to flow group
    
    When new flow table entry is added, we search for free index
    in the flow group and not in the flow table, therefore we can move
    the allocator from flow table to flow group.
    In downstream patches it will enable us to lock smaller part
    of the steering tree.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 5509a752f98e..02c969c3d333 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -119,7 +119,6 @@ struct mlx5_flow_table {
 	/* FWD rules that point on this flow table */
 	struct list_head		fwd_rules;
 	u32				flags;
-	struct ida			fte_allocator;
 	struct rhltable			fgs_hash;
 };
 
@@ -199,6 +198,7 @@ struct mlx5_flow_group {
 	struct mlx5_flow_group_mask	mask;
 	u32				start_index;
 	u32				max_ftes;
+	struct ida			fte_allocator;
 	u32				id;
 	struct rhashtable		ftes_hash;
 	struct rhlist_head		hash;

commit 693c6883bbc4f7649750eb9ce49d0b799d073186
Author: Matan Barak <matanb@mellanox.com>
Date:   Sun May 28 16:45:31 2017 +0300

    net/mlx5: Add hash table for flow groups in flow table
    
    When adding a flow table entry (fte) to a flow table (ft), we first
    need to find its flow group (fg). Currently, this is done by
    traversing a linear list of all flow groups in the flow table.
    Furthermore, since multiple flow groups which correspond to the same
    fte mask may exist in the same ft, we can't just stop at the first
    match. Converting the linear list to rhltable in order to speed things
    up.
    
    The last four patches increases the steering rules update rate by a
    factor of more than 7 (for insertion of 50K steering rules).
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 62709a3865d2..5509a752f98e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -120,6 +120,7 @@ struct mlx5_flow_table {
 	struct list_head		fwd_rules;
 	u32				flags;
 	struct ida			fte_allocator;
+	struct rhltable			fgs_hash;
 };
 
 struct mlx5_fc_cache {
@@ -200,6 +201,7 @@ struct mlx5_flow_group {
 	u32				max_ftes;
 	u32				id;
 	struct rhashtable		ftes_hash;
+	struct rhlist_head		hash;
 };
 
 struct mlx5_flow_root_namespace {

commit 0d235c3fabb79bddc46527885985f0ae281a89f9
Author: Matan Barak <matanb@mellanox.com>
Date:   Sun May 28 12:09:06 2017 +0300

    net/mlx5: Add hash table to search FTEs in a flow-group
    
    When adding a flow table entry (fte) to a flow group (fg), we first
    need to check whether this fte exist. In such a case we just merge
    the destinations (if possible). Currently, this is done by traversing
    the fte list available in a fg. This could take a lot of time when
    using large flow groups. Speeding this up by using rhashtable, which
    is much faster.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index bfbc081d17dc..62709a3865d2 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -34,6 +34,7 @@
 #define _MLX5_FS_CORE_
 
 #include <linux/mlx5/fs.h>
+#include <linux/rhashtable.h>
 
 enum fs_node_type {
 	FS_TYPE_NAMESPACE,
@@ -168,6 +169,7 @@ struct fs_fte {
 	u32				modify_id;
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
+	struct rhash_head		hash;
 };
 
 /* Type of children is mlx5_flow_table/namespace */
@@ -197,6 +199,7 @@ struct mlx5_flow_group {
 	u32				start_index;
 	u32				max_ftes;
 	u32				id;
+	struct rhashtable		ftes_hash;
 };
 
 struct mlx5_flow_root_namespace {

commit 667cb65ae5ad01523505d48d6cfd92bd1d3c9785
Author: Matan Barak <matanb@mellanox.com>
Date:   Mon Aug 7 11:14:11 2017 +0300

    net/mlx5: Don't store reserved part in FTEs and FGs
    
    The current code stores fte_match_param in the software representation
    of FTEs and FGs. fte_match_param contains a large reserved area at the
    bottom of the struct. Since downstream patches are going to hash this
    part, we would like to avoid doing so on a reserved part.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 5fbae885558f..bfbc081d17dc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -144,10 +144,22 @@ struct mlx5_fc {
 	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;
 };
 
+#define MLX5_FTE_MATCH_PARAM_RESERVED	reserved_at_600
+/* Calculate the fte_match_param length and without the reserved length.
+ * Make sure the reserved field is the last.
+ */
+#define MLX5_ST_SZ_DW_MATCH_PARAM					    \
+	((MLX5_BYTE_OFF(fte_match_param, MLX5_FTE_MATCH_PARAM_RESERVED) / sizeof(u32)) + \
+	 BUILD_BUG_ON_ZERO(MLX5_ST_SZ_BYTES(fte_match_param) !=		     \
+			   MLX5_FLD_SZ_BYTES(fte_match_param,		     \
+					     MLX5_FTE_MATCH_PARAM_RESERVED) +\
+			   MLX5_BYTE_OFF(fte_match_param,		     \
+					 MLX5_FTE_MATCH_PARAM_RESERVED)))
+
 /* Type of children is mlx5_flow_rule */
 struct fs_fte {
 	struct fs_node			node;
-	u32				val[MLX5_ST_SZ_DW(fte_match_param)];
+	u32				val[MLX5_ST_SZ_DW_MATCH_PARAM];
 	u32				dests_size;
 	u32				flow_tag;
 	u32				index;
@@ -175,7 +187,7 @@ struct mlx5_flow_namespace {
 
 struct mlx5_flow_group_mask {
 	u8	match_criteria_enable;
-	u32	match_criteria[MLX5_ST_SZ_DW(fte_match_param)];
+	u32	match_criteria[MLX5_ST_SZ_DW_MATCH_PARAM];
 };
 
 /* Type of children is fs_fte */

commit 8ebabaa02fe13e534ae5b0a8aa495762c25ef279
Author: Matan Barak <matanb@mellanox.com>
Date:   Sun May 28 10:58:40 2017 +0300

    net/mlx5: Convert linear search for free index to ida
    
    When allocating a flow table entry, we need to allocate a free index
    in the flow group. Currently, this is done by traversing the existing
    flow table entries in the flow group, until a free index is found.
    Replacing this by using a ida, which allows us to find a free index
    much faster.
    
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 9fb5a333df52..5fbae885558f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -118,6 +118,7 @@ struct mlx5_flow_table {
 	/* FWD rules that point on this flow table */
 	struct list_head		fwd_rules;
 	u32				flags;
+	struct ida			fte_allocator;
 };
 
 struct mlx5_fc_cache {
@@ -183,7 +184,6 @@ struct mlx5_flow_group {
 	struct mlx5_flow_group_mask	mask;
 	u32				start_index;
 	u32				max_ftes;
-	u32				num_ftes;
 	u32				id;
 };
 

commit a8ffcc741acb3c7f3dcf4c7d001209aa0995a5f1
Author: Rabie Loulou <rabiel@mellanox.com>
Date:   Sun Jul 9 13:39:30 2017 +0300

    net/mlx5: Increase the maximum flow counters supported
    
    Read new NIC capability field which represnts 16 MSBs of the max flow
    counters number supported (max_flow_counter_31_16).
    
    Backward compatibility with older firmware is preserved, the modified
    driver reads max_flow_counter_31_16 as 0 from the older firmware and
    uses up to 64K counters.
    
    Changed flow counter id from 16 bits to 32 bits. Backward compatibility
    with older firmware is preserved as we kept the 16 LSBs of the counter
    id in place and added 16 MSBs from reserved field.
    
    Changed the background bulk reading of flow counters to work in chunks
    of at most 32K counters, to make sure we don't attempt to allocate very
    large buffers.
    
    Signed-off-by: Rabie Loulou <rabiel@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 990acee6fb09..9fb5a333df52 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -136,7 +136,7 @@ struct mlx5_fc {
 	u64 lastpackets;
 	u64 lastbytes;
 
-	u16 id;
+	u32 id;
 	bool deleted;
 	bool aging;
 

commit 508541146af18e43072e41a31aa62fac2b01aac1
Author: Yishai Hadas <yishaih@mellanox.com>
Date:   Tue Apr 25 10:39:57 2017 +0300

    net/mlx5: Use underlay QPN from the root name space
    
    Root flow table is dynamically changed by the underlying flow steering
    layer, and IPoIB/ULPs have no idea what will be the root flow table in
    the future, hence we need a dynamic infrastructure to move Underlay QPs
    with the root flow table.
    
    Fixes: b3ba51498bdd ("net/mlx5: Refactor create flow table method to accept underlay QP")
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Yishai Hadas <yishaih@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 81eafc7b9dd9..990acee6fb09 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -118,7 +118,6 @@ struct mlx5_flow_table {
 	/* FWD rules that point on this flow table */
 	struct list_head		fwd_rules;
 	u32				flags;
-	u32				underlay_qpn;
 };
 
 struct mlx5_fc_cache {
@@ -195,6 +194,7 @@ struct mlx5_flow_root_namespace {
 	struct mlx5_flow_table		*root_ft;
 	/* Should be held when chaining flow tables */
 	struct mutex			chain_lock;
+	u32				underlay_qpn;
 };
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);

commit f6dfb4c3f2161c23ab2939dd1b5f133dcdf147c6
Author: Hadar Hen Zion <hadarh@mellanox.com>
Date:   Fri Feb 24 12:16:33 2017 +0200

    net/mlx5e: Update neighbour 'used' state using HW flow rules counters
    
    When IP tunnel encapsulation rules are offloaded, the kernel can't see
    the traffic of the offloaded flow. The neighbour for the IP tunnel
    destination of the offloaded flow can mistakenly become STALE and
    deleted by the kernel since its 'used' value wasn't changed.
    
    To make sure that a neighbour which is used by the HW won't become
    STALE, we proactively update the neighbour 'used' value every
    DELAY_PROBE_TIME period, when packets were matched and counted by the HW
    for one of the tunnel encap flows related to this neighbour.
    
    The periodic task that updates the used neighbours is scheduled when a
    tunnel encap rule is successfully offloaded into HW and keeps re-scheduling
    itself as long as the representor's neighbours list isn't empty.
    
    Add, remove, lookup and status change operations done over the
    representor's neighbours list or the neighbour hash entry encaps list
    are all serialized by RTNL lock.
    
    Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 577d056bf3df..81eafc7b9dd9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -199,6 +199,11 @@ struct mlx5_flow_root_namespace {
 
 int mlx5_init_fc_stats(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fc_stats(struct mlx5_core_dev *dev);
+void mlx5_fc_queue_stats_work(struct mlx5_core_dev *dev,
+			      struct delayed_work *dwork,
+			      unsigned long delay);
+void mlx5_fc_update_sampling_interval(struct mlx5_core_dev *dev,
+				      unsigned long interval);
 
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);

commit b3ba51498bddd72a526d9067b8b0ecf4932ce57e
Author: Erez Shitrit <erezsh@mellanox.com>
Date:   Thu Apr 13 06:36:52 2017 +0300

    net/mlx5: Refactor create flow table method to accept underlay QP
    
    IB flow tables need the underlay qp to perform flow steering.
    Here we change the API of the flow tables creation to accept the
    underlay QP number as a parameter in order to support IB (IPoIB) flow
    steering.
    
    Signed-off-by: Erez Shitrit <erezsh@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 03af2e7989f3..577d056bf3df 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -118,6 +118,7 @@ struct mlx5_flow_table {
 	/* FWD rules that point on this flow table */
 	struct list_head		fwd_rules;
 	u32				flags;
+	u32				underlay_qpn;
 };
 
 struct mlx5_fc_cache {

commit 2a69cb9ff7caac00f3bf7c865964228dd2a0c415
Author: Or Gerlitz <ogerlitz@mellanox.com>
Date:   Thu Jan 19 19:31:25 2017 +0200

    net/mlx5: Introduce modify header structures, commands and steering action definitions
    
    Add the definitions related to creation/deletion of a modify header
    context and the modify header steering action which are used for HW
    packet header modify (re-write) as part of steering. Add as well the
    modify header id into two intermediate structs and set it to the FTE.
    
    Note that as the push/pop vlan steering actions are emulated by the
    ewitch management code, we're not breaking any compatibility while
    changing their values to make room for the modify header action which
    is not emulated and whose value is part of the FW API. The new bit
    values for the emulated actions are at the end of the possible range.
    
    Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
    Reviewed-by: Hadar Hen Zion <hadarh@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 8e668c63f69e..03af2e7989f3 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -152,6 +152,7 @@ struct fs_fte {
 	u32				index;
 	u32				action;
 	u32				encap_id;
+	u32				modify_id;
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 };

commit 66958ed906b87816314c0517f05fe0b5766ec7fe
Author: Hadar Hen Zion <hadarh@mellanox.com>
Date:   Mon Nov 7 15:14:45 2016 +0200

    net/mlx5: Support encap id when setting new steering entry
    
    In order to support steering rules which add encapsulation headers,
    encap_id parameter is needed.
    
    Add new mlx5_flow_act struct which holds action related parameter:
    action, flow_tag and encap_id. Use mlx5_flow_act struct when adding a new
    steering rule.
    This patch doesn't change any functionality.
    
    Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 9f616ed25a89..8e668c63f69e 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -151,6 +151,7 @@ struct fs_fte {
 	u32				flow_tag;
 	u32				index;
 	u32				action;
+	u32				encap_id;
 	enum fs_fte_status		status;
 	struct mlx5_fc			*counter;
 };

commit c9f1b073d0d750ccf8b30b272d1d76479f4cccbc
Author: Hadar Hen Zion <hadarh@mellanox.com>
Date:   Mon Nov 7 15:14:44 2016 +0200

    net/mlx5: Add creation flags when adding new flow table
    
    When creating flow tables, allow the caller to specify creation flags.
    Currently no flags are used and as such this patch doesn't add any new
    functionality.
    
    Signed-off-by: Hadar Hen Zion <hadarh@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index d5150888645c..9f616ed25a89 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -117,6 +117,7 @@ struct mlx5_flow_table {
 	struct mutex			lock;
 	/* FWD rules that point on this flow table */
 	struct list_head		fwd_rules;
+	u32				flags;
 };
 
 struct mlx5_fc_cache {

commit 74491de937125d0c98c9b9c9208b4105717a3caa
Author: Mark Bloch <markb@mellanox.com>
Date:   Wed Aug 31 11:24:25 2016 +0000

    net/mlx5: Add multi dest support
    
    Currently when calling mlx5_add_flow_rule we accept
    only one flow destination, this commit allows to pass
    multiple destinations.
    
    This change forces us to change the return structure to a more
    flexible one. We introduce a flow handle (struct mlx5_flow_handle),
    it holds internally the number for rules created and holds an array
    where each cell points the to a flow rule.
    
    From the consumers (of mlx5_add_flow_rule) point of view this
    change is only cosmetic and requires only to change the type
    of the returned value they store.
    
    From the core point of view, we now need to use a loop when
    allocating and deleting rules (e.g given to us a flow handler).
    
    Signed-off-by: Mark Bloch <markb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 71ff03bceabb..d5150888645c 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -94,6 +94,11 @@ struct mlx5_flow_rule {
 	u32					sw_action;
 };
 
+struct mlx5_flow_handle {
+	int num_rules;
+	struct mlx5_flow_rule *rule[];
+};
+
 /* Type of children is mlx5_flow_group */
 struct mlx5_flow_table {
 	struct fs_node			node;

commit 87d22483ce68e609818d61e3a65361f5634c6cd6
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jun 6 18:09:35 2016 +0300

    net/mlx5: Add sniffer namespaces
    
    Add sniffer TX and RX namespaces to receive ingoing and outgoing
    traffic.
    
    Each outgoing/incoming packet is duplicated and steered to the sniffer
    TX/RX namespace in addition to the regular flow.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 23e46e35413f..71ff03bceabb 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -49,6 +49,8 @@ enum fs_flow_table_type {
 	FS_FT_ESW_EGRESS_ACL  = 0x2,
 	FS_FT_ESW_INGRESS_ACL = 0x3,
 	FS_FT_FDB             = 0X4,
+	FS_FT_SNIFFER_RX	= 0X5,
+	FS_FT_SNIFFER_TX	= 0X6,
 };
 
 enum fs_flow_table_op_mod {
@@ -66,6 +68,8 @@ struct mlx5_flow_steering {
 	struct mlx5_flow_root_namespace *fdb_root_ns;
 	struct mlx5_flow_root_namespace *esw_egress_root_ns;
 	struct mlx5_flow_root_namespace *esw_ingress_root_ns;
+	struct mlx5_flow_root_namespace	*sniffer_tx_root_ns;
+	struct mlx5_flow_root_namespace	*sniffer_rx_root_ns;
 };
 
 struct fs_node {

commit aaff1bea16bb7f259a263c3ae4633d092e2da799
Author: Aviv Heller <avivh@mellanox.com>
Date:   Mon May 9 09:57:05 2016 +0000

    net/mlx5: LAG demux flow table support
    
    Add interfaces to allow the creation and destruction of a
    LAG demux flow table.
    
    It is a special flow table used during LAG for redirecting
    non user-mode packets from PF0 to PF1 root ft, if a packet was
    received on phys port two.
    
    Signed-off-by: Aviv Heller <avivh@mellanox.com>
    Reviewed-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: Leon Romanovsky <leon@kernel.org>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 9cffb6aeb4e9..23e46e35413f 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -51,6 +51,11 @@ enum fs_flow_table_type {
 	FS_FT_FDB             = 0X4,
 };
 
+enum fs_flow_table_op_mod {
+	FS_FT_OP_MOD_NORMAL,
+	FS_FT_OP_MOD_LAG_DEMUX,
+};
+
 enum fs_fte_status {
 	FS_FTE_STATUS_EXISTING = 1UL << 0,
 };
@@ -93,6 +98,7 @@ struct mlx5_flow_table {
 	unsigned int			max_fte;
 	unsigned int			level;
 	enum fs_flow_table_type		type;
+	enum fs_flow_table_op_mod	op_mod;
 	struct {
 		bool			active;
 		unsigned int		required_groups;

commit 29cc6679076a00a6ce193004dcf2d14ae7c428a5
Author: Amir Vadai <amir@vadai.me>
Date:   Thu Jul 14 10:32:37 2016 +0300

    net/mlx5: Store counters in rbtree instead of list
    
    In order to use bulk counters, we need to have counters sorted by id.
    
    Signed-off-by: Amir Vadai <amir@vadai.me>
    Reviewed-by: Or Gerlitz <ogerlitz@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index d7ba91a1eea2..9cffb6aeb4e9 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -111,6 +111,7 @@ struct mlx5_fc_cache {
 };
 
 struct mlx5_fc {
+	struct rb_node node;
 	struct list_head list;
 
 	/* last{packets,bytes} members are used when calculating the delta since

commit fba53f7b571925b8a0d59d460ad6de1fda928a3e
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jul 4 17:23:06 2016 +0300

    net/mlx5: Introduce mlx5_flow_steering structure
    
    Instead of having all steering private name spaces and
    steering module fields flat in mlx5_core_priv, we wrap
    them in mlx5_flow_steering for better modularity and
    API exposure.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index aa41a7314691..d7ba91a1eea2 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -55,6 +55,14 @@ enum fs_fte_status {
 	FS_FTE_STATUS_EXISTING = 1UL << 0,
 };
 
+struct mlx5_flow_steering {
+	struct mlx5_core_dev *dev;
+	struct mlx5_flow_root_namespace *root_ns;
+	struct mlx5_flow_root_namespace *fdb_root_ns;
+	struct mlx5_flow_root_namespace *esw_egress_root_ns;
+	struct mlx5_flow_root_namespace *esw_ingress_root_ns;
+};
+
 struct fs_node {
 	struct list_head	list;
 	struct list_head	children;

commit 43a335e055bb7ebdc8a68ce7362ef26ef5bda92b
Author: Amir Vadai <amirva@mellanox.com>
Date:   Fri May 13 12:55:41 2016 +0000

    net/mlx5_core: Flow counters infrastructure
    
    If a counter has the aging flag set when created, it is added to a list
    of counters that will be queried periodically from a workqueue.  query
    result and last use timestamp are cached.
    add/del counter must be very efficient since thousands of such
    operations might be issued in a second.
    There is only a single reference to counters without aging, therefore
    no need for locks.
    But, counters with aging enabled are stored in a list. In order to make
    code as lockless as possible, all the list manipulation and access to
    hardware is done from a single context - the periodic counters query
    thread.
    
    The hardware supports multiple counters per FTE, however currently we
    are using one counter for each FTE.
    
    Signed-off-by: Amir Vadai <amirva@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 1989048ebdfd..aa41a7314691 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -169,6 +169,9 @@ struct mlx5_flow_root_namespace {
 	struct mutex			chain_lock;
 };
 
+int mlx5_init_fc_stats(struct mlx5_core_dev *dev);
+void mlx5_cleanup_fc_stats(struct mlx5_core_dev *dev);
+
 int mlx5_init_fs(struct mlx5_core_dev *dev);
 void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 

commit bd5251dbf156b6bc0661a9409d46e47160df61dd
Author: Amir Vadai <amirva@mellanox.com>
Date:   Fri May 13 12:55:40 2016 +0000

    net/mlx5_core: Introduce flow steering destination of type counter
    
    When adding a flow steering rule with a counter, need to supply a
    destination of type MLX5_FLOW_DESTINATION_TYPE_COUNTER, with a pointer
    to a struct mlx5_fc.
    Also, MLX5_FLOW_CONTEXT_ACTION_COUNT bit should be set in the action.
    
    Signed-off-by: Amir Vadai <amirva@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 8e76cc505f5a..1989048ebdfd 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -96,6 +96,28 @@ struct mlx5_flow_table {
 	struct list_head		fwd_rules;
 };
 
+struct mlx5_fc_cache {
+	u64 packets;
+	u64 bytes;
+	u64 lastuse;
+};
+
+struct mlx5_fc {
+	struct list_head list;
+
+	/* last{packets,bytes} members are used when calculating the delta since
+	 * last reading
+	 */
+	u64 lastpackets;
+	u64 lastbytes;
+
+	u16 id;
+	bool deleted;
+	bool aging;
+
+	struct mlx5_fc_cache cache ____cacheline_aligned_in_smp;
+};
+
 /* Type of children is mlx5_flow_rule */
 struct fs_fte {
 	struct fs_node			node;
@@ -105,6 +127,7 @@ struct fs_fte {
 	u32				index;
 	u32				action;
 	enum fs_fte_status		status;
+	struct mlx5_fc			*counter;
 };
 
 /* Type of children is mlx5_flow_table/namespace */

commit efdc810ba39dae0ccce9cb9c1c84ff9b0157ca43
Author: Mohamad Haj Yahia <mohamad@mellanox.com>
Date:   Tue May 3 17:13:54 2016 +0300

    net/mlx5: Flow steering, Add vport ACL support
    
    Update the relevant flow steering device structs and commands to
    support vport.
    Update the flow steering core API to receive vport number.
    Add ingress and egress ACL flow table name spaces.
    Add ACL flow table support:
    * ACL (Access Control List) flow table is a table that contains
    only allow/drop steering rules.
    
    * We have two types of ACL flow tables - ingress and egress.
    
    * ACLs handle traffic sent from/to E-Switch FDB table, Ingress refers to
    traffic sent from Vport to E-Switch and Egress refers to traffic sent
    from E-Switch to vport.
    
    * Ingress ACL flow table allow/drop rules is checked against traffic
    sent from VF.
    
    * Egress ACL flow table allow/drop rules is checked against traffic sent
    to VF.
    
    Signed-off-by: Mohamad Haj Yahia <mohamad@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index d607e564f454..8e76cc505f5a 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -45,8 +45,10 @@ enum fs_node_type {
 };
 
 enum fs_flow_table_type {
-	FS_FT_NIC_RX	 = 0x0,
-	FS_FT_FDB	 = 0X4,
+	FS_FT_NIC_RX          = 0x0,
+	FS_FT_ESW_EGRESS_ACL  = 0x2,
+	FS_FT_ESW_INGRESS_ACL = 0x3,
+	FS_FT_FDB             = 0X4,
 };
 
 enum fs_fte_status {
@@ -79,6 +81,7 @@ struct mlx5_flow_rule {
 struct mlx5_flow_table {
 	struct fs_node			node;
 	u32				id;
+	u16				vport;
 	unsigned int			max_fte;
 	unsigned int			level;
 	enum fs_flow_table_type		type;

commit a257b94a18f7eb60bbe9b5fd415d208ac71d49ea
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Fri Apr 29 01:36:34 2016 +0300

    net/mlx5: Set number of allowed levels in priority
    
    Refactors the flow steering namespace creation,
    by changing the name num_fts to num_levels.
    When new flow table is created, the driver assign new level
    to this flow table therefore the meaning is equivalent.
    Since downstream patches will introduce the ability to create more
    than one flow table per level, the name num_fts is no
    longer accurate.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index f37a6248a27b..d607e564f454 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -107,7 +107,7 @@ struct fs_fte {
 /* Type of children is mlx5_flow_table/namespace */
 struct fs_prio {
 	struct fs_node			node;
-	unsigned int			max_ft;
+	unsigned int			num_levels;
 	unsigned int			start_level;
 	unsigned int			prio;
 	unsigned int			num_ft;

commit b3638e1a76648dbd482cc5a8f27eb6948cc3bc86
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Mar 7 18:51:46 2016 +0200

    net/mlx5_core: Introduce forward to next priority action
    
    Add support to create flow rule that forward packets
    to the first flow table in the next priority (next priority
    could be the first priority in the next namespace or the
    next priority in the same namespace).
    This feature could be used for DONT_TRAP rules or rules
    that only want to mark the packet with flow tag.
    
    In order to do it optimally, each flow table has list
    of all rules that point to this flow table,
    when a flow table is destroyed/created, we update the list
    head correspondingly.
    
    This kind of rule is created when destination is NULL and
    action is MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_PRIO.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 574a903180ed..f37a6248a27b 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -68,6 +68,11 @@ struct fs_node {
 struct mlx5_flow_rule {
 	struct fs_node				node;
 	struct mlx5_flow_destination		dest_attr;
+	/* next_ft should be accessed under chain_lock and only of
+	 * destination type is FWD_NEXT_fT.
+	 */
+	struct list_head			next_ft;
+	u32					sw_action;
 };
 
 /* Type of children is mlx5_flow_group */
@@ -82,6 +87,10 @@ struct mlx5_flow_table {
 		unsigned int		required_groups;
 		unsigned int		num_groups;
 	} autogroup;
+	/* Protect fwd_rules */
+	struct mutex			lock;
+	/* FWD rules that point on this flow table */
+	struct list_head		fwd_rules;
 };
 
 /* Type of children is mlx5_flow_rule */

commit 153fefbf34e5079c2dd69490f5f23373758d2e9c
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Mar 7 18:51:45 2016 +0200

    net/mlx5_core: Create anchor of last flow table
    
    Create an empty flow table in the end of NIC rx namesapce.
    Adding this flow table simplify the implementation of "forward
    to next prio" rules.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Reviewed-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 00245fd7e4bc..574a903180ed 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -142,6 +142,9 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 #define fs_list_for_each_entry(pos, root)		\
 	list_for_each_entry(pos, root, node.list)
 
+#define fs_list_for_each_entry_safe(pos, tmp, root)		\
+	list_for_each_entry_safe(pos, tmp, root, node.list)
+
 #define fs_for_each_ns_or_ft_reverse(pos, prio)				\
 	list_for_each_entry_reverse(pos, &(prio)->node.children, list)
 
@@ -157,6 +160,9 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 #define fs_for_each_ft(pos, prio)			\
 	fs_list_for_each_entry(pos, &(prio)->node.children)
 
+#define fs_for_each_ft_safe(pos, tmp, prio)			\
+	fs_list_for_each_entry_safe(pos, tmp, &(prio)->node.children)
+
 #define fs_for_each_fg(pos, ft)			\
 	fs_list_for_each_entry(pos, &(ft)->node.children)
 

commit 655227edae4ca42e702db3b7ca490d098090e8fb
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jan 11 10:26:02 2016 +0200

    net/mlx5_core: Set priority attributes
    
    Each priority has two attributes:
    1. max_ft - maximum allowed flow tables under this priority.
    2. start_level - start level range of the flow tables
    in the priority.
    
    These attributes are set by traversing the tree nodes by
    DFS and set start level and max flow tables to each priority.
    Start level depends on the max flow tables of the prior priorities
    in the tree.
    
    The leaves of the trees have max_ft set in them. Each node accumulates
    the max_ft of its children and set it accordingly.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 1a2e08bad529..00245fd7e4bc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -151,6 +151,9 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 #define fs_for_each_prio(pos, ns)			\
 	fs_list_for_each_entry(pos, &(ns)->node.children)
 
+#define fs_for_each_ns(pos, prio)			\
+	fs_list_for_each_entry(pos, &(prio)->node.children)
+
 #define fs_for_each_ft(pos, prio)			\
 	fs_list_for_each_entry(pos, &(prio)->node.children)
 

commit 2cc43b494a6c30ec0e554ea91ce763c97069e8cc
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jan 11 10:25:59 2016 +0200

    net/mlx5_core: Managing root flow table
    
    The root Flow Table for each Flow Table Type is defined,
    by default, as the Flow Table with level 0.
    
    In order not to use an empty flow tables and introduce new hops,
    but still preserve space for flow-tables that have a priority
    greater(lower number) than the current flow table, we introduce this
    new set root flow table command.
    This command tells the HW to start matching packets from the
    assigned root flow table.
    This command is used when we create new flow table with level lower than the
    current lowest flow table or it is the first flow table.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 0f98257c0d31..1a2e08bad529 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -129,6 +129,9 @@ struct mlx5_flow_root_namespace {
 	struct mlx5_flow_namespace	ns;
 	enum   fs_flow_table_type	table_type;
 	struct mlx5_core_dev		*dev;
+	struct mlx5_flow_table		*root_ft;
+	/* Should be held when chaining flow tables */
+	struct mutex			chain_lock;
 };
 
 int mlx5_init_fs(struct mlx5_core_dev *dev);
@@ -148,6 +151,9 @@ void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
 #define fs_for_each_prio(pos, ns)			\
 	fs_list_for_each_entry(pos, &(ns)->node.children)
 
+#define fs_for_each_ft(pos, prio)			\
+	fs_list_for_each_entry(pos, &(prio)->node.children)
+
 #define fs_for_each_fg(pos, ft)			\
 	fs_list_for_each_entry(pos, &(ft)->node.children)
 

commit f0d22d1874730530a2ac304fd0888cb8a6864527
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Mon Jan 11 10:25:57 2016 +0200

    net/mlx5_core: Introduce flow steering autogrouped flow table
    
    When user add rule to autogrouped flow table, we search
    for flow group with the same match criteria, if we don't
    find such group then we create new flow group with the
    required match criteria and insert the rule to this group.
    
    We divide the flow table into required_groups + 1,
    in order to reserve a part of the flow table for rules
    which don't match any existing group.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 4ebb97fd5544..0f98257c0d31 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -77,6 +77,11 @@ struct mlx5_flow_table {
 	unsigned int			max_fte;
 	unsigned int			level;
 	enum fs_flow_table_type		type;
+	struct {
+		bool			active;
+		unsigned int		required_groups;
+		unsigned int		num_groups;
+	} autogroup;
 };
 
 /* Type of children is mlx5_flow_rule */

commit 2530236303d9e705db6a28eb9a10c8d79b288b37
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Dec 10 17:12:43 2015 +0200

    net/mlx5_core: Flow steering tree initialization
    
    Flow steering initialization is based on static tree which
    illustrates the flow steering tree when the driver is loaded. The
    initialization considers the max supported flow table level of the device,
    a minimum of 2 kernel flow tables(vlan and mac) are required to have
    kernel flow table functionality.
    
    The tree structures when the driver is loaded:
    
                    root_namespace(receive nic)
                              |
                    priority-0 (kernel priority)
                              |
                    namespace(kernel namespace)
                              |
                    priority-0 (flow tables priority)
    
    In the following patches, When the EN driver will use the flow steering
    API, it create two flow tables and their flow groups under
    priority-0(flow tables priority).
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index 6c27b8ef42b7..4ebb97fd5544 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -46,6 +46,7 @@ enum fs_node_type {
 
 enum fs_flow_table_type {
 	FS_FT_NIC_RX	 = 0x0,
+	FS_FT_FDB	 = 0X4,
 };
 
 enum fs_fte_status {
@@ -125,6 +126,9 @@ struct mlx5_flow_root_namespace {
 	struct mlx5_core_dev		*dev;
 };
 
+int mlx5_init_fs(struct mlx5_core_dev *dev);
+void mlx5_cleanup_fs(struct mlx5_core_dev *dev);
+
 #define fs_get_obj(v, _node)  {v = container_of((_node), typeof(*v), node); }
 
 #define fs_list_for_each_entry(pos, root)		\

commit 0c56b97503fdf027488897db5709e2557aa1592a
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Dec 10 17:12:42 2015 +0200

    net/mlx5_core: Introduce flow steering API
    
    Introducing the following objects:
    
    mlx5_flow_root_namespace: represent the root of specific flow table
    type tree(e.g NIC receive, FDB, etc..)
    
    mlx5_flow_group: define the mask of the flow specification.
    
    fs_fte(flow steering flow table entry): defines the value of the
    flow specification.
    
    The following describes the relationships between the tree objects:
    root_namespace --> priorities -->namespaces -->
    priorities -->flow-tables --> flow-groups -->
    flow-entries --> destinations
    
    When we create new object(flow table/flow group/flow table entry), we
    call to the FW command and then we add the related sw object to the tree.
    
    When we destroy object, e.g. call to mlx5_destroy_flow_table, we use
    the tree node destructor for destroying the FW object and remove the
    node from the tree.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index b03371439ccc..6c27b8ef42b7 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -69,13 +69,16 @@ struct mlx5_flow_rule {
 	struct mlx5_flow_destination		dest_attr;
 };
 
+/* Type of children is mlx5_flow_group */
 struct mlx5_flow_table {
 	struct fs_node			node;
 	u32				id;
+	unsigned int			max_fte;
 	unsigned int			level;
 	enum fs_flow_table_type		type;
 };
 
+/* Type of children is mlx5_flow_rule */
 struct fs_fte {
 	struct fs_node			node;
 	u32				val[MLX5_ST_SZ_DW(fte_match_param)];
@@ -83,15 +86,19 @@ struct fs_fte {
 	u32				flow_tag;
 	u32				index;
 	u32				action;
+	enum fs_fte_status		status;
 };
 
+/* Type of children is mlx5_flow_table/namespace */
 struct fs_prio {
 	struct fs_node			node;
 	unsigned int			max_ft;
 	unsigned int			start_level;
 	unsigned int			prio;
+	unsigned int			num_ft;
 };
 
+/* Type of children is fs_prio */
 struct mlx5_flow_namespace {
 	/* parent == NULL => root ns */
 	struct	fs_node			node;
@@ -102,6 +109,22 @@ struct mlx5_flow_group_mask {
 	u32	match_criteria[MLX5_ST_SZ_DW(fte_match_param)];
 };
 
+/* Type of children is fs_fte */
+struct mlx5_flow_group {
+	struct fs_node			node;
+	struct mlx5_flow_group_mask	mask;
+	u32				start_index;
+	u32				max_ftes;
+	u32				num_ftes;
+	u32				id;
+};
+
+struct mlx5_flow_root_namespace {
+	struct mlx5_flow_namespace	ns;
+	enum   fs_flow_table_type	table_type;
+	struct mlx5_core_dev		*dev;
+};
+
 #define fs_get_obj(v, _node)  {v = container_of((_node), typeof(*v), node); }
 
 #define fs_list_for_each_entry(pos, root)		\

commit 5e1626c09c615005e1edf9f971c20a35dc74efaa
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Dec 10 17:12:41 2015 +0200

    net/mlx5_core: Add flow steering lookup algorithms
    
    Introduce the flow steering mlx5_flow_namespace (Namespace)
    and fs_prio (Flow Steering Priority) tree nodes.
    
    Namespaces are used in order to isolate different usages or types
    of steering (for example, downstream patches will add a different
    namespaces for the NIC driver and for E-Switch FDB usages).
    
    Flow Steering Priorities are objects that describes priorities
    ranges between different flow objects under the same namespace.
    
    Example, entries in priority i are matched before entries
    in priority i+1.
    
    This patch adds the following algorithms:
    
    1) Calculate level:
    Each flow table has level(the priority between the flow tables).
    When we initialize the flow steering tree, we assign range of levels
    to each priority, therefore the level for new flow table is
    the location within the priority related to the range of the priority.
    
    2) Match between match criteria. This function is used
    for searching flow group when new flow rule is added.
    
    3) Match between match values. This function is used
    for searching flow table entry  when new flow rule is added.
    
    4) Add essential macros for traversing on a node's children.
    E.g. traversing on all the flow table of some priority
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index ae03ae497cbf..b03371439ccc 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -72,6 +72,7 @@ struct mlx5_flow_rule {
 struct mlx5_flow_table {
 	struct fs_node			node;
 	u32				id;
+	unsigned int			level;
 	enum fs_flow_table_type		type;
 };
 
@@ -84,4 +85,44 @@ struct fs_fte {
 	u32				action;
 };
 
+struct fs_prio {
+	struct fs_node			node;
+	unsigned int			max_ft;
+	unsigned int			start_level;
+	unsigned int			prio;
+};
+
+struct mlx5_flow_namespace {
+	/* parent == NULL => root ns */
+	struct	fs_node			node;
+};
+
+struct mlx5_flow_group_mask {
+	u8	match_criteria_enable;
+	u32	match_criteria[MLX5_ST_SZ_DW(fte_match_param)];
+};
+
+#define fs_get_obj(v, _node)  {v = container_of((_node), typeof(*v), node); }
+
+#define fs_list_for_each_entry(pos, root)		\
+	list_for_each_entry(pos, root, node.list)
+
+#define fs_for_each_ns_or_ft_reverse(pos, prio)				\
+	list_for_each_entry_reverse(pos, &(prio)->node.children, list)
+
+#define fs_for_each_ns_or_ft(pos, prio)					\
+	list_for_each_entry(pos, (&(prio)->node.children), list)
+
+#define fs_for_each_prio(pos, ns)			\
+	fs_list_for_each_entry(pos, &(ns)->node.children)
+
+#define fs_for_each_fg(pos, ft)			\
+	fs_list_for_each_entry(pos, &(ft)->node.children)
+
+#define fs_for_each_fte(pos, fg)			\
+	fs_list_for_each_entry(pos, &(fg)->node.children)
+
+#define fs_for_each_dst(pos, fte)			\
+	fs_list_for_each_entry(pos, &(fte)->node.children)
+
 #endif

commit de8575e014685034728396f9d69169428be9cc3d
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Dec 10 17:12:40 2015 +0200

    net/mlx5_core: Add flow steering base data structures
    
    Introducing the base data structure and its operations that are
    going to represent ConnectX-4 Flow Steering, this data structure
    is basically a tree and all Flow steering objects such as
    (Flow Table/Flow Group/FTE/etc ..) are represented as fs_node(s).
    
    fs_node is the base object which describes a basic tree node, with the
    following extra info:
        type: describes the runtime type of the node (Object).
        lock: lock this node sub-tree.
        ref_count: number of children + current references.
        remove_func: a generic destructor.
    
    fs_node types will be used and explained once the usage is added in the
    following patches.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
index e8b34a9b147b..ae03ae497cbf 100644
--- a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -56,6 +56,12 @@ struct fs_node {
 	struct list_head	list;
 	struct list_head	children;
 	enum fs_node_type	type;
+	struct fs_node		*parent;
+	struct fs_node		*root;
+	/* lock the node for writing and traversing */
+	struct mutex		lock;
+	atomic_t		refcount;
+	void			(*remove_func)(struct fs_node *);
 };
 
 struct mlx5_flow_rule {

commit 26a8145390b36cbe97a5bd0b9e97249f21af6aea
Author: Maor Gottlieb <maorg@mellanox.com>
Date:   Thu Dec 10 17:12:39 2015 +0200

    net/mlx5_core: Introduce flow steering firmware commands
    
    Introduce new Flow Steering (FS) firmware commands,
    in-order to support the new flow steering infrastructure.
    
    Signed-off-by: Maor Gottlieb <maorg@mellanox.com>
    Signed-off-by: Moni Shoua <monis@mellanox.com>
    Signed-off-by: Matan Barak <matanb@mellanox.com>
    Signed-off-by: Saeed Mahameed <saeedm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
new file mode 100644
index 000000000000..e8b34a9b147b
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlx5/core/fs_core.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2015, Mellanox Technologies. All rights reserved.
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * OpenIB.org BSD license below:
+ *
+ *     Redistribution and use in source and binary forms, with or
+ *     without modification, are permitted provided that the following
+ *     conditions are met:
+ *
+ *      - Redistributions of source code must retain the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer.
+ *
+ *      - Redistributions in binary form must reproduce the above
+ *        copyright notice, this list of conditions and the following
+ *        disclaimer in the documentation and/or other materials
+ *        provided with the distribution.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _MLX5_FS_CORE_
+#define _MLX5_FS_CORE_
+
+#include <linux/mlx5/fs.h>
+
+enum fs_node_type {
+	FS_TYPE_NAMESPACE,
+	FS_TYPE_PRIO,
+	FS_TYPE_FLOW_TABLE,
+	FS_TYPE_FLOW_GROUP,
+	FS_TYPE_FLOW_ENTRY,
+	FS_TYPE_FLOW_DEST
+};
+
+enum fs_flow_table_type {
+	FS_FT_NIC_RX	 = 0x0,
+};
+
+enum fs_fte_status {
+	FS_FTE_STATUS_EXISTING = 1UL << 0,
+};
+
+struct fs_node {
+	struct list_head	list;
+	struct list_head	children;
+	enum fs_node_type	type;
+};
+
+struct mlx5_flow_rule {
+	struct fs_node				node;
+	struct mlx5_flow_destination		dest_attr;
+};
+
+struct mlx5_flow_table {
+	struct fs_node			node;
+	u32				id;
+	enum fs_flow_table_type		type;
+};
+
+struct fs_fte {
+	struct fs_node			node;
+	u32				val[MLX5_ST_SZ_DW(fte_match_param)];
+	u32				dests_size;
+	u32				flow_tag;
+	u32				index;
+	u32				action;
+};
+
+#endif
