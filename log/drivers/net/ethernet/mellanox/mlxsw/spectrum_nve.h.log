commit c6b36bdd04b5c22b2705f7ae561d4f3b4d8a0ac3
Author: Petr Machata <petrm@mellanox.com>
Date:   Mon Jul 29 18:26:14 2019 +0000

    mlxsw: spectrum_ptp: Increase parsing depth when PTP is enabled
    
    Spectrum systems have a configurable limit on how far into the packet they
    parse. By default, the limit is 96 bytes.
    
    An IPv6 PTP packet is layered as Ethernet/IPv6/UDP (14+40+8 bytes), and
    sequence ID of a PTP event is only available 32 bytes into payload, for a
    total of 94 bytes. When an additional 802.1q header is present as
    well (such as when ptp4l is running on a VLAN port), the parsing limit is
    exceeded. Such packets are not recognized as PTP, and are not timestamped.
    
    Therefore generalize the current VXLAN-specific parsing depth setting to
    allow reference-counted requests from other modules as well. Keep it in the
    VXLAN module, because the MPRS register also configures UDP destination
    port number used for VXLAN, and is thus closely tied to the VXLAN code
    anyway.
    
    Then invoke the new interfaces from both VXLAN (in obvious places), as well
    as from PTP code, when the (global) timestamping configuration changes from
    disabled to enabled or vice versa.
    
    Fixes: 8748642751ed ("mlxsw: spectrum: PTP: Support SIOCGHWTSTAMP, SIOCSHWTSTAMP ioctls")
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Reviewed-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
index 0035640156a1..12f664f42f21 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -29,6 +29,7 @@ struct mlxsw_sp_nve {
 	unsigned int num_max_mc_entries[MLXSW_SP_L3_PROTO_MAX];
 	u32 tunnel_index;
 	u16 ul_rif_index;	/* Reserved for Spectrum */
+	unsigned int inc_parsing_depth_refs;
 };
 
 struct mlxsw_sp_nve_ops {

commit 4ee70efab68d2e99cfe9f32c9acc30b5a404d490
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Jan 23 14:32:57 2019 +0000

    mlxsw: spectrum_nve: Add support for VXLAN on Spectrum-2
    
    Spectrum-1 and Spectrum-2 are largely backward compatible with regards
    to VXLAN. One difference - as explained in previous patch - is that an
    underlay RIF needs to be specified instead of an underlay VR during NVE
    initialization. This is accomplished by calling the relevant function
    that returns the index of such a RIF based on the table ID
    (RT_TABLE_MAIN) where underlay look up occurs.
    
    The second difference is that VXLAN learning (snooping) is controlled
    via a different register (TNPC).
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
index 20d99b41611d..0035640156a1 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -28,6 +28,7 @@ struct mlxsw_sp_nve {
 	unsigned int num_nve_tunnels;	/* Protected by RTNL */
 	unsigned int num_max_mc_entries[MLXSW_SP_L3_PROTO_MAX];
 	u32 tunnel_index;
+	u16 ul_rif_index;	/* Reserved for Spectrum */
 };
 
 struct mlxsw_sp_nve_ops {

commit d907f58fa90f0fcba1268eab24b1e0997e0d1e22
Author: Petr Machata <petrm@mellanox.com>
Date:   Wed Jan 16 23:06:52 2019 +0000

    mlxsw: Add extack to mlxsw_sp_nve_ops.fdb_replay
    
    A follow-up patch will extend vxlan_fdb_replay() with an extack
    argument. Extend the fdb_replay callback in mlxsw likewise so that the
    argument is ready for the vxlan conversion.
    
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
index 02937ea95bc3..20d99b41611d 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -41,7 +41,8 @@ struct mlxsw_sp_nve_ops {
 	int (*init)(struct mlxsw_sp_nve *nve,
 		    const struct mlxsw_sp_nve_config *config);
 	void (*fini)(struct mlxsw_sp_nve *nve);
-	int (*fdb_replay)(const struct net_device *nve_dev, __be32 vni);
+	int (*fdb_replay)(const struct net_device *nve_dev, __be32 vni,
+			  struct netlink_ext_ack *extack);
 	void (*fdb_clear_offload)(const struct net_device *nve_dev, __be32 vni);
 };
 

commit b73ef0e0ee30e14104f1eb19471df462ccaae4b3
Author: Petr Machata <petrm@mellanox.com>
Date:   Fri Dec 7 19:55:14 2018 +0000

    mlxsw: spectrum_nve: Add mlxsw_sp_nve_ops.fdb_clear_offload
    
    If there are any offloaded FDB entries at an NVE device at the time that
    it's un-offloaded, their offloaded marks need to be cleared. How that is
    done depends on NVE device type, and therefore add a per-NVE-type
    operation.
    
    Implement the operation for the sole NVE device type currently supported
    by mlxsw, VXLAN.
    
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
index e2f945543433..02937ea95bc3 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -42,6 +42,7 @@ struct mlxsw_sp_nve_ops {
 		    const struct mlxsw_sp_nve_config *config);
 	void (*fini)(struct mlxsw_sp_nve *nve);
 	int (*fdb_replay)(const struct net_device *nve_dev, __be32 vni);
+	void (*fdb_clear_offload)(const struct net_device *nve_dev, __be32 vni);
 };
 
 extern const struct mlxsw_sp_nve_ops mlxsw_sp1_nve_vxlan_ops;

commit a6ef5a48a32fe87af947e22973a409870bc63d0d
Author: Petr Machata <petrm@mellanox.com>
Date:   Fri Dec 7 19:55:12 2018 +0000

    mlxsw: spectrum_nve: Add mlxsw_sp_nve_ops.fdb_replay
    
    A replay of FDB needs to be performed so that the FDB entries existing
    at the NVE device are offloaded. How the replay is done depends on NVE
    device type, and therefore add a per-NVE-type operation.
    
    Implement the operation for the sole NVE device type currently supported
    by mlxsw, VXLAN.
    
    Signed-off-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
index 4cc3297e13d6..e2f945543433 100644
--- a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -41,6 +41,7 @@ struct mlxsw_sp_nve_ops {
 	int (*init)(struct mlxsw_sp_nve *nve,
 		    const struct mlxsw_sp_nve_config *config);
 	void (*fini)(struct mlxsw_sp_nve *nve);
+	int (*fdb_replay)(const struct net_device *nve_dev, __be32 vni);
 };
 
 extern const struct mlxsw_sp_nve_ops mlxsw_sp1_nve_vxlan_ops;

commit 6e6030bd5412182e064139821ffb09c373e46829
Author: Ido Schimmel <idosch@mellanox.com>
Date:   Wed Oct 17 08:53:14 2018 +0000

    mlxsw: spectrum_nve: Implement common NVE core
    
    The Spectrum ASIC supports different types of NVE encapsulations (e.g.,
    VxLAN, NVGRE) with more types to be supported by future ASICs.
    
    Despite being different, all these encapsulations share some common
    functionality such as the enablement of NVE encapsulation on a given
    filtering identifier (FID) and the addition of remote VTEPs to the
    linked-list of VTEPs that traffic should be flooded to.
    
    Implement this common core and allow different ASICs to register
    different operations for different encapsulation types.
    
    Signed-off-by: Ido Schimmel <idosch@mellanox.com>
    Reviewed-by: Petr Machata <petrm@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
new file mode 100644
index 000000000000..4cc3297e13d6
--- /dev/null
+++ b/drivers/net/ethernet/mellanox/mlxsw/spectrum_nve.h
@@ -0,0 +1,49 @@
+/* SPDX-License-Identifier: BSD-3-Clause OR GPL-2.0 */
+/* Copyright (c) 2018 Mellanox Technologies. All rights reserved */
+
+#ifndef _MLXSW_SPECTRUM_NVE_H
+#define _MLXSW_SPECTRUM_NVE_H
+
+#include <linux/netlink.h>
+#include <linux/rhashtable.h>
+
+#include "spectrum.h"
+
+struct mlxsw_sp_nve_config {
+	enum mlxsw_sp_nve_type type;
+	u8 ttl;
+	u8 learning_en:1;
+	__be16 udp_dport;
+	__be32 flowlabel;
+	u32 ul_tb_id;
+	enum mlxsw_sp_l3proto ul_proto;
+	union mlxsw_sp_l3addr ul_sip;
+};
+
+struct mlxsw_sp_nve {
+	struct mlxsw_sp_nve_config config;
+	struct rhashtable mc_list_ht;
+	struct mlxsw_sp *mlxsw_sp;
+	const struct mlxsw_sp_nve_ops **nve_ops_arr;
+	unsigned int num_nve_tunnels;	/* Protected by RTNL */
+	unsigned int num_max_mc_entries[MLXSW_SP_L3_PROTO_MAX];
+	u32 tunnel_index;
+};
+
+struct mlxsw_sp_nve_ops {
+	enum mlxsw_sp_nve_type type;
+	bool (*can_offload)(const struct mlxsw_sp_nve *nve,
+			    const struct net_device *dev,
+			    struct netlink_ext_ack *extack);
+	void (*nve_config)(const struct mlxsw_sp_nve *nve,
+			   const struct net_device *dev,
+			   struct mlxsw_sp_nve_config *config);
+	int (*init)(struct mlxsw_sp_nve *nve,
+		    const struct mlxsw_sp_nve_config *config);
+	void (*fini)(struct mlxsw_sp_nve *nve);
+};
+
+extern const struct mlxsw_sp_nve_ops mlxsw_sp1_nve_vxlan_ops;
+extern const struct mlxsw_sp_nve_ops mlxsw_sp2_nve_vxlan_ops;
+
+#endif
