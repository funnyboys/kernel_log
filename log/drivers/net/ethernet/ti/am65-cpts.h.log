commit 2ea46dc6864261e94441e4d141058fc538d0de6b
Author: Nathan Chancellor <natechancellor@gmail.com>
Date:   Fri May 15 15:33:18 2020 -0700

    ethernet: ti: am65-cpts: Add missing inline qualifier to stub functions
    
    When building with Clang:
    
    In file included from drivers/net/ethernet/ti/am65-cpsw-ethtool.c:15:
    drivers/net/ethernet/ti/am65-cpts.h:58:12: warning: unused function
    'am65_cpts_ns_gettime' [-Wunused-function]
    static s64 am65_cpts_ns_gettime(struct am65_cpts *cpts)
               ^
    drivers/net/ethernet/ti/am65-cpts.h:63:12: warning: unused function
    'am65_cpts_estf_enable' [-Wunused-function]
    static int am65_cpts_estf_enable(struct am65_cpts *cpts,
               ^
    drivers/net/ethernet/ti/am65-cpts.h:69:13: warning: unused function
    'am65_cpts_estf_disable' [-Wunused-function]
    static void am65_cpts_estf_disable(struct am65_cpts *cpts, int idx)
                ^
    3 warnings generated.
    
    These functions need to be marked as inline, which adds __maybe_unused,
    to avoid these warnings, which is the pattern for stub functions.
    
    Fixes: ec008fa2a9e5 ("ethernet: ti: am65-cpts: add routines to support taprio offload")
    Link: https://github.com/ClangBuiltLinux/linux/issues/1026
    Signed-off-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/am65-cpts.h b/drivers/net/ethernet/ti/am65-cpts.h
index 98c1960b20b9..cf9fbc28fd03 100644
--- a/drivers/net/ethernet/ti/am65-cpts.h
+++ b/drivers/net/ethernet/ti/am65-cpts.h
@@ -55,18 +55,18 @@ static inline void am65_cpts_rx_enable(struct am65_cpts *cpts, bool en)
 {
 }
 
-static s64 am65_cpts_ns_gettime(struct am65_cpts *cpts)
+static inline s64 am65_cpts_ns_gettime(struct am65_cpts *cpts)
 {
 	return 0;
 }
 
-static int am65_cpts_estf_enable(struct am65_cpts *cpts,
-				 int idx, struct am65_cpts_estf_cfg *cfg)
+static inline int am65_cpts_estf_enable(struct am65_cpts *cpts, int idx,
+					struct am65_cpts_estf_cfg *cfg)
 {
 	return 0;
 }
 
-static void am65_cpts_estf_disable(struct am65_cpts *cpts, int idx)
+static inline void am65_cpts_estf_disable(struct am65_cpts *cpts, int idx)
 {
 }
 #endif

commit ec008fa2a9e5686081053750893de5f407a8d076
Author: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
Date:   Wed May 13 09:26:14 2020 -0400

    ethernet: ti: am65-cpts: add routines to support taprio offload
    
    TAPRIO/EST offload support in CPSW2G requires EST scheduler
    function enabled in CPTS. So this patch add a function to
    set cycle time for EST scheduler.  It also add a function for
    getting time in ns of PHC clock for taprio qdisc configuration.
    Mostly to verify if timer update is needed or to get actual
    state of oper/admin schedule.
    
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/am65-cpts.h b/drivers/net/ethernet/ti/am65-cpts.h
index 0b55dc12ba48..98c1960b20b9 100644
--- a/drivers/net/ethernet/ti/am65-cpts.h
+++ b/drivers/net/ethernet/ti/am65-cpts.h
@@ -12,6 +12,11 @@
 
 struct am65_cpts;
 
+struct am65_cpts_estf_cfg {
+	u64 ns_period;
+	u64 ns_start;
+};
+
 #if IS_ENABLED(CONFIG_TI_K3_AM65_CPTS)
 struct am65_cpts *am65_cpts_create(struct device *dev, void __iomem *regs,
 				   struct device_node *node);
@@ -19,6 +24,10 @@ int am65_cpts_phc_index(struct am65_cpts *cpts);
 void am65_cpts_tx_timestamp(struct am65_cpts *cpts, struct sk_buff *skb);
 void am65_cpts_prep_tx_timestamp(struct am65_cpts *cpts, struct sk_buff *skb);
 void am65_cpts_rx_enable(struct am65_cpts *cpts, bool en);
+u64 am65_cpts_ns_gettime(struct am65_cpts *cpts);
+int am65_cpts_estf_enable(struct am65_cpts *cpts, int idx,
+			  struct am65_cpts_estf_cfg *cfg);
+void am65_cpts_estf_disable(struct am65_cpts *cpts, int idx);
 #else
 static inline struct am65_cpts *am65_cpts_create(struct device *dev,
 						 void __iomem *regs,
@@ -45,6 +54,21 @@ static inline void am65_cpts_prep_tx_timestamp(struct am65_cpts *cpts,
 static inline void am65_cpts_rx_enable(struct am65_cpts *cpts, bool en)
 {
 }
+
+static s64 am65_cpts_ns_gettime(struct am65_cpts *cpts)
+{
+	return 0;
+}
+
+static int am65_cpts_estf_enable(struct am65_cpts *cpts,
+				 int idx, struct am65_cpts_estf_cfg *cfg)
+{
+	return 0;
+}
+
+static void am65_cpts_estf_disable(struct am65_cpts *cpts, int idx)
+{
+}
 #endif
 
 #endif /* K3_CPTS_H_ */

commit f6bd59526ca527e203e3c6c2e62cda5a0fd5c1a2
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Fri May 1 23:50:06 2020 +0300

    net: ethernet: ti: introduce am654 common platform time sync driver
    
    The CPTS module is used to facilitate host control of time sync operations.
    Main features of CPTS module are:
    - selection of multiple external clock sources
    - control of time sync events via interrupt or polling
    - 64-bit timestamp mode in ns with HW PPM and nudge adjustment.
    - hardware timestamp ext. inputs (HWx_TS_PUSH)
    - timestamp Generator function outputs (TS_GENFx)
    Depending on integration it enables compliance with the IEEE 1588-2008
    standard for a precision clock synchronization protocol, Ethernet Enhanced
    Scheduled Traffic Operations (CPTS_ESTFn) and PCIe Subsystem Precision Time
    Measurement (PTM).
    
    Introduced driver provides Linux PTP hardware clock for each CPTS device
    and network packets timestamping where applicable. CPTS PTP hardware clock
    supports following operations:
        - Set time
        - Get time
        - Shift the clock by a given offset atomically
        - Adjust clock frequency
        - Time stamp external events
        - Periodic output signals
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/am65-cpts.h b/drivers/net/ethernet/ti/am65-cpts.h
new file mode 100644
index 000000000000..0b55dc12ba48
--- /dev/null
+++ b/drivers/net/ethernet/ti/am65-cpts.h
@@ -0,0 +1,50 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/* TI K3 AM65 CPTS driver interface
+ *
+ * Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com
+ */
+
+#ifndef K3_CPTS_H_
+#define K3_CPTS_H_
+
+#include <linux/device.h>
+#include <linux/of.h>
+
+struct am65_cpts;
+
+#if IS_ENABLED(CONFIG_TI_K3_AM65_CPTS)
+struct am65_cpts *am65_cpts_create(struct device *dev, void __iomem *regs,
+				   struct device_node *node);
+int am65_cpts_phc_index(struct am65_cpts *cpts);
+void am65_cpts_tx_timestamp(struct am65_cpts *cpts, struct sk_buff *skb);
+void am65_cpts_prep_tx_timestamp(struct am65_cpts *cpts, struct sk_buff *skb);
+void am65_cpts_rx_enable(struct am65_cpts *cpts, bool en);
+#else
+static inline struct am65_cpts *am65_cpts_create(struct device *dev,
+						 void __iomem *regs,
+						 struct device_node *node)
+{
+	return ERR_PTR(-EOPNOTSUPP);
+}
+
+static inline int am65_cpts_phc_index(struct am65_cpts *cpts)
+{
+	return -1;
+}
+
+static inline void am65_cpts_tx_timestamp(struct am65_cpts *cpts,
+					  struct sk_buff *skb)
+{
+}
+
+static inline void am65_cpts_prep_tx_timestamp(struct am65_cpts *cpts,
+					       struct sk_buff *skb)
+{
+}
+
+static inline void am65_cpts_rx_enable(struct am65_cpts *cpts, bool en)
+{
+}
+#endif
+
+#endif /* K3_CPTS_H_ */
