commit 8127224c2708aa1558e2be7bbd1b7e9b07860de6
Author: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
Date:   Wed May 13 09:26:15 2020 -0400

    ethernet: ti: am65-cpsw-qos: add TAPRIO offload support
    
    AM65 CPSW h/w supports Enhanced Scheduled Traffic (EST – defined
    in P802.1Qbv/D2.2 that later got included in IEEE 802.1Q-2018)
    configuration. EST allows express queue traffic to be scheduled
    (placed) on the wire at specific repeatable time intervals. In
    Linux kernel, EST configuration is done through tc command and
    the taprio scheduler in the net core implements a software only
    scheduler (SCH_TAPRIO). If the NIC is capable of EST configuration,
    user indicate "flag 2" in the command which is then parsed by
    taprio scheduler in net core and indicate that the command is to
    be offloaded to h/w. taprio then offloads the command to the
    driver by calling ndo_setup_tc() ndo ops. This patch implements
    ndo_setup_tc() to offload EST configuration to CPSW h/w.
    
    Currently driver supports only SetGateStates operation. EST
    operates on a repeating time interval generated by the CPTS EST
    function generator. Each Ethernet port has a global EST fetch
    RAM that can be configured as 2 buffers, each of 64 locations
    or one large buffer of 128 locations. In 2 buffer configuration,
    a ping pong mechanism is used to hold the active schedule (oper)
    in one buffer and new (admin) command in the other. Each 22-bit
    fetch command consists of a 14-bit fetch count (14 MSB’s) and an
    8-bit priority fetch allow (8 LSB’s) that will be applied for the
    fetch count time in wireside clocks. Driver process each of the
    sched-entry in the offload command and update the fetch RAM.
    Driver configures duration in sched-entry into the fetch count
    and Gate mask into the priority fetch bits of the RAM. Then
    configures the CPTS EST function generator to activate the
    schedule. Currently driver supports only 2 buffer configuration
    which means driver supports a max cycle time of ~8 msec.
    
    CPSW supports a configurable number of priority queues (up to 8)
    and needs to be switched to this mode from the default round
    robin mode before EST can be offloaded. User configures
    these through ethtool commands (-L for changing number of
    queues and --set-priv-flags to disable round robin mode).
    Driver doesn't enable EST if pf_p0_rx_ptype_rrobin privat flag
    is set. The flag is common for all ports, and so can't be just
    overridden by taprio configuration w/o user involvement.
    Command fails if pf_p0_rx_ptype_rrobin is already set in the
    driver.
    
    Scheds (commands) configuration depends on interface speed so
    driver translates the duration to the fetch count based on
    link speed. Each schedule can be constructed with several
    command entries in fetch RAM  depending on interval. For example
    if each sched has timer interval < ~130us on 1000 Mb link then
    each sched consumes one command and have 1:1 mapping. When
    Ethernet link goes down, driver purge the configuration if link
    is down for more than 1 second.
    
    The patch allows to update the timer and scheds memory only if it's
    really needed, and skip cases required the user to stop timer by
    configuring only shceds memory.
    
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
    Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/am65-cpsw-qos.h b/drivers/net/ethernet/ti/am65-cpsw-qos.h
new file mode 100644
index 000000000000..e8f1b6b59e93
--- /dev/null
+++ b/drivers/net/ethernet/ti/am65-cpsw-qos.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (C) 2020 Texas Instruments Incorporated - http://www.ti.com/
+ */
+
+#ifndef AM65_CPSW_QOS_H_
+#define AM65_CPSW_QOS_H_
+
+#include <linux/netdevice.h>
+#include <net/pkt_sched.h>
+
+struct am65_cpsw_est {
+	int buf;
+	/* has to be the last one */
+	struct tc_taprio_qopt_offload taprio;
+};
+
+struct am65_cpsw_qos {
+	struct am65_cpsw_est *est_admin;
+	struct am65_cpsw_est *est_oper;
+	ktime_t link_down_time;
+	int link_speed;
+};
+
+int am65_cpsw_qos_ndo_setup_tc(struct net_device *ndev, enum tc_setup_type type,
+			       void *type_data);
+void am65_cpsw_qos_link_up(struct net_device *ndev, int link_speed);
+void am65_cpsw_qos_link_down(struct net_device *ndev);
+
+#endif /* AM65_CPSW_QOS_H_ */
