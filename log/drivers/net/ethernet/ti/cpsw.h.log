commit 68cf027f3d9d586366391beed8721ba319fee5c0
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Fri Apr 26 20:12:23 2019 +0300

    net: ethernet: ti: convert to SPDX license identifiers
    
    Replace textual license with SPDX-License-Identifier.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Reviewed-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 907e05fc22e4..35d602f03281 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -1,15 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 /* Texas Instruments Ethernet Switch Driver
  *
  * Copyright (C) 2013 Texas Instruments
  *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * version 2 as published by the Free Software Foundation.
- *
- * This program is distributed "as is" WITHOUT ANY WARRANTY of any
- * kind, whether express or implied; without even the implied warranty
- * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
  */
 #ifndef __CPSW_H__
 #define __CPSW_H__

commit dba235fa70cbedf7dd64d5763299451be4b9de16
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Wed Feb 20 17:25:19 2019 +0200

    net: ethernet: ti: cpsw: deprecate cpsw-phy-sel driver
    
    Deprecate cpsw-phy-sel driver as it's been replaced with new
    TI phy-gmii-sel PHY driver.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Tony Lindgren <tony@atomide.com>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index cf111db3dc27..907e05fc22e4 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -21,7 +21,13 @@
 			 ((mac)[2] << 16) | ((mac)[3] << 24))
 #define mac_lo(mac)	(((mac)[4] << 0) | ((mac)[5] << 8))
 
+#if IS_ENABLED(CONFIG_TI_CPSW_PHY_SEL)
 void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
+#else
+static inline
+void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave)
+{}
+#endif
 int ti_cm_get_macid(struct device *dev, int slave, u8 *mac_addr);
 
 #endif /* __CPSW_H__ */

commit 2733d7b89ce15d60b6409b1c2275605f3e4dc940
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Nov 30 18:21:13 2017 -0600

    net: ethernet: ti: cpsw: move mac_hi/lo defines in cpsw.h
    
    Move mac_hi/lo defines in common header cpsw.h and re-use
    them for netcp_ethss.c.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index a325f5556cc5..cf111db3dc27 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -17,6 +17,10 @@
 #include <linux/if_ether.h>
 #include <linux/phy.h>
 
+#define mac_hi(mac)	(((mac)[0] << 0) | ((mac)[1] << 8) |	\
+			 ((mac)[2] << 16) | ((mac)[3] << 24))
+#define mac_lo(mac)	(((mac)[4] << 0) | ((mac)[5] << 8))
+
 void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
 int ti_cm_get_macid(struct device *dev, int slave, u8 *mac_addr);
 

commit 2c8a14d62601851b851ea4e502dcdf041936b191
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Thu Nov 30 18:21:12 2017 -0600

    net: ethernet: ti: cpsw: move platform data struct to .c file
    
    CPSW platform data struct cpsw_platform_data and struct cpsw_slave_data are
    used only incide cpsw.c module, so move these definitions there.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 6c3037aa2cd3..a325f5556cc5 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -17,27 +17,6 @@
 #include <linux/if_ether.h>
 #include <linux/phy.h>
 
-struct cpsw_slave_data {
-	struct device_node *phy_node;
-	char		phy_id[MII_BUS_ID_SIZE];
-	int		phy_if;
-	u8		mac_addr[ETH_ALEN];
-	u16		dual_emac_res_vlan;	/* Reserved VLAN for DualEMAC */
-};
-
-struct cpsw_platform_data {
-	struct cpsw_slave_data	*slave_data;
-	u32	ss_reg_ofs;	/* Subsystem control register offset */
-	u32	channels;	/* number of cpdma channels (symmetric) */
-	u32	slaves;		/* number of slave cpgmac ports */
-	u32	active_slave; /* time stamping, ethtool and SIOCGMIIPHY slave */
-	u32	ale_entries;	/* ale table size */
-	u32	bd_ram_size;  /*buffer descriptor ram size */
-	u32	mac_control;	/* Mac control register */
-	u16	default_vlan;	/* Def VLAN for ALE lookup in VLAN aware mode*/
-	bool	dual_emac;	/* Enable Dual EMAC mode */
-};
-
 void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
 int ti_cm_get_macid(struct device *dev, int slave, u8 *mac_addr);
 

commit 4a88fb9565d418cf1c2bf41be7cfe156717b9c85
Author: Grygorii Strashko <grygorii.strashko@ti.com>
Date:   Tue Dec 6 18:00:42 2016 -0600

    net: ethernet: ti: cpts: move dt props parsing to cpts driver
    
    Move DT properties parsing into CPTS driver to simplify CPSW
    code and CPTS driver porting on other SoC in the future
    (like Keystone 2) - with this change it will not be required
    to add the same DT parsing code in Keystone 2 NETCP driver.
    
    Signed-off-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 16b54c6f32c2..6c3037aa2cd3 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -31,8 +31,6 @@ struct cpsw_platform_data {
 	u32	channels;	/* number of cpdma channels (symmetric) */
 	u32	slaves;		/* number of slave cpgmac ports */
 	u32	active_slave; /* time stamping, ethtool and SIOCGMIIPHY slave */
-	u32	cpts_clock_mult;  /* convert input clock ticks to nanoseconds */
-	u32	cpts_clock_shift; /* convert input clock ticks to nanoseconds */
 	u32	ale_entries;	/* ale table size */
 	u32	bd_ram_size;  /*buffer descriptor ram size */
 	u32	mac_control;	/* Mac control register */

commit 1793331e0943f1ddd8649dd1ccea11f3f267d371
Author: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
Date:   Fri Jun 17 13:25:39 2016 +0300

    net: ethernet: ti: cpsw: remove rx_descs property
    
    There is no reason in rx_descs property because davinici_cpdma
    driver splits pool of descriptors equally between tx and rx channels.
    That is, if number of descriptors 256, 128 of them are for rx
    channels. While receiving, the descriptor is freed to the pool and
    then allocated with new skb. And if in DT the "rx_descs" is set to
    64, then 128 - 64 = 64 descriptors are always in the pool and cannot
    be used, for tx, for instance. It's not correct resource usage,
    better to set it to half of pool, then the rx pool can be used in
    full. It will not have any impact on performance, as anyway, the
    "redundant" descriptors were unused.
    
    Signed-off-by: Ivan Khoronzhuk <ivan.khoronzhuk@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index e50afd1b2eda..16b54c6f32c2 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -35,7 +35,6 @@ struct cpsw_platform_data {
 	u32	cpts_clock_shift; /* convert input clock ticks to nanoseconds */
 	u32	ale_entries;	/* ale table size */
 	u32	bd_ram_size;  /*buffer descriptor ram size */
-	u32	rx_descs;	/* Number of Rx Descriptios */
 	u32	mac_control;	/* Mac control register */
 	u16	default_vlan;	/* Def VLAN for ALE lookup in VLAN aware mode*/
 	bool	dual_emac;	/* Enable Dual EMAC mode */

commit 552165bcf7060b998b4a9b5b86110b6a5e04dfd9
Author: David Rivshin <drivshin@allworx.com>
Date:   Wed Apr 27 21:25:25 2016 -0400

    drivers: net: cpsw: fix parsing of phy-handle DT property in dual_emac config
    
    Commit 9e42f715264ff158478fa30eaed847f6e131366b ("drivers: net: cpsw: add
    phy-handle parsing") saved the "phy-handle" phandle into a new cpsw_priv
    field. However, phy connections are per-slave, so the phy_node field should
    be in cpsw_slave_data rather than cpsw_priv.
    
    This would go unnoticed in a single emac configuration. But in dual_emac
    mode, the last "phy-handle" property parsed for either slave would be used
    by both of them, causing them both to refer to the same phy_device.
    
    Fixes: 9e42f715264f ("drivers: net: cpsw: add phy-handle parsing")
    Signed-off-by: David Rivshin <drivshin@allworx.com>
    Tested-by: Nicolas Chauvet <kwizart@gmail.com>
    Tested-by: Andrew Goodbody <andrew.goodbody@cambrionix.com>
    Reviewed-by: Mugunthan V N <mugunthanvnm@ti.com>
    Reviewed-by: Grygorii Strashko <grygorii.strashko@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 442a7038e660..e50afd1b2eda 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -18,6 +18,7 @@
 #include <linux/phy.h>
 
 struct cpsw_slave_data {
+	struct device_node *phy_node;
 	char		phy_id[MII_BUS_ID_SIZE];
 	int		phy_if;
 	u8		mac_addr[ETH_ALEN];

commit b6745f6e4e63f23fd5bf46ea2745783be13a0960
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Mon Sep 21 15:56:50 2015 +0530

    drivers: net: cpsw: davinci_emac: move reading mac id to common file
    
    Moving mac address reading from ethernet driver to common
    file for better maintenance and for code reusable.
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index ca90efafd156..442a7038e660 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -41,7 +41,6 @@ struct cpsw_platform_data {
 };
 
 void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
-int cpsw_am33xx_cm_get_macid(struct device *dev, u16 offset, int slave,
-			     u8 *mac_addr);
+int ti_cm_get_macid(struct device *dev, int slave, u8 *mac_addr);
 
 #endif /* __CPSW_H__ */

commit e5a49c1e3b189c744770e04d2b46ec7ca37d604c
Author: Tony Lindgren <tony@atomide.com>
Date:   Wed Jan 28 11:33:04 2015 -0800

    net: cpsw: Add a minimal cpsw-common module for shared code
    
    Looks like davinci_emac and cpsw can share some code although the
    device registers have a different layout.
    
    At least the code for getting the MAC address using syscon can
    be shared by passing the register offset. Let's start with that
    and set up a minimal shared cpsw-shared.c.
    
    Cc: Brian Hutchinson <b.hutchman@gmail.com>
    Cc: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Tony Lindgren <tony@atomide.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 1b710674630c..ca90efafd156 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -41,5 +41,7 @@ struct cpsw_platform_data {
 };
 
 void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
+int cpsw_am33xx_cm_get_macid(struct device *dev, u16 offset, int slave,
+			     u8 *mac_addr);
 
 #endif /* __CPSW_H__ */

commit bd07d34f00dfe5025faab0263554e3052ce5d58e
Author: Markus Pargmann <mpa@pengutronix.de>
Date:   Mon Sep 29 08:53:15 2014 +0200

    net: cpsw: header, Add missing include
    
    "MII_BUS_ID_SIZE" is defined in linux/phy.h which is not included in the
    cpsw.h file.
    
    Signed-off-by: Markus Pargmann <mpa@pengutronix.de>
    Reviewed-by: Wolfram Sang <wsa@the-dreams.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index 574f49da693f..1b710674630c 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -15,6 +15,7 @@
 #define __CPSW_H__
 
 #include <linux/if_ether.h>
+#include <linux/phy.h>
 
 struct cpsw_slave_data {
 	char		phy_id[MII_BUS_ID_SIZE];

commit 5892cd135e166c425c992c437a2944534b663a24
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Sat Sep 21 00:50:39 2013 +0530

    drivers: net: cpsw-phy-sel: Add new driver for phy mode selection for cpsw
    
    The cpsw currently lacks code to properly set up the hardware interface
    mode on AM33xx. Other platforms might be equally affected.
    
    Usually, the bootloader will configure the control module register, so
    probably that's why such support wasn't needed in the past. In suspend
    mode though, this register is modified, and so it needs reprogramming
    after resume.
    
    This patch adds a new driver in which hardware interface can configure
    correct register bits when the slave is opened.
    
    The AM33xx also has a bit for each slave to configure the RMII reference
    clock direction. Setting it is now supported by a per-slave DT property.
    
    This code path introducted by this patch is currently exclusive for
    am33xx and same can be extened to various platforms via the DT compatibility
    property.
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Tested-by: Daniel Mack <zonque@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
index eb3e101ec048..574f49da693f 100644
--- a/drivers/net/ethernet/ti/cpsw.h
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -39,4 +39,6 @@ struct cpsw_platform_data {
 	bool	dual_emac;	/* Enable Dual EMAC mode */
 };
 
+void cpsw_phy_sel(struct device *dev, phy_interface_t phy_mode, int slave);
+
 #endif /* __CPSW_H__ */

commit dbe34724c08ea25d39d31735120077013fbbb6fb
Author: Mugunthan V N <mugunthanvnm@ti.com>
Date:   Mon Aug 19 17:47:40 2013 +0530

    drivers: net: cpsw: remove platform data header file of cpsw
    
    CPSW driver no longer supports platform register as all the SoCs which has CPSW
    are supporting DT only booting, so moving cpsw.h header file from platform
    include to drivers/net/ethernet/ti
    
    Signed-off-by: Mugunthan V N <mugunthanvnm@ti.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/ti/cpsw.h b/drivers/net/ethernet/ti/cpsw.h
new file mode 100644
index 000000000000..eb3e101ec048
--- /dev/null
+++ b/drivers/net/ethernet/ti/cpsw.h
@@ -0,0 +1,42 @@
+/* Texas Instruments Ethernet Switch Driver
+ *
+ * Copyright (C) 2013 Texas Instruments
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+#ifndef __CPSW_H__
+#define __CPSW_H__
+
+#include <linux/if_ether.h>
+
+struct cpsw_slave_data {
+	char		phy_id[MII_BUS_ID_SIZE];
+	int		phy_if;
+	u8		mac_addr[ETH_ALEN];
+	u16		dual_emac_res_vlan;	/* Reserved VLAN for DualEMAC */
+};
+
+struct cpsw_platform_data {
+	struct cpsw_slave_data	*slave_data;
+	u32	ss_reg_ofs;	/* Subsystem control register offset */
+	u32	channels;	/* number of cpdma channels (symmetric) */
+	u32	slaves;		/* number of slave cpgmac ports */
+	u32	active_slave; /* time stamping, ethtool and SIOCGMIIPHY slave */
+	u32	cpts_clock_mult;  /* convert input clock ticks to nanoseconds */
+	u32	cpts_clock_shift; /* convert input clock ticks to nanoseconds */
+	u32	ale_entries;	/* ale table size */
+	u32	bd_ram_size;  /*buffer descriptor ram size */
+	u32	rx_descs;	/* Number of Rx Descriptios */
+	u32	mac_control;	/* Mac control register */
+	u16	default_vlan;	/* Def VLAN for ALE lookup in VLAN aware mode*/
+	bool	dual_emac;	/* Enable Dual EMAC mode */
+};
+
+#endif /* __CPSW_H__ */
