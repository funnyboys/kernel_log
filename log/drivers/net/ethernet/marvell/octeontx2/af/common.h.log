commit caa2da34fd25a37e9fd43343b6966fb9d730a6d5
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Mon Jan 27 18:35:18 2020 +0530

    octeontx2-pf: Initialize and config queues
    
    This patch does the initialization of all queues ie the
    receive buffer pools, receive and transmit queues, completion
    or notification queues etc. Allocates all required resources
    (eg transmit schedulers, receive buffers etc) and configures
    them for proper functioning of queues. Also sets up receive
    queue's RED dropping levels.
    
    Co-developed-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 784207bae5f8..cd33c2e6ca5f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -143,8 +143,13 @@ enum nix_scheduler {
 	NIX_TXSCH_LVL_CNT = 0x5,
 };
 
-#define TXSCH_TL1_DFLT_RR_QTM      ((1 << 24) - 1)
-#define TXSCH_TL1_DFLT_RR_PRIO     (0x1ull)
+#define TXSCH_RR_QTM_MAX		((1 << 24) - 1)
+#define TXSCH_TL1_DFLT_RR_QTM		TXSCH_RR_QTM_MAX
+#define TXSCH_TL1_DFLT_RR_PRIO		(0x1ull)
+#define MAX_SCHED_WEIGHT		0xFF
+#define DFLT_RR_WEIGHT			71
+#define DFLT_RR_QTM	((DFLT_RR_WEIGHT * TXSCH_RR_QTM_MAX) \
+			 / MAX_SCHED_WEIGHT)
 
 /* Min/Max packet sizes, excluding FCS */
 #define	NIC_HW_MIN_FRS			40

commit 19b7e21c55c81713c4011278143006af9f232504
Merge: 1e8795b1b20d 1d4c79ed324a
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Nov 16 18:47:31 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Lots of overlapping changes and parallel additions, stuff
    like that.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 26b3f3cc0a5b30d5b6af4d614f1c324c29ff2a9c
Author: Nishad Kamdar <nishadkamdar@gmail.com>
Date:   Sat Nov 16 14:50:45 2019 +0530

    octeontx2-af: Use the correct style for SPDX License Identifier
    
    This patch corrects the SPDX License Identifier style in
    header files related to Marvell OcteonTX2 network devices.
    It uses an expilict block comment for the SPDX License
    Identifier.
    
    Changes made by using a script provided by Joe Perches here:
    https://lkml.org/lkml/2019/2/7/46.
    
    Suggested-by: Joe Perches <joe@perches.com>
    Signed-off-by: Nishad Kamdar <nishadkamdar@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index e332e82fc066..413c3f254cf8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -1,5 +1,5 @@
-/* SPDX-License-Identifier: GPL-2.0
- * Marvell OcteonTx2 RVU Admin Function driver
+/* SPDX-License-Identifier: GPL-2.0 */
+/*  Marvell OcteonTx2 RVU Admin Function driver
  *
  * Copyright (C) 2018 Marvell International Ltd.
  *

commit c5a797e081dad713fd3b23a660c80a77d1d5583e
Author: Prakash Brahmajyosyula <bprakash@marvell.com>
Date:   Thu Nov 14 10:56:19 2019 +0530

    octeontx2-af: Add NDC block stats to debugfs.
    
    NDC is a data cache unit which caches NPA and NIX block's
    aura/pool/RQ/SQ/CQ/etc contexts to reduce number of costly
    DRAM accesses.
    
    This patch adds support to dump cache's performance stats
    like cache line hit/miss counters, average cycles taken for
    accessing cached and non-cached data. This will help in
    checking if NPA/NIX context reads/writes are having NDC cache
    misses which inturn might effect performance.
    
    Also changed NDC enums to reflect correct NDC hardware instance.
    
    Signed-off-by: Prakash Brahmajyosyula <bprakash@marvell.com>
    Signed-off-by: Linu Cherian <lcherian@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index e332e82fc066..baec832962df 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -196,4 +196,20 @@ enum nix_scheduler {
 #define DEFAULT_RSS_CONTEXT_GROUP	0
 #define MAX_RSS_INDIR_TBL_SIZE		256 /* 1 << Max adder bits */
 
+/* NDC info */
+enum ndc_idx_e {
+	NIX0_RX = 0x0,
+	NIX0_TX = 0x1,
+	NPA0_U  = 0x2,
+};
+
+enum ndc_ctype_e {
+	CACHING = 0x0,
+	BYPASS = 0x1,
+};
+
+#define NDC_MAX_PORT 6
+#define NDC_READ_TRANS 0
+#define NDC_WRITE_TRANS 1
+
 #endif /* COMMON_H */

commit 07a85fe14254e01bcf37f4d2e0a13f093378620b
Author: Luis Chamberlain <mcgrof@kernel.org>
Date:   Wed Dec 19 12:24:08 2018 -0800

    cross-tree: phase out dma_zalloc_coherent() on headers
    
    The last few stragglers coccinelle doesn't pick up are on driver
    specific header files. Phase those out as well as dma_alloc_coherent()
    zeroes out the memory as well now too.
    
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Luis Chamberlain <mcgrof@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index ec50a21c5aaf..e332e82fc066 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -64,7 +64,7 @@ static inline int qmem_alloc(struct device *dev, struct qmem **q,
 
 	qmem->entry_sz = entry_sz;
 	qmem->alloc_sz = (qsize * entry_sz) + OTX2_ALIGN;
-	qmem->base = dma_zalloc_coherent(dev, qmem->alloc_sz,
+	qmem->base = dma_alloc_coherent(dev, qmem->alloc_sz,
 					 &qmem->iova, GFP_KERNEL);
 	if (!qmem->base)
 		return -ENOMEM;

commit 26dda7da8ed33b8541053daaf1a2a08389bc0fe0
Author: Nithin Dabilpuram <ndabilpuram@marvell.com>
Date:   Sun Dec 2 18:17:40 2018 +0530

    octeontx2-af: Restrict TL1 allocation and configuration
    
    TL1 is the root node in the scheduling hierarchy and
    it is a global resource with a limited number.
    
    This patch introduces restriction and validation on
    the allocation of the TL1 nodes for the effective resource
    sharing across the AF consumers.
    
    - Limit TL1 allocation to 2 per lmac.
      One could be for the normal link and one for IEEE802.3br
      express link (Express Send DMA).
      Effectively all the VF's of an RVU PF(lmac) share the two TL1 schqs.
    - TL1 cannot be freed once allocated.
    - Allow VF's to only apply default config to TL1 if not
      already applied. PF's can always overwrite the TL1 config.
    - Consider NIX_AQ_INSTOP_WRITE while validating txschq
      when sq.ena is set.
    
    Signed-off-by: Krzysztof Kanas <kkanas@marvell.com>
    Signed-off-by: Nithin Dabilpuram <ndabilpuram@marvell.com>
    Signed-off-by: Jerin Jacob <jerinj@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 72ad04eb8769..ec50a21c5aaf 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -143,6 +143,9 @@ enum nix_scheduler {
 	NIX_TXSCH_LVL_CNT = 0x5,
 };
 
+#define TXSCH_TL1_DFLT_RR_QTM      ((1 << 24) - 1)
+#define TXSCH_TL1_DFLT_RR_PRIO     (0x1ull)
+
 /* Min/Max packet sizes, excluding FCS */
 #define	NIC_HW_MIN_FRS			40
 #define	NIC_HW_MAX_FRS			9212

commit 7ee74697e557ab9638d7fdcc091c5d25fc78af3d
Author: Jerin Jacob <jerinjacobk@gmail.com>
Date:   Sun Dec 2 18:17:39 2018 +0530

    octeontx2-af: Add support for runtime RSS algo index reservation
    
    Introduced reserve_flowkey_alg_idx()to reserve RSS algorithm index,
    it would internally use set_flowkey_fields() to generate fields
    based on the flow key dynamically.
    
    On AF driver init, it would reserve a predefined set RSS algo indexes,
    which will be available all the time for all the AF driver consumers.
    The leftover algo indexes can be reserved at runtime through
    exiting nix_rss_flowkey_cfg mailbox message.
    
    The NIX_FLOW_KEY_TYPE_PORT is removed from predefined a set of RSS flow
    type as it is not used by any consumer.
    
    Signed-off-by: Jerin Jacob <jerinj@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index ceb3f1dbede5..72ad04eb8769 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -193,18 +193,4 @@ enum nix_scheduler {
 #define DEFAULT_RSS_CONTEXT_GROUP	0
 #define MAX_RSS_INDIR_TBL_SIZE		256 /* 1 << Max adder bits */
 
-/* NIX flow tag algorithm indices, max is 31 */
-enum {
-	NIX_FLOW_KEY_ALG_PORT,
-	NIX_FLOW_KEY_ALG_IP,
-	NIX_FLOW_KEY_ALG_TCP,
-	NIX_FLOW_KEY_ALG_UDP,
-	NIX_FLOW_KEY_ALG_SCTP,
-	NIX_FLOW_KEY_ALG_TCP_UDP,
-	NIX_FLOW_KEY_ALG_TCP_SCTP,
-	NIX_FLOW_KEY_ALG_UDP_SCTP,
-	NIX_FLOW_KEY_ALG_TCP_UDP_SCTP,
-	NIX_FLOW_KEY_ALG_MAX,
-};
-
 #endif /* COMMON_H */

commit bd522d68704deda0f10e02ded55935469485f77a
Author: Jerin Jacob <jerinjacobk@gmail.com>
Date:   Sun Dec 2 18:17:37 2018 +0530

    octeontx2-af: Add response for RSS flow key cfg message
    
    Added response for nix_rss_flowkey_cfg message to return
    selected RSS algorithm index.
    
    The FLOW_KEY_TYPE* definition is part of the mbox message and
    it will be used by the other consumers of AF driver hence moving to mbox.h.
    
    Also renamed FLOW_* definitions to NIX_FLOW_* to avoid global
    name space collisions, as we have various coming from
    include/uapi/linux/pkt_cls.h for example.
    
    Signed-off-by: Jerin Jacob <jerinj@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 9bddb032dd7e..ceb3f1dbede5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -193,26 +193,18 @@ enum nix_scheduler {
 #define DEFAULT_RSS_CONTEXT_GROUP	0
 #define MAX_RSS_INDIR_TBL_SIZE		256 /* 1 << Max adder bits */
 
-/* NIX flow tag, key type flags */
-#define FLOW_KEY_TYPE_PORT	BIT(0)
-#define FLOW_KEY_TYPE_IPV4	BIT(1)
-#define FLOW_KEY_TYPE_IPV6	BIT(2)
-#define FLOW_KEY_TYPE_TCP	BIT(3)
-#define FLOW_KEY_TYPE_UDP	BIT(4)
-#define FLOW_KEY_TYPE_SCTP	BIT(5)
-
 /* NIX flow tag algorithm indices, max is 31 */
 enum {
-	FLOW_KEY_ALG_PORT,
-	FLOW_KEY_ALG_IP,
-	FLOW_KEY_ALG_TCP,
-	FLOW_KEY_ALG_UDP,
-	FLOW_KEY_ALG_SCTP,
-	FLOW_KEY_ALG_TCP_UDP,
-	FLOW_KEY_ALG_TCP_SCTP,
-	FLOW_KEY_ALG_UDP_SCTP,
-	FLOW_KEY_ALG_TCP_UDP_SCTP,
-	FLOW_KEY_ALG_MAX,
+	NIX_FLOW_KEY_ALG_PORT,
+	NIX_FLOW_KEY_ALG_IP,
+	NIX_FLOW_KEY_ALG_TCP,
+	NIX_FLOW_KEY_ALG_UDP,
+	NIX_FLOW_KEY_ALG_SCTP,
+	NIX_FLOW_KEY_ALG_TCP_UDP,
+	NIX_FLOW_KEY_ALG_TCP_SCTP,
+	NIX_FLOW_KEY_ALG_UDP_SCTP,
+	NIX_FLOW_KEY_ALG_TCP_UDP_SCTP,
+	NIX_FLOW_KEY_ALG_MAX,
 };
 
 #endif /* COMMON_H */

commit 8bb991c5e7c697b968abd9e8f6ad1c5fe8962536
Author: Tomasz Duszynski <tduszynski@marvell.com>
Date:   Mon Nov 19 16:17:40 2018 +0530

    octeontx2-af: Configure AF VFs to talk over LBK channels
    
    Configure AF VFs such that they are able to talk over consecutive
    loopback channels.
    
    If 8 VFs are attached to AF then communication will work as below:
    
    TX      RX
    lbk0 -> lbk1
    lbk1 -> lbk0
    
    lbk2 -> lbk3
    lbk3 -> lbk2
    
    lbk4 -> lbk5
    lbk5 -> lbk4
    
    lbk6 -> lbk7
    lbk7 -> lbk6
    
    Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index a8c89df07886..9bddb032dd7e 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -174,7 +174,9 @@ enum nix_scheduler {
 
 #define MAX_LMAC_PKIND			12
 #define NIX_LINK_CGX_LMAC(a, b)		(0 + 4 * (a) + (b))
+#define NIX_LINK_LBK(a)			(12 + (a))
 #define NIX_CHAN_CGX_LMAC_CHX(a, b, c)	(0x800 + 0x100 * (a) + 0x10 * (b) + (c))
+#define NIX_CHAN_LBK_CHX(a, b)		(0 + 0x100 * (a) + (b))
 
 /* NIX LSO format indices.
  * As of now TSO is the only one using, so statically assigning indices.

commit 9b7dd87ac07119036d7c74c67160c496ddd8bfc4
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Mon Nov 19 16:17:24 2018 +0530

    octeontx2-af: Support to modify min/max allowed packet lengths
    
    This patch adds support for RVU PF/VFs to modify min/max
    packet lengths allowed by HW. For VFs on PF0, settings will
    be automatically applied on LBK link. RX link's min/maxlen
    is configured to min/max of PF and it's all VFs. On the TX side
    if requested all SMQs attached to the requesting NIXLF will be
    updated with new min/max lengths.
    
    Also updates transmit credits for Tx links based on new maxlen.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index d39ada404c8f..a8c89df07886 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -143,6 +143,11 @@ enum nix_scheduler {
 	NIX_TXSCH_LVL_CNT = 0x5,
 };
 
+/* Min/Max packet sizes, excluding FCS */
+#define	NIC_HW_MIN_FRS			40
+#define	NIC_HW_MAX_FRS			9212
+#define	SDP_HW_MAX_FRS			65535
+
 /* NIX RX action operation*/
 #define NIX_RX_ACTIONOP_DROP		(0x0ull)
 #define NIX_RX_ACTIONOP_UCAST		(0x1ull)

commit 41a7aa7b800dd0a12d3bedc1947451e503dfee74
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Mon Oct 22 23:26:01 2018 +0530

    octeontx2-af: NIX Rx flowkey configuration for RSS
    
    Configure NIX RX flowkey algorithm configuration to support
    RSS (receive side scaling). Currently support for only L3/L4
    2-tuple and 4-tuple hash of IPv4/v6/TCP/UDP/SCTP is added.
    HW supports upto 32 different flowkey algorithms which SW
    can define, this patch defines 9. NPC RX ACTION has to point
    to one of these flowkey indices for RSS to work.
    
    The configuration is dependent on NPC parse result's layer
    info. So if NPC KPU profile changes suchthat LID/LTYPE values
    of above said protocols change then this configuration will
    most likely be effected.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 6c8150db1c41..d39ada404c8f 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -186,4 +186,26 @@ enum nix_scheduler {
 #define DEFAULT_RSS_CONTEXT_GROUP	0
 #define MAX_RSS_INDIR_TBL_SIZE		256 /* 1 << Max adder bits */
 
+/* NIX flow tag, key type flags */
+#define FLOW_KEY_TYPE_PORT	BIT(0)
+#define FLOW_KEY_TYPE_IPV4	BIT(1)
+#define FLOW_KEY_TYPE_IPV6	BIT(2)
+#define FLOW_KEY_TYPE_TCP	BIT(3)
+#define FLOW_KEY_TYPE_UDP	BIT(4)
+#define FLOW_KEY_TYPE_SCTP	BIT(5)
+
+/* NIX flow tag algorithm indices, max is 31 */
+enum {
+	FLOW_KEY_ALG_PORT,
+	FLOW_KEY_ALG_IP,
+	FLOW_KEY_ALG_TCP,
+	FLOW_KEY_ALG_UDP,
+	FLOW_KEY_ALG_SCTP,
+	FLOW_KEY_ALG_TCP_UDP,
+	FLOW_KEY_ALG_TCP_SCTP,
+	FLOW_KEY_ALG_UDP_SCTP,
+	FLOW_KEY_ALG_TCP_UDP_SCTP,
+	FLOW_KEY_ALG_MAX,
+};
+
 #endif /* COMMON_H */

commit f5721f76a4376eacbbcc260d318872d2008fffbb
Author: Stanislaw Kardach <skardach@marvell.com>
Date:   Mon Oct 22 23:25:59 2018 +0530

    octeontx2-af: Add LMAC channel info to NIXLF_ALLOC response
    
    Add LMAC channel info like Rx/Tx channel base and count to
    NIXLF_ALLOC mailbox message response. This info is used by
    NIXLF attached RVU PF/VF to configure SQ's default channel,
    TL3_TL2_LINKX_CFG and to install MCAM rules in NPC based
    on matching ingress channel number.
    
    Signed-off-by: Stanislaw Kardach <skardach@marvell.com>
    Signed-off-by: Tomasz Duszynski <tduszynski@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index e438f926e32a..6c8150db1c41 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -169,6 +169,7 @@ enum nix_scheduler {
 
 #define MAX_LMAC_PKIND			12
 #define NIX_LINK_CGX_LMAC(a, b)		(0 + 4 * (a) + (b))
+#define NIX_CHAN_CGX_LMAC_CHX(a, b, c)	(0x800 + 0x100 * (a) + 0x10 * (b) + (c))
 
 /* NIX LSO format indices.
  * As of now TSO is the only one using, so statically assigning indices.

commit fefefd99ae8a8723ad6e324bd084968379f63607
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Mon Oct 22 23:25:58 2018 +0530

    octeontx2-af: NPC MCAM and LDATA extract minimal configuration
    
    This patch adds some minimal configuration for NPC MCAM and
    LDATA extraction which is sufficient enough to install
    ucast/bcast/promiscuous forwarding rules. Below is the
    config done
    - LDATA extraction config to extract DMAC from pkt
      to offset 64bit in MCAM search key.
    - Set MCAM lookup keysize to 224bits
    - Set MCAM TX miss action to UCAST_DEFAULT
    - Set MCAM RX miss action to DROP
    
    Also inorder to have guaranteed space in MCAM to install
    ucast forwarding rule for each of RVU PF/VF, reserved
    one MCAM entry for each of NIXLF for ucast rule. And two
    entries for each of RVU PF. One for bcast pkt replication
    and other for promiscuous mode which allows all pkts
    received on a HW CGX/LBK channel.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 7c53ba3545f1..e438f926e32a 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -143,6 +143,27 @@ enum nix_scheduler {
 	NIX_TXSCH_LVL_CNT = 0x5,
 };
 
+/* NIX RX action operation*/
+#define NIX_RX_ACTIONOP_DROP		(0x0ull)
+#define NIX_RX_ACTIONOP_UCAST		(0x1ull)
+#define NIX_RX_ACTIONOP_UCAST_IPSEC	(0x2ull)
+#define NIX_RX_ACTIONOP_MCAST		(0x3ull)
+#define NIX_RX_ACTIONOP_RSS		(0x4ull)
+
+/* NIX TX action operation*/
+#define NIX_TX_ACTIONOP_DROP		(0x0ull)
+#define NIX_TX_ACTIONOP_UCAST_DEFAULT	(0x1ull)
+#define NIX_TX_ACTIONOP_UCAST_CHAN	(0x2ull)
+#define NIX_TX_ACTIONOP_MCAST		(0x3ull)
+#define NIX_TX_ACTIONOP_DROP_VIOL	(0x5ull)
+
+#define NPC_MCAM_KEY_X1			0
+#define NPC_MCAM_KEY_X2			1
+#define NPC_MCAM_KEY_X4			2
+
+#define NIX_INTF_RX			0
+#define NIX_INTF_TX			1
+
 #define NIX_INTF_TYPE_CGX		0
 #define NIX_INTF_TYPE_LBK		1
 

commit 94d942c5fb970ac2166216838b278613decfa9a0
Author: Geetha sowjanya <gakula@marvell.com>
Date:   Mon Oct 22 23:25:53 2018 +0530

    octeontx2-af: Config pkind for CGX mapped PFs
    
    For each CGX LMAC that is mapped to a RVU PF, allocate
    a pkind and config the same in CGX. For a received packet
    at CGX LMAC interface this pkind is used by NPC block
    to start parsing of packet.
    
    Signed-off-by: Geetha sowjanya <gakula@marvell.com>
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 28eb691185f4..7c53ba3545f1 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -143,6 +143,12 @@ enum nix_scheduler {
 	NIX_TXSCH_LVL_CNT = 0x5,
 };
 
+#define NIX_INTF_TYPE_CGX		0
+#define NIX_INTF_TYPE_LBK		1
+
+#define MAX_LMAC_PKIND			12
+#define NIX_LINK_CGX_LMAC(a, b)		(0 + 4 * (a) + (b))
+
 /* NIX LSO format indices.
  * As of now TSO is the only one using, so statically assigning indices.
  */

commit 709a4f0c254c06289283593b92b233451656bac3
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:18 2018 +0530

    octeontx2-af: Alloc bitmaps for NIX Tx scheduler queues
    
    Allocate bitmaps and memory for PFVF mapping info for
    maintaining NIX transmit scheduler queues maintenance.
    PF/VF drivers will request for alloc, free e.t.c of
    Tx schedulers via mailbox.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index dc55e3416daa..28eb691185f4 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -132,6 +132,17 @@ struct npa_aq_pool_res {
 	struct	npa_pool_s	ctx_mask;
 };
 
+/* NIX Transmit schedulers */
+enum nix_scheduler {
+	NIX_TXSCH_LVL_SMQ = 0x0,
+	NIX_TXSCH_LVL_MDQ = 0x0,
+	NIX_TXSCH_LVL_TL4 = 0x1,
+	NIX_TXSCH_LVL_TL3 = 0x2,
+	NIX_TXSCH_LVL_TL2 = 0x3,
+	NIX_TXSCH_LVL_TL1 = 0x4,
+	NIX_TXSCH_LVL_CNT = 0x5,
+};
+
 /* NIX LSO format indices.
  * As of now TSO is the only one using, so statically assigning indices.
  */

commit 59360e9809daecb59c3c42ee10918155bfded615
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:17 2018 +0530

    octeontx2-af: NIX LSO config for TSOv4/v6 offload
    
    Config LSO formats for TSOv4 and TSOv6 offloads.
    These formats tell HW which fields in the TCP packet's
    headers have to be updated while performing segmentation
    offload.
    
    Also report PF/VF drivers the LSO format indices as part
    of response to NIX_LF_ALLOC mbox msg. These indices are
    used in SQE extension headers while framing SQE for pkt
    transmission with TSO offload.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index d183ad89a3f7..dc55e3416daa 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -132,6 +132,12 @@ struct npa_aq_pool_res {
 	struct	npa_pool_s	ctx_mask;
 };
 
+/* NIX LSO format indices.
+ * As of now TSO is the only one using, so statically assigning indices.
+ */
+#define NIX_LSO_FORMAT_IDX_TSOV4	0
+#define NIX_LSO_FORMAT_IDX_TSOV6	1
+
 /* RSS info */
 #define MAX_RSS_GROUPS			8
 /* Group 0 has to be used in default pkt forwarding MCAM entries

commit cb30711a6c7aa4956f3fea8bfe2d6adeac4f55c0
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:16 2018 +0530

    octeontx2-af: NIX block LF initialization
    
    Upon receiving NIX_LF_ALLOC mbox message allocate memory for
    NIXLF's CQ, SQ, RQ, CINT, QINT and RSS HW contexts and configure
    respective base iova HW. Enable caching of contexts into NIX NDC.
    
    Return SQ buffer (SQB) size, this PF/VF MAC address etc info
    e.t.c to the mbox msg sender.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index 24021cb110e8..d183ad89a3f7 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -131,4 +131,14 @@ struct npa_aq_pool_res {
 	struct	npa_pool_s	pool_ctx;
 	struct	npa_pool_s	ctx_mask;
 };
+
+/* RSS info */
+#define MAX_RSS_GROUPS			8
+/* Group 0 has to be used in default pkt forwarding MCAM entries
+ * reserved for NIXLFs. Groups 1-7 can be used for RSS for ntuple
+ * filters.
+ */
+#define DEFAULT_RSS_CONTEXT_GROUP	0
+#define MAX_RSS_INDIR_TBL_SIZE		256 /* 1 << Max adder bits */
+
 #endif /* COMMON_H */

commit 4a3581cd5995d86721b3a38e1e2799b2137b4d77
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:13 2018 +0530

    octeontx2-af: NPA AQ instruction enqueue support
    
    Add support for a RVU PF/VF to submit instructions to NPA AQ
    via mbox. Instructions can be to init/write/read Aura/Pool/Qint
    contexts. In case of read, context will be returned as part of
    response to the mbox msg received.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index c64d241f4df5..24021cb110e8 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -118,4 +118,17 @@ enum npa_aura_sz {
 
 #define NPA_AURA_COUNT(x)	(1ULL << ((x) + 6))
 
+/* NPA AQ result structure for init/read/write of aura HW contexts */
+struct npa_aq_aura_res {
+	struct	npa_aq_res_s	res;
+	struct	npa_aura_s	aura_ctx;
+	struct	npa_aura_s	ctx_mask;
+};
+
+/* NPA AQ result structure for init/read/write of pool HW contexts */
+struct npa_aq_pool_res {
+	struct	npa_aq_res_s	res;
+	struct	npa_pool_s	pool_ctx;
+	struct	npa_pool_s	ctx_mask;
+};
 #endif /* COMMON_H */

commit 3fa4c3232ac9da57f1ad10ddc971f521e62edc69
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:12 2018 +0530

    octeontx2-af: NPA block LF initialization
    
    Upon receiving NPA_LF_ALLOC mbox message allocate memory for
    NPALF's aura, pool and qint contexts and configure the same
    to HW. Enable caching of contexts into NPA NDC.
    
    Return pool related info like stack size, num pointers per
    stack page e.t.c to the mbox msg sender.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
index ec493bad33fc..c64d241f4df5 100644
--- a/drivers/net/ethernet/marvell/octeontx2/af/common.h
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -96,4 +96,26 @@ struct admin_queue {
 	spinlock_t	lock; /* Serialize inst enqueue from PFs */
 };
 
+/* NPA aura count */
+enum npa_aura_sz {
+	NPA_AURA_SZ_0,
+	NPA_AURA_SZ_128,
+	NPA_AURA_SZ_256,
+	NPA_AURA_SZ_512,
+	NPA_AURA_SZ_1K,
+	NPA_AURA_SZ_2K,
+	NPA_AURA_SZ_4K,
+	NPA_AURA_SZ_8K,
+	NPA_AURA_SZ_16K,
+	NPA_AURA_SZ_32K,
+	NPA_AURA_SZ_64K,
+	NPA_AURA_SZ_128K,
+	NPA_AURA_SZ_256K,
+	NPA_AURA_SZ_512K,
+	NPA_AURA_SZ_1M,
+	NPA_AURA_SZ_MAX,
+};
+
+#define NPA_AURA_COUNT(x)	(1ULL << ((x) + 6))
+
 #endif /* COMMON_H */

commit 7a37245ef23f75223263930e086aa0a8678e161f
Author: Sunil Goutham <sgoutham@marvell.com>
Date:   Tue Oct 16 16:57:11 2018 +0530

    octeontx2-af: NPA block admin queue init
    
    Initialize NPA admin queue (AQ) i.e alloc memory for
    AQ instructions and for the results. All NPA LFs will submit
    instructions to AQ to init/write/read Aura/Pool contexts
    and in case of read, get context from result memory.
    
    Added some common APIs for allocating memory for a queue
    and get IOVA in return, these APIs will be used by
    NIX AQ and for other purposes.
    
    Signed-off-by: Sunil Goutham <sgoutham@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/marvell/octeontx2/af/common.h b/drivers/net/ethernet/marvell/octeontx2/af/common.h
new file mode 100644
index 000000000000..ec493bad33fc
--- /dev/null
+++ b/drivers/net/ethernet/marvell/octeontx2/af/common.h
@@ -0,0 +1,99 @@
+/* SPDX-License-Identifier: GPL-2.0
+ * Marvell OcteonTx2 RVU Admin Function driver
+ *
+ * Copyright (C) 2018 Marvell International Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef COMMON_H
+#define COMMON_H
+
+#include "rvu_struct.h"
+
+#define OTX2_ALIGN			128  /* Align to cacheline */
+
+#define Q_SIZE_16		0ULL /* 16 entries */
+#define Q_SIZE_64		1ULL /* 64 entries */
+#define Q_SIZE_256		2ULL
+#define Q_SIZE_1K		3ULL
+#define Q_SIZE_4K		4ULL
+#define Q_SIZE_16K		5ULL
+#define Q_SIZE_64K		6ULL
+#define Q_SIZE_256K		7ULL
+#define Q_SIZE_1M		8ULL /* Million entries */
+#define Q_SIZE_MIN		Q_SIZE_16
+#define Q_SIZE_MAX		Q_SIZE_1M
+
+#define Q_COUNT(x)		(16ULL << (2 * x))
+#define Q_SIZE(x, n)		((ilog2(x) - (n)) / 2)
+
+/* Admin queue info */
+
+/* Since we intend to add only one instruction at a time,
+ * keep queue size to it's minimum.
+ */
+#define AQ_SIZE			Q_SIZE_16
+/* HW head & tail pointer mask */
+#define AQ_PTR_MASK		0xFFFFF
+
+struct qmem {
+	void            *base;
+	dma_addr_t	iova;
+	int		alloc_sz;
+	u8		entry_sz;
+	u8		align;
+	u32		qsize;
+};
+
+static inline int qmem_alloc(struct device *dev, struct qmem **q,
+			     int qsize, int entry_sz)
+{
+	struct qmem *qmem;
+	int aligned_addr;
+
+	if (!qsize)
+		return -EINVAL;
+
+	*q = devm_kzalloc(dev, sizeof(*qmem), GFP_KERNEL);
+	if (!*q)
+		return -ENOMEM;
+	qmem = *q;
+
+	qmem->entry_sz = entry_sz;
+	qmem->alloc_sz = (qsize * entry_sz) + OTX2_ALIGN;
+	qmem->base = dma_zalloc_coherent(dev, qmem->alloc_sz,
+					 &qmem->iova, GFP_KERNEL);
+	if (!qmem->base)
+		return -ENOMEM;
+
+	qmem->qsize = qsize;
+
+	aligned_addr = ALIGN((u64)qmem->iova, OTX2_ALIGN);
+	qmem->align = (aligned_addr - qmem->iova);
+	qmem->base += qmem->align;
+	qmem->iova += qmem->align;
+	return 0;
+}
+
+static inline void qmem_free(struct device *dev, struct qmem *qmem)
+{
+	if (!qmem)
+		return;
+
+	if (qmem->base)
+		dma_free_coherent(dev, qmem->alloc_sz,
+				  qmem->base - qmem->align,
+				  qmem->iova - qmem->align);
+	devm_kfree(dev, qmem);
+}
+
+struct admin_queue {
+	struct qmem	*inst;
+	struct qmem	*res;
+	spinlock_t	lock; /* Serialize inst enqueue from PFs */
+};
+
+#endif /* COMMON_H */
