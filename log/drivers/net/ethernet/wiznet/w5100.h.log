commit 80503b23b23b5b2228d8750b786eb182f2fa28d2
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Fri May 24 12:04:09 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 149
    
    Based on 1 normalized pattern(s):
    
      licensed under the gpl 2 or later
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 82 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190524100845.150836982@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
index 17983a3b8d6c..5d3d4b541fec 100644
--- a/drivers/net/ethernet/wiznet/w5100.h
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -1,10 +1,9 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * Ethernet driver for the WIZnet W5100 chip.
  *
  * Copyright (C) 2006-2008 WIZnet Co.,Ltd.
  * Copyright (C) 2012 Mike Sinkovsky <msink@permonline.ru>
- *
- * Licensed under the GPL-2 or later.
  */
 
 enum {

commit c3875ca7d9f9ad135debc78e211ea062ac48323c
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Sat May 14 14:55:50 2016 +0900

    net: w5100-spi: add support to specify MAC address by device tree
    
    This adds support to specify the MAC address by 'mac-address' or
    'local-mac-address' properties in the device tree.  These are common
    properties for the Ethernet controller.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Mike Sinkovsky <msink@permonline.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
index f8a16fad807b..17983a3b8d6c 100644
--- a/drivers/net/ethernet/wiznet/w5100.h
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -30,7 +30,8 @@ struct w5100_ops {
 void *w5100_ops_priv(const struct net_device *ndev);
 
 int w5100_probe(struct device *dev, const struct w5100_ops *ops,
-		int sizeof_ops_priv, u8 *mac_addr, int irq, int link_gpio);
+		int sizeof_ops_priv, const void *mac_addr, int irq,
+		int link_gpio);
 int w5100_remove(struct device *dev);
 
 extern const struct dev_pm_ops w5100_pm_ops;

commit 35ef7d689d7d54ab345b179e50c749fe3a2529eb
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Wed Apr 27 05:43:48 2016 +0900

    net: w5100: support W5500
    
    This adds support for W5500 chip.
    
    W5500 has similar register and memory organization with W5100 and W5200.
    There are a few important differences listed below but it is still
    possible to share common code with W5100 and W5200.
    
    * W5500 register and memory are organized by multiple blocks.  Each one
    is selected by 16bits offset address and 5bits block select bits.
    
    But the existing register access operations take u16 address.  This change
    extends the addess by u32 address and put offset address to lower 16bits
    and block select bits to upper 16bits.
    
    This change also adds the offset addresses for socket register and TX/RX
    memory blocks to the driver private data structure in order to reduce
    conditional switches for each chip.
    
    * W5500 has the different register offset for socket interrupt mask
    register.  Newly added internal functions w5100_enable_intr() and
    w5100_disable_intr() take care of the diffrence.
    
    * W5500 has the different register offset for retry time-value register.
    But this register is only used to verify that the reset value is correctly
    read at initialization.  So move the verification to w5100_hw_reset()
    which already does different things for different chips.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Mike Sinkovsky <msink@permonline.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
index 9b1fa23b46fe..f8a16fad807b 100644
--- a/drivers/net/ethernet/wiznet/w5100.h
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -10,17 +10,18 @@
 enum {
 	W5100,
 	W5200,
+	W5500,
 };
 
 struct w5100_ops {
 	bool may_sleep;
 	int chip_id;
-	int (*read)(struct net_device *ndev, u16 addr);
-	int (*write)(struct net_device *ndev, u16 addr, u8 data);
-	int (*read16)(struct net_device *ndev, u16 addr);
-	int (*write16)(struct net_device *ndev, u16 addr, u16 data);
-	int (*readbulk)(struct net_device *ndev, u16 addr, u8 *buf, int len);
-	int (*writebulk)(struct net_device *ndev, u16 addr, const u8 *buf,
+	int (*read)(struct net_device *ndev, u32 addr);
+	int (*write)(struct net_device *ndev, u32 addr, u8 data);
+	int (*read16)(struct net_device *ndev, u32 addr);
+	int (*write16)(struct net_device *ndev, u32 addr, u16 data);
+	int (*readbulk)(struct net_device *ndev, u32 addr, u8 *buf, int len);
+	int (*writebulk)(struct net_device *ndev, u32 addr, const u8 *buf,
 			 int len);
 	int (*reset)(struct net_device *ndev);
 	int (*init)(struct net_device *ndev);

commit 0c165ff2d8db575efa41f2586c2de193850dec48
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Apr 15 00:11:33 2016 +0900

    net: w5100: support W5200
    
    This adds support for W5200 chip.
    
    W5100 and W5200 have similar memory map although some of their offsets
    are different.  The register access sequences between them are different
    but w5100 driver has abstraction layer for difference bus interface
    modes so it is easy to add W5200 support to w5100 and w5100-spi drivers.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Mike Sinkovsky <msink@permonline.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
index 69045f0f9e10..9b1fa23b46fe 100644
--- a/drivers/net/ethernet/wiznet/w5100.h
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -7,8 +7,14 @@
  * Licensed under the GPL-2 or later.
  */
 
+enum {
+	W5100,
+	W5200,
+};
+
 struct w5100_ops {
 	bool may_sleep;
+	int chip_id;
 	int (*read)(struct net_device *ndev, u16 addr);
 	int (*write)(struct net_device *ndev, u16 addr, u8 data);
 	int (*read16)(struct net_device *ndev, u16 addr);

commit bf2c6b90b385c163ad9c48fe97f5dc6af0091de6
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Apr 15 00:11:31 2016 +0900

    net: w5100: enable to support sleepable register access interface
    
    SPI transfer routines are callable only from contexts that can sleep.
    
    This adds ability to tell the core driver that the interface mode
    cannot access w5100 register on atomic contexts.  In this case,
    workqueue and threaded irq are required.
    
    This also corrects timeout period waiting for command register to be
    automatically cleared because the latency of the register access with
    SPI transfer can be interfered by other contexts.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Mike Sinkovsky <msink@permonline.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
index 39d452d878e7..69045f0f9e10 100644
--- a/drivers/net/ethernet/wiznet/w5100.h
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -8,6 +8,7 @@
  */
 
 struct w5100_ops {
+	bool may_sleep;
 	int (*read)(struct net_device *ndev, u16 addr);
 	int (*write)(struct net_device *ndev, u16 addr, u8 data);
 	int (*read16)(struct net_device *ndev, u16 addr);

commit 850576cfede986f0683bed25e34bc15712ffb463
Author: Akinobu Mita <akinobu.mita@gmail.com>
Date:   Fri Apr 15 00:11:30 2016 +0900

    net: w5100: add ability to support other bus interface
    
    The w5100 driver currently only supports direct and indirect bus
    interface mode which use MMIO space for accessing w5100 registers.
    
    In order to support SPI interface mode which is supported by W5100 chip,
    this makes the bus interface abstraction layer more generic so that
    separated w5100-spi driver can use w5100 driver as core module.
    
    Signed-off-by: Akinobu Mita <akinobu.mita@gmail.com>
    Cc: Mike Sinkovsky <msink@permonline.ru>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/wiznet/w5100.h b/drivers/net/ethernet/wiznet/w5100.h
new file mode 100644
index 000000000000..39d452d878e7
--- /dev/null
+++ b/drivers/net/ethernet/wiznet/w5100.h
@@ -0,0 +1,28 @@
+/*
+ * Ethernet driver for the WIZnet W5100 chip.
+ *
+ * Copyright (C) 2006-2008 WIZnet Co.,Ltd.
+ * Copyright (C) 2012 Mike Sinkovsky <msink@permonline.ru>
+ *
+ * Licensed under the GPL-2 or later.
+ */
+
+struct w5100_ops {
+	int (*read)(struct net_device *ndev, u16 addr);
+	int (*write)(struct net_device *ndev, u16 addr, u8 data);
+	int (*read16)(struct net_device *ndev, u16 addr);
+	int (*write16)(struct net_device *ndev, u16 addr, u16 data);
+	int (*readbulk)(struct net_device *ndev, u16 addr, u8 *buf, int len);
+	int (*writebulk)(struct net_device *ndev, u16 addr, const u8 *buf,
+			 int len);
+	int (*reset)(struct net_device *ndev);
+	int (*init)(struct net_device *ndev);
+};
+
+void *w5100_ops_priv(const struct net_device *ndev);
+
+int w5100_probe(struct device *dev, const struct w5100_ops *ops,
+		int sizeof_ops_priv, u8 *mac_addr, int irq, int link_gpio);
+int w5100_remove(struct device *dev);
+
+extern const struct dev_pm_ops w5100_pm_ops;
