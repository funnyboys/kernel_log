commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 26e9afcbdd50..ffa9d6573f54 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -1,10 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * Copyright (c) 2014-2015 Hisilicon Limited.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
  */
 
 #ifndef __HNS_ENET_H

commit b8c17f7088310e7ee34ca61929f737045adfd449
Author: Lin Yun Sheng <linyunsheng@huawei.com>
Date:   Wed Aug 2 17:57:37 2017 +0800

    net: hns: Add self-adaptive interrupt coalesce support in hns driver
    
    When deal with low and high throughput, it is hard to achiece both
    high performance and low latency. In order to achiece that, this patch
    calculates the rx rate, and adjust the interrupt coalesce parameter
    accordingly.
    
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Tested-by: Weiwei Deng <dengweiwei@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 9cb4c7884201..26e9afcbdd50 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -38,7 +38,7 @@ struct hns_nic_ring_data {
 	struct hnae_ring *ring;
 	struct napi_struct napi;
 	cpumask_t mask; /* affinity mask */
-	int queue_index;
+	u32 queue_index;
 	int (*poll_one)(struct hns_nic_ring_data *, int, void *);
 	void (*ex_process)(struct hns_nic_ring_data *, struct sk_buff *);
 	bool (*fini_process)(struct hns_nic_ring_data *);

commit 27463ad99f738ed93c7c8b3e2e5bc8c4853a2ff2
Author: Yunsheng Lin <linyunsheng@huawei.com>
Date:   Thu Jul 6 10:22:00 2017 +0800

    net: hns: Fix a skb used after free bug
    
    skb maybe freed in hns_nic_net_xmit_hw() and return NETDEV_TX_OK,
    which cause hns_nic_net_xmit to use a freed skb.
    
    BUG: KASAN: use-after-free in hns_nic_net_xmit_hw+0x62c/0x940...
            [17659.112635]      alloc_debug_processing+0x18c/0x1a0
            [17659.117208]      __slab_alloc+0x52c/0x560
            [17659.120909]      kmem_cache_alloc_node+0xac/0x2c0
            [17659.125309]      __alloc_skb+0x6c/0x260
            [17659.128837]      tcp_send_ack+0x8c/0x280
            [17659.132449]      __tcp_ack_snd_check+0x9c/0xf0
            [17659.136587]      tcp_rcv_established+0x5a4/0xa70
            [17659.140899]      tcp_v4_do_rcv+0x27c/0x620
            [17659.144687]      tcp_prequeue_process+0x108/0x170
            [17659.149085]      tcp_recvmsg+0x940/0x1020
            [17659.152787]      inet_recvmsg+0x124/0x180
            [17659.156488]      sock_recvmsg+0x64/0x80
            [17659.160012]      SyS_recvfrom+0xd8/0x180
            [17659.163626]      __sys_trace_return+0x0/0x4
            [17659.167506] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=23 cpu=1 pid=13
            [17659.174000]      free_debug_processing+0x1d4/0x2c0
            [17659.178486]      __slab_free+0x240/0x390
            [17659.182100]      kmem_cache_free+0x24c/0x270
            [17659.186062]      kfree_skbmem+0xa0/0xb0
            [17659.189587]      __kfree_skb+0x28/0x40
            [17659.193025]      napi_gro_receive+0x168/0x1c0
            [17659.197074]      hns_nic_rx_up_pro+0x58/0x90
            [17659.201038]      hns_nic_rx_poll_one+0x518/0xbc0
            [17659.205352]      hns_nic_common_poll+0x94/0x140
            [17659.209576]      net_rx_action+0x458/0x5e0
            [17659.213363]      __do_softirq+0x1b8/0x480
            [17659.217062]      run_ksoftirqd+0x64/0x80
            [17659.220679]      smpboot_thread_fn+0x224/0x310
            [17659.224821]      kthread+0x150/0x170
            [17659.228084]      ret_from_fork+0x10/0x40
    
            BUG: KASAN: use-after-free in hns_nic_net_xmit+0x8c/0xc0...
            [17751.080490]      __slab_alloc+0x52c/0x560
            [17751.084188]      kmem_cache_alloc+0x244/0x280
            [17751.088238]      __build_skb+0x40/0x150
            [17751.091764]      build_skb+0x28/0x100
            [17751.095115]      __alloc_rx_skb+0x94/0x150
            [17751.098900]      __napi_alloc_skb+0x34/0x90
            [17751.102776]      hns_nic_rx_poll_one+0x180/0xbc0
            [17751.107097]      hns_nic_common_poll+0x94/0x140
            [17751.111333]      net_rx_action+0x458/0x5e0
            [17751.115123]      __do_softirq+0x1b8/0x480
            [17751.118823]      run_ksoftirqd+0x64/0x80
            [17751.122437]      smpboot_thread_fn+0x224/0x310
            [17751.126575]      kthread+0x150/0x170
            [17751.129838]      ret_from_fork+0x10/0x40
            [17751.133454] INFO: Freed in kfree_skbmem+0xa0/0xb0 age=19 cpu=7 pid=43
            [17751.139951]      free_debug_processing+0x1d4/0x2c0
            [17751.144436]      __slab_free+0x240/0x390
            [17751.148051]      kmem_cache_free+0x24c/0x270
            [17751.152014]      kfree_skbmem+0xa0/0xb0
            [17751.155543]      __kfree_skb+0x28/0x40
            [17751.159022]      napi_gro_receive+0x168/0x1c0
            [17751.163074]      hns_nic_rx_up_pro+0x58/0x90
            [17751.167041]      hns_nic_rx_poll_one+0x518/0xbc0
            [17751.171358]      hns_nic_common_poll+0x94/0x140
            [17751.175585]      net_rx_action+0x458/0x5e0
            [17751.179373]      __do_softirq+0x1b8/0x480
            [17751.183076]      run_ksoftirqd+0x64/0x80
            [17751.186691]      smpboot_thread_fn+0x224/0x310
            [17751.190826]      kthread+0x150/0x170
            [17751.194093]      ret_from_fork+0x10/0x40
    
    Fixes: 13ac695e7ea1 ("net:hns: Add support of Hip06 SoC to the Hislicon Network Subsystem")
    Signed-off-by: Yunsheng Lin <linyunsheng@huawei.com>
    Signed-off-by: lipeng <lipeng321@huawei.com>
    Reported-by: Jun He <hjat2005@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 1b83232082b2..9cb4c7884201 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -92,8 +92,8 @@ void hns_ethtool_set_ops(struct net_device *ndev);
 void hns_nic_net_reset(struct net_device *ndev);
 void hns_nic_net_reinit(struct net_device *netdev);
 int hns_nic_init_phy(struct net_device *ndev, struct hnae_handle *h);
-int hns_nic_net_xmit_hw(struct net_device *ndev,
-			struct sk_buff *skb,
-			struct hns_nic_ring_data *ring_data);
+netdev_tx_t hns_nic_net_xmit_hw(struct net_device *ndev,
+				struct sk_buff *skb,
+				struct hns_nic_ring_data *ring_data);
 
 #endif	/**__HNS_ENET_H */

commit 36eedfde1a3602e8054c16bc295c47764647a208
Author: lipeng <lipeng321@huawei.com>
Date:   Sat Apr 1 12:03:36 2017 +0100

    net: hns: Optimize hns_nic_common_poll for better performance
    
    After polling less than buget packages, we need check again. If
    there are still some packages, we call napi_schedule add softirq
    queue, this is not better way. So we return buget value instead
    of napi_schedule.
    
    Signed-off-by: lipeng <lipeng321@huawei.com>
    reviewed-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index fff8f8a21bd0..1b83232082b2 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -41,7 +41,7 @@ struct hns_nic_ring_data {
 	int queue_index;
 	int (*poll_one)(struct hns_nic_ring_data *, int, void *);
 	void (*ex_process)(struct hns_nic_ring_data *, struct sk_buff *);
-	void (*fini_process)(struct hns_nic_ring_data *);
+	bool (*fini_process)(struct hns_nic_ring_data *);
 };
 
 /* compatible the difference between two versions */

commit ba2d079131b494fca98cba37a5356e596a7501a6
Author: lipeng <lipeng321@huawei.com>
Date:   Sat Apr 1 12:03:31 2017 +0100

    net: hns: Fix the implementation of irq affinity function
    
    This patch fixes the implementation of the IRQ affinity
    function. This function is used to create the cpu mask
    which eventually is used to initialize the cpu<->queue
    association for XPS(Transmit Packet Steering).
    
    Signed-off-by: lipeng <lipeng321@huawei.com>
    Signed-off-by: Kejian Yan <yankejian@huawei.com>
    Reviewed-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 5b412de350aa..fff8f8a21bd0 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -37,6 +37,7 @@ enum hns_nic_state {
 struct hns_nic_ring_data {
 	struct hnae_ring *ring;
 	struct napi_struct napi;
+	cpumask_t mask; /* affinity mask */
 	int queue_index;
 	int (*poll_one)(struct hns_nic_ring_data *, int, void *);
 	void (*ex_process)(struct hns_nic_ring_data *, struct sk_buff *);

commit 262b38cdb3e47d402f4fdf76fcf3e8c4c8380a52
Author: Philippe Reynes <tremyfr@gmail.com>
Date:   Tue Sep 20 22:30:11 2016 +0200

    net: ethernet: hisilicon: hns: use phydev from struct net_device
    
    The private structure contain a pointer to phydev, but the structure
    net_device already contain such pointer. So we can remove the pointer
    phydev in the private structure, and update the driver to use the
    one contained in struct net_device.
    
    Signed-off-by: Philippe Reynes <tremyfr@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 44bb3015eed3..5b412de350aa 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -59,7 +59,6 @@ struct hns_nic_priv {
 	u32 port_id;
 	int phy_mode;
 	int phy_led_val;
-	struct phy_device *phy;
 	struct net_device *netdev;
 	struct device *dev;
 	struct hnae_handle *ae_handle;

commit 7b2acae6fb28f0b3d32c0620f8045c4a1bf5bb92
Author: Kejian Yan <yankejian@huawei.com>
Date:   Fri Jun 3 10:55:15 2016 +0800

    net: hns: enet specify a reference to dsaf by fwnode_handle
    
    As device_node is only used by DT case, it is expected to find uniform
    ways. So fwnode_handle is the suitable method.
    
    Signed-off-by: Kejian Yan <yankejian@huawei.com>
    Signed-off-by: Yisen Zhuang <Yisen.Zhuang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 337efa582bac..44bb3015eed3 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -54,7 +54,7 @@ struct hns_nic_ops {
 };
 
 struct hns_nic_priv {
-	const struct device_node *ae_node;
+	const struct fwnode_handle      *fwnode;
 	u32 enet_ver;
 	u32 port_id;
 	int phy_mode;

commit 406adee9a9fc38c11671f26180e694976f45237c
Author: Yisen.Zhuang\(Zhuangyuzeng\) <Yisen.Zhuang@huawei.com>
Date:   Sat Apr 23 17:05:07 2016 +0800

    net: hns: add attribute port-idx-in-ae in enet node.
    
    This patch parse port-idx-in-ae in enet node. In NIC mode of DSAF, all 6
    PHYs of service DSAF are taken as ethernet ports to the CPU. The
    port-idx-in-ae can be 0 to 5. Here is the diagram:
                +-----+---------------+
                |            CPU      |
                +-+-+-+---+-+-+-+-+-+-+
                  |    |   | | | | | |
               debug debug   service
               port  port     port
               (0)   (0)     (0-5)
    
    In Switch mode of DSAF, all 6 PHYs of service DSAF are taken as physical
    ports connect to a LAN Switch while the CPU side assume itself have one
    single NIC connect to this switch. In this case, the port-idx-in-ae will
    be 0 only.
                +-----+-----+------+------+
                |                CPU      |
                +-+-+-+-+-+-+-+-+-+-+-+-+-+
                  |    |     service| port(0)
                debug debug  +------------+
                port  port   |   switch   |
                (0)   (0)    +-+-+-+-+-+-++
                              | | | | | |
                             external port
    
    when port-idx-in-ae is not exists, old attribute port-id will be used
    (only for compatible purpose, not recommended to use port-id in new code).
    
    Signed-off-by: Daode Huang <huangdaode@hisilicon.com>
    Signed-off-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index c68ab3d34fc2..337efa582bac 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -18,6 +18,9 @@
 
 #include "hnae.h"
 
+#define HNS_DEBUG_OFFSET	6
+#define HNS_SRV_OFFSET		2
+
 enum hns_nic_state {
 	NIC_STATE_TESTING = 0,
 	NIC_STATE_RESETTING,

commit 48189d6aaf1ed1b382666289a94a50e5269a8946
Author: yankejian <yankejian@huawei.com>
Date:   Wed Jan 20 16:00:19 2016 +0800

    net: hns: enet specifies a reference to dsaf
    
    This patch replace the assoication between dsaf and enet from string
    matching to object reference. It requires the DTS to be updated within
    BIOS. Thanks god it can be done for all released boards.
    
    Signed-off-by: Kejian Yan <yankejian@huawei.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Yisen Zhuang <yisen.zhuang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index 4b75270f014e..c68ab3d34fc2 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -51,7 +51,7 @@ struct hns_nic_ops {
 };
 
 struct hns_nic_priv {
-	const char *ae_name;
+	const struct device_node *ae_node;
 	u32 enet_ver;
 	u32 port_id;
 	int phy_mode;

commit 13ac695e7ea16cb27b804fadf2ff569dbcab6af1
Author: Salil <salil.mehta@huawei.com>
Date:   Thu Dec 3 12:17:53 2015 +0000

    net:hns: Add support of Hip06 SoC to the Hislicon Network Subsystem
    
    This patchset adds support of Hisilicon Hip06 SoC to the existing HNS
    ethernet driver.
    
    The changes in the driver are mainly due to changes in the DMA
    descriptor provided by the Hip06 ethernet hardware. These changes
    need to co-exist with already present Hip05 DMA descriptor and its
    operating functions. The decision to choose the correct type of DMA
    descriptor is taken dynamically depending upon the version of the
    hardware (i.e. V1/hip05 or V2/hip06, see already existing
    hisilicon-hns-nic.txt binding file for detailed description). other
    changes includes in SBM, DSAF and PPE modules as well. Changes
    affecting the driver related to the newly added ethernet hardware
    features in Hip06 would be added as separate patch over this and
    subsequent patches.
    
    Signed-off-by: Salil Mehta <salil.mehta@huawei.com>
    Signed-off-by: yankejian <yankejian@huawei.com>
    Signed-off-by: huangdaode <huangdaode@hisilicon.com>
    Signed-off-by: lipeng <lipeng321@huawei.com>
    Signed-off-by: lisheng <lisheng011@huawei.com>
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
index dae0ed19ac6d..4b75270f014e 100644
--- a/drivers/net/ethernet/hisilicon/hns/hns_enet.h
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -40,6 +40,16 @@ struct hns_nic_ring_data {
 	void (*fini_process)(struct hns_nic_ring_data *);
 };
 
+/* compatible the difference between two versions */
+struct hns_nic_ops {
+	void (*fill_desc)(struct hnae_ring *ring, void *priv,
+			  int size, dma_addr_t dma, int frag_end,
+			  int buf_num, enum hns_desc_type type, int mtu);
+	int (*maybe_stop_tx)(struct sk_buff **out_skb,
+			     int *bnum, struct hnae_ring *ring);
+	void (*get_rxd_bnum)(u32 bnum_flag, int *out_bnum);
+};
+
 struct hns_nic_priv {
 	const char *ae_name;
 	u32 enet_ver;
@@ -51,6 +61,8 @@ struct hns_nic_priv {
 	struct device *dev;
 	struct hnae_handle *ae_handle;
 
+	struct hns_nic_ops ops;
+
 	/* the cb for nic to manage the ring buffer, the first half of the
 	 * array is for tx_ring and vice versa for the second half
 	 */

commit b5996f11ea5496d0445078f47d22c987888ed467
Author: huangdaode <huangdaode@hisilicon.com>
Date:   Thu Sep 17 14:51:50 2015 +0800

    net: add Hisilicon Network Subsystem basic ethernet support
    
    This is to add basic ethernet support for HNS. It is one of the way to
    use the HNS acceleration engine. But most of the decoding/encoding
    capability of the AE cannot be used in this way.
    
    This submit contains the basic feature as a ethernet driver. More will
    be added later.
    
    Signed-off-by: huangdaode <huangdaode@hisilicon.com>
    Signed-off-by: Kenneth Lee <liguozhu@huawei.com>
    Signed-off-by: Yisen Zhuang <Yisen.Zhuang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/hisilicon/hns/hns_enet.h b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
new file mode 100644
index 000000000000..dae0ed19ac6d
--- /dev/null
+++ b/drivers/net/ethernet/hisilicon/hns/hns_enet.h
@@ -0,0 +1,84 @@
+/*
+ * Copyright (c) 2014-2015 Hisilicon Limited.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#ifndef __HNS_ENET_H
+#define __HNS_ENET_H
+
+#include <linux/netdevice.h>
+#include <linux/of_net.h>
+#include <linux/of_mdio.h>
+#include <linux/timer.h>
+#include <linux/workqueue.h>
+
+#include "hnae.h"
+
+enum hns_nic_state {
+	NIC_STATE_TESTING = 0,
+	NIC_STATE_RESETTING,
+	NIC_STATE_REINITING,
+	NIC_STATE_DOWN,
+	NIC_STATE_DISABLED,
+	NIC_STATE_REMOVING,
+	NIC_STATE_SERVICE_INITED,
+	NIC_STATE_SERVICE_SCHED,
+	NIC_STATE2_RESET_REQUESTED,
+	NIC_STATE_MAX
+};
+
+struct hns_nic_ring_data {
+	struct hnae_ring *ring;
+	struct napi_struct napi;
+	int queue_index;
+	int (*poll_one)(struct hns_nic_ring_data *, int, void *);
+	void (*ex_process)(struct hns_nic_ring_data *, struct sk_buff *);
+	void (*fini_process)(struct hns_nic_ring_data *);
+};
+
+struct hns_nic_priv {
+	const char *ae_name;
+	u32 enet_ver;
+	u32 port_id;
+	int phy_mode;
+	int phy_led_val;
+	struct phy_device *phy;
+	struct net_device *netdev;
+	struct device *dev;
+	struct hnae_handle *ae_handle;
+
+	/* the cb for nic to manage the ring buffer, the first half of the
+	 * array is for tx_ring and vice versa for the second half
+	 */
+	struct hns_nic_ring_data *ring_data;
+
+	/* The most recently read link state */
+	int link;
+	u64 tx_timeout_count;
+
+	unsigned long state;
+
+	struct timer_list service_timer;
+
+	struct work_struct service_task;
+
+	struct notifier_block notifier_block;
+};
+
+#define tx_ring_data(priv, idx) ((priv)->ring_data[idx])
+#define rx_ring_data(priv, idx) \
+	((priv)->ring_data[(priv)->ae_handle->q_num + (idx)])
+
+void hns_ethtool_set_ops(struct net_device *ndev);
+void hns_nic_net_reset(struct net_device *ndev);
+void hns_nic_net_reinit(struct net_device *netdev);
+int hns_nic_init_phy(struct net_device *ndev, struct hnae_handle *h);
+int hns_nic_net_xmit_hw(struct net_device *ndev,
+			struct sk_buff *skb,
+			struct hns_nic_ring_data *ring_data);
+
+#endif	/**__HNS_ENET_H */
