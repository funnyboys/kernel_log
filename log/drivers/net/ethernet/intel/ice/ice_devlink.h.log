commit dce730f17825f4814649c1ba7970af5737415c78
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Thu Mar 26 11:37:18 2020 -0700

    ice: add a devlink region for dumping NVM contents
    
    Add a devlink region for exposing the device's Non Volatime Memory flash
    contents.
    
    Support the recently added .snapshot operation, enabling userspace to
    request a snapshot of the NVM contents via DEVLINK_CMD_REGION_NEW.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/net/ethernet/intel/ice/ice_devlink.h b/drivers/net/ethernet/intel/ice/ice_devlink.h
index f94dc93c24c5..6e806a08dc23 100644
--- a/drivers/net/ethernet/intel/ice/ice_devlink.h
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.h
@@ -11,4 +11,7 @@ void ice_devlink_unregister(struct ice_pf *pf);
 int ice_devlink_create_port(struct ice_pf *pf);
 void ice_devlink_destroy_port(struct ice_pf *pf);
 
+void ice_devlink_init_regions(struct ice_pf *pf);
+void ice_devlink_destroy_regions(struct ice_pf *pf);
+
 #endif /* _ICE_DEVLINK_H_ */

commit 1adf7ead8204094516994d18e5aa02e34e4765f2
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Wed Mar 11 18:58:15 2020 -0700

    ice: enable initial devlink support
    
    Begin implementing support for the devlink interface with the ice
    driver.
    
    The pf structure is currently memory managed through devres, via
    a devm_alloc. To mimic this behavior, after allocating the devlink
    pointer, use devm_add_action to add a teardown action for releasing the
    devlink memory on exit.
    
    The ice hardware is a multi-function PCIe device. Thus, each physical
    function will get its own devlink instance. This means that each
    function will be treated independently, with its own parameters and
    configuration. This is done because the ice driver loads a separate
    instance for each function.
    
    Due to this, the implementation does not enable devlink to manage
    device-wide resources or configuration, as each physical function will
    be treated independently. This is done for simplicity, as managing
    a devlink instance across multiple driver instances would significantly
    increase the complexity for minimal gain.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

diff --git a/drivers/net/ethernet/intel/ice/ice_devlink.h b/drivers/net/ethernet/intel/ice/ice_devlink.h
new file mode 100644
index 000000000000..f94dc93c24c5
--- /dev/null
+++ b/drivers/net/ethernet/intel/ice/ice_devlink.h
@@ -0,0 +1,14 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright (c) 2019, Intel Corporation. */
+
+#ifndef _ICE_DEVLINK_H_
+#define _ICE_DEVLINK_H_
+
+struct ice_pf *ice_allocate_pf(struct device *dev);
+
+int ice_devlink_register(struct ice_pf *pf);
+void ice_devlink_unregister(struct ice_pf *pf);
+int ice_devlink_create_port(struct ice_pf *pf);
+void ice_devlink_destroy_port(struct ice_pf *pf);
+
+#endif /* _ICE_DEVLINK_H_ */
