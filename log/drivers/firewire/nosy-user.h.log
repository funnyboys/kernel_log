commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/firewire/nosy-user.h b/drivers/firewire/nosy-user.h
index e48aa6200c72..3446c5b772e5 100644
--- a/drivers/firewire/nosy-user.h
+++ b/drivers/firewire/nosy-user.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __nosy_user_h
 #define __nosy_user_h
 

commit fd8c8d46ca9402c15383d2cf0bc3ee7740de3b62
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Thu Jul 22 11:56:38 2010 +0200

    firewire: nosy: endianess fixes and annotations
    
    1.)  The DMA programs (struct pcl) are PCI-endian = little endian data
    (except for the 3rd quadlet in a PCL which the controller does not
    touch).  Annotate them as such.
    
    Fix all accesses of the PCL to work with big endian CPUs also.  Not
    actually tested, I only have a little endian PC to test with.  This
    includes replacement of a bitfield struct pcl_status by open-coded
    shift and mask operations.
    
    2.)  The two __attribute__ ((packed)) at struct pcl are not really
    required since it consists of u32/__le32 only, i.e. there will be no
    padding with or without the attribute.
    
    3.)  The received IEEE 1394 data are byteswapped by the controller from
    IEEE 1394 endian = big endian to PCI endian = little endian because the
    PCL_BIGENDIAN control bit is set.  Therefore annotate the DMA buffer as
    a __le32 array.
    
    Fix the one access of the DMA buffer (the check of the transaction code
    of link packets) to work with big endian CPUs.  Also fix the two
    accesses of the client bounce buffer (the reading of packet length).
    
    4.)  Add a comment to the userspace ABI header that all of the data gets
    out as little endian data, except for the timestamp which is CPU endian.
    (We could make it little endian too, but why?  Vice versa, an ioctl
    could be added to dump packet data in big endian byte order...)
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/drivers/firewire/nosy-user.h b/drivers/firewire/nosy-user.h
index ebef97f4ecf9..e48aa6200c72 100644
--- a/drivers/firewire/nosy-user.h
+++ b/drivers/firewire/nosy-user.h
@@ -17,9 +17,9 @@ struct nosy_stats {
 /*
  * Format of packets returned from the kernel driver:
  *
- *   quadlet with timestamp (microseconds)
- *   quadlet padded packet data...
- *   quadlet with ack
+ *	quadlet with timestamp		(microseconds, CPU endian)
+ *	quadlet-padded packet data...	(little endian)
+ *	quadlet with ack		(little endian)
  */
 
 #endif /* __nosy_user_h */

commit b5e47729043c9224b21ab3dc7c63e8a38dbb4923
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Tue Jul 27 10:28:30 2010 +0200

    firewire: nosy: misc cleanups
    
    Extend copyright note to 2007, c.f. Kristian's git log.
    
    Includes:
      - replace some <asm/*.h> by <linux/*.h>
      - add required indirectly included <linux/spinlock.h>
      - order alphabetically
    
    Coding style related changes:
      - change to utf8
      - normalize whitespace
      - normalize comment style
      - remove usages of __FUNCTION__
      - remove an unnecessary cast from void *
    
    Const and static declarations:
      - driver_name is not const in pci_driver.name, drop const qualifier
      - driver_name can be taken from KBUILD_MODNAME
      - the global variable minors[] can and should be static
      - constify struct file_operations instance
    
    Data types:
      - Remove unused struct member struct packet.code.  struct packet is
        only used for driver-internal bookkeeping; it does not appear on the
        wire or in DMA programs or the userspace ABI.  Hence the unused
        member .code can be removed without worries.
    
    Preprocessor macros:
      - unroll a preprocessor macro that containd a return
      - use list_for_each_entry
    
    Printk:
      - add missing terminating \n in some format strings
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>

diff --git a/drivers/firewire/nosy-user.h b/drivers/firewire/nosy-user.h
index c9a1682ab45e..ebef97f4ecf9 100644
--- a/drivers/firewire/nosy-user.h
+++ b/drivers/firewire/nosy-user.h
@@ -1,8 +1,8 @@
 #ifndef __nosy_user_h
 #define __nosy_user_h
 
-#include <asm/ioctl.h>
-#include <asm/types.h>
+#include <linux/ioctl.h>
+#include <linux/types.h>
 
 #define NOSY_IOC_GET_STATS _IOR('&', 0, struct nosy_stats)
 #define NOSY_IOC_START     _IO('&', 1)
@@ -10,11 +10,11 @@
 #define NOSY_IOC_FILTER    _IOW('&', 2, __u32)
 
 struct nosy_stats {
-  __u32 total_packet_count;
-  __u32 lost_packet_count;
+	__u32 total_packet_count;
+	__u32 lost_packet_count;
 };
 
-/* 
+/*
  * Format of packets returned from the kernel driver:
  *
  *   quadlet with timestamp (microseconds)

commit 286468210d83ce0ca1e37e346ed9f4457a161650
Author: Stefan Richter <stefanr@s5r6.in-berlin.de>
Date:   Tue Jul 27 10:26:33 2010 +0200

    firewire: new driver: nosy - IEEE 1394 traffic sniffer
    
    This adds the traffic sniffer driver for Texas Instruments PCILynx/
    PCILynx2 based cards.  The use cases for nosy are analysis of
    nonstandard protocols and as an aid in development of drivers,
    applications, or firmwares.
    
    Author of the driver is Kristian Høgsberg.  Known contributers are
    Jody McIntyre and Jonathan Woithe.
    
    Nosy programs PCILynx chips to operate in promiscuous mode, which is a
    feature that is not found in OHCI-1394 controllers.  Hence, only special
    hardware as mentioned in the Kconfig help text is suitable for nosy.
    
    This is only the kernelspace part of nosy.  There is a userspace
    interface to it, called nosy-dump, proposed to be added into the tools/
    subdirectory of the kernel sources in a subsequent change.  Kernelspace
    and userspave component of nosy communicate via a 'misc' character
    device file called /dev/nosy with a simple ioctl() and read() based
    protocol, as described by nosy-user.h.
    
    The files added here are taken from
    git://anongit.freedesktop.org/~krh/nosy commit ee29be97 (2009-11-10)
    with the following changes by Stefan Richter:
      - Kconfig and Makefile hunks are written from scratch.
      - Commented out version printk in nosy.c.
      - Included missing <linux/sched.h>, reported by Stephen Rothwell.
    
    "git shortlog nosy{-user.h,.c,.h}" from nosy's git repository:
    
    Jonathan Woithe (2):
          Nosy updates for recent kernels
          Fix uninitialised memory (needed for 2.6.31 kernel)
    
    Kristian Høgsberg (5):
          Pull over nosy from mercurial repo.
          Use a misc device instead.
          Add simple AV/C decoder.
          Don't break down on big payloads.
          Set parent device for misc device.
    
    As a low-level IEEE 1394 driver, its files are placed into
    drivers/firewire/ although nosy is not part of the firewire driver
    stack.
    
    I am aware of the following literature from Texas Instruments about
    PCILynx programming:
          SCPA020A - PCILynx 1394 to PCI Bus Interface TSB12LV21BPGF
                     Functional Specification
          SLLA023  - Initialization and Asynchronous Programming of the
                     TSB12LV21A 1394 Device
    
    Signed-off-by: Stefan Richter <stefanr@s5r6.in-berlin.de>
    Acked-by: Kristian Høgsberg <krh@bitplanet.net>

diff --git a/drivers/firewire/nosy-user.h b/drivers/firewire/nosy-user.h
new file mode 100644
index 000000000000..c9a1682ab45e
--- /dev/null
+++ b/drivers/firewire/nosy-user.h
@@ -0,0 +1,25 @@
+#ifndef __nosy_user_h
+#define __nosy_user_h
+
+#include <asm/ioctl.h>
+#include <asm/types.h>
+
+#define NOSY_IOC_GET_STATS _IOR('&', 0, struct nosy_stats)
+#define NOSY_IOC_START     _IO('&', 1)
+#define NOSY_IOC_STOP      _IO('&', 2)
+#define NOSY_IOC_FILTER    _IOW('&', 2, __u32)
+
+struct nosy_stats {
+  __u32 total_packet_count;
+  __u32 lost_packet_count;
+};
+
+/* 
+ * Format of packets returned from the kernel driver:
+ *
+ *   quadlet with timestamp (microseconds)
+ *   quadlet padded packet data...
+ *   quadlet with ack
+ */
+
+#endif /* __nosy_user_h */
