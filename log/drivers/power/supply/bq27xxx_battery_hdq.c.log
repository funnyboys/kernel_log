commit 67bd22c09ac1b54b5f42445783d2dc8e011f7a71
Author: Andrew F. Davis <afd@ti.com>
Date:   Wed Jul 19 12:04:07 2017 -0500

    power: supply: bq27xxx: move platform driver code into bq27xxx_battery_hdq.c
    
    When the BQ27xxx driver was originally written the w1 subsystem only
    allowed device drivers for w1 attached devices to live in the w1
    subsystem. Kernel driver subsystems expect that the driver for a device
    live in the directory of the subsystem for which it implements
    functionality, not in the directory of the bus that it is attached. To
    work around this, the BQ27xxx driver was implemented as a platform device
    driver and the interface driver would instantiate this device from within
    the w1 directory, then pass a w1 read callback as platform data.
    
    As we can now have the w1 interface driver in the power/supply directory
    (like we do already with the i2c interface driver) we can remove this
    middle-layer platform driver.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/drivers/power/supply/bq27xxx_battery_hdq.c b/drivers/power/supply/bq27xxx_battery_hdq.c
index f4df67eb9d2c..9aff896c9802 100644
--- a/drivers/power/supply/bq27xxx_battery_hdq.c
+++ b/drivers/power/supply/bq27xxx_battery_hdq.c
@@ -1,10 +1,16 @@
 /*
- * Copyright (C) 2007 Texas Instruments, Inc.
+ * BQ27xxx battery monitor HDQ/1-wire driver
  *
- * This file is licensed under the terms of the GNU General Public License
- * version 2. This program is licensed "as is" without any warranty of any
- * kind, whether express or implied.
+ * Copyright (C) 2007-2017 Texas Instruments Incorporated - http://www.ti.com/
  *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any
+ * kind, whether express or implied; without even the implied warranty
+ * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
  */
 
 #include <linux/kernel.h>
@@ -19,17 +25,16 @@
 
 #define W1_FAMILY_BQ27000	0x01
 
-#define HDQ_CMD_READ	(0)
-#define HDQ_CMD_WRITE	(1<<7)
+#define HDQ_CMD_READ	(0 << 7)
+#define HDQ_CMD_WRITE	(1 << 7)
 
 static int F_ID;
 module_param(F_ID, int, S_IRUSR);
-MODULE_PARM_DESC(F_ID, "1-wire slave FID for BQ device");
+MODULE_PARM_DESC(F_ID, "1-wire slave FID for BQ27xxx device");
 
-static int w1_bq27000_read(struct device *dev, unsigned int reg)
+static int w1_bq27000_read(struct w1_slave *sl, unsigned int reg)
 {
 	u8 val;
-	struct w1_slave *sl = container_of(dev->parent, struct w1_slave, dev);
 
 	mutex_lock(&sl->master->bus_mutex);
 	w1_write_8(sl->master, HDQ_CMD_READ | reg);
@@ -39,77 +44,92 @@ static int w1_bq27000_read(struct device *dev, unsigned int reg)
 	return val;
 }
 
-static struct bq27xxx_platform_data bq27000_battery_info = {
-	.read   = w1_bq27000_read,
-	.name   = "bq27000-battery",
-	.chip   = BQ27000,
-};
-
-static int w1_bq27000_add_slave(struct w1_slave *sl)
+static int bq27xxx_battery_hdq_read(struct bq27xxx_device_info *di, u8 reg,
+				    bool single)
 {
-	int ret;
-	struct platform_device *pdev;
-
-	pdev = platform_device_alloc("bq27000-battery", -1);
-	if (!pdev) {
-		ret = -ENOMEM;
-		return ret;
+	struct w1_slave *sl = dev_to_w1_slave(di->dev);
+	unsigned int timeout = 3;
+	int upper, lower;
+	int temp;
+
+	if (!single) {
+		/*
+		 * Make sure the value has not changed in between reading the
+		 * lower and the upper part
+		 */
+		upper = w1_bq27000_read(sl, reg + 1);
+		do {
+			temp = upper;
+			if (upper < 0)
+				return upper;
+
+			lower = w1_bq27000_read(sl, reg);
+			if (lower < 0)
+				return lower;
+
+			upper = w1_bq27000_read(sl, reg + 1);
+		} while (temp != upper && --timeout);
+
+		if (timeout == 0)
+			return -EIO;
+
+		return (upper << 8) | lower;
 	}
-	ret = platform_device_add_data(pdev,
-				       &bq27000_battery_info,
-				       sizeof(bq27000_battery_info));
-	if (ret)
-		goto pdev_add_failed;
-	pdev->dev.parent = &sl->dev;
 
-	ret = platform_device_add(pdev);
-	if (ret)
-		goto pdev_add_failed;
+	return w1_bq27000_read(sl, reg);
+}
 
-	dev_set_drvdata(&sl->dev, pdev);
+static int bq27xxx_battery_hdq_add_slave(struct w1_slave *sl)
+{
+	struct bq27xxx_device_info *di;
+
+	di = devm_kzalloc(&sl->dev, sizeof(*di), GFP_KERNEL);
+	if (!di)
+		return -ENOMEM;
 
-	goto success;
+	dev_set_drvdata(&sl->dev, di);
 
-pdev_add_failed:
-	platform_device_put(pdev);
-success:
-	return ret;
+	di->dev = &sl->dev;
+	di->chip = BQ27000;
+	di->name = "bq27000-battery";
+	di->bus.read = bq27xxx_battery_hdq_read;
+
+	return bq27xxx_battery_setup(di);
 }
 
-static void w1_bq27000_remove_slave(struct w1_slave *sl)
+static void bq27xxx_battery_hdq_remove_slave(struct w1_slave *sl)
 {
-	struct platform_device *pdev = dev_get_drvdata(&sl->dev);
+	struct bq27xxx_device_info *di = dev_get_drvdata(&sl->dev);
 
-	platform_device_unregister(pdev);
+	bq27xxx_battery_teardown(di);
 }
 
-static struct w1_family_ops w1_bq27000_fops = {
-	.add_slave	= w1_bq27000_add_slave,
-	.remove_slave	= w1_bq27000_remove_slave,
+static struct w1_family_ops bq27xxx_battery_hdq_fops = {
+	.add_slave	= bq27xxx_battery_hdq_add_slave,
+	.remove_slave	= bq27xxx_battery_hdq_remove_slave,
 };
 
-static struct w1_family w1_bq27000_family = {
+static struct w1_family bq27xxx_battery_hdq_family = {
 	.fid = W1_FAMILY_BQ27000,
-	.fops = &w1_bq27000_fops,
+	.fops = &bq27xxx_battery_hdq_fops,
 };
 
-static int __init w1_bq27000_init(void)
+static int __init bq27xxx_battery_hdq_init(void)
 {
 	if (F_ID)
-		w1_bq27000_family.fid = F_ID;
+		bq27xxx_battery_hdq_family.fid = F_ID;
 
-	return w1_register_family(&w1_bq27000_family);
+	return w1_register_family(&bq27xxx_battery_hdq_family);
 }
+module_init(bq27xxx_battery_hdq_init);
 
-static void __exit w1_bq27000_exit(void)
+static void __exit bq27xxx_battery_hdq_exit(void)
 {
-	w1_unregister_family(&w1_bq27000_family);
+	w1_unregister_family(&bq27xxx_battery_hdq_family);
 }
-
-module_init(w1_bq27000_init);
-module_exit(w1_bq27000_exit);
+module_exit(bq27xxx_battery_hdq_exit);
 
 MODULE_AUTHOR("Texas Instruments Ltd");
-MODULE_DESCRIPTION("HDQ/1-wire slave driver bq27000 battery monitor chip");
+MODULE_DESCRIPTION("BQ27xxx battery monitor HDQ/1-wire driver");
 MODULE_LICENSE("GPL");
 MODULE_ALIAS("w1-family-" __stringify(W1_FAMILY_BQ27000));

commit 55a9db679183bcf85a6e5c44a4f92f158bb6f03d
Author: Andrew F. Davis <afd@ti.com>
Date:   Wed Jul 19 12:04:06 2017 -0500

    power: supply: move HDQ interface for bq27xxx from w1 to power/supply
    
    The HDQ interface driver should be in this folder just like the I2C
    interface driver. Move this driver out of drivers/w1/slave and into
    drivers/power/supply.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: Pali Rohár <pali.rohar@gmail.com>
    Signed-off-by: Sebastian Reichel <sebastian.reichel@collabora.co.uk>

diff --git a/drivers/power/supply/bq27xxx_battery_hdq.c b/drivers/power/supply/bq27xxx_battery_hdq.c
new file mode 100644
index 000000000000..f4df67eb9d2c
--- /dev/null
+++ b/drivers/power/supply/bq27xxx_battery_hdq.c
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2007 Texas Instruments, Inc.
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/types.h>
+#include <linux/platform_device.h>
+#include <linux/mutex.h>
+#include <linux/power/bq27xxx_battery.h>
+
+#include <linux/w1.h>
+
+#define W1_FAMILY_BQ27000	0x01
+
+#define HDQ_CMD_READ	(0)
+#define HDQ_CMD_WRITE	(1<<7)
+
+static int F_ID;
+module_param(F_ID, int, S_IRUSR);
+MODULE_PARM_DESC(F_ID, "1-wire slave FID for BQ device");
+
+static int w1_bq27000_read(struct device *dev, unsigned int reg)
+{
+	u8 val;
+	struct w1_slave *sl = container_of(dev->parent, struct w1_slave, dev);
+
+	mutex_lock(&sl->master->bus_mutex);
+	w1_write_8(sl->master, HDQ_CMD_READ | reg);
+	val = w1_read_8(sl->master);
+	mutex_unlock(&sl->master->bus_mutex);
+
+	return val;
+}
+
+static struct bq27xxx_platform_data bq27000_battery_info = {
+	.read   = w1_bq27000_read,
+	.name   = "bq27000-battery",
+	.chip   = BQ27000,
+};
+
+static int w1_bq27000_add_slave(struct w1_slave *sl)
+{
+	int ret;
+	struct platform_device *pdev;
+
+	pdev = platform_device_alloc("bq27000-battery", -1);
+	if (!pdev) {
+		ret = -ENOMEM;
+		return ret;
+	}
+	ret = platform_device_add_data(pdev,
+				       &bq27000_battery_info,
+				       sizeof(bq27000_battery_info));
+	if (ret)
+		goto pdev_add_failed;
+	pdev->dev.parent = &sl->dev;
+
+	ret = platform_device_add(pdev);
+	if (ret)
+		goto pdev_add_failed;
+
+	dev_set_drvdata(&sl->dev, pdev);
+
+	goto success;
+
+pdev_add_failed:
+	platform_device_put(pdev);
+success:
+	return ret;
+}
+
+static void w1_bq27000_remove_slave(struct w1_slave *sl)
+{
+	struct platform_device *pdev = dev_get_drvdata(&sl->dev);
+
+	platform_device_unregister(pdev);
+}
+
+static struct w1_family_ops w1_bq27000_fops = {
+	.add_slave	= w1_bq27000_add_slave,
+	.remove_slave	= w1_bq27000_remove_slave,
+};
+
+static struct w1_family w1_bq27000_family = {
+	.fid = W1_FAMILY_BQ27000,
+	.fops = &w1_bq27000_fops,
+};
+
+static int __init w1_bq27000_init(void)
+{
+	if (F_ID)
+		w1_bq27000_family.fid = F_ID;
+
+	return w1_register_family(&w1_bq27000_family);
+}
+
+static void __exit w1_bq27000_exit(void)
+{
+	w1_unregister_family(&w1_bq27000_family);
+}
+
+module_init(w1_bq27000_init);
+module_exit(w1_bq27000_exit);
+
+MODULE_AUTHOR("Texas Instruments Ltd");
+MODULE_DESCRIPTION("HDQ/1-wire slave driver bq27000 battery monitor chip");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("w1-family-" __stringify(W1_FAMILY_BQ27000));
