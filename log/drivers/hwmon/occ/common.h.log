commit afd26118f0dcf29db031a213f6f95c46ff3bdcbe
Author: Eddie James <eajames@linux.ibm.com>
Date:   Tue Jul 2 10:47:42 2019 -0500

    OCC: FSI and hwmon: Add sequence numbering
    
    Sequence numbering of the commands submitted to the OCC is required by
    the OCC interface specification. Add sequence numbering and check for
    the correct sequence number on the response.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Reviewed-by: Lei YU <mine260309@gmail.com>
    Signed-off-by: Joel Stanley <joel@jms.id.au>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index fc13f3c73c47..67e6968b8978 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -95,6 +95,7 @@ struct occ {
 	struct occ_sensors sensors;
 
 	int powr_sample_time_us;	/* average power sample time */
+	u8 seq_no;
 	u8 poll_cmd_data;		/* to perform OCC poll command */
 	int (*send_cmd)(struct occ *occ, u8 *cmd);
 

commit b5c46a53ee6b1f97104883d93847b2b2fdddc289
Author: Eddie James <eajames@linux.ibm.com>
Date:   Tue Apr 16 15:43:48 2019 +0000

    hwmon: (occ) Store error condition for rate-limited polls
    
    The OCC driver limits the rate of sending poll commands to the OCC. If a
    user reads a hwmon entry after a poll response resulted in an error and
    is rate-limited, the error is invisible to the user. Fix this by storing
    the last error and returning that in the rate-limited case.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index ed2cf4245295..fc13f3c73c47 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -106,7 +106,8 @@ struct occ {
 	struct attribute_group group;
 	const struct attribute_group *groups[2];
 
-	int error;                      /* latest transfer error */
+	int error;                      /* final transfer error after retry */
+	int last_error;			/* latest transfer error */
 	unsigned int error_count;       /* number of xfr errors observed */
 	unsigned long last_safe;        /* time OCC entered "safe" state */
 

commit e2f05d608653cb212edea136ad82107c6be56e1d
Author: Eddie James <eajames@linux.ibm.com>
Date:   Mon Jan 28 10:23:23 2019 -0600

    hwmon: (occ) Fix license headers
    
    Files have inconsistent license information.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index 7c44df3f5631..ed2cf4245295 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -1,4 +1,5 @@
-/* SPDX-License-Identifier: GPL-2.0 */
+/* SPDX-License-Identifier: GPL-2.0+ */
+/* Copyright IBM Corp 2019 */
 
 #ifndef OCC_COMMON_H
 #define OCC_COMMON_H

commit df04ced684d48f6ec5729ccd034702952160c6b3
Author: Eddie James <eajames@linux.vnet.ibm.com>
Date:   Thu Nov 8 15:05:29 2018 -0600

    hwmon (occ): Add sysfs attributes for additional OCC data
    
    The OCC provides a variety of additional information about the state of
    the host processor, such as throttling, error conditions, and the number
    of OCCs detected in the system. This information is essential to service
    processor applications such as fan control and host management.
    Therefore, export this data in the form of sysfs attributes attached to
    the platform device (to which the hwmon device is also attached).
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index 9d01973d93d8..7c44df3f5631 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -104,8 +104,25 @@ struct occ {
 	struct occ_attribute *attrs;
 	struct attribute_group group;
 	const struct attribute_group *groups[2];
+
+	int error;                      /* latest transfer error */
+	unsigned int error_count;       /* number of xfr errors observed */
+	unsigned long last_safe;        /* time OCC entered "safe" state */
+
+	/*
+	 * Store the previous state data for comparison in order to notify
+	 * sysfs readers of state changes.
+	 */
+	int prev_error;
+	u8 prev_stat;
+	u8 prev_ext_stat;
+	u8 prev_occs_present;
 };
 
 int occ_setup(struct occ *occ, const char *name);
+int occ_setup_sysfs(struct occ *occ);
+void occ_shutdown(struct occ *occ);
+void occ_sysfs_poll_done(struct occ *occ);
+int occ_update_response(struct occ *occ);
 
 #endif /* OCC_COMMON_H */

commit 54076cb3b5ff21f6474f5fd254a0b018b24771df
Author: Eddie James <eajames@linux.vnet.ibm.com>
Date:   Thu Nov 8 15:05:28 2018 -0600

    hwmon (occ): Add sensor attributes and register hwmon device
    
    Setup the sensor attributes for every OCC sensor found by the first poll
    response. Register the attributes with hwmon.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index a363462f5f30..9d01973d93d8 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -3,7 +3,9 @@
 #ifndef OCC_COMMON_H
 #define OCC_COMMON_H
 
+#include <linux/hwmon-sysfs.h>
 #include <linux/mutex.h>
+#include <linux/sysfs.h>
 
 struct device;
 
@@ -76,6 +78,15 @@ struct occ_sensors {
 	struct occ_sensor extended;
 };
 
+/*
+ * Use our own attribute struct so we can dynamically allocate space for the
+ * name.
+ */
+struct occ_attribute {
+	char name[32];
+	struct sensor_device_attribute_2 sensor;
+};
+
 struct occ {
 	struct device *bus_dev;
 
@@ -88,6 +99,11 @@ struct occ {
 
 	unsigned long last_update;
 	struct mutex lock;		/* lock OCC access */
+
+	struct device *hwmon;
+	struct occ_attribute *attrs;
+	struct attribute_group group;
+	const struct attribute_group *groups[2];
 };
 
 int occ_setup(struct occ *occ, const char *name);

commit c10e753d43ebd1d17e1c62bcee20c6124c2c7cca
Author: Eddie James <eajames@linux.vnet.ibm.com>
Date:   Thu Nov 8 15:05:27 2018 -0600

    hwmon (occ): Add sensor types and versions
    
    Add structures to define all sensor types and versions. Add sysfs show
    and store functions for each sensor type. Add a method to construct the
    "set user power cap" command and send it to the OCC. Add rate limit to
    polling the OCC (in case user-space reads our hwmon entries rapidly).
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index 251a4b0ab154..a363462f5f30 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -3,6 +3,8 @@
 #ifndef OCC_COMMON_H
 #define OCC_COMMON_H
 
+#include <linux/mutex.h>
+
 struct device;
 
 #define OCC_RESP_DATA_BYTES		4089
@@ -80,8 +82,12 @@ struct occ {
 	struct occ_response resp;
 	struct occ_sensors sensors;
 
+	int powr_sample_time_us;	/* average power sample time */
 	u8 poll_cmd_data;		/* to perform OCC poll command */
 	int (*send_cmd)(struct occ *occ, u8 *cmd);
+
+	unsigned long last_update;
+	struct mutex lock;		/* lock OCC access */
 };
 
 int occ_setup(struct occ *occ, const char *name);

commit aa195fe49b033db545ad986cdb2c431c37bea557
Author: Eddie James <eajames@linux.vnet.ibm.com>
Date:   Thu Nov 8 15:05:26 2018 -0600

    hwmon (occ): Parse OCC poll response
    
    Add method to parse the response from the OCC poll command. This only
    needs to be done during probe(), since the OCC shouldn't change the
    number or format of sensors while it's running. The parsed response
    allows quick access to sensor data, as well as information on the
    number and version of sensors, which we need to instantiate hwmon
    attributes.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
index 0602196d6704..251a4b0ab154 100644
--- a/drivers/hwmon/occ/common.h
+++ b/drivers/hwmon/occ/common.h
@@ -20,10 +20,65 @@ struct occ_response {
 	__be16 checksum;
 } __packed;
 
+struct occ_sensor_data_block_header {
+	u8 eye_catcher[4];
+	u8 reserved;
+	u8 sensor_format;
+	u8 sensor_length;
+	u8 num_sensors;
+} __packed;
+
+struct occ_sensor_data_block {
+	struct occ_sensor_data_block_header header;
+	u32 data;
+} __packed;
+
+struct occ_poll_response_header {
+	u8 status;
+	u8 ext_status;
+	u8 occs_present;
+	u8 config_data;
+	u8 occ_state;
+	u8 mode;
+	u8 ips_status;
+	u8 error_log_id;
+	__be32 error_log_start_address;
+	__be16 error_log_length;
+	u16 reserved;
+	u8 occ_code_level[16];
+	u8 eye_catcher[6];
+	u8 num_sensor_data_blocks;
+	u8 sensor_data_block_header_version;
+} __packed;
+
+struct occ_poll_response {
+	struct occ_poll_response_header header;
+	struct occ_sensor_data_block block;
+} __packed;
+
+struct occ_sensor {
+	u8 num_sensors;
+	u8 version;
+	void *data;	/* pointer to sensor data start within response */
+};
+
+/*
+ * OCC only provides one sensor data block of each type, but any number of
+ * sensors within that block.
+ */
+struct occ_sensors {
+	struct occ_sensor temp;
+	struct occ_sensor freq;
+	struct occ_sensor power;
+	struct occ_sensor caps;
+	struct occ_sensor extended;
+};
+
 struct occ {
 	struct device *bus_dev;
 
 	struct occ_response resp;
+	struct occ_sensors sensors;
 
 	u8 poll_cmd_data;		/* to perform OCC poll command */
 	int (*send_cmd)(struct occ *occ, u8 *cmd);

commit 5b5513b8800291226a8fa63fd22a14cc235b313e
Author: Eddie James <eajames@linux.vnet.ibm.com>
Date:   Thu Nov 8 15:05:24 2018 -0600

    hwmon: Add On-Chip Controller (OCC) hwmon driver
    
    The OCC is a device embedded on a POWER processor that collects and
    aggregates sensor data from the processor and system. The OCC can
    provide the raw sensor data as well as perform thermal and power
    management on the system.
    
    This driver provides a hwmon interface to the OCC from a service
    processor (e.g. a BMC). The driver supports both POWER8 and POWER9 OCCs.
    Communications with the POWER8 OCC are established over standard I2C
    bus. The driver communicates with the POWER9 OCC through the FSI-based
    OCC driver, which handles the lower-level communication details.
    
    This patch lays out the structure of the OCC hwmon driver. There are two
    platform drivers, one each for P8 and P9 OCCs. These are probed through
    the I2C tree and the FSI-based OCC driver, respectively. The patch also
    defines the first common structures and methods between the two OCC
    versions.
    
    Signed-off-by: Eddie James <eajames@linux.ibm.com>
    [groeck: Fix up SPDX license identifier]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

diff --git a/drivers/hwmon/occ/common.h b/drivers/hwmon/occ/common.h
new file mode 100644
index 000000000000..0602196d6704
--- /dev/null
+++ b/drivers/hwmon/occ/common.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+
+#ifndef OCC_COMMON_H
+#define OCC_COMMON_H
+
+struct device;
+
+#define OCC_RESP_DATA_BYTES		4089
+
+/*
+ * Same response format for all OCC versions.
+ * Allocate the largest possible response.
+ */
+struct occ_response {
+	u8 seq_no;
+	u8 cmd_type;
+	u8 return_status;
+	__be16 data_length;
+	u8 data[OCC_RESP_DATA_BYTES];
+	__be16 checksum;
+} __packed;
+
+struct occ {
+	struct device *bus_dev;
+
+	struct occ_response resp;
+
+	u8 poll_cmd_data;		/* to perform OCC poll command */
+	int (*send_cmd)(struct occ *occ, u8 *cmd);
+};
+
+int occ_setup(struct occ *occ, const char *name);
+
+#endif /* OCC_COMMON_H */
