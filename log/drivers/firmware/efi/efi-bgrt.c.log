commit 55087c5713dcf1c6279d223e380cc79f8f9b4f23
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Fri Jan 31 14:06:23 2020 +0100

    efi/bgrt: Accept BGRT tables with a version of 0
    
    Some (somewhat older) laptops have a correct BGRT table, except that the
    version field is 0 instead of 1.
    
    This has been seen on several Ivy Bridge based Lenovo models.
    
    For now the spec. only defines version 1, so it is reasonably safe to
    assume that tables with a version of 0 really are version 1 too,
    which is what this commit does so that the BGRT table will be accepted
    by the kernel on laptop models with this issue.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Link: https://lore.kernel.org/r/20200131130623.33875-1-hdegoede@redhat.com
    Signed-off-by: Ard Biesheuvel <ardb@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index b07c17643210..6aafdb67dbca 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -42,7 +42,12 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 		return;
 	}
 	*bgrt = *(struct acpi_table_bgrt *)table;
-	if (bgrt->version != 1) {
+	/*
+	 * Only version 1 is defined but some older laptops (seen on Lenovo
+	 * Ivy Bridge models) have a correct version 1 BGRT table with the
+	 * version set to 0, so we accept version 0 and 1.
+	 */
+	if (bgrt->version > 1) {
 		pr_notice("Ignoring BGRT: invalid version %u (expected 1)\n",
 		       bgrt->version);
 		goto out;

commit a483fcab38b43fb34a7f12ab1daadd3907f150e2
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed May 29 15:28:28 2019 +0200

    efi/bgrt: Drop BGRT status field reserved bits check
    
    Starting with ACPI 6.2 bits 1 and 2 of the BGRT status field are no longer
    reserved. These bits are now used to indicate if the image needs to be
    rotated before being displayed.
    
    The first device using these bits has now shown up (the GPD MicroPC) and
    the reserved bits check causes us to reject the valid BGRT table on this
    device.
    
    Rather then changing the reserved bits check, allowing only the 2 new bits,
    instead just completely remove it so that we do not end up with a similar
    problem when more bits are added in the future.
    
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index a2384184a7de..b07c17643210 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -47,11 +47,6 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 		       bgrt->version);
 		goto out;
 	}
-	if (bgrt->status & 0xfe) {
-		pr_notice("Ignoring BGRT: reserved status bits are non-zero %u\n",
-		       bgrt->status);
-		goto out;
-	}
 	if (bgrt->image_type != 0) {
 		pr_notice("Ignoring BGRT: invalid image type %u (expected 0)\n",
 		       bgrt->image_type);

commit 4febfb8dd08b6f8bafc19f3f9e382a477425b578
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Sat Feb 2 10:41:15 2019 +0100

    efi: Replace GPL license boilerplate with SPDX headers
    
    Replace all GPL license blurbs with an equivalent SPDX header (most
    files are GPLv2, some are GPLv2+). While at it, drop some outdated
    header changelogs as well.
    
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: AKASHI Takahiro <takahiro.akashi@linaro.org>
    Cc: Alexander Graf <agraf@suse.de>
    Cc: Bjorn Andersson <bjorn.andersson@linaro.org>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Heinrich Schuchardt <xypron.glpk@gmx.de>
    Cc: Jeffrey Hugo <jhugo@codeaurora.org>
    Cc: Lee Jones <lee.jones@linaro.org>
    Cc: Leif Lindholm <leif.lindholm@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20190202094119.13230-7-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index b22ccfb0c991..a2384184a7de 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -1,3 +1,4 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
  * Copyright 2012 Intel Corporation
  * Author: Josh Triplett <josh@joshtriplett.org>
@@ -5,10 +6,6 @@
  * Based on the bgrt driver:
  * Copyright 2012 Red Hat, Inc <mjg@redhat.com>
  * Author: Matthew Garrett
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt

commit 0c9250368792c42b296d0bba73f7fff918b73381
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Tue Jul 3 17:43:10 2018 +0200

    efi/bgrt: Drop __initdata from bgrt_image_size
    
    bgrt_image_size is necessary to (optionally) show the boot graphics from
    the efifb code. The efifb driver is a platform driver, using a normal
    driver probe() driver callback. So even though it is always builtin it
    cannot reference __initdata.
    
    Acked-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Bartlomiej Zolnierkiewicz <b.zolnierkie@samsung.com>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index 50793fda7819..b22ccfb0c991 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -20,7 +20,7 @@
 #include <linux/efi-bgrt.h>
 
 struct acpi_table_bgrt bgrt_tab;
-size_t __initdata bgrt_image_size;
+size_t bgrt_image_size;
 
 struct bmp_header {
 	u16 id;

commit 6de47a5e371f75f80544986e6c9636211a2ae8af
Author: Jan Beulich <JBeulich@suse.com>
Date:   Fri Aug 25 16:50:19 2017 +0100

    efi/bgrt: Use efi_mem_type()
    
    Avoid effectively open-coding the function.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Jan Beulich <JBeulich@suse.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170825155019.6740-6-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index b58233e4ed71..50793fda7819 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -27,26 +27,6 @@ struct bmp_header {
 	u32 size;
 } __packed;
 
-static bool efi_bgrt_addr_valid(u64 addr)
-{
-	efi_memory_desc_t *md;
-
-	for_each_efi_memory_desc(md) {
-		u64 size;
-		u64 end;
-
-		if (md->type != EFI_BOOT_SERVICES_DATA)
-			continue;
-
-		size = md->num_pages << EFI_PAGE_SHIFT;
-		end = md->phys_addr + size;
-		if (addr >= md->phys_addr && addr < end)
-			return true;
-	}
-
-	return false;
-}
-
 void __init efi_bgrt_init(struct acpi_table_header *table)
 {
 	void *image;
@@ -85,7 +65,7 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 		goto out;
 	}
 
-	if (!efi_bgrt_addr_valid(bgrt->image_address)) {
+	if (efi_mem_type(bgrt->image_address) != EFI_BOOT_SERVICES_DATA) {
 		pr_notice("Ignoring BGRT: invalid image address\n");
 		goto out;
 	}

commit 792ef14df5c585c19b2831673a077504a09e5203
Author: Dave Young <dyoung@redhat.com>
Date:   Fri Jun 9 08:45:58 2017 +0000

    efi: Fix boot panic because of invalid BGRT image address
    
    Maniaxx reported a kernel boot crash in the EFI code, which I emulated
    by using same invalid phys addr in code:
    
      BUG: unable to handle kernel paging request at ffffffffff280001
      IP: efi_bgrt_init+0xfb/0x153
      ...
      Call Trace:
       ? bgrt_init+0xbc/0xbc
       acpi_parse_bgrt+0xe/0x12
       acpi_table_parse+0x89/0xb8
       acpi_boot_init+0x445/0x4e2
       ? acpi_parse_x2apic+0x79/0x79
       ? dmi_ignore_irq0_timer_override+0x33/0x33
       setup_arch+0xb63/0xc82
       ? early_idt_handler_array+0x120/0x120
       start_kernel+0xb7/0x443
       ? early_idt_handler_array+0x120/0x120
       x86_64_start_reservations+0x29/0x2b
       x86_64_start_kernel+0x154/0x177
       secondary_startup_64+0x9f/0x9f
    
    There is also a similar bug filed in bugzilla.kernel.org:
    
      https://bugzilla.kernel.org/show_bug.cgi?id=195633
    
    The crash is caused by this commit:
    
      7b0a911478c7 efi/x86: Move the EFI BGRT init code to early init code
    
    The root cause is the firmware on those machines provides invalid BGRT
    image addresses.
    
    In a kernel before above commit BGRT initializes late and uses ioremap()
    to map the image address. Ioremap validates the address, if it is not a
    valid physical address ioremap() just fails and returns. However in current
    kernel EFI BGRT initializes early and uses early_memremap() which does not
    validate the image address, and kernel panic happens.
    
    According to ACPI spec the BGRT image address should fall into
    EFI_BOOT_SERVICES_DATA, see the section 5.2.22.4 of below document:
    
      http://www.uefi.org/sites/default/files/resources/ACPI_6_1.pdf
    
    Fix this issue by validating the image address in efi_bgrt_init(). If the
    image address does not fall into any EFI_BOOT_SERVICES_DATA areas we just
    bail out with a warning message.
    
    Reported-by: Maniaxx <tripleshiftone@gmail.com>
    Signed-off-by: Dave Young <dyoung@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 7b0a911478c7 ("efi/x86: Move the EFI BGRT init code to early init code")
    Link: http://lkml.kernel.org/r/20170609084558.26766-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index 8bf27323f7a3..b58233e4ed71 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -27,6 +27,26 @@ struct bmp_header {
 	u32 size;
 } __packed;
 
+static bool efi_bgrt_addr_valid(u64 addr)
+{
+	efi_memory_desc_t *md;
+
+	for_each_efi_memory_desc(md) {
+		u64 size;
+		u64 end;
+
+		if (md->type != EFI_BOOT_SERVICES_DATA)
+			continue;
+
+		size = md->num_pages << EFI_PAGE_SHIFT;
+		end = md->phys_addr + size;
+		if (addr >= md->phys_addr && addr < end)
+			return true;
+	}
+
+	return false;
+}
+
 void __init efi_bgrt_init(struct acpi_table_header *table)
 {
 	void *image;
@@ -36,7 +56,7 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 	if (acpi_disabled)
 		return;
 
-	if (!efi_enabled(EFI_BOOT))
+	if (!efi_enabled(EFI_MEMMAP))
 		return;
 
 	if (table->length < sizeof(bgrt_tab)) {
@@ -65,6 +85,10 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 		goto out;
 	}
 
+	if (!efi_bgrt_addr_valid(bgrt->image_address)) {
+		pr_notice("Ignoring BGRT: invalid image address\n");
+		goto out;
+	}
 	image = early_memremap(bgrt->image_address, sizeof(bmp_header));
 	if (!image) {
 		pr_notice("Ignoring BGRT: failed to map image header memory\n");

commit 7425826f4f7ac60f2538b06a7f0a5d1006405159
Author: Dave Young <dyoung@redhat.com>
Date:   Fri May 26 12:36:51 2017 +0100

    efi/bgrt: Skip efi_bgrt_init() in case of non-EFI boot
    
    Sabrina Dubroca reported an early panic:
    
      BUG: unable to handle kernel paging request at ffffffffff240001
      IP: efi_bgrt_init+0xdc/0x134
    
      [...]
    
      ---[ end Kernel panic - not syncing: Attempted to kill the idle task!
    
    ... which was introduced by:
    
      7b0a911478c7 ("efi/x86: Move the EFI BGRT init code to early init code")
    
    The cause is that on this machine the firmware provides the EFI ACPI BGRT
    table even on legacy non-EFI bootups - which table should be EFI only.
    
    The garbage BGRT data causes the efi_bgrt_init() panic.
    
    Add a check to skip efi_bgrt_init() in case non-EFI bootup to work around
    this firmware bug.
    
    Tested-by: Sabrina Dubroca <sd@queasysnail.net>
    Signed-off-by: Dave Young <dyoung@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Signed-off-by: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: <stable@vger.kernel.org> # v4.11+
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 7b0a911478c7 ("efi/x86: Move the EFI BGRT init code to early init code")
    Link: http://lkml.kernel.org/r/20170526113652.21339-6-matt@codeblueprint.co.uk
    [ Rewrote the changelog to be more readable. ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
index 04ca8764f0c0..8bf27323f7a3 100644
--- a/drivers/firmware/efi/efi-bgrt.c
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -36,6 +36,9 @@ void __init efi_bgrt_init(struct acpi_table_header *table)
 	if (acpi_disabled)
 		return;
 
+	if (!efi_enabled(EFI_BOOT))
+		return;
+
 	if (table->length < sizeof(bgrt_tab)) {
 		pr_notice("Ignoring BGRT: invalid length %u (expected %zu)\n",
 		       table->length, sizeof(bgrt_tab));

commit 75def552bb1e0d39918df31b86f7d09e754ea0fc
Author: Bhupesh Sharma <bhsharma@redhat.com>
Date:   Tue Apr 4 17:02:40 2017 +0100

    x86/efi/bgrt: Move efi-bgrt handling out of arch/x86
    
    Now with open-source boot firmware (EDK2) supporting ACPI BGRT table
    addition even for architectures like AARCH64, it makes sense to move
    out the 'efi-bgrt.c' file and supporting infrastructure from 'arch/x86'
    directory and house it inside 'drivers/firmware/efi', so that this common
    code can be used across architectures.
    
    Signed-off-by: Bhupesh Sharma <bhsharma@redhat.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Link: http://lkml.kernel.org/r/20170404160245.27812-7-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

diff --git a/drivers/firmware/efi/efi-bgrt.c b/drivers/firmware/efi/efi-bgrt.c
new file mode 100644
index 000000000000..04ca8764f0c0
--- /dev/null
+++ b/drivers/firmware/efi/efi-bgrt.c
@@ -0,0 +1,84 @@
+/*
+ * Copyright 2012 Intel Corporation
+ * Author: Josh Triplett <josh@joshtriplett.org>
+ *
+ * Based on the bgrt driver:
+ * Copyright 2012 Red Hat, Inc <mjg@redhat.com>
+ * Author: Matthew Garrett
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/acpi.h>
+#include <linux/efi.h>
+#include <linux/efi-bgrt.h>
+
+struct acpi_table_bgrt bgrt_tab;
+size_t __initdata bgrt_image_size;
+
+struct bmp_header {
+	u16 id;
+	u32 size;
+} __packed;
+
+void __init efi_bgrt_init(struct acpi_table_header *table)
+{
+	void *image;
+	struct bmp_header bmp_header;
+	struct acpi_table_bgrt *bgrt = &bgrt_tab;
+
+	if (acpi_disabled)
+		return;
+
+	if (table->length < sizeof(bgrt_tab)) {
+		pr_notice("Ignoring BGRT: invalid length %u (expected %zu)\n",
+		       table->length, sizeof(bgrt_tab));
+		return;
+	}
+	*bgrt = *(struct acpi_table_bgrt *)table;
+	if (bgrt->version != 1) {
+		pr_notice("Ignoring BGRT: invalid version %u (expected 1)\n",
+		       bgrt->version);
+		goto out;
+	}
+	if (bgrt->status & 0xfe) {
+		pr_notice("Ignoring BGRT: reserved status bits are non-zero %u\n",
+		       bgrt->status);
+		goto out;
+	}
+	if (bgrt->image_type != 0) {
+		pr_notice("Ignoring BGRT: invalid image type %u (expected 0)\n",
+		       bgrt->image_type);
+		goto out;
+	}
+	if (!bgrt->image_address) {
+		pr_notice("Ignoring BGRT: null image address\n");
+		goto out;
+	}
+
+	image = early_memremap(bgrt->image_address, sizeof(bmp_header));
+	if (!image) {
+		pr_notice("Ignoring BGRT: failed to map image header memory\n");
+		goto out;
+	}
+
+	memcpy(&bmp_header, image, sizeof(bmp_header));
+	early_memunmap(image, sizeof(bmp_header));
+	if (bmp_header.id != 0x4d42) {
+		pr_notice("Ignoring BGRT: Incorrect BMP magic number 0x%x (expected 0x4d42)\n",
+			bmp_header.id);
+		goto out;
+	}
+	bgrt_image_size = bmp_header.size;
+	efi_mem_reserve(bgrt->image_address, bgrt_image_size);
+
+	return;
+out:
+	memset(bgrt, 0, sizeof(bgrt_tab));
+}
