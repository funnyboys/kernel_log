commit 263e38f82cbb35bf59727a2375099482dc3331da
Author: Andrew F. Davis <afd@ti.com>
Date:   Mon Dec 16 08:34:05 2019 -0500

    dma-buf: heaps: Remove redundant heap identifier from system heap name
    
    The heaps are already in a directory of heaps, adding _heap to a heap
    name is redundant. This patch is only a name change, no logic is changed.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191216133405.1001-3-afd@ti.com

diff --git a/drivers/dma-buf/heaps/system_heap.c b/drivers/dma-buf/heaps/system_heap.c
index 1aa01e98c595..0bf688e3c023 100644
--- a/drivers/dma-buf/heaps/system_heap.c
+++ b/drivers/dma-buf/heaps/system_heap.c
@@ -109,7 +109,7 @@ static int system_heap_create(void)
 	struct dma_heap_export_info exp_info;
 	int ret = 0;
 
-	exp_info.name = "system_heap";
+	exp_info.name = "system";
 	exp_info.ops = &system_heap_ops;
 	exp_info.priv = NULL;
 

commit efa04fefebbd724ffda7f49e42d057a7217c45b0
Author: John Stultz <john.stultz@linaro.org>
Date:   Tue Dec 3 17:26:39 2019 +0000

    dma-buf: heaps: Add system heap to dmabuf heaps
    
    This patch adds system heap to the dma-buf heaps framework.
    
    This allows applications to get a page-allocator backed dma-buf
    for non-contiguous memory.
    
    This code is an evolution of the Android ION implementation, so
    thanks to its original authors and maintainters:
      Rebecca Schultz Zavin, Colin Cross, Laura Abbott, and others!
    
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Liam Mark <lmark@codeaurora.org>
    Cc: Pratik Patel <pratikp@codeaurora.org>
    Cc: Brian Starkey <Brian.Starkey@arm.com>
    Cc: Vincent Donnefort <Vincent.Donnefort@arm.com>
    Cc: Sudipto Paul <Sudipto.Paul@arm.com>
    Cc: Andrew F. Davis <afd@ti.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Chenbo Feng <fengc@google.com>
    Cc: Alistair Strachan <astrachan@google.com>
    Cc: Hridya Valsaraju <hridya@google.com>
    Cc: Sandeep Patil <sspatil@google.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: Dave Airlie <airlied@gmail.com>
    Cc: dri-devel@lists.freedesktop.org
    Reviewed-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Reviewed-by: Brian Starkey <brian.starkey@arm.com>
    Acked-by: Sandeep Patil <sspatil@android.com>
    Acked-by: Laura Abbott <labbott@redhat.com>
    Tested-by: Ayan Kumar Halder <ayan.halder@arm.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191203172641.66642-4-john.stultz@linaro.org

diff --git a/drivers/dma-buf/heaps/system_heap.c b/drivers/dma-buf/heaps/system_heap.c
new file mode 100644
index 000000000000..1aa01e98c595
--- /dev/null
+++ b/drivers/dma-buf/heaps/system_heap.c
@@ -0,0 +1,123 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * DMABUF System heap exporter
+ *
+ * Copyright (C) 2011 Google, Inc.
+ * Copyright (C) 2019 Linaro Ltd.
+ */
+
+#include <linux/dma-buf.h>
+#include <linux/dma-mapping.h>
+#include <linux/dma-heap.h>
+#include <linux/err.h>
+#include <linux/highmem.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/scatterlist.h>
+#include <linux/slab.h>
+#include <linux/sched/signal.h>
+#include <asm/page.h>
+
+#include "heap-helpers.h"
+
+struct dma_heap *sys_heap;
+
+static void system_heap_free(struct heap_helper_buffer *buffer)
+{
+	pgoff_t pg;
+
+	for (pg = 0; pg < buffer->pagecount; pg++)
+		__free_page(buffer->pages[pg]);
+	kfree(buffer->pages);
+	kfree(buffer);
+}
+
+static int system_heap_allocate(struct dma_heap *heap,
+				unsigned long len,
+				unsigned long fd_flags,
+				unsigned long heap_flags)
+{
+	struct heap_helper_buffer *helper_buffer;
+	struct dma_buf *dmabuf;
+	int ret = -ENOMEM;
+	pgoff_t pg;
+
+	helper_buffer = kzalloc(sizeof(*helper_buffer), GFP_KERNEL);
+	if (!helper_buffer)
+		return -ENOMEM;
+
+	init_heap_helper_buffer(helper_buffer, system_heap_free);
+	helper_buffer->heap = heap;
+	helper_buffer->size = len;
+
+	helper_buffer->pagecount = len / PAGE_SIZE;
+	helper_buffer->pages = kmalloc_array(helper_buffer->pagecount,
+					     sizeof(*helper_buffer->pages),
+					     GFP_KERNEL);
+	if (!helper_buffer->pages) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	for (pg = 0; pg < helper_buffer->pagecount; pg++) {
+		/*
+		 * Avoid trying to allocate memory if the process
+		 * has been killed by by SIGKILL
+		 */
+		if (fatal_signal_pending(current))
+			goto err1;
+
+		helper_buffer->pages[pg] = alloc_page(GFP_KERNEL | __GFP_ZERO);
+		if (!helper_buffer->pages[pg])
+			goto err1;
+	}
+
+	/* create the dmabuf */
+	dmabuf = heap_helper_export_dmabuf(helper_buffer, fd_flags);
+	if (IS_ERR(dmabuf)) {
+		ret = PTR_ERR(dmabuf);
+		goto err1;
+	}
+
+	helper_buffer->dmabuf = dmabuf;
+
+	ret = dma_buf_fd(dmabuf, fd_flags);
+	if (ret < 0) {
+		dma_buf_put(dmabuf);
+		/* just return, as put will call release and that will free */
+		return ret;
+	}
+
+	return ret;
+
+err1:
+	while (pg > 0)
+		__free_page(helper_buffer->pages[--pg]);
+	kfree(helper_buffer->pages);
+err0:
+	kfree(helper_buffer);
+
+	return ret;
+}
+
+static const struct dma_heap_ops system_heap_ops = {
+	.allocate = system_heap_allocate,
+};
+
+static int system_heap_create(void)
+{
+	struct dma_heap_export_info exp_info;
+	int ret = 0;
+
+	exp_info.name = "system_heap";
+	exp_info.ops = &system_heap_ops;
+	exp_info.priv = NULL;
+
+	sys_heap = dma_heap_add(&exp_info);
+	if (IS_ERR(sys_heap))
+		ret = PTR_ERR(sys_heap);
+
+	return ret;
+}
+module_init(system_heap_create);
+MODULE_LICENSE("GPL v2");

commit d59c5e025081a4c1f4528010524a37ddc5a986be
Author: Sean Paul <seanpaul@chromium.org>
Date:   Wed Oct 30 16:29:52 2019 -0400

    Revert "dma-buf: heaps: Add system heap to dmabuf heaps"
    
    This reverts commit 47a32f9c12266d450b92089148c6039591bd9909.
    
    This patchset doesn't meet the UAPI requirements set out in [1] for the DRM
    subsystem. Once the userspace component is reviewed and ready for merge
    we can try again.
    
    [1]- https://01.org/linuxgraphics/gfx-docs/drm/gpu/drm-uapi.html#open-source-userspace-requirements
    
    Fixes: 47a32f9c1226 ("dma-buf: heaps: Add system heap to dmabuf heaps")
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Liam Mark <lmark@codeaurora.org>
    Cc: Pratik Patel <pratikp@codeaurora.org>
    Cc: Brian Starkey <Brian.Starkey@arm.com>
    Cc: Vincent Donnefort <Vincent.Donnefort@arm.com>
    Cc: Sudipto Paul <Sudipto.Paul@arm.com>
    Cc: Andrew F. Davis <afd@ti.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Chenbo Feng <fengc@google.com>
    Cc: Alistair Strachan <astrachan@google.com>
    Cc: Hridya Valsaraju <hridya@google.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: dri-devel@lists.freedesktop.org
    Cc: Brian Starkey <brian.starkey@arm.com>
    Cc: John Stultz <john.stultz@linaro.org>
    Cc: "Andrew F. Davis" <afd@ti.com>
    Cc: linux-media@vger.kernel.org
    Cc: linaro-mm-sig@lists.linaro.org
    Acked-by: David Airlie <airlied@linux.ie>
    Signed-off-by: Sean Paul <sean@poorly.run>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191030203003.101156-4-sean@poorly.run

diff --git a/drivers/dma-buf/heaps/system_heap.c b/drivers/dma-buf/heaps/system_heap.c
deleted file mode 100644
index 455782efbb32..000000000000
--- a/drivers/dma-buf/heaps/system_heap.c
+++ /dev/null
@@ -1,124 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * DMABUF System heap exporter
- *
- * Copyright (C) 2011 Google, Inc.
- * Copyright (C) 2019 Linaro Ltd.
- */
-
-#include <linux/dma-buf.h>
-#include <linux/dma-mapping.h>
-#include <linux/dma-heap.h>
-#include <linux/err.h>
-#include <linux/highmem.h>
-#include <linux/mm.h>
-#include <linux/module.h>
-#include <linux/scatterlist.h>
-#include <linux/slab.h>
-#include <linux/sched/signal.h>
-#include <asm/page.h>
-
-#include "heap-helpers.h"
-
-struct dma_heap *sys_heap;
-
-static void system_heap_free(struct heap_helper_buffer *buffer)
-{
-	pgoff_t pg;
-
-	for (pg = 0; pg < buffer->pagecount; pg++)
-		__free_page(buffer->pages[pg]);
-	kfree(buffer->pages);
-	kfree(buffer);
-}
-
-static int system_heap_allocate(struct dma_heap *heap,
-				unsigned long len,
-				unsigned long fd_flags,
-				unsigned long heap_flags)
-{
-	struct heap_helper_buffer *helper_buffer;
-	struct dma_buf *dmabuf;
-	int ret = -ENOMEM;
-	pgoff_t pg;
-
-	helper_buffer = kzalloc(sizeof(*helper_buffer), GFP_KERNEL);
-	if (!helper_buffer)
-		return -ENOMEM;
-
-	init_heap_helper_buffer(helper_buffer, system_heap_free);
-	helper_buffer->flags = heap_flags;
-	helper_buffer->heap = heap;
-	helper_buffer->size = len;
-
-	helper_buffer->pagecount = len / PAGE_SIZE;
-	helper_buffer->pages = kmalloc_array(helper_buffer->pagecount,
-					     sizeof(*helper_buffer->pages),
-					     GFP_KERNEL);
-	if (!helper_buffer->pages) {
-		ret = -ENOMEM;
-		goto err0;
-	}
-
-	for (pg = 0; pg < helper_buffer->pagecount; pg++) {
-		/*
-		 * Avoid trying to allocate memory if the process
-		 * has been killed by by SIGKILL
-		 */
-		if (fatal_signal_pending(current))
-			goto err1;
-
-		helper_buffer->pages[pg] = alloc_page(GFP_KERNEL | __GFP_ZERO);
-		if (!helper_buffer->pages[pg])
-			goto err1;
-	}
-
-	/* create the dmabuf */
-	dmabuf = heap_helper_export_dmabuf(helper_buffer, fd_flags);
-	if (IS_ERR(dmabuf)) {
-		ret = PTR_ERR(dmabuf);
-		goto err1;
-	}
-
-	helper_buffer->dmabuf = dmabuf;
-
-	ret = dma_buf_fd(dmabuf, fd_flags);
-	if (ret < 0) {
-		dma_buf_put(dmabuf);
-		/* just return, as put will call release and that will free */
-		return ret;
-	}
-
-	return ret;
-
-err1:
-	while (pg > 0)
-		__free_page(helper_buffer->pages[--pg]);
-	kfree(helper_buffer->pages);
-err0:
-	kfree(helper_buffer);
-
-	return -ENOMEM;
-}
-
-static const struct dma_heap_ops system_heap_ops = {
-	.allocate = system_heap_allocate,
-};
-
-static int system_heap_create(void)
-{
-	struct dma_heap_export_info exp_info;
-	int ret = 0;
-
-	exp_info.name = "system_heap";
-	exp_info.ops = &system_heap_ops;
-	exp_info.priv = NULL;
-
-	sys_heap = dma_heap_add(&exp_info);
-	if (IS_ERR(sys_heap))
-		ret = PTR_ERR(sys_heap);
-
-	return ret;
-}
-module_init(system_heap_create);
-MODULE_LICENSE("GPL v2");

commit 47a32f9c12266d450b92089148c6039591bd9909
Author: John Stultz <john.stultz@linaro.org>
Date:   Mon Oct 21 19:03:08 2019 +0000

    dma-buf: heaps: Add system heap to dmabuf heaps
    
    This patch adds system heap to the dma-buf heaps framework.
    
    This allows applications to get a page-allocator backed dma-buf
    for non-contiguous memory.
    
    This code is an evolution of the Android ION implementation, so
    thanks to its original authors and maintainters:
      Rebecca Schultz Zavin, Colin Cross, Laura Abbott, and others!
    
    Cc: Laura Abbott <labbott@redhat.com>
    Cc: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Cc: Sumit Semwal <sumit.semwal@linaro.org>
    Cc: Liam Mark <lmark@codeaurora.org>
    Cc: Pratik Patel <pratikp@codeaurora.org>
    Cc: Brian Starkey <Brian.Starkey@arm.com>
    Cc: Vincent Donnefort <Vincent.Donnefort@arm.com>
    Cc: Sudipto Paul <Sudipto.Paul@arm.com>
    Cc: Andrew F. Davis <afd@ti.com>
    Cc: Christoph Hellwig <hch@infradead.org>
    Cc: Chenbo Feng <fengc@google.com>
    Cc: Alistair Strachan <astrachan@google.com>
    Cc: Hridya Valsaraju <hridya@google.com>
    Cc: Hillf Danton <hdanton@sina.com>
    Cc: dri-devel@lists.freedesktop.org
    Reviewed-by: Benjamin Gaignard <benjamin.gaignard@linaro.org>
    Reviewed-by: Brian Starkey <brian.starkey@arm.com>
    Acked-by: Laura Abbott <labbott@redhat.com>
    Tested-by: Ayan Kumar Halder <ayan.halder@arm.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Sumit Semwal <sumit.semwal@linaro.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191021190310.85221-4-john.stultz@linaro.org

diff --git a/drivers/dma-buf/heaps/system_heap.c b/drivers/dma-buf/heaps/system_heap.c
new file mode 100644
index 000000000000..455782efbb32
--- /dev/null
+++ b/drivers/dma-buf/heaps/system_heap.c
@@ -0,0 +1,124 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * DMABUF System heap exporter
+ *
+ * Copyright (C) 2011 Google, Inc.
+ * Copyright (C) 2019 Linaro Ltd.
+ */
+
+#include <linux/dma-buf.h>
+#include <linux/dma-mapping.h>
+#include <linux/dma-heap.h>
+#include <linux/err.h>
+#include <linux/highmem.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/scatterlist.h>
+#include <linux/slab.h>
+#include <linux/sched/signal.h>
+#include <asm/page.h>
+
+#include "heap-helpers.h"
+
+struct dma_heap *sys_heap;
+
+static void system_heap_free(struct heap_helper_buffer *buffer)
+{
+	pgoff_t pg;
+
+	for (pg = 0; pg < buffer->pagecount; pg++)
+		__free_page(buffer->pages[pg]);
+	kfree(buffer->pages);
+	kfree(buffer);
+}
+
+static int system_heap_allocate(struct dma_heap *heap,
+				unsigned long len,
+				unsigned long fd_flags,
+				unsigned long heap_flags)
+{
+	struct heap_helper_buffer *helper_buffer;
+	struct dma_buf *dmabuf;
+	int ret = -ENOMEM;
+	pgoff_t pg;
+
+	helper_buffer = kzalloc(sizeof(*helper_buffer), GFP_KERNEL);
+	if (!helper_buffer)
+		return -ENOMEM;
+
+	init_heap_helper_buffer(helper_buffer, system_heap_free);
+	helper_buffer->flags = heap_flags;
+	helper_buffer->heap = heap;
+	helper_buffer->size = len;
+
+	helper_buffer->pagecount = len / PAGE_SIZE;
+	helper_buffer->pages = kmalloc_array(helper_buffer->pagecount,
+					     sizeof(*helper_buffer->pages),
+					     GFP_KERNEL);
+	if (!helper_buffer->pages) {
+		ret = -ENOMEM;
+		goto err0;
+	}
+
+	for (pg = 0; pg < helper_buffer->pagecount; pg++) {
+		/*
+		 * Avoid trying to allocate memory if the process
+		 * has been killed by by SIGKILL
+		 */
+		if (fatal_signal_pending(current))
+			goto err1;
+
+		helper_buffer->pages[pg] = alloc_page(GFP_KERNEL | __GFP_ZERO);
+		if (!helper_buffer->pages[pg])
+			goto err1;
+	}
+
+	/* create the dmabuf */
+	dmabuf = heap_helper_export_dmabuf(helper_buffer, fd_flags);
+	if (IS_ERR(dmabuf)) {
+		ret = PTR_ERR(dmabuf);
+		goto err1;
+	}
+
+	helper_buffer->dmabuf = dmabuf;
+
+	ret = dma_buf_fd(dmabuf, fd_flags);
+	if (ret < 0) {
+		dma_buf_put(dmabuf);
+		/* just return, as put will call release and that will free */
+		return ret;
+	}
+
+	return ret;
+
+err1:
+	while (pg > 0)
+		__free_page(helper_buffer->pages[--pg]);
+	kfree(helper_buffer->pages);
+err0:
+	kfree(helper_buffer);
+
+	return -ENOMEM;
+}
+
+static const struct dma_heap_ops system_heap_ops = {
+	.allocate = system_heap_allocate,
+};
+
+static int system_heap_create(void)
+{
+	struct dma_heap_export_info exp_info;
+	int ret = 0;
+
+	exp_info.name = "system_heap";
+	exp_info.ops = &system_heap_ops;
+	exp_info.priv = NULL;
+
+	sys_heap = dma_heap_add(&exp_info);
+	if (IS_ERR(sys_heap))
+		ret = PTR_ERR(sys_heap);
+
+	return ret;
+}
+module_init(system_heap_create);
+MODULE_LICENSE("GPL v2");
