commit 1802d0beecafe581ad584634ba92f8a471d8a63a
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:21 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 174
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation this program is
      distributed in the hope that it will be useful but without any
      warranty without even the implied warranty of merchantability or
      fitness for a particular purpose see the gnu general public license
      for more details
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 655 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Richard Fontana <rfontana@redhat.com>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070034.575739538@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/gpu/drm/arc/arcpgu.h b/drivers/gpu/drm/arc/arcpgu.h
index 90ef76b19f8a..6aac44b953ad 100644
--- a/drivers/gpu/drm/arc/arcpgu.h
+++ b/drivers/gpu/drm/arc/arcpgu.h
@@ -1,17 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * ARC PGU DRM driver.
  *
  * Copyright (C) 2016 Synopsys, Inc. (www.synopsys.com)
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
  */
 
 #ifndef _ARCPGU_H_

commit c638f341c8bda95725ee39ae5c24ad07043fc58e
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Thu Oct 25 22:13:32 2018 +0200

    drm/arc: Use drm_fbdev_generic_setup()
    
    The CMA helper is already using the drm_fb_helper_generic_probe part of
    the generic fbdev emulation. This patch makes full use of the generic
    fbdev emulation by using its drm_client callbacks. This means that
    drm_mode_config_funcs->output_poll_changed and drm_driver->lastclose are
    now handled by the emulation code. Additionally fbdev unregister happens
    automatically on drm_dev_unregister().
    
    The drm_fbdev_generic_setup() call is put after drm_dev_register() in the
    driver. This is done to highlight the fact that fbdev emulation is an
    internal client that makes use of the driver, it is not part of the
    driver as such. If fbdev setup fails, an error is printed, but the driver
    succeeds probing.
    
    Cc: Alexey Brodkin <abrodkin@synopsys.com>
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Acked-by: Alexey Brodkin <abrodkin@synopsys.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181025201340.34227-2-noralf@tronnes.org

diff --git a/drivers/gpu/drm/arc/arcpgu.h b/drivers/gpu/drm/arc/arcpgu.h
index e8fcf3ab1d9a..90ef76b19f8a 100644
--- a/drivers/gpu/drm/arc/arcpgu.h
+++ b/drivers/gpu/drm/arc/arcpgu.h
@@ -20,7 +20,6 @@
 struct arcpgu_drm_private {
 	void __iomem		*regs;
 	struct clk		*clk;
-	struct drm_fbdev_cma	*fbdev;
 	struct drm_framebuffer	*fb;
 	struct drm_crtc		crtc;
 	struct drm_plane	*plane;
@@ -43,8 +42,5 @@ static inline u32 arc_pgu_read(struct arcpgu_drm_private *arcpgu,
 int arc_pgu_setup_crtc(struct drm_device *dev);
 int arcpgu_drm_hdmi_init(struct drm_device *drm, struct device_node *np);
 int arcpgu_drm_sim_init(struct drm_device *drm, struct device_node *np);
-struct drm_fbdev_cma *arcpgu_fbdev_cma_init(struct drm_device *dev,
-	unsigned int preferred_bpp, unsigned int num_crtc,
-	unsigned int max_conn_count);
 
 #endif

commit a0877f52035280370707bdefeddc6faa6478b892
Merge: 27287abb4429 7deef7f1ae5d
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Jun 16 05:49:32 2016 +1000

    Merge tag 'topic/drm-misc-2016-06-15' of git://anongit.freedesktop.org/drm-intel into drm-next
    
    - best_encoder cleanup from Boris.
    - drm_simple_display_pipe helpers from Noralf. Looks really neat imo, and
      there's 2-3 in-flight drivers which look like they could/should use it.
      Anyway, with this we have now helpers and everything in place to write
      drivers for simple hw with fewer complexity in the driver than what
      fbdev would need. That was the last complaint I've heard from embedded
      folks after we made atomic happen. Mission accomplished!
    - nonblocking commit helpers for atomic, plus a bunch of driver patches
      for that.
    - Prep patch from Laurent for cleaned up pixel format functions.
    - More of Gustavo's cleanup for drm vblank functions.
    - and a few oddball things in between
    
    Plus the merge of docs-next to prep the docbook->sphinx conversion as
    discussed. Jon cc'ed as fyi.
    
    * tag 'topic/drm-misc-2016-06-15' of git://anongit.freedesktop.org/drm-intel: (108 commits)
      drm/atomic-helpers: Clear up cleanup_done a bit
      drm/atomic-helpers: Stall on the right commit
      drm/vmwgfx: use *_32_bits() macros
      drm/virtio: Don't reinvent a flipping wheel
      drm/i915: Fix missing unlock on error in i915_ppgtt_info()
      drm/gma500: use drm_crtc_vblank_{on,off}()
      drm/radeon: use crtc directly in drm_crtc_vblank_put()
      drm/amdgpu: use crtc directly in drm_crtc_vblank_put()
      drm/radeon: use drm_crtc_vblank_{on,off}()
      drm/amdgpu: use drm_crtc_vblank_{on,off}()
      drm: make drm_vblank_{get,put}() static
      drm: remove legacy drm_arm_vblank_event()
      drm: remove legacy drm_send_vblank_event()
      drm/nouveau: replace legacy vblank helpers
      drm/prime: fix error path deadlock fail
      drm/dsi: Add uevent callback
      drm: fb: cma: fix memory leak
      drm: i915: Rely on the default ->best_encoder() behavior where appropriate
      drm: Add helper for simple display pipeline
      drm/bridge: dw-hdmi: Use drm_atomic_helper_best_encoder()
      ...

commit a189d28e5edea70f20995547ddc84c79b2f76c03
Author: Ruud Derwig <rderwig@synopsys.com>
Date:   Mon Jun 6 10:47:46 2016 +0300

    drm/arcpgu: Make ARC PGU usable on simulation platforms
    
    In case of simulation there's no real encoder/transmitter device
    because in the model's virtual LCD  we're rendering whatever
    appears in frame-buffer memory.
    
    Signed-off-by: Ruud Derwig <rderwig@synopsys.com>
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>

diff --git a/drivers/gpu/drm/arc/arcpgu.h b/drivers/gpu/drm/arc/arcpgu.h
index 86574b698a78..329ac7570911 100644
--- a/drivers/gpu/drm/arc/arcpgu.h
+++ b/drivers/gpu/drm/arc/arcpgu.h
@@ -43,6 +43,7 @@ static inline u32 arc_pgu_read(struct arcpgu_drm_private *arcpgu,
 
 int arc_pgu_setup_crtc(struct drm_device *dev);
 int arcpgu_drm_hdmi_init(struct drm_device *drm, struct device_node *np);
+int arcpgu_drm_sim_init(struct drm_device *drm, struct device_node *np);
 struct drm_fbdev_cma *arcpgu_fbdev_cma_init(struct drm_device *dev,
 	unsigned int preferred_bpp, unsigned int num_crtc,
 	unsigned int max_conn_count);

commit ed4f885657fe7e9bfec3d86a2b426da1e0d0c5de
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Jun 8 14:18:54 2016 +0200

    drm/arc: Nuke event_list
    
    This is just used for cleanup in preclose, and with the reworked event
    handling code this is now done properly by the core.
    
    Nuke it!
    
    But it also shows that arc totally fails at sending out drm events for
    flips. Next patch will hack that up.
    
    v2: Rebase it!
    
    Cc: Carlos Palminha <palminha@synopsys.com>
    Cc: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: linux-snps-arc@lists.infradead.org
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465388359-8070-2-git-send-email-daniel.vetter@ffwll.ch

diff --git a/drivers/gpu/drm/arc/arcpgu.h b/drivers/gpu/drm/arc/arcpgu.h
index 86574b698a78..8c01a25d279a 100644
--- a/drivers/gpu/drm/arc/arcpgu.h
+++ b/drivers/gpu/drm/arc/arcpgu.h
@@ -22,7 +22,6 @@ struct arcpgu_drm_private {
 	struct clk		*clk;
 	struct drm_fbdev_cma	*fbdev;
 	struct drm_framebuffer	*fb;
-	struct list_head	event_list;
 	struct drm_crtc		crtc;
 	struct drm_plane	*plane;
 };

commit 51dacf208988e5a2561d9b4b560cacc8a7f025e7
Author: Carlos Palminha <palminha@synopsys.com>
Date:   Fri Feb 19 15:30:26 2016 +0300

    drm: Add support of ARC PGU display controller
    
    ARC PGU could be found on some development boards from Synopsys.
    This is a simple byte streamer that reads data from a framebuffer
    and sends data to the single encoder.
    
    Signed-off-by: Carlos Palminha <palminha@synopsys.com>
    Signed-off-by: Alexey Brodkin <abrodkin@synopsys.com>
    Cc: David Airlie <airlied@linux.ie>
    Cc: dri-devel@lists.freedesktop.org
    Cc: linux-snps-arc@lists.infradead.org

diff --git a/drivers/gpu/drm/arc/arcpgu.h b/drivers/gpu/drm/arc/arcpgu.h
new file mode 100644
index 000000000000..86574b698a78
--- /dev/null
+++ b/drivers/gpu/drm/arc/arcpgu.h
@@ -0,0 +1,50 @@
+/*
+ * ARC PGU DRM driver.
+ *
+ * Copyright (C) 2016 Synopsys, Inc. (www.synopsys.com)
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef _ARCPGU_H_
+#define _ARCPGU_H_
+
+struct arcpgu_drm_private {
+	void __iomem		*regs;
+	struct clk		*clk;
+	struct drm_fbdev_cma	*fbdev;
+	struct drm_framebuffer	*fb;
+	struct list_head	event_list;
+	struct drm_crtc		crtc;
+	struct drm_plane	*plane;
+};
+
+#define crtc_to_arcpgu_priv(x) container_of(x, struct arcpgu_drm_private, crtc)
+
+static inline void arc_pgu_write(struct arcpgu_drm_private *arcpgu,
+				 unsigned int reg, u32 value)
+{
+	iowrite32(value, arcpgu->regs + reg);
+}
+
+static inline u32 arc_pgu_read(struct arcpgu_drm_private *arcpgu,
+			       unsigned int reg)
+{
+	return ioread32(arcpgu->regs + reg);
+}
+
+int arc_pgu_setup_crtc(struct drm_device *dev);
+int arcpgu_drm_hdmi_init(struct drm_device *drm, struct device_node *np);
+struct drm_fbdev_cma *arcpgu_fbdev_cma_init(struct drm_device *dev,
+	unsigned int preferred_bpp, unsigned int num_crtc,
+	unsigned int max_conn_count);
+
+#endif
