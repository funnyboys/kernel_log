commit 7a00e68b431716d9258cbf4dc72c307ac39e8733
Author: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
Date:   Thu May 14 09:07:32 2020 +0300

    drm/i915/psr: Use new DP VSC SDP compute routine on PSR
    
    In order to use a common VSC SDP Colorimetry calculating code on PSR,
    it uses a new psr vsc sdp compute routine.
    Because PSR routine has its own scenario and timings of writing a VSC SDP,
    the current PSR routine needs to have its own drm_dp_vsc_sdp structure
    member variable on struct i915_psr.
    
    In order to calculate colorimetry information, intel_psr_update()
    function and intel_psr_enable() function extend a drm_connector_state
    argument.
    
    There are no changes to PSR mechanism.
    
    v3: Replace a structure name to drm_dp_vsc_sdp from intel_dp_vsc_sdp
    v4: Rebased
    v8: Rebased
    v10: When a PSR is enabled, it needs to add DP_SDP_VSC to
         infoframes.enable.
         It is needed for comparing between HW and pipe_state of VSC_SDP.
    v11: If PSR is disabled by flag, it don't enable psr on pipe compute.
    v12: Fix an inconsistent indenting
    
    Signed-off-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200514060732.3378396-15-gwan-gyeong.mun@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_psr.h b/drivers/gpu/drm/i915/display/intel_psr.h
index 274fc6bb6221..b4515186d5f4 100644
--- a/drivers/gpu/drm/i915/display/intel_psr.h
+++ b/drivers/gpu/drm/i915/display/intel_psr.h
@@ -17,11 +17,13 @@ struct intel_dp;
 #define CAN_PSR(dev_priv) (HAS_PSR(dev_priv) && dev_priv->psr.sink_support)
 void intel_psr_init_dpcd(struct intel_dp *intel_dp);
 void intel_psr_enable(struct intel_dp *intel_dp,
-		      const struct intel_crtc_state *crtc_state);
+		      const struct intel_crtc_state *crtc_state,
+		      const struct drm_connector_state *conn_state);
 void intel_psr_disable(struct intel_dp *intel_dp,
 		       const struct intel_crtc_state *old_crtc_state);
 void intel_psr_update(struct intel_dp *intel_dp,
-		      const struct intel_crtc_state *crtc_state);
+		      const struct intel_crtc_state *crtc_state,
+		      const struct drm_connector_state *conn_state);
 int intel_psr_debug_set(struct drm_i915_private *dev_priv, u64 value);
 void intel_psr_invalidate(struct drm_i915_private *dev_priv,
 			  unsigned frontbuffer_bits,

commit df1a5bfc16f3275a74f77d73375e69bc62c45c4b
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Fri Feb 21 13:26:35 2020 -0800

    drm/i915/psr: Force PSR probe only after full initialization
    
    Commit 60c6a14b489b ("drm/i915/display: Force the state compute phase
    once to enable PSR") was forcing the state compute too earlier
    causing errors because not everything was initialized, so here
    moving to the end of i915_driver_modeset_probe() when the display is
    all initialized.
    
    Also fixing the place where it disarm the force probe as during the
    atomic check phase errors could happen like the ones due locking and
    it would cause PSR to never be enabled if that happens.
    Leaving the disarm to the atomic commit phase, intel_psr_enable() or
    intel_psr_update() will be called even if the current state do not
    allow PSR to be enabled.
    
    v2: Check if intel_dp is null in intel_psr_force_mode_changed_set()
    v3: Check intel_dp before get dev_priv
    v4:
    - renamed intel_psr_force_mode_changed_set() to
    intel_psr_set_force_mode_changed()
    - removed the set parameter from intel_psr_set_force_mode_changed()
    - not calling intel_psr_set_force_mode_changed() from
    intel_psr_enable/update(), directly setting it after the same checks
    that intel_psr_set_force_mode_changed() does
    - moved intel_psr_set_force_mode_changed() arm call to
    i915_driver_modeset_probe() as it is a better for a PSR call, all the
    functions calls happening between the old and the new function call
    will cause issue
    
    Fixes: 60c6a14b489b ("drm/i915/display: Force the state compute phase once to enable PSR")
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/1151
    Tested-by: Ross Zwisler <zwisler@google.com>
    Reported-by: Ross Zwisler <zwisler@google.com>
    Cc: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Anshuman Gupta <anshuman.gupta@intel.com>
    Reviewed-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200221212635.11614-1-jose.souza@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_psr.h b/drivers/gpu/drm/i915/display/intel_psr.h
index c58a1d438808..274fc6bb6221 100644
--- a/drivers/gpu/drm/i915/display/intel_psr.h
+++ b/drivers/gpu/drm/i915/display/intel_psr.h
@@ -40,5 +40,6 @@ bool intel_psr_enabled(struct intel_dp *intel_dp);
 void intel_psr_atomic_check(struct drm_connector *connector,
 			    struct drm_connector_state *old_state,
 			    struct drm_connector_state *new_state);
+void intel_psr_set_force_mode_changed(struct intel_dp *intel_dp);
 
 #endif /* __INTEL_PSR_H__ */

commit 60c6a14b489baa0b591d19093ab886bec7f7fe36
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Mon Jan 6 07:21:28 2020 -0800

    drm/i915/display: Force the state compute phase once to enable PSR
    
    Recent improvements in the state tracking in i915 caused PSR to not be
    enabled when reusing firmware/BIOS modeset, this is due to all initial
    commits returning ealier in intel_atomic_check() as needs_modeset()
    is always false.
    
    To fix that here forcing the state compute phase in CRTC that is
    driving the eDP that supports PSR once. Enable or disable PSR do not
    require a fullmodeset, so user will still experience glitch free boot
    process plus the power savings that PSR brings.
    
    It was tried to set mode_changed in intel_initial_commit() but at
    this point the connectors are not registered causing a crash when
    computing encoder state.
    
    v2:
    - removed function return
    - change arguments to match intel_hdcp_atomic_check
    
    v3:
    - replaced drm includes in intel_psr.h by forward declaration(Jani)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=112253
    Reported-by: <s.zharkoff@gmail.com>
    Cc: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200106152128.195171-1-jose.souza@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_psr.h b/drivers/gpu/drm/i915/display/intel_psr.h
index 46e4de8b8cd5..c58a1d438808 100644
--- a/drivers/gpu/drm/i915/display/intel_psr.h
+++ b/drivers/gpu/drm/i915/display/intel_psr.h
@@ -8,6 +8,8 @@
 
 #include "intel_frontbuffer.h"
 
+struct drm_connector;
+struct drm_connector_state;
 struct drm_i915_private;
 struct intel_crtc_state;
 struct intel_dp;
@@ -35,5 +37,8 @@ void intel_psr_short_pulse(struct intel_dp *intel_dp);
 int intel_psr_wait_for_idle(const struct intel_crtc_state *new_crtc_state,
 			    u32 *out_value);
 bool intel_psr_enabled(struct intel_dp *intel_dp);
+void intel_psr_atomic_check(struct drm_connector *connector,
+			    struct drm_connector_state *old_state,
+			    struct drm_connector_state *new_state);
 
 #endif /* __INTEL_PSR_H__ */

commit df7415bfc06f8ee482a510aea39c12121e409dcc
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Tue Aug 20 15:33:25 2019 -0700

    drm/i915: Do not unmask PSR interruption in IRQ postinstall
    
    No need to unmask PSR interrutpion if PSR is not enabled, better move
    the call to intel_psr_enable_source().
    
    v2: Renamed intel_psr_irq_control() to psr_irq_control() (Lucas)
    
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190820223325.27490-3-jose.souza@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_psr.h b/drivers/gpu/drm/i915/display/intel_psr.h
index dc818826f36d..46e4de8b8cd5 100644
--- a/drivers/gpu/drm/i915/display/intel_psr.h
+++ b/drivers/gpu/drm/i915/display/intel_psr.h
@@ -30,7 +30,6 @@ void intel_psr_flush(struct drm_i915_private *dev_priv,
 void intel_psr_init(struct drm_i915_private *dev_priv);
 void intel_psr_compute_config(struct intel_dp *intel_dp,
 			      struct intel_crtc_state *crtc_state);
-void intel_psr_irq_control(struct drm_i915_private *dev_priv, u32 debug);
 void intel_psr_irq_handler(struct drm_i915_private *dev_priv, u32 psr_iir);
 void intel_psr_short_pulse(struct intel_dp *intel_dp);
 int intel_psr_wait_for_idle(const struct intel_crtc_state *new_crtc_state,

commit df0566a641f959108c152be748a0a58794280e0e
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Jun 13 11:44:16 2019 +0300

    drm/i915: move modesetting core code under display/
    
    Now that we have a new subdirectory for display code, continue by moving
    modesetting core code.
    
    display/intel_frontbuffer.h sticks out like a sore thumb, otherwise this
    is, again, a surprisingly clean operation.
    
    v2:
    - don't move intel_sideband.[ch] (Ville)
    - use tabs for Makefile file lists and sort them
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Acked-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Acked-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Acked-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190613084416.6794-3-jani.nikula@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_psr.h b/drivers/gpu/drm/i915/display/intel_psr.h
new file mode 100644
index 000000000000..dc818826f36d
--- /dev/null
+++ b/drivers/gpu/drm/i915/display/intel_psr.h
@@ -0,0 +1,40 @@
+/* SPDX-License-Identifier: MIT */
+/*
+ * Copyright © 2019 Intel Corporation
+ */
+
+#ifndef __INTEL_PSR_H__
+#define __INTEL_PSR_H__
+
+#include "intel_frontbuffer.h"
+
+struct drm_i915_private;
+struct intel_crtc_state;
+struct intel_dp;
+
+#define CAN_PSR(dev_priv) (HAS_PSR(dev_priv) && dev_priv->psr.sink_support)
+void intel_psr_init_dpcd(struct intel_dp *intel_dp);
+void intel_psr_enable(struct intel_dp *intel_dp,
+		      const struct intel_crtc_state *crtc_state);
+void intel_psr_disable(struct intel_dp *intel_dp,
+		       const struct intel_crtc_state *old_crtc_state);
+void intel_psr_update(struct intel_dp *intel_dp,
+		      const struct intel_crtc_state *crtc_state);
+int intel_psr_debug_set(struct drm_i915_private *dev_priv, u64 value);
+void intel_psr_invalidate(struct drm_i915_private *dev_priv,
+			  unsigned frontbuffer_bits,
+			  enum fb_op_origin origin);
+void intel_psr_flush(struct drm_i915_private *dev_priv,
+		     unsigned frontbuffer_bits,
+		     enum fb_op_origin origin);
+void intel_psr_init(struct drm_i915_private *dev_priv);
+void intel_psr_compute_config(struct intel_dp *intel_dp,
+			      struct intel_crtc_state *crtc_state);
+void intel_psr_irq_control(struct drm_i915_private *dev_priv, u32 debug);
+void intel_psr_irq_handler(struct drm_i915_private *dev_priv, u32 psr_iir);
+void intel_psr_short_pulse(struct intel_dp *intel_dp);
+int intel_psr_wait_for_idle(const struct intel_crtc_state *new_crtc_state,
+			    u32 *out_value);
+bool intel_psr_enabled(struct intel_dp *intel_dp);
+
+#endif /* __INTEL_PSR_H__ */
