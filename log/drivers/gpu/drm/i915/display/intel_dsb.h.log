commit ac4eead3796579bdadd12e2fa99c4ddc920eda30
Author: Lucas De Marchi <lucas.demarchi@intel.com>
Date:   Fri Nov 15 17:15:39 2019 -0800

    drm/i915/dsb: remove atomic operations
    
    The current dsb API is not really prepared to handle multithread access.
    I was debugging an issue that ended up fixed by commit a096883dda2c
    ("drm/i915/dsb: Remove PIN_MAPPABLE from the DSB object VMA") and was
    puzzled how these atomic operations were guaranteeing atomicity.
    
            if (atomic_add_return(1, &dsb->refcount) != 1)
                    return dsb;
    
    Thread A could still be initializing dsb struct (and even fail in the
    middle) while thread B would take a reference and use it (even
    derefencing a NULL cmd_buf).
    
    I don't think the atomic operations here will help much if this were
    to support multithreaded scenario in future, so just remove them to
    avoid confusion.
    
    v2: Use refcount++ != 0 instead of ++refcount != 1 (from Ville)
    
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191111205024.22853-2-lucas.demarchi@intel.com
    Link: https://patchwork.freedesktop.org/patch/msgid/20191116011539.18230-1-lucas.demarchi@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_dsb.h b/drivers/gpu/drm/i915/display/intel_dsb.h
index 6f95c8e909e6..395ef9ce558e 100644
--- a/drivers/gpu/drm/i915/display/intel_dsb.h
+++ b/drivers/gpu/drm/i915/display/intel_dsb.h
@@ -22,7 +22,7 @@ enum dsb_id {
 };
 
 struct intel_dsb {
-	atomic_t refcount;
+	long refcount;
 	enum dsb_id id;
 	u32 *cmd_buf;
 	struct i915_vma *vma;

commit 1abf329a713d2772257470873d57794d2404018d
Author: Animesh Manna <animesh.manna@intel.com>
Date:   Fri Sep 20 17:29:27 2019 +0530

    drm/i915/dsb: function to trigger workload execution of DSB.
    
    Batch buffer will be created through dsb-reg-write function which can have
    single/multiple request based on usecase and once the buffer is ready
    commit function will trigger the execution of the batch buffer. All
    the registers will be updated simultaneously.
    
    v1: Initial version.
    v2: Optimized code few places. (Chris)
    v3: USed DRM_ERROR for dsb head/tail programming failure. (Shashank)
    v4: reset ins_start_offset after commit. (Jani)
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Animesh Manna <animesh.manna@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190920115930.27829-8-animesh.manna@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_dsb.h b/drivers/gpu/drm/i915/display/intel_dsb.h
index e4dd0ab799ec..6f95c8e909e6 100644
--- a/drivers/gpu/drm/i915/display/intel_dsb.h
+++ b/drivers/gpu/drm/i915/display/intel_dsb.h
@@ -47,5 +47,6 @@ void intel_dsb_put(struct intel_dsb *dsb);
 void intel_dsb_reg_write(struct intel_dsb *dsb, i915_reg_t reg, u32 val);
 void intel_dsb_indexed_reg_write(struct intel_dsb *dsb, i915_reg_t reg,
 				 u32 val);
+void intel_dsb_commit(struct intel_dsb *dsb);
 
 #endif

commit b27a96ad72fd706adc5dbbfd7bba76f698fe3875
Author: Animesh Manna <animesh.manna@intel.com>
Date:   Fri Sep 20 17:29:24 2019 +0530

    drm/i915/dsb: Indexed register write function for DSB.
    
    DSB can program large set of data through indexed register write
    (opcode 0x9) in one shot. DSB feature can be used for bulk register
    programming e.g. gamma lut programming, HDR meta data programming.
    
    v1: initial version.
    v2: simplified code by using ALIGN(). (Chris)
    v3: ascii table added as code comment. (Shashank)
    v4: cosmetic changes done. (Shashank)
    v5: reset ins_start_offset. (Jani)
    v6: update ins_start_offset in inel_dsb_reg_write.
    
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Animesh Manna <animesh.manna@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190920115930.27829-5-animesh.manna@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_dsb.h b/drivers/gpu/drm/i915/display/intel_dsb.h
index 839cbf621fa2..e4dd0ab799ec 100644
--- a/drivers/gpu/drm/i915/display/intel_dsb.h
+++ b/drivers/gpu/drm/i915/display/intel_dsb.h
@@ -32,11 +32,20 @@ struct intel_dsb {
 	 * and help in calculating tail of command buffer.
 	 */
 	int free_pos;
+
+	/*
+	 * ins_start_offset will help to store start address of the dsb
+	 * instuction and help in identifying the batch of auto-increment
+	 * register.
+	 */
+	u32 ins_start_offset;
 };
 
 struct intel_dsb *
 intel_dsb_get(struct intel_crtc *crtc);
 void intel_dsb_put(struct intel_dsb *dsb);
 void intel_dsb_reg_write(struct intel_dsb *dsb, i915_reg_t reg, u32 val);
+void intel_dsb_indexed_reg_write(struct intel_dsb *dsb, i915_reg_t reg,
+				 u32 val);
 
 #endif

commit 061489c65ff57ee9f757d7a519fb9a09e5fbadd6
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Mon Sep 23 10:09:23 2019 +0300

    drm/i915/dsb: single register write function for DSB.
    
    DSB support single register write through opcode 0x1. Generic
    api created which accumulate all single register write in a batch
    buffer and once DSB is triggered, it will program all the registers
    at the same time.
    
    v1: Initial version.
    v2: Unused macro removed and cosmetic changes done. (Shashank)
    v3: set free_pos to zero in dsb-put() instead dsb-get() and
    a cosmetic change. (Shashank)
    v4: macro of indexed-write is moved. (Shashank)
    
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Animesh Manna <animesh.manna@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190920115930.27829-4-animesh.manna@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_dsb.h b/drivers/gpu/drm/i915/display/intel_dsb.h
index b8639864df50..839cbf621fa2 100644
--- a/drivers/gpu/drm/i915/display/intel_dsb.h
+++ b/drivers/gpu/drm/i915/display/intel_dsb.h
@@ -8,6 +8,8 @@
 
 #include <linux/types.h>
 
+#include "i915_reg.h"
+
 struct intel_crtc;
 struct i915_vma;
 
@@ -24,10 +26,17 @@ struct intel_dsb {
 	enum dsb_id id;
 	u32 *cmd_buf;
 	struct i915_vma *vma;
+
+	/*
+	 * free_pos will point the first free entry position
+	 * and help in calculating tail of command buffer.
+	 */
+	int free_pos;
 };
 
 struct intel_dsb *
 intel_dsb_get(struct intel_crtc *crtc);
 void intel_dsb_put(struct intel_dsb *dsb);
+void intel_dsb_reg_write(struct intel_dsb *dsb, i915_reg_t reg, u32 val);
 
 #endif

commit 67f3b58f3bac975f35c312fd8876edb599cc24be
Author: Animesh Manna <animesh.manna@intel.com>
Date:   Fri Sep 20 17:29:22 2019 +0530

    drm/i915/dsb: DSB context creation.
    
    This patch adds a function, which will internally get the gem buffer
    for DSB engine. The GEM buffer is from global GTT, and is mapped into
    CPU domain, contains the data + opcode to be feed to DSB engine.
    
    v1: Initial version.
    
    v2:
    - removed some unwanted code. (Chris)
    - Used i915_gem_object_create_internal instead of _shmem. (Chris)
    - cmd_buf_tail removed and can be derived through vma object. (Chris)
    
    v3: vma realeased if i915_gem_object_pin_map() failed. (Shashank)
    
    v4: for simplification and based on current usage added single dsb
    object in intel_crtc. (Shashank)
    
    v5: seting NULL to cmd_buf moved outside of mutex in dsb-put(). (Shashank)
    
    v6:
    - refcount machanism added.
    - Used atomic_add_return and atomic_dec_and_test instead of
    atomic_inc and atomic_dec. (Jani)
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Michel Thierry <michel.thierry@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Animesh Manna <animesh.manna@intel.com>
    [Jani: added #include <linux/types.h> while pushing]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190920115930.27829-3-animesh.manna@intel.com

diff --git a/drivers/gpu/drm/i915/display/intel_dsb.h b/drivers/gpu/drm/i915/display/intel_dsb.h
new file mode 100644
index 000000000000..b8639864df50
--- /dev/null
+++ b/drivers/gpu/drm/i915/display/intel_dsb.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: MIT
+ *
+ * Copyright Â© 2019 Intel Corporation
+ */
+
+#ifndef _INTEL_DSB_H
+#define _INTEL_DSB_H
+
+#include <linux/types.h>
+
+struct intel_crtc;
+struct i915_vma;
+
+enum dsb_id {
+	INVALID_DSB = -1,
+	DSB1,
+	DSB2,
+	DSB3,
+	MAX_DSB_PER_PIPE
+};
+
+struct intel_dsb {
+	atomic_t refcount;
+	enum dsb_id id;
+	u32 *cmd_buf;
+	struct i915_vma *vma;
+};
+
+struct intel_dsb *
+intel_dsb_get(struct intel_crtc *crtc);
+void intel_dsb_put(struct intel_dsb *dsb);
+
+#endif
