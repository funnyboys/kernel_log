commit 42d105113018a5c1bd2c86897b1737adf16b3f5f
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Dec 2 20:43:14 2019 +0000

    drm/i915: Lift i915_vma_pin() out of intel_renderstate_emit()
    
    Once inside a request, inside the timeline->mutex, pinning is verboten.
    
    <4> [896.032829] ======================================================
    <4> [896.032831] WARNING: possible circular locking dependency detected
    <4> [896.032835] 5.4.0-rc8-CI-Patchwork_15533+ #1 Tainted: G     U
    <4> [896.032838] ------------------------------------------------------
    <4> [896.032841] gem_exec_parall/3720 is trying to acquire lock:
    <4> [896.032844] ffff888401863270 (&kernel#2){+.+.}, at: i915_request_create+0x16/0x1c0 [i915]
    <4> [896.032915]
    but task is already holding lock:
    <4> [896.032917] ffff8883ec1c93c0 (&vm->mutex){+.+.}, at: i915_vma_pin+0xf3/0x11c0 [i915]
    <4> [896.032952]
    which lock already depends on the new lock.
    
    <4> [896.032954]
    the existing dependency chain (in reverse order) is:
    <4> [896.032956]
    -> #1 (&vm->mutex){+.+.}:
    <4> [896.032961]        __mutex_lock+0x9a/0x9d0
    <4> [896.032995]        i915_vma_pin+0xf3/0x11c0 [i915]
    <4> [896.033033]        intel_renderstate_emit+0xb9/0x9e0 [i915]
    <4> [896.033081]        i915_gem_init+0x5a9/0xa50 [i915]
    <4> [896.033112]        i915_driver_probe+0xb00/0x15f0 [i915]
    <4> [896.033144]        i915_pci_probe+0x43/0x1c0 [i915]
    <4> [896.033149]        pci_device_probe+0x9e/0x120
    <4> [896.033154]        really_probe+0xea/0x420
    <4> [896.033158]        driver_probe_device+0x10b/0x120
    <4> [896.033161]        device_driver_attach+0x4a/0x50
    <4> [896.033164]        __driver_attach+0x97/0x130
    <4> [896.033168]        bus_for_each_dev+0x74/0xc0
    <4> [896.033171]        bus_add_driver+0x142/0x220
    <4> [896.033174]        driver_register+0x56/0xf0
    <4> [896.033178]        do_one_initcall+0x58/0x2ff
    <4> [896.033183]        do_init_module+0x56/0x1f8
    <4> [896.033187]        load_module+0x243e/0x29f0
    <4> [896.033190]        __do_sys_finit_module+0xe9/0x110
    <4> [896.033194]        do_syscall_64+0x4f/0x210
    <4> [896.033197]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    <4> [896.033200]
    -> #0 (&kernel#2){+.+.}:
    <4> [896.033206]        __lock_acquire+0x1328/0x15d0
    <4> [896.033209]        lock_acquire+0xa7/0x1c0
    <4> [896.033213]        __mutex_lock+0x9a/0x9d0
    <4> [896.033255]        i915_request_create+0x16/0x1c0 [i915]
    <4> [896.033287]        intel_engine_flush_barriers+0x4c/0x100 [i915]
    <4> [896.033327]        ggtt_flush+0x37/0x60 [i915]
    <4> [896.033366]        i915_gem_evict_something+0x46b/0x5a0 [i915]
    <4> [896.033407]        i915_gem_gtt_insert+0x21d/0x6a0 [i915]
    <4> [896.033449]        i915_vma_pin+0xb36/0x11c0 [i915]
    <4> [896.033488]        gen6_ppgtt_pin+0xd5/0x170 [i915]
    <4> [896.033523]        ring_context_pin+0x2e/0xc0 [i915]
    <4> [896.033554]        __intel_context_do_pin+0x6b/0x190 [i915]
    <4> [896.033591]        i915_gem_do_execbuffer+0x1814/0x26c0 [i915]
    <4> [896.033627]        i915_gem_execbuffer2_ioctl+0x11b/0x460 [i915]
    <4> [896.033632]        drm_ioctl_kernel+0xa7/0xf0
    <4> [896.033635]        drm_ioctl+0x2e1/0x390
    <4> [896.033638]        do_vfs_ioctl+0xa0/0x6f0
    <4> [896.033641]        ksys_ioctl+0x35/0x60
    <4> [896.033644]        __x64_sys_ioctl+0x11/0x20
    <4> [896.033647]        do_syscall_64+0x4f/0x210
    <4> [896.033650]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    
    Lift the object allocation and pin prior to the request construction.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191202204316.2665847-1-chris@chris-wilson.co.uk

diff --git a/drivers/gpu/drm/i915/gt/intel_renderstate.h b/drivers/gpu/drm/i915/gt/intel_renderstate.h
index 8d5079145054..5700be69a05a 100644
--- a/drivers/gpu/drm/i915/gt/intel_renderstate.h
+++ b/drivers/gpu/drm/i915/gt/intel_renderstate.h
@@ -27,6 +27,8 @@
 #include <linux/types.h>
 
 struct i915_request;
+struct intel_engine_cs;
+struct i915_vma;
 
 struct intel_renderstate_rodata {
 	const u32 *reloc;
@@ -46,6 +48,19 @@ extern const struct intel_renderstate_rodata gen7_null_state;
 extern const struct intel_renderstate_rodata gen8_null_state;
 extern const struct intel_renderstate_rodata gen9_null_state;
 
-int intel_renderstate_emit(struct i915_request *rq);
+struct intel_renderstate {
+	const struct intel_renderstate_rodata *rodata;
+	struct i915_vma *vma;
+	u32 batch_offset;
+	u32 batch_size;
+	u32 aux_offset;
+	u32 aux_size;
+};
+
+int intel_renderstate_init(struct intel_renderstate *so,
+			   struct intel_engine_cs *engine);
+int intel_renderstate_emit(struct intel_renderstate *so,
+			   struct i915_request *rq);
+void intel_renderstate_fini(struct intel_renderstate *so);
 
 #endif /* _INTEL_RENDERSTATE_H_ */

commit 2006058e9988421a113e8edc004a8e0eae1a6d3f
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Jul 4 10:19:25 2019 +0100

    drm/i915: Move the renderstate setup under gt/
    
    The render state is used to initialise the default RCS context, and only
    used during early setup from within the gt code. As such, it makes a
    good candidate for placing within gt/, even if it is not yet entirely
    clean of our GEM heritage.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190704091925.7391-1-chris@chris-wilson.co.uk

diff --git a/drivers/gpu/drm/i915/gt/intel_renderstate.h b/drivers/gpu/drm/i915/gt/intel_renderstate.h
new file mode 100644
index 000000000000..8d5079145054
--- /dev/null
+++ b/drivers/gpu/drm/i915/gt/intel_renderstate.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright Â© 2014 Intel Corporation
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef _INTEL_RENDERSTATE_H_
+#define _INTEL_RENDERSTATE_H_
+
+#include <linux/types.h>
+
+struct i915_request;
+
+struct intel_renderstate_rodata {
+	const u32 *reloc;
+	const u32 *batch;
+	const u32 batch_items;
+};
+
+#define RO_RENDERSTATE(_g)						\
+	const struct intel_renderstate_rodata gen ## _g ## _null_state = { \
+		.reloc = gen ## _g ## _null_state_relocs,		\
+		.batch = gen ## _g ## _null_state_batch,		\
+		.batch_items = sizeof(gen ## _g ## _null_state_batch)/4, \
+	}
+
+extern const struct intel_renderstate_rodata gen6_null_state;
+extern const struct intel_renderstate_rodata gen7_null_state;
+extern const struct intel_renderstate_rodata gen8_null_state;
+extern const struct intel_renderstate_rodata gen9_null_state;
+
+int intel_renderstate_emit(struct i915_request *rq);
+
+#endif /* _INTEL_RENDERSTATE_H_ */
