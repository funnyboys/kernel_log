commit 2e8d8749f6f9bb35b947228271dc9ec31be93335
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Oct 28 13:37:17 2019 +0100

    drm/tegra: Support DMA API for display controllers
    
    If a display controller is not attached to an explicit IOMMU domain,
    which usually means that it's connected to an IOMMU domain controlled by
    the DMA API, make sure to map the framebuffer to the display controller
    address space. This allows us to transparently handle setups where the
    display controller is attached to an IOMMU or setups where it isn't. It
    also allows the driver to work with a DMA API that is backed by an
    IOMMU.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index 510c394e6d9a..a158a915109a 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -39,6 +39,9 @@ struct tegra_plane_legacy_blending_state {
 struct tegra_plane_state {
 	struct drm_plane_state base;
 
+	struct sg_table *sgt[3];
+	dma_addr_t iova[3];
+
 	struct tegra_bo_tiling tiling;
 	u32 format;
 	u32 swap;
@@ -61,6 +64,11 @@ to_tegra_plane_state(struct drm_plane_state *state)
 
 extern const struct drm_plane_funcs tegra_plane_funcs;
 
+int tegra_plane_prepare_fb(struct drm_plane *plane,
+			   struct drm_plane_state *state);
+void tegra_plane_cleanup_fb(struct drm_plane *plane,
+			    struct drm_plane_state *state);
+
 int tegra_plane_state_add(struct tegra_plane *plane,
 			  struct drm_plane_state *state);
 

commit d2912cb15bdda8ba4a5dd73396ad62641af2f520
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Tue Jun 4 10:11:33 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 500
    
    Based on 2 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license version 2 as
      published by the free software foundation #
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-only
    
    has been chosen to replace the boilerplate/reference in 4122 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Enrico Weigelt <info@metux.net>
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190604081206.933168790@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index e79e6b4a8e0a..510c394e6d9a 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -1,9 +1,6 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
  */
 
 #ifndef TEGRA_PLANE_H

commit 995c5a509fb032ddd83eff4f3772c7fc8ff0b7ec
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Mar 19 17:20:46 2018 +0100

    drm/tegra: dc: Support rotation property
    
    Currently only the DRM_MODE_REFLECT_Y rotation is supported. The driver
    already supports reflection on the Y axis via a custom flag which is not
    very useful because it requires custom userspace. Add the standard
    rotation property that supports 0 degree rotation and Y axis reflection
    for primary and overlay planes to provide a better interface than the
    custom flag.
    
    v2: keep custom flag for ABI compatibility (Dmitry)
    
    Reviewed-by: Dmitry Osipenko <digetx@gmail.com>
    Tested-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index 7360ddfafee8..e79e6b4a8e0a 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -46,6 +46,8 @@ struct tegra_plane_state {
 	u32 format;
 	u32 swap;
 
+	bool bottom_up;
+
 	/* used for legacy blending support only */
 	struct tegra_plane_legacy_blending_state blending[2];
 	bool opaque;

commit 3dae08bc076b93487ed2df50bcfa892113e89d9d
Author: Dmitry Osipenko <digetx@gmail.com>
Date:   Fri May 4 17:39:59 2018 +0300

    drm/tegra: plane: Implement zpos plane property for older Tegras
    
    Older Tegra's do not support plane's Z position handling in hardware,
    but the hardware provides knobs to implement it in software.
    
    Signed-off-by: Dmitry Osipenko <digetx@gmail.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index 6938719e7e5d..7360ddfafee8 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -34,6 +34,11 @@ static inline struct tegra_plane *to_tegra_plane(struct drm_plane *plane)
 	return container_of(plane, struct tegra_plane, base);
 }
 
+struct tegra_plane_legacy_blending_state {
+	bool alpha;
+	bool top;
+};
+
 struct tegra_plane_state {
 	struct drm_plane_state base;
 
@@ -42,8 +47,8 @@ struct tegra_plane_state {
 	u32 swap;
 
 	/* used for legacy blending support only */
+	struct tegra_plane_legacy_blending_state blending[2];
 	bool opaque;
-	bool dependent[3];
 };
 
 static inline struct tegra_plane_state *
@@ -62,9 +67,7 @@ int tegra_plane_state_add(struct tegra_plane *plane,
 
 int tegra_plane_format(u32 fourcc, u32 *format, u32 *swap);
 bool tegra_plane_format_is_yuv(unsigned int format, bool *planar);
-bool tegra_plane_format_has_alpha(unsigned int format);
-int tegra_plane_format_get_alpha(unsigned int opaque, unsigned int *alpha);
-void tegra_plane_check_dependent(struct tegra_plane *tegra,
-				 struct tegra_plane_state *state);
+int tegra_plane_setup_legacy_state(struct tegra_plane *tegra,
+				   struct tegra_plane_state *state);
 
 #endif /* TEGRA_PLANE_H */

commit ebae8d07435ae91314f4a28d69b530d09c625815
Author: Thierry Reding <treding@nvidia.com>
Date:   Wed Dec 20 09:39:14 2017 +0100

    drm/tegra: dc: Implement legacy blending
    
    This implements alpha blending on legacy display controllers (Tegra20,
    Tegra30 and Tegra114). While it's theoretically possible to support the
    zpos property to enable userspace to specify the Z-order of each plane
    individually, this is not currently supported and the same fixed Z-
    order as previously defined is used.
    
    Reverts commit 71835caa00e8 ("drm/tegra: fb: Force alpha formats") since
    the opaque formats are now supported.
    
    Reported-by: Dmitry Osipenko <digetx@gmail.com>
    Fixes: 7772fdaef939 ("drm/tegra: Support ARGB and ABGR formats")
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index dca66cb95d25..6938719e7e5d 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -40,6 +40,10 @@ struct tegra_plane_state {
 	struct tegra_bo_tiling tiling;
 	u32 format;
 	u32 swap;
+
+	/* used for legacy blending support only */
+	bool opaque;
+	bool dependent[3];
 };
 
 static inline struct tegra_plane_state *
@@ -58,5 +62,9 @@ int tegra_plane_state_add(struct tegra_plane *plane,
 
 int tegra_plane_format(u32 fourcc, u32 *format, u32 *swap);
 bool tegra_plane_format_is_yuv(unsigned int format, bool *planar);
+bool tegra_plane_format_has_alpha(unsigned int format);
+int tegra_plane_format_get_alpha(unsigned int opaque, unsigned int *alpha);
+void tegra_plane_check_dependent(struct tegra_plane *tegra,
+				 struct tegra_plane_state *state);
 
 #endif /* TEGRA_PLANE_H */

commit ab7d3f5826c55ad23101327eab435660caa83436
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Dec 14 13:46:20 2017 +0100

    drm/tegra: Implement zpos property
    
    Implement the standard zpos property for planes on Tegra124 and later.
    Earlier generations have a different blending unit that needs different
    programming.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index 13b900d777e8..dca66cb95d25 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -19,7 +19,6 @@ struct tegra_plane {
 	struct tegra_dc *dc;
 	unsigned int offset;
 	unsigned int index;
-	unsigned int depth;
 };
 
 struct tegra_cursor {

commit 1087fac18b8e3ec8fadf1595bbc46dce7ff08a81
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Dec 14 13:37:53 2017 +0100

    drm/tegra: dc: Use direct offset to plane registers
    
    Traditionally, windows were accessed indirectly, through a register
    selection window that required a global register to be programmed with
    the index of the window to access. Since the global register could be
    written from modesetting functions as well as the interrupt handler
    concurrently, accesses had to be serialized using a lock. Using direct
    accesses to the window registers the lock can be avoided.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index fc7566f630fa..13b900d777e8 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -12,9 +12,11 @@
 #include <drm/drm_plane.h>
 
 struct tegra_bo;
+struct tegra_dc;
 
 struct tegra_plane {
 	struct drm_plane base;
+	struct tegra_dc *dc;
 	unsigned int offset;
 	unsigned int index;
 	unsigned int depth;

commit c4755fb9064f64083fe559e92a46df817fc5e07b
Author: Thierry Reding <treding@nvidia.com>
Date:   Mon Nov 13 11:08:13 2017 +0100

    drm/tegra: Add Tegra186 display hub support
    
    The display architecture has changed in several significant ways with
    the new Tegra186 SoC. Shared between all display controllers is a set
    of common resources referred to as the display hub. The hub generates
    accesses to memory and feeds them into various composition pipelines,
    each of which being a window that can be assigned to arbitrary heads.
    
    Atomic state is subclassed in order to track the global bandwidth
    requirements and select and adjust the hub clocks appropriately. The
    plane code is shared to a large degree with earlier SoC generations,
    except where the programming differs.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
index 8237b885acd7..fc7566f630fa 100644
--- a/drivers/gpu/drm/tegra/plane.h
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -15,7 +15,9 @@ struct tegra_bo;
 
 struct tegra_plane {
 	struct drm_plane base;
+	unsigned int offset;
 	unsigned int index;
+	unsigned int depth;
 };
 
 struct tegra_cursor {

commit 5acd351427361131c583dfb11c7bf4c364c98a9b
Author: Thierry Reding <treding@nvidia.com>
Date:   Fri Nov 10 15:27:25 2017 +0100

    drm/tegra: Move common plane code to separate file
    
    Subsequent patches will add support for Tegra186 which has a different
    architecture and needs different plane code but which can share a lot of
    code with earlier Tegra support.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

diff --git a/drivers/gpu/drm/tegra/plane.h b/drivers/gpu/drm/tegra/plane.h
new file mode 100644
index 000000000000..8237b885acd7
--- /dev/null
+++ b/drivers/gpu/drm/tegra/plane.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef TEGRA_PLANE_H
+#define TEGRA_PLANE_H 1
+
+#include <drm/drm_plane.h>
+
+struct tegra_bo;
+
+struct tegra_plane {
+	struct drm_plane base;
+	unsigned int index;
+};
+
+struct tegra_cursor {
+	struct tegra_plane base;
+
+	struct tegra_bo *bo;
+	unsigned int width;
+	unsigned int height;
+};
+
+static inline struct tegra_plane *to_tegra_plane(struct drm_plane *plane)
+{
+	return container_of(plane, struct tegra_plane, base);
+}
+
+struct tegra_plane_state {
+	struct drm_plane_state base;
+
+	struct tegra_bo_tiling tiling;
+	u32 format;
+	u32 swap;
+};
+
+static inline struct tegra_plane_state *
+to_tegra_plane_state(struct drm_plane_state *state)
+{
+	if (state)
+		return container_of(state, struct tegra_plane_state, base);
+
+	return NULL;
+}
+
+extern const struct drm_plane_funcs tegra_plane_funcs;
+
+int tegra_plane_state_add(struct tegra_plane *plane,
+			  struct drm_plane_state *state);
+
+int tegra_plane_format(u32 fourcc, u32 *format, u32 *swap);
+bool tegra_plane_format_is_yuv(unsigned int format, bool *planar);
+
+#endif /* TEGRA_PLANE_H */
