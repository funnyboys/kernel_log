commit 5f6a556f98de425fcb7928456839a06f02156633
Author: Xiaojie Yuan <xiaojie.yuan@amd.com>
Date:   Thu Oct 10 20:44:20 2019 +0800

    drm/amdgpu/discovery: reserve discovery data at the top of VRAM
    
    IP Discovery data is TMR fenced by the latest PSP BL,
    so we need to reserve this region.
    
    Tested on navi10/12/14 with VBIOS integrated with latest PSP BL.
    
    v2: use DISCOVERY_TMR_SIZE macro as bo size
        use amdgpu_bo_create_kernel_at() to allocate bo
    
    Signed-off-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/amd/include/discovery.h b/drivers/gpu/drm/amd/include/discovery.h
index 5dcb776548d8..7ec4331e67f2 100644
--- a/drivers/gpu/drm/amd/include/discovery.h
+++ b/drivers/gpu/drm/amd/include/discovery.h
@@ -25,7 +25,6 @@
 #define _DISCOVERY_H_
 
 #define PSP_HEADER_SIZE                 256
-#define BINARY_MAX_SIZE                 (64 << 10)
 #define BINARY_SIGNATURE                0x28211407
 #define DISCOVERY_TABLE_SIGNATURE       0x53445049
 

commit 6a8ee0257dee074ce8b96643f44b1efd1ce120b4
Author: Xiaojie Yuan <xiaojie.yuan@amd.com>
Date:   Wed Mar 27 17:46:04 2019 +0800

    drm/amdgpu/discovery: update definition for struct die_header
    
    Update to latest spec.
    
    Signed-off-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/amd/include/discovery.h b/drivers/gpu/drm/amd/include/discovery.h
index e01d4cd9f2cb..5dcb776548d8 100644
--- a/drivers/gpu/drm/amd/include/discovery.h
+++ b/drivers/gpu/drm/amd/include/discovery.h
@@ -99,8 +99,8 @@ typedef struct ip
 
 typedef struct die_header
 {
-	uint32_t die_id;
-	uint32_t num_ips;
+	uint16_t die_id;
+	uint16_t num_ips;
 } die_header;
 
 typedef struct ip_structure

commit 70cbfe3d64b84e9f4c47c186942cd70d6495b465
Author: Xiaojie Yuan <xiaojie.yuan@amd.com>
Date:   Thu Feb 21 17:55:30 2019 +0800

    drm/amdgpu/discovery: add harvest info data table
    
    Add support for the harvest tables.
    
    Signed-off-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Jack Xiao <Jack.Xiao@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/amd/include/discovery.h b/drivers/gpu/drm/amd/include/discovery.h
index 93a8ae0aacda..e01d4cd9f2cb 100644
--- a/drivers/gpu/drm/amd/include/discovery.h
+++ b/drivers/gpu/drm/amd/include/discovery.h
@@ -33,7 +33,7 @@ typedef enum
 {
 	IP_DISCOVERY = 0,
 	GC,
-	TABLE_3,
+	HARVEST_INFO,
 	TABLE_4,
 	RESERVED_1,
 	RESERVED_2,
@@ -144,6 +144,22 @@ struct gc_info_v1_0 {
 	uint32_t gc_num_gl2a;
 };
 
+typedef struct harvest_info_header {
+	uint32_t signature; /* Table Signature */
+	uint32_t version;   /* Table Version */
+} harvest_info_header;
+
+typedef struct harvest_info {
+	uint16_t hw_id;          /* Hardware ID */
+	uint8_t number_instance; /* Instance of the IP */
+	uint8_t reserved;        /* Reserved for alignment */
+} harvest_info;
+
+typedef struct harvest_table {
+	harvest_info_header header;
+	harvest_info list[32];
+} harvest_table;
+
 #pragma pack()
 
 #endif

commit 478586d6d5c7db7a9af47746973463edea35ca11
Author: Xiaojie Yuan <xiaojie.yuan@amd.com>
Date:   Thu Feb 21 17:55:05 2019 +0800

    drm/amdgpu/discovery: update definitions of table_info and binary_header
    
    Use the proper definitions.
    
    Signed-off-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Jack Xiao <Jack.Xiao@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/amd/include/discovery.h b/drivers/gpu/drm/amd/include/discovery.h
index 7cc921a28f51..93a8ae0aacda 100644
--- a/drivers/gpu/drm/amd/include/discovery.h
+++ b/drivers/gpu/drm/amd/include/discovery.h
@@ -46,12 +46,16 @@ typedef struct table_info
 {
 	uint16_t offset;   /* Byte offset */
 	uint16_t checksum; /* Byte sum of the table */
+	uint16_t size;     /* Table size */
+	uint16_t padding;
 } table_info;
 
 typedef struct binary_header
 {
 	/* psp structure should go at the top of this structure */
 	uint32_t binary_signature; /* 0x7, 0x14, 0x21, 0x28 */
+	uint16_t version_major;
+	uint16_t version_minor;
 	uint16_t binary_checksum;  /* Byte sum of the binary after this field */
 	uint16_t binary_size;      /* Binary Size*/
 	table_info table_list[TOTAL_TABLES];

commit f39f5bb1c9d68d557ff1539fea7adfe7c4d4ed7a
Author: Xiaojie Yuan <xiaojie.yuan@amd.com>
Date:   Thu Jun 20 10:18:50 2019 -0500

    drm/amdgpu/discovery: add ip discovery initial support
    
    The IP discovery table lists is populated by the psp at power on
    and includes all of the hw details on the board:
    - List of IPs and MMIO offsets
    - IP harvest details
    - IP configuration details
    
    v2: prefix struct and function names with 'amdgpu'
    v3: read table binary from vram using mmMM_INDEX and mmMM_DATA
        update TABLE_BINARY_MAX_SIZE to 64kb (1 TMR)
        add 'instance_number' field per ip info
        consider endianness and replace uint8/16/32_t with u8/16/32
        initialize register base addresses
        initialize adev->gfx.config and adev->gfx.cu_info to replace gpu info fw
        get major and minor version using a single api
        don't expose internal data structures in amdgpu_discovery.h
    v4: RCC_CONFIG_MEMSIZE is in MB units
        hold mmio_idx_lock while reading ip discovery binary
    v5: pick out discovery.h as a cross-OS header
        do structure pointer cast directly
        consider endianness while using the member of structure
        convert base addresses to dword
    
    at boot up, PSP BL copies ip discovery binary from VBIOS(SPIROM) image to the
    top of the frame buffer (just below the reserved regions for PSP & SMU).
    
    ip discovery data table includes the collection of each ip's identification
    number, base addresses, version number, and harvest setting placeholder.
    
    gc data table includes gfx info structure.
    
    Signed-off-by: Xiaojie Yuan <xiaojie.yuan@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/amd/include/discovery.h b/drivers/gpu/drm/amd/include/discovery.h
new file mode 100644
index 000000000000..7cc921a28f51
--- /dev/null
+++ b/drivers/gpu/drm/amd/include/discovery.h
@@ -0,0 +1,145 @@
+/*
+ * Copyright 2018 Advanced Micro Devices, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+#ifndef _DISCOVERY_H_
+#define _DISCOVERY_H_
+
+#define PSP_HEADER_SIZE                 256
+#define BINARY_MAX_SIZE                 (64 << 10)
+#define BINARY_SIGNATURE                0x28211407
+#define DISCOVERY_TABLE_SIGNATURE       0x53445049
+
+typedef enum
+{
+	IP_DISCOVERY = 0,
+	GC,
+	TABLE_3,
+	TABLE_4,
+	RESERVED_1,
+	RESERVED_2,
+	TOTAL_TABLES = 6
+} table;
+
+#pragma pack(1)
+
+typedef struct table_info
+{
+	uint16_t offset;   /* Byte offset */
+	uint16_t checksum; /* Byte sum of the table */
+} table_info;
+
+typedef struct binary_header
+{
+	/* psp structure should go at the top of this structure */
+	uint32_t binary_signature; /* 0x7, 0x14, 0x21, 0x28 */
+	uint16_t binary_checksum;  /* Byte sum of the binary after this field */
+	uint16_t binary_size;      /* Binary Size*/
+	table_info table_list[TOTAL_TABLES];
+} binary_header;
+
+typedef struct die_info
+{
+	uint16_t die_id;
+	uint16_t die_offset; /* Points to the corresponding die_header structure */
+} die_info;
+
+
+typedef struct ip_discovery_header
+{
+	uint32_t signature;    /* Table Signature */
+	uint16_t version;      /* Table Version */
+	uint16_t size;         /* Table Size */
+	uint32_t id;           /* Table ID */
+	uint16_t num_dies;     /* Number of Dies */
+	die_info die_info[16]; /* list die information for up to 16 dies */
+	uint16_t padding[1];   /* padding */
+} ip_discovery_header;
+
+typedef struct ip
+{
+	uint16_t hw_id;           /* Hardware ID */
+	uint8_t number_instance;  /* instance of the IP */
+	uint8_t num_base_address; /* Number of Base Addresses */
+	uint8_t major;            /* HCID Major */
+	uint8_t minor;            /* HCID Minor */
+	uint8_t revision;         /* HCID Revision */
+#if defined(__BIG_ENDIAN)
+	uint8_t reserved : 4;     /* Placeholder field */
+	uint8_t harvest : 4;      /* Harvest */
+#else
+	uint8_t harvest : 4;      /* Harvest */
+	uint8_t reserved : 4;     /* Placeholder field */
+#endif
+	uint32_t base_address[1]; /* variable number of Addresses */
+} ip;
+
+typedef struct die_header
+{
+	uint32_t die_id;
+	uint32_t num_ips;
+} die_header;
+
+typedef struct ip_structure
+{
+	ip_discovery_header* header;
+	struct die
+	{
+		die_header *die_header;
+		ip *ip_list;
+	} die;
+} ip_structure;
+
+struct gpu_info_header {
+	uint32_t table_id;      /* table ID */
+	uint16_t version_major; /* table version */
+	uint16_t version_minor; /* table version */
+	uint32_t size;          /* size of the entire header+data in bytes */
+};
+
+struct gc_info_v1_0 {
+	struct gpu_info_header header;
+
+	uint32_t gc_num_se;
+	uint32_t gc_num_wgp0_per_sa;
+	uint32_t gc_num_wgp1_per_sa;
+	uint32_t gc_num_rb_per_se;
+	uint32_t gc_num_gl2c;
+	uint32_t gc_num_gprs;
+	uint32_t gc_num_max_gs_thds;
+	uint32_t gc_gs_table_depth;
+	uint32_t gc_gsprim_buff_depth;
+	uint32_t gc_parameter_cache_depth;
+	uint32_t gc_double_offchip_lds_buffer;
+	uint32_t gc_wave_size;
+	uint32_t gc_max_waves_per_simd;
+	uint32_t gc_max_scratch_slots_per_cu;
+	uint32_t gc_lds_size;
+	uint32_t gc_num_sc_per_se;
+	uint32_t gc_num_sa_per_se;
+	uint32_t gc_num_packer_per_sc;
+	uint32_t gc_num_gl2a;
+};
+
+#pragma pack()
+
+#endif
