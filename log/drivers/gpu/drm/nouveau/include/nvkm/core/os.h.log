commit f25709f9aeb3c5183167b57df278cdecce3c9740
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 15 06:34:21 2020 +1000

    drm/nouveau/core: add representation of generic binary objects
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 029a416197db..d7ba3205207f 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -21,4 +21,17 @@
 	iowrite32_native(lower_32_bits(_v), &_p[0]);			       \
 	iowrite32_native(upper_32_bits(_v), &_p[1]);			       \
 } while(0)
+
+struct nvkm_blob {
+	void *data;
+	u32 size;
+};
+
+static inline void
+nvkm_blob_dtor(struct nvkm_blob *blob)
+{
+	kfree(blob->data);
+	blob->data = NULL;
+	blob->size = 0;
+}
 #endif

commit b7019ac550eb3916f34d79db583e9b7ea2524afa
Author: Ilia Mirkin <imirkin@alum.mit.edu>
Date:   Wed Jun 19 20:13:43 2019 -0400

    drm/nouveau: fix bogus GPL-2 license header
    
    The bulk SPDX addition made all these files into GPL-2.0 licensed files.
    However the remainder of the project is MIT-licensed, these files
    (primarily header files) were simply missing the boiler plate and got
    caught up in the global update.
    
    Fixes: b24413180f5 (License cleanup: add SPDX GPL-2.0 license identifier to files with no license)
    Signed-off-by: Ilia Mirkin <imirkin@alum.mit.edu>
    Acked-by: Emil Velikov <emil.l.velikov@gmail.com>
    Acked-by: Karol Herbst <kherbst@redhat.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 445602d1e8d3..029a416197db 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,4 +1,4 @@
-/* SPDX-License-Identifier: GPL-2.0 */
+/* SPDX-License-Identifier: MIT */
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>

commit e60e1ee60630cafef5e430c2ae364877e061d980
Merge: 5d352e69c60e f150891fd987
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 15 20:42:10 2017 -0800

    Merge tag 'drm-for-v4.15' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm updates from Dave Airlie:
     "This is the main drm pull request for v4.15.
    
      Core:
       - Atomic object lifetime fixes
       - Atomic iterator improvements
       - Sparse/smatch fixes
       - Legacy kms ioctls to be interruptible
       - EDID override improvements
       - fb/gem helper cleanups
       - Simple outreachy patches
       - Documentation improvements
       - Fix dma-buf rcu races
       - DRM mode object leasing for improving VR use cases.
       - vgaarb improvements for non-x86 platforms.
    
      New driver:
       - tve200: Faraday Technology TVE200 block.
    
         This "TV Encoder" encodes a ITU-T BT.656 stream and can be found in
         the StorLink SL3516 (later Cortina Systems CS3516) as well as the
         Grain Media GM8180.
    
      New bridges:
       - SiI9234 support
    
      New panels:
       - S6E63J0X03, OTM8009A, Seiko 43WVF1G, 7" rpi touch panel, Toshiba
         LT089AC19000, Innolux AT043TN24
    
      i915:
       - Remove Coffeelake from alpha support
       - Cannonlake workarounds
       - Infoframe refactoring for DisplayPort
       - VBT updates
       - DisplayPort vswing/emph/buffer translation refactoring
       - CCS fixes
       - Restore GPU clock boost on missed vblanks
       - Scatter list updates for userptr allocations
       - Gen9+ transition watermarks
       - Display IPC (Isochronous Priority Control)
       - Private PAT management
       - GVT: improved error handling and pci config sanitizing
       - Execlist refactoring
       - Transparent Huge Page support
       - User defined priorities support
       - HuC/GuC firmware refactoring
       - DP MST fixes
       - eDP power sequencing fixes
       - Use RCU instead of stop_machine
       - PSR state tracking support
       - Eviction fixes
       - BDW DP aux channel timeout fixes
       - LSPCON fixes
       - Cannonlake PLL fixes
    
      amdgpu:
       - Per VM BO support
       - Powerplay cleanups
       - CI powerplay support
       - PASID mgr for kfd
       - SR-IOV fixes
       - initial GPU reset for vega10
       - Prime mmap support
       - TTM updates
       - Clock query interface for Raven
       - Fence to handle ioctl
       - UVD encode ring support on Polaris
       - Transparent huge page DMA support
       - Compute LRU pipe tweaks
       - BO flag to allow buffers to opt out of implicit sync
       - CTX priority setting API
       - VRAM lost infrastructure plumbing
    
      qxl:
       - fix flicker since atomic rework
    
      amdkfd:
       - Further improvements from internal AMD tree
       - Usermode events
       - Drop radeon support
    
      nouveau:
       - Pascal temperature sensor support
       - Improved BAR2 handling
       - MMU rework to support Pascal MMU
    
      exynos:
       - Improved HDMI/mixer support
       - HDMI audio interface support
    
      tegra:
       - Prep work for tegra186
       - Cleanup/fixes
    
      msm:
       - Preemption support for a5xx
       - Display fixes for 8x96 (snapdragon 820)
       - Async cursor plane fixes
       - FW loading rework
       - GPU debugging improvements
    
      vc4:
       - Prep for DSI panels
       - fix T-format tiling scanout
       - New madvise ioctl
    
      Rockchip:
       - LVDS support
    
      omapdrm:
       - omap4 HDMI CEC support
    
      etnaviv:
       - GPU performance counters groundwork
    
      sun4i:
       - refactor driver load + TCON backend
       - HDMI improvements
       - A31 support
       - Misc fixes
    
      udl:
       - Probe/EDID read fixes.
    
      tilcdc:
       - Misc fixes.
    
      pl111:
       - Support more variants
    
      adv7511:
       - Improve EDID handling.
       - HDMI CEC support
    
      sii8620:
       - Add remote control support"
    
    * tag 'drm-for-v4.15' of git://people.freedesktop.org/~airlied/linux: (1480 commits)
      drm/rockchip: analogix_dp: Use mutex rather than spinlock
      drm/mode_object: fix documentation for object lookups.
      drm/i915: Reorder context-close to avoid calling i915_vma_close() under RCU
      drm/i915: Move init_clock_gating() back to where it was
      drm/i915: Prune the reservation shared fence array
      drm/i915: Idle the GPU before shinking everything
      drm/i915: Lock llist_del_first() vs llist_del_all()
      drm/i915: Calculate ironlake intermediate watermarks correctly, v2.
      drm/i915: Disable lazy PPGTT page table optimization for vGPU
      drm/i915/execlists: Remove the priority "optimisation"
      drm/i915: Filter out spurious execlists context-switch interrupts
      drm/amdgpu: use irq-safe lock for kiq->ring_lock
      drm/amdgpu: bypass lru touch for KIQ ring submission
      drm/amdgpu: Potential uninitialized variable in amdgpu_vm_update_directories()
      drm/amdgpu: potential uninitialized variable in amdgpu_vce_ring_parse_cs()
      drm/amd/powerplay: initialize a variable before using it
      drm/amd/powerplay: suppress KASAN out of bounds warning in vega10_populate_all_memory_levels
      drm/amd/amdgpu: fix evicted VRAM bo adjudgement condition
      drm/vblank: Tune drm_crtc_accurate_vblank_count() WARN down to a debug
      drm/rockchip: add CONFIG_OF dependency for lvds
      ...

commit b24413180f5600bcb3bb70fbed5cf186b60864bd
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Wed Nov 1 15:07:57 2017 +0100

    License cleanup: add SPDX GPL-2.0 license identifier to files with no license
    
    Many source files in the tree are missing licensing information, which
    makes it harder for compliance tools to determine the correct license.
    
    By default all files without license information are under the default
    license of the kernel, which is GPL version 2.
    
    Update the files which contain no license information with the 'GPL-2.0'
    SPDX license identifier.  The SPDX identifier is a legally binding
    shorthand, which can be used instead of the full boiler plate text.
    
    This patch is based on work done by Thomas Gleixner and Kate Stewart and
    Philippe Ombredanne.
    
    How this work was done:
    
    Patches were generated and checked against linux-4.14-rc6 for a subset of
    the use cases:
     - file had no licensing information it it.
     - file was a */uapi/* one with no licensing information in it,
     - file was a */uapi/* one with existing licensing information,
    
    Further patches will be generated in subsequent months to fix up cases
    where non-standard license headers were used, and references to license
    had to be inferred by heuristics based on keywords.
    
    The analysis to determine which SPDX License Identifier to be applied to
    a file was done in a spreadsheet of side by side results from of the
    output of two independent scanners (ScanCode & Windriver) producing SPDX
    tag:value files created by Philippe Ombredanne.  Philippe prepared the
    base worksheet, and did an initial spot review of a few 1000 files.
    
    The 4.13 kernel was the starting point of the analysis with 60,537 files
    assessed.  Kate Stewart did a file by file comparison of the scanner
    results in the spreadsheet to determine which SPDX license identifier(s)
    to be applied to the file. She confirmed any determination that was not
    immediately clear with lawyers working with the Linux Foundation.
    
    Criteria used to select files for SPDX license identifier tagging was:
     - Files considered eligible had to be source code files.
     - Make and config files were included as candidates if they contained >5
       lines of source
     - File already had some variant of a license header in it (even if <5
       lines).
    
    All documentation files were explicitly excluded.
    
    The following heuristics were used to determine which SPDX license
    identifiers to apply.
    
     - when both scanners couldn't find any license traces, file was
       considered to have no license information in it, and the top level
       COPYING file license applied.
    
       For non */uapi/* files that summary was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0                                              11139
    
       and resulted in the first patch in this series.
    
       If that file was a */uapi/* path one, it was "GPL-2.0 WITH
       Linux-syscall-note" otherwise it was "GPL-2.0".  Results of that was:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|-------
       GPL-2.0 WITH Linux-syscall-note                        930
    
       and resulted in the second patch in this series.
    
     - if a file had some form of licensing information in it, and was one
       of the */uapi/* ones, it was denoted with the Linux-syscall-note if
       any GPL family license was found in the file or had no licensing in
       it (per prior point).  Results summary:
    
       SPDX license identifier                            # files
       ---------------------------------------------------|------
       GPL-2.0 WITH Linux-syscall-note                       270
       GPL-2.0+ WITH Linux-syscall-note                      169
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-2-Clause)    21
       ((GPL-2.0 WITH Linux-syscall-note) OR BSD-3-Clause)    17
       LGPL-2.1+ WITH Linux-syscall-note                      15
       GPL-1.0+ WITH Linux-syscall-note                       14
       ((GPL-2.0+ WITH Linux-syscall-note) OR BSD-3-Clause)    5
       LGPL-2.0+ WITH Linux-syscall-note                       4
       LGPL-2.1 WITH Linux-syscall-note                        3
       ((GPL-2.0 WITH Linux-syscall-note) OR MIT)              3
       ((GPL-2.0 WITH Linux-syscall-note) AND MIT)             1
    
       and that resulted in the third patch in this series.
    
     - when the two scanners agreed on the detected license(s), that became
       the concluded license(s).
    
     - when there was disagreement between the two scanners (one detected a
       license but the other didn't, or they both detected different
       licenses) a manual inspection of the file occurred.
    
     - In most cases a manual inspection of the information in the file
       resulted in a clear resolution of the license that should apply (and
       which scanner probably needed to revisit its heuristics).
    
     - When it was not immediately clear, the license identifier was
       confirmed with lawyers working with the Linux Foundation.
    
     - If there was any question as to the appropriate license identifier,
       the file was flagged for further research and to be revisited later
       in time.
    
    In total, over 70 hours of logged manual review was done on the
    spreadsheet to determine the SPDX license identifiers to apply to the
    source files by Kate, Philippe, Thomas and, in some cases, confirmation
    by lawyers working with the Linux Foundation.
    
    Kate also obtained a third independent scan of the 4.13 code base from
    FOSSology, and compared selected files where the other two scanners
    disagreed against that SPDX file, to see if there was new insights.  The
    Windriver scanner is based on an older version of FOSSology in part, so
    they are related.
    
    Thomas did random spot checks in about 500 files from the spreadsheets
    for the uapi headers and agreed with SPDX license identifier in the
    files he inspected. For the non-uapi files Thomas did random spot checks
    in about 15000 files.
    
    In initial set of patches against 4.14-rc6, 3 files were found to have
    copy/paste license identifier errors, and have been fixed to reflect the
    correct identifier.
    
    Additionally Philippe spent 10 hours this week doing a detailed manual
    inspection and review of the 12,461 patched files from the initial patch
    version early this week with:
     - a full scancode scan run, collecting the matched texts, detected
       license ids and scores
     - reviewing anything where there was a license detected (about 500+
       files) to ensure that the applied SPDX license was correct
     - reviewing anything where there was no detection but the patch license
       was not GPL-2.0 WITH Linux-syscall-note to ensure that the applied
       SPDX license was correct
    
    This produced a worksheet with 20 files needing minor correction.  This
    worksheet was then exported into 3 different .csv files for the
    different types of files to be modified.
    
    These .csv files were then reviewed by Greg.  Thomas wrote a script to
    parse the csv files and add the proper SPDX tag to the file, in the
    format that the file expected.  This script was further refined by Greg
    based on the output to detect more types of files automatically and to
    distinguish between header and source .c files (which need different
    comment types.)  Finally Greg ran the script using the .csv files to
    generate the patches.
    
    Reviewed-by: Kate Stewart <kstewart@linuxfoundation.org>
    Reviewed-by: Philippe Ombredanne <pombredanne@nexb.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index cd57e238ddd3..fc9e8cd36087 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0 */
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>

commit 632b740c5481988152a3a60319aaa49c99577b77
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Nov 1 03:56:20 2017 +1000

    drm/nouveau/mmu: remove old vmm frontend
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 70c5c47300b4..1f0108fdd24a 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,7 +1,6 @@
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>
-#define nvkm_vmm nvkm_vm
 
 #ifdef __BIG_ENDIAN
 #define ioread16_native ioread16be
@@ -21,5 +20,4 @@
 	iowrite32_native(lower_32_bits(_v), &_p[0]);			       \
 	iowrite32_native(upper_32_bits(_v), &_p[1]);			       \
 } while(0)
-
 #endif

commit c09597f083960cea492e1d658b9039b06d8a6839
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Nov 1 03:56:19 2017 +1000

    drm/nouveau/core/memory: add some useful accessor macros
    
    Adds support for 64-bit writes, and optimised filling of buffers with
    fixed 32/64-bit values.
    
    These will all be used by the upcoming MMU changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index cfd9ed361c44..70c5c47300b4 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -2,4 +2,24 @@
 #define __NVKM_OS_H__
 #include <nvif/os.h>
 #define nvkm_vmm nvkm_vm
+
+#ifdef __BIG_ENDIAN
+#define ioread16_native ioread16be
+#define iowrite16_native iowrite16be
+#define ioread32_native  ioread32be
+#define iowrite32_native iowrite32be
+#else
+#define ioread16_native ioread16
+#define iowrite16_native iowrite16
+#define ioread32_native  ioread32
+#define iowrite32_native iowrite32
+#endif
+
+#define iowrite64_native(v,p) do {                                             \
+	u32 __iomem *_p = (u32 __iomem *)(p);				       \
+	u64 _v = (v);							       \
+	iowrite32_native(lower_32_bits(_v), &_p[0]);			       \
+	iowrite32_native(upper_32_bits(_v), &_p[1]);			       \
+} while(0)
+
 #endif

commit 570889dc5070e1f98b5898dce426f970c9b9329b
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Nov 1 03:56:19 2017 +1000

    drm/nouveau/bar: modify interface to bar1 vmm mapping
    
    Upcoming changes will remove the nvkm_vmm pointer from nvkm_vma, instead
    requiring it to be explicitly specified on each operation.
    
    It's not currently possible to get this information for BAR1 mappings,
    so let's fix that ahead of time.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index cd57e238ddd3..cfd9ed361c44 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,4 +1,5 @@
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>
+#define nvkm_vmm nvkm_vm
 #endif

commit be83cd4ef9a2a56bd35550bf96146b7b837daf02
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:36:34 2015 +1000

    drm/nouveau: finalise nvkm namespace switch (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 537db3a512c8..cd57e238ddd3 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,259 +1,4 @@
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>
-
-#define nouveau_client nvkm_client
-#define nouveau_client_name nvkm_client_name
-#define nouveau_client_create nvkm_client_create
-#define nouveau_client_init nvkm_client_init
-#define nouveau_client_fini nvkm_client_fini
-#define nouveau_engctx nvkm_engctx
-#define nouveau_engctx_create nvkm_engctx_create
-#define nouveau_engctx_create_ nvkm_engctx_create_
-#define nouveau_engctx_destroy nvkm_engctx_destroy
-#define nouveau_engctx_init nvkm_engctx_init
-#define nouveau_engctx_fini nvkm_engctx_fini
-#define _nouveau_engctx_ctor _nvkm_engctx_ctor
-#define _nouveau_engctx_dtor _nvkm_engctx_dtor
-#define _nouveau_engctx_init _nvkm_engctx_init
-#define _nouveau_engctx_fini _nvkm_engctx_fini
-#define _nouveau_engctx_rd32 _nvkm_engctx_rd32
-#define _nouveau_engctx_wr32 _nvkm_engctx_wr32
-#define nouveau_engctx_get nvkm_engctx_get
-#define nouveau_engctx_put nvkm_engctx_put
-#define nouveau_engine nvkm_engine
-#define nouveau_engine_create nvkm_engine_create
-#define nouveau_engine_create_ nvkm_engine_create_
-#define nouveau_engine_destroy nvkm_engine_destroy
-#define nouveau_engine_init nvkm_engine_init
-#define nouveau_engine_fini nvkm_engine_fini
-#define _nouveau_engine_ctor _nvkm_engine_ctor
-#define _nouveau_engine_dtor _nvkm_engine_dtor
-#define _nouveau_engine_init _nvkm_engine_init
-#define _nouveau_engine_fini _nvkm_engine_fini
-#define nouveau_enum nvkm_enum
-#define nouveau_gpuobj nvkm_gpuobj
-#define nouveau_gpuobj_create nvkm_gpuobj_create
-#define nouveau_gpuobj_destroy nvkm_gpuobj_destroy
-#define _nouveau_gpuobj_ctor _nvkm_gpuobj_ctor
-#define _nouveau_gpuobj_dtor _nvkm_gpuobj_dtor
-#define _nouveau_gpuobj_init _nvkm_gpuobj_init
-#define _nouveau_gpuobj_fini _nvkm_gpuobj_fini
-#define _nouveau_gpuobj_rd32 _nvkm_gpuobj_rd32
-#define _nouveau_gpuobj_wr32 _nvkm_gpuobj_wr32
-#define nouveau_gpuobj_new nvkm_gpuobj_new
-#define nouveau_gpuobj_dup nvkm_gpuobj_dup
-#define nouveau_gpuobj_ref nvkm_gpuobj_ref
-#define nouveau_gpuobj_map nvkm_gpuobj_map
-#define nouveau_gpuobj_map_vm nvkm_gpuobj_map_vm
-#define nouveau_gpuobj_unmap nvkm_gpuobj_unmap
-#define nouveau_handle nvkm_handle
-#define nouveau_handle_ref nvkm_handle_ref
-#define nouveau_handle_put nvkm_handle_put
-#define nouveau_handle_get_class nvkm_handle_get_class
-#define nouveau_handle_get_vinst nvkm_handle_get_vinst
-#define nouveau_handle_get_cinst nvkm_handle_get_cinst
-#define nouveau_mm nvkm_mm
-#define nouveau_mm_node nvkm_mm_node
-#define nouveau_mm_init nvkm_mm_init
-#define nouveau_mm_fini nvkm_mm_fini
-#define nouveau_mm_head nvkm_mm_head
-#define nouveau_mm_tail nvkm_mm_tail
-#define nouveau_mm_free nvkm_mm_free
-#define nouveau_mm_initialised nvkm_mm_initialised
-#define nouveau_namedb nvkm_namedb
-#define nouveau_namedb_create nvkm_namedb_create
-#define nouveau_namedb_create_ nvkm_namedb_create_
-#define nouveau_namedb_destroy nvkm_namedb_destroy
-#define nouveau_namedb_init nvkm_namedb_init
-#define nouveau_namedb_fini nvkm_namedb_fini
-#define _nouveau_namedb_ctor _nvkm_namedb_ctor
-#define _nouveau_namedb_dtor _nvkm_namedb_dtor
-#define _nouveau_namedb_init _nvkm_namedb_init
-#define _nouveau_namedb_fini _nvkm_namedb_fini
-#define nouveau_namedb_ref nvkm_namedb_ref
-#define nouveau_namedb_put nvkm_namedb_put
-#define nouveau_namedb_get nvkm_namedb_get
-#define nouveau_namedb_get_class nvkm_namedb_get_class
-#define nouveau_namedb_get_vinst nvkm_namedb_get_vinst
-#define nouveau_namedb_get_cinst nvkm_namedb_get_cinst
-#define nouveau_object_debug nvkm_object_debug
-#define nouveau_object nvkm_object
-#define nouveau_object_create nvkm_object_create
-#define nouveau_object_create_ nvkm_object_create_
-#define nouveau_object_destroy nvkm_object_destroy
-#define nouveau_object_init nvkm_object_init
-#define nouveau_object_fini nvkm_object_fini
-#define _nouveau_object_ctor _nvkm_object_ctor
-#define nouveau_object_ctor nvkm_object_ctor
-#define nouveau_object_ref nvkm_object_ref
-#define nouveau_object_ofuncs nvkm_object_ofuncs
-#define nouveau_object_inc nvkm_object_inc
-#define nouveau_object_dec nvkm_object_dec
-#define nouveau_ofuncs nvkm_ofuncs
-#define nouveau_oclass nvkm_oclass
-#define nouveau_omthds nvkm_omthds
-#define nouveau_parent nvkm_parent
-#define nouveau_parent_create nvkm_parent_create
-#define nouveau_parent_create_ nvkm_parent_create_
-#define nouveau_parent_destroy nvkm_parent_destroy
-#define nouveau_parent_init nvkm_parent_init
-#define nouveau_parent_fini nvkm_parent_fini
-#define _nouveau_parent_ctor _nvkm_parent_ctor
-#define _nouveau_parent_dtor _nvkm_parent_dtor
-#define _nouveau_parent_init _nvkm_parent_init
-#define _nouveau_parent_fini _nvkm_parent_fini
-#define nouveau_printk nvkm_printk
-#define nouveau_ramht nvkm_ramht
-#define nouveau_ramht_new nvkm_ramht_new
-#define nouveau_ramht_ref nvkm_ramht_ref
-#define nouveau_ramht_insert nvkm_ramht_insert
-#define nouveau_ramht_remove nvkm_ramht_remove
-#define nouveau_subdev nvkm_subdev
-#define nouveau_subdev_create nvkm_subdev_create
-#define nouveau_subdev_create_ nvkm_subdev_create_
-#define nouveau_subdev_destroy nvkm_subdev_destroy
-#define nouveau_subdev_init nvkm_subdev_init
-#define nouveau_subdev_fini nvkm_subdev_fini
-#define _nouveau_subdev_ctor _nvkm_subdev_ctor
-#define _nouveau_subdev_dtor _nvkm_subdev_dtor
-#define _nouveau_subdev_init _nvkm_subdev_init
-#define _nouveau_subdev_fini _nvkm_subdev_fini
-#define nouveau_subdev_reset nvkm_subdev_reset
-#define nouveau_bitfield nvkm_bitfield
-#define nouveau_bitfield_print nvkm_bitfield_print
-#define nouveau_enum nvkm_enum
-#define nouveau_enum_find nvkm_enum_find
-#define nouveau_enum_print nvkm_enum_print
-#define nouveau_stropt nvkm_stropt
-#define nouveau_boolopt nvkm_boolopt
-#define nouveau_dbgopt nvkm_dbgopt
-#define nouveau_device nvkm_device
-#define nouveau_device_find nvkm_device_find
-#define nouveau_device_list nvkm_device_list
-#define nouveau_vma nvkm_vma
-#define nouveau_vm nvkm_vm
-#define nouveau_vm_get nvkm_vm_get
-#define nouveau_vm_put nvkm_vm_put
-#define nouveau_vm_map nvkm_vm_map
-#define nouveau_vm_unmap nvkm_vm_unmap
-#define nouveau_vm_new nvkm_vm_new
-#define nouveau_vm_ref nvkm_vm_ref
-#define nouveau_instmem nvkm_instmem
-#define nouveau_instobj nvkm_instobj
-#define nouveau_mem nvkm_mem
-#define nouveau_bar nvkm_bar
-#define nouveau_falcon nvkm_falcon
-#define nouveau_falcon_create nvkm_falcon_create
-#define nouveau_falcon_create_ nvkm_falcon_create_
-#define nouveau_falcon_destroy nvkm_falcon_destroy
-#define nouveau_falcon_init nvkm_falcon_init
-#define nouveau_falcon_fini nvkm_falcon_fini
-#define _nouveau_falcon_ctor _nvkm_falcon_ctor
-#define _nouveau_falcon_dtor _nvkm_falcon_dtor
-#define _nouveau_falcon_init _nvkm_falcon_init
-#define _nouveau_falcon_fini _nvkm_falcon_fini
-#define _nouveau_falcon_rd32 _nvkm_falcon_rd32
-#define _nouveau_falcon_wr32 _nvkm_falcon_wr32
-#define nouveau_falcon_context nvkm_falcon_context
-#define nouveau_falcon_context_create nvkm_falcon_context_create
-#define nouveau_falcon_context_create_ nvkm_falcon_context_create_
-#define nouveau_falcon_context_destroy nvkm_falcon_context_destroy
-#define nouveau_falcon_context_init nvkm_falcon_context_init
-#define nouveau_falcon_context_fini nvkm_falcon_context_fini
-#define _nouveau_falcon_context_ctor _nvkm_falcon_context_ctor
-#define _nouveau_falcon_context_dtor _nvkm_falcon_context_dtor
-#define _nouveau_falcon_context_init _nvkm_falcon_context_init
-#define _nouveau_falcon_context_fini _nvkm_falcon_context_fini
-#define _nouveau_falcon_context_rd32 _nvkm_falcon_context_rd32
-#define _nouveau_falcon_context_wr32 _nvkm_falcon_context_wr32
-#define nouveau_falcon_intr nvkm_falcon_intr
-#define nouveau_xtensa nvkm_xtensa
-#define nouveau_xtensa_create nvkm_xtensa_create
-#define nouveau_xtensa_create_ nvkm_xtensa_create_
-#define nouveau_xtensa_destroy nvkm_xtensa_destroy
-#define nouveau_xtensa_init nvkm_xtensa_init
-#define nouveau_xtensa_fini nvkm_xtensa_fini
-#define _nouveau_xtensa_ctor _nvkm_xtensa_ctor
-#define _nouveau_xtensa_dtor _nvkm_xtensa_dtor
-#define _nouveau_xtensa_init _nvkm_xtensa_init
-#define _nouveau_xtensa_fini _nvkm_xtensa_fini
-#define _nouveau_xtensa_rd32 _nvkm_xtensa_rd32
-#define _nouveau_xtensa_wr32 _nvkm_xtensa_wr32
-#define nouveau_xtensa_context nvkm_xtensa_context
-#define nouveau_xtensa_context_create nvkm_xtensa_context_create
-#define nouveau_xtensa_context_create_ nvkm_xtensa_context_create_
-#define nouveau_xtensa_context_destroy nvkm_xtensa_context_destroy
-#define nouveau_xtensa_context_init nvkm_xtensa_context_init
-#define nouveau_xtensa_context_fini nvkm_xtensa_context_fini
-#define _nouveau_xtensa_engctx_ctor _nvkm_xtensa_engctx_ctor
-#define _nouveau_xtensa_context_dtor _nvkm_xtensa_context_dtor
-#define _nouveau_xtensa_context_init _nvkm_xtensa_context_init
-#define _nouveau_xtensa_context_fini _nvkm_xtensa_context_fini
-#define _nouveau_xtensa_context_rd32 _nvkm_xtensa_context_rd32
-#define _nouveau_xtensa_context_wr32 _nvkm_xtensa_context_wr32
-#define nouveau_xtensa_intr nvkm_xtensa_intr
-#define nouveau_gpio nvkm_gpio
-#define nouveau_i2c nvkm_i2c
-#define nouveau_i2c_port nvkm_i2c_port
-#define nouveau_i2c_board_info nvkm_i2c_board_info
-#define nouveau_devinit nvkm_devinit
-#define nouveau_bios nvkm_bios
-#define nouveau_bios_oclass nvkm_bios_oclass
-#define nouveau_pll_vals nvkm_pll_vals
-#define nouveau_therm_trip_point nvkm_therm_trip_point
-#define nouveau_fb nvkm_fb
-#define nouveau_fifo nvkm_fifo
-#define nouveau_therm nvkm_therm
-#define nouveau_therm_cstate nvkm_therm_cstate
-#define nouveau_volt nvkm_volt
-#define nouveau_timer nvkm_timer
-#define nouveau_timer_wait_eq nvkm_timer_wait_eq
-#define nouveau_timer_alarm nvkm_timer_alarm
-#define nouveau_alarm nvkm_alarm
-#define nouveau_timer_alarm_cancel nvkm_timer_alarm_cancel
-#define nouveau_alarm_init nvkm_alarm_init
-#define nva3_pll_calc gt215_pll_calc
-#define nouveau_clk nvkm_clk
-#define nouveau_domain nvkm_domain
-#define nouveau_cstate nvkm_cstate
-#define nouveau_pstate nvkm_pstate
-#define nouveau_clk_astate nvkm_clk_astate
-#define nouveau_clk_ustate nvkm_clk_ustate
-#define nva3_clk_pre gt215_clk_pre
-#define nva3_clk_post gt215_clk_post
-#define nva3_clk_info gt215_clk_info
-#define nva3_pll_info gt215_pll_info
-#define nouveau_ibus nvkm_ibus
-#define nouveau_memx nvkm_memx
-#define nouveau_memx_block nvkm_memx_block
-#define nouveau_memx_unblock nvkm_memx_unblock
-#define nouveau_memx_train nvkm_memx_train
-#define nouveau_memx_train_result nvkm_memx_train_result
-#define nouveau_memx_wait_vblank nvkm_memx_wait_vblank
-#define nouveau_memx_rd32 nvkm_memx_rd32
-#define nouveau_memx_wr32 nvkm_memx_wr32
-#define nouveau_memx_wait nvkm_memx_wait
-#define nouveau_memx_init nvkm_memx_init
-#define nouveau_memx_fini nvkm_memx_fini
-#define nouveau_memx_nsec nvkm_memx_nsec
-#define nouveau_ltc nvkm_ltc
-#define nouveau_pmu nvkm_pmu
-#define nouveau_fb nvkm_fb
-#define nouveau_fb_tile nvkm_fb_tile
-#define nvc0_pte_storage_type_map gf100_pte_storage_type_map
-#define nouveau_fuse nvkm_fuse
-#define nouveau_mc nvkm_mc
-#define nouveau_mmu nvkm_mmu
-#define nouveau_dmaeng nvkm_dmaeng
-#define nouveau_dmaobj nvkm_dmaobj
-#define nouveau_disp nvkm_disp
-#define nouveau_fifo_chan nvkm_fifo_chan
-#define nouveau_fifo nvkm_fifo
-#define nouveau_gr nvkm_gr
-#define nouveau_sw nvkm_sw
-#define nouveau_sw_chan nvkm_sw_chan
-#define nouveau_device_create nvkm_device_create
-#define nouveau_device_create_ nvkm_device_create_
-
 #endif

commit 9719047b4d985ca7a46819956047cca04213d63e
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:35:00 2015 +1000

    drm/nouveau/device: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 0b35ba672265..537db3a512c8 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -253,5 +253,7 @@
 #define nouveau_gr nvkm_gr
 #define nouveau_sw nvkm_sw
 #define nouveau_sw_chan nvkm_sw_chan
+#define nouveau_device_create nvkm_device_create
+#define nouveau_device_create_ nvkm_device_create_
 
 #endif

commit f84aff4ed4942add5c3bafd8464746209bc1f51c
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:32:15 2015 +1000

    drm/nouveau/sw: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 2fe75c15e5ac..0b35ba672265 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -251,5 +251,7 @@
 #define nouveau_fifo_chan nvkm_fifo_chan
 #define nouveau_fifo nvkm_fifo
 #define nouveau_gr nvkm_gr
+#define nouveau_sw nvkm_sw
+#define nouveau_sw_chan nvkm_sw_chan
 
 #endif

commit e3c71eb27419b600dcacea9f268254369e6550c4
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:29:43 2015 +1000

    drm/nouveau/gr: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 9d6990aa5b47..2fe75c15e5ac 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -250,5 +250,6 @@
 #define nouveau_disp nvkm_disp
 #define nouveau_fifo_chan nvkm_fifo_chan
 #define nouveau_fifo nvkm_fifo
+#define nouveau_gr nvkm_gr
 
 #endif

commit 05c7145dae17a53b030238f477bf28211a21b736
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:28:47 2015 +1000

    drm/nouveau/fifo: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index e81d40c221b5..9d6990aa5b47 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -248,5 +248,7 @@
 #define nouveau_dmaeng nvkm_dmaeng
 #define nouveau_dmaobj nvkm_dmaobj
 #define nouveau_disp nvkm_disp
+#define nouveau_fifo_chan nvkm_fifo_chan
+#define nouveau_fifo nvkm_fifo
 
 #endif

commit 878da15adb5ddce57339b87685d8b4630e60085f
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:24:57 2015 +1000

    drm/nouveau/disp: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 625d390d4c22..e81d40c221b5 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -245,5 +245,8 @@
 #define nouveau_fuse nvkm_fuse
 #define nouveau_mc nvkm_mc
 #define nouveau_mmu nvkm_mmu
+#define nouveau_dmaeng nvkm_dmaeng
+#define nouveau_dmaobj nvkm_dmaobj
+#define nouveau_disp nvkm_disp
 
 #endif

commit 21b137916ec25a507dbf7b6fe8b353fe9dc723c0
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:10:40 2015 +1000

    drm/nouveau/pmu: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 423086564735..625d390d4c22 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -209,6 +209,10 @@
 #define nouveau_volt nvkm_volt
 #define nouveau_timer nvkm_timer
 #define nouveau_timer_wait_eq nvkm_timer_wait_eq
+#define nouveau_timer_alarm nvkm_timer_alarm
+#define nouveau_alarm nvkm_alarm
+#define nouveau_timer_alarm_cancel nvkm_timer_alarm_cancel
+#define nouveau_alarm_init nvkm_alarm_init
 #define nva3_pll_calc gt215_pll_calc
 #define nouveau_clk nvkm_clk
 #define nouveau_domain nvkm_domain

commit 42594600095f03244a674fecdd2b5f6da2441180
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:09:19 2015 +1000

    drm/nouveau/mmu: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 7894ff57514b..423086564735 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -240,5 +240,6 @@
 #define nvc0_pte_storage_type_map gf100_pte_storage_type_map
 #define nouveau_fuse nvkm_fuse
 #define nouveau_mc nvkm_mc
+#define nouveau_mmu nvkm_mmu
 
 #endif

commit d7e5fcd2e7455094d6f8326b00f70864a700017a
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:08:21 2015 +1000

    drm/nouveau/mc: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 58f8d8bf2f8e..7894ff57514b 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -239,5 +239,6 @@
 #define nouveau_fb_tile nvkm_fb_tile
 #define nvc0_pte_storage_type_map gf100_pte_storage_type_map
 #define nouveau_fuse nvkm_fuse
+#define nouveau_mc nvkm_mc
 
 #endif

commit b9ec14246dc4260294ccfb25ec40b113d23e5b9a
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 15:04:16 2015 +1000

    drm/nouveau/i2c: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 4c16deb1ab7d..58f8d8bf2f8e 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -196,6 +196,7 @@
 #define nouveau_gpio nvkm_gpio
 #define nouveau_i2c nvkm_i2c
 #define nouveau_i2c_port nvkm_i2c_port
+#define nouveau_i2c_board_info nvkm_i2c_board_info
 #define nouveau_devinit nvkm_devinit
 #define nouveau_bios nvkm_bios
 #define nouveau_bios_oclass nvkm_bios_oclass

commit 630ec6c0d31e0d3b2d8aa641f252e83dfa4a9345
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:53:51 2015 +1000

    drm/nouveau/fuse: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 9571710e637c..4c16deb1ab7d 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -237,5 +237,6 @@
 #define nouveau_fb nvkm_fb
 #define nouveau_fb_tile nvkm_fb_tile
 #define nvc0_pte_storage_type_map gf100_pte_storage_type_map
+#define nouveau_fuse nvkm_fuse
 
 #endif

commit 639c308effb945732feb26fe416a6f00f3147ae4
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:52:58 2015 +1000

    drm/nouveau/fb: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 2b0fe0e7da8c..9571710e637c 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -220,5 +220,22 @@
 #define nva3_clk_info gt215_clk_info
 #define nva3_pll_info gt215_pll_info
 #define nouveau_ibus nvkm_ibus
+#define nouveau_memx nvkm_memx
+#define nouveau_memx_block nvkm_memx_block
+#define nouveau_memx_unblock nvkm_memx_unblock
+#define nouveau_memx_train nvkm_memx_train
+#define nouveau_memx_train_result nvkm_memx_train_result
+#define nouveau_memx_wait_vblank nvkm_memx_wait_vblank
+#define nouveau_memx_rd32 nvkm_memx_rd32
+#define nouveau_memx_wr32 nvkm_memx_wr32
+#define nouveau_memx_wait nvkm_memx_wait
+#define nouveau_memx_init nvkm_memx_init
+#define nouveau_memx_fini nvkm_memx_fini
+#define nouveau_memx_nsec nvkm_memx_nsec
+#define nouveau_ltc nvkm_ltc
+#define nouveau_pmu nvkm_pmu
+#define nouveau_fb nvkm_fb
+#define nouveau_fb_tile nvkm_fb_tile
+#define nvc0_pte_storage_type_map gf100_pte_storage_type_map
 
 #endif

commit a8c4362bad2218484870678f5d0c221968883f13
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:48:16 2015 +1000

    drm/nouveau/devinit: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 70ad99dd01e6..2b0fe0e7da8c 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -219,5 +219,6 @@
 #define nva3_clk_post gt215_clk_post
 #define nva3_clk_info gt215_clk_info
 #define nva3_pll_info gt215_pll_info
+#define nouveau_ibus nvkm_ibus
 
 #endif

commit 7632b30e4b8be39270b098948c5b2f05fae8b691
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:47:24 2015 +1000

    drm/nouveau/clk: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index af07bbba9faf..70ad99dd01e6 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -201,5 +201,23 @@
 #define nouveau_bios_oclass nvkm_bios_oclass
 #define nouveau_pll_vals nvkm_pll_vals
 #define nouveau_therm_trip_point nvkm_therm_trip_point
+#define nouveau_fb nvkm_fb
+#define nouveau_fifo nvkm_fifo
+#define nouveau_therm nvkm_therm
+#define nouveau_therm_cstate nvkm_therm_cstate
+#define nouveau_volt nvkm_volt
+#define nouveau_timer nvkm_timer
+#define nouveau_timer_wait_eq nvkm_timer_wait_eq
+#define nva3_pll_calc gt215_pll_calc
+#define nouveau_clk nvkm_clk
+#define nouveau_domain nvkm_domain
+#define nouveau_cstate nvkm_cstate
+#define nouveau_pstate nvkm_pstate
+#define nouveau_clk_astate nvkm_clk_astate
+#define nouveau_clk_ustate nvkm_clk_ustate
+#define nva3_clk_pre gt215_clk_pre
+#define nva3_clk_post gt215_clk_post
+#define nva3_clk_info gt215_clk_info
+#define nva3_pll_info gt215_pll_info
 
 #endif

commit d390b48027f886c9b8c60a4578044958f517047d
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:40:03 2015 +1000

    drm/nouveau/bios: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 18e5edde08bd..af07bbba9faf 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -193,5 +193,13 @@
 #define _nouveau_xtensa_context_rd32 _nvkm_xtensa_context_rd32
 #define _nouveau_xtensa_context_wr32 _nvkm_xtensa_context_wr32
 #define nouveau_xtensa_intr nvkm_xtensa_intr
+#define nouveau_gpio nvkm_gpio
+#define nouveau_i2c nvkm_i2c
+#define nouveau_i2c_port nvkm_i2c_port
+#define nouveau_devinit nvkm_devinit
+#define nouveau_bios nvkm_bios
+#define nouveau_bios_oclass nvkm_bios_oclass
+#define nouveau_pll_vals nvkm_pll_vals
+#define nouveau_therm_trip_point nvkm_therm_trip_point
 
 #endif

commit 245dcfe96f6900dbf64e48a350badf4c90fabc2e
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:35:35 2015 +1000

    drm/nouveau/bar: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index 0b5a1e4dff48..18e5edde08bd 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -137,6 +137,8 @@
 #define nouveau_vm_put nvkm_vm_put
 #define nouveau_vm_map nvkm_vm_map
 #define nouveau_vm_unmap nvkm_vm_unmap
+#define nouveau_vm_new nvkm_vm_new
+#define nouveau_vm_ref nvkm_vm_ref
 #define nouveau_instmem nvkm_instmem
 #define nouveau_instobj nvkm_instobj
 #define nouveau_mem nvkm_mem

commit 5025407b9862349d17b1dff25737aaef6520a439
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 14 14:11:21 2015 +1000

    drm/nouveau/core: namespace + nvidia gpu names (no binary change)
    
    The namespace of NVKM is being changed to nvkm_ instead of nouveau_,
    which will be used for the DRM part of the driver.  This is being
    done in order to make it very clear as to what part of the driver a
    given symbol belongs to, and as a minor step towards splitting the
    DRM driver out to be able to stand on its own (for virt).
    
    Because there's already a large amount of churn here anyway, this is
    as good a time as any to also switch to NVIDIA's device and chipset
    naming to ease collaboration with them.
    
    A comparison of objdump disassemblies proves no code changes.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
index cd57e238ddd3..0b5a1e4dff48 100644
--- a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -1,4 +1,195 @@
 #ifndef __NVKM_OS_H__
 #define __NVKM_OS_H__
 #include <nvif/os.h>
+
+#define nouveau_client nvkm_client
+#define nouveau_client_name nvkm_client_name
+#define nouveau_client_create nvkm_client_create
+#define nouveau_client_init nvkm_client_init
+#define nouveau_client_fini nvkm_client_fini
+#define nouveau_engctx nvkm_engctx
+#define nouveau_engctx_create nvkm_engctx_create
+#define nouveau_engctx_create_ nvkm_engctx_create_
+#define nouveau_engctx_destroy nvkm_engctx_destroy
+#define nouveau_engctx_init nvkm_engctx_init
+#define nouveau_engctx_fini nvkm_engctx_fini
+#define _nouveau_engctx_ctor _nvkm_engctx_ctor
+#define _nouveau_engctx_dtor _nvkm_engctx_dtor
+#define _nouveau_engctx_init _nvkm_engctx_init
+#define _nouveau_engctx_fini _nvkm_engctx_fini
+#define _nouveau_engctx_rd32 _nvkm_engctx_rd32
+#define _nouveau_engctx_wr32 _nvkm_engctx_wr32
+#define nouveau_engctx_get nvkm_engctx_get
+#define nouveau_engctx_put nvkm_engctx_put
+#define nouveau_engine nvkm_engine
+#define nouveau_engine_create nvkm_engine_create
+#define nouveau_engine_create_ nvkm_engine_create_
+#define nouveau_engine_destroy nvkm_engine_destroy
+#define nouveau_engine_init nvkm_engine_init
+#define nouveau_engine_fini nvkm_engine_fini
+#define _nouveau_engine_ctor _nvkm_engine_ctor
+#define _nouveau_engine_dtor _nvkm_engine_dtor
+#define _nouveau_engine_init _nvkm_engine_init
+#define _nouveau_engine_fini _nvkm_engine_fini
+#define nouveau_enum nvkm_enum
+#define nouveau_gpuobj nvkm_gpuobj
+#define nouveau_gpuobj_create nvkm_gpuobj_create
+#define nouveau_gpuobj_destroy nvkm_gpuobj_destroy
+#define _nouveau_gpuobj_ctor _nvkm_gpuobj_ctor
+#define _nouveau_gpuobj_dtor _nvkm_gpuobj_dtor
+#define _nouveau_gpuobj_init _nvkm_gpuobj_init
+#define _nouveau_gpuobj_fini _nvkm_gpuobj_fini
+#define _nouveau_gpuobj_rd32 _nvkm_gpuobj_rd32
+#define _nouveau_gpuobj_wr32 _nvkm_gpuobj_wr32
+#define nouveau_gpuobj_new nvkm_gpuobj_new
+#define nouveau_gpuobj_dup nvkm_gpuobj_dup
+#define nouveau_gpuobj_ref nvkm_gpuobj_ref
+#define nouveau_gpuobj_map nvkm_gpuobj_map
+#define nouveau_gpuobj_map_vm nvkm_gpuobj_map_vm
+#define nouveau_gpuobj_unmap nvkm_gpuobj_unmap
+#define nouveau_handle nvkm_handle
+#define nouveau_handle_ref nvkm_handle_ref
+#define nouveau_handle_put nvkm_handle_put
+#define nouveau_handle_get_class nvkm_handle_get_class
+#define nouveau_handle_get_vinst nvkm_handle_get_vinst
+#define nouveau_handle_get_cinst nvkm_handle_get_cinst
+#define nouveau_mm nvkm_mm
+#define nouveau_mm_node nvkm_mm_node
+#define nouveau_mm_init nvkm_mm_init
+#define nouveau_mm_fini nvkm_mm_fini
+#define nouveau_mm_head nvkm_mm_head
+#define nouveau_mm_tail nvkm_mm_tail
+#define nouveau_mm_free nvkm_mm_free
+#define nouveau_mm_initialised nvkm_mm_initialised
+#define nouveau_namedb nvkm_namedb
+#define nouveau_namedb_create nvkm_namedb_create
+#define nouveau_namedb_create_ nvkm_namedb_create_
+#define nouveau_namedb_destroy nvkm_namedb_destroy
+#define nouveau_namedb_init nvkm_namedb_init
+#define nouveau_namedb_fini nvkm_namedb_fini
+#define _nouveau_namedb_ctor _nvkm_namedb_ctor
+#define _nouveau_namedb_dtor _nvkm_namedb_dtor
+#define _nouveau_namedb_init _nvkm_namedb_init
+#define _nouveau_namedb_fini _nvkm_namedb_fini
+#define nouveau_namedb_ref nvkm_namedb_ref
+#define nouveau_namedb_put nvkm_namedb_put
+#define nouveau_namedb_get nvkm_namedb_get
+#define nouveau_namedb_get_class nvkm_namedb_get_class
+#define nouveau_namedb_get_vinst nvkm_namedb_get_vinst
+#define nouveau_namedb_get_cinst nvkm_namedb_get_cinst
+#define nouveau_object_debug nvkm_object_debug
+#define nouveau_object nvkm_object
+#define nouveau_object_create nvkm_object_create
+#define nouveau_object_create_ nvkm_object_create_
+#define nouveau_object_destroy nvkm_object_destroy
+#define nouveau_object_init nvkm_object_init
+#define nouveau_object_fini nvkm_object_fini
+#define _nouveau_object_ctor _nvkm_object_ctor
+#define nouveau_object_ctor nvkm_object_ctor
+#define nouveau_object_ref nvkm_object_ref
+#define nouveau_object_ofuncs nvkm_object_ofuncs
+#define nouveau_object_inc nvkm_object_inc
+#define nouveau_object_dec nvkm_object_dec
+#define nouveau_ofuncs nvkm_ofuncs
+#define nouveau_oclass nvkm_oclass
+#define nouveau_omthds nvkm_omthds
+#define nouveau_parent nvkm_parent
+#define nouveau_parent_create nvkm_parent_create
+#define nouveau_parent_create_ nvkm_parent_create_
+#define nouveau_parent_destroy nvkm_parent_destroy
+#define nouveau_parent_init nvkm_parent_init
+#define nouveau_parent_fini nvkm_parent_fini
+#define _nouveau_parent_ctor _nvkm_parent_ctor
+#define _nouveau_parent_dtor _nvkm_parent_dtor
+#define _nouveau_parent_init _nvkm_parent_init
+#define _nouveau_parent_fini _nvkm_parent_fini
+#define nouveau_printk nvkm_printk
+#define nouveau_ramht nvkm_ramht
+#define nouveau_ramht_new nvkm_ramht_new
+#define nouveau_ramht_ref nvkm_ramht_ref
+#define nouveau_ramht_insert nvkm_ramht_insert
+#define nouveau_ramht_remove nvkm_ramht_remove
+#define nouveau_subdev nvkm_subdev
+#define nouveau_subdev_create nvkm_subdev_create
+#define nouveau_subdev_create_ nvkm_subdev_create_
+#define nouveau_subdev_destroy nvkm_subdev_destroy
+#define nouveau_subdev_init nvkm_subdev_init
+#define nouveau_subdev_fini nvkm_subdev_fini
+#define _nouveau_subdev_ctor _nvkm_subdev_ctor
+#define _nouveau_subdev_dtor _nvkm_subdev_dtor
+#define _nouveau_subdev_init _nvkm_subdev_init
+#define _nouveau_subdev_fini _nvkm_subdev_fini
+#define nouveau_subdev_reset nvkm_subdev_reset
+#define nouveau_bitfield nvkm_bitfield
+#define nouveau_bitfield_print nvkm_bitfield_print
+#define nouveau_enum nvkm_enum
+#define nouveau_enum_find nvkm_enum_find
+#define nouveau_enum_print nvkm_enum_print
+#define nouveau_stropt nvkm_stropt
+#define nouveau_boolopt nvkm_boolopt
+#define nouveau_dbgopt nvkm_dbgopt
+#define nouveau_device nvkm_device
+#define nouveau_device_find nvkm_device_find
+#define nouveau_device_list nvkm_device_list
+#define nouveau_vma nvkm_vma
+#define nouveau_vm nvkm_vm
+#define nouveau_vm_get nvkm_vm_get
+#define nouveau_vm_put nvkm_vm_put
+#define nouveau_vm_map nvkm_vm_map
+#define nouveau_vm_unmap nvkm_vm_unmap
+#define nouveau_instmem nvkm_instmem
+#define nouveau_instobj nvkm_instobj
+#define nouveau_mem nvkm_mem
+#define nouveau_bar nvkm_bar
+#define nouveau_falcon nvkm_falcon
+#define nouveau_falcon_create nvkm_falcon_create
+#define nouveau_falcon_create_ nvkm_falcon_create_
+#define nouveau_falcon_destroy nvkm_falcon_destroy
+#define nouveau_falcon_init nvkm_falcon_init
+#define nouveau_falcon_fini nvkm_falcon_fini
+#define _nouveau_falcon_ctor _nvkm_falcon_ctor
+#define _nouveau_falcon_dtor _nvkm_falcon_dtor
+#define _nouveau_falcon_init _nvkm_falcon_init
+#define _nouveau_falcon_fini _nvkm_falcon_fini
+#define _nouveau_falcon_rd32 _nvkm_falcon_rd32
+#define _nouveau_falcon_wr32 _nvkm_falcon_wr32
+#define nouveau_falcon_context nvkm_falcon_context
+#define nouveau_falcon_context_create nvkm_falcon_context_create
+#define nouveau_falcon_context_create_ nvkm_falcon_context_create_
+#define nouveau_falcon_context_destroy nvkm_falcon_context_destroy
+#define nouveau_falcon_context_init nvkm_falcon_context_init
+#define nouveau_falcon_context_fini nvkm_falcon_context_fini
+#define _nouveau_falcon_context_ctor _nvkm_falcon_context_ctor
+#define _nouveau_falcon_context_dtor _nvkm_falcon_context_dtor
+#define _nouveau_falcon_context_init _nvkm_falcon_context_init
+#define _nouveau_falcon_context_fini _nvkm_falcon_context_fini
+#define _nouveau_falcon_context_rd32 _nvkm_falcon_context_rd32
+#define _nouveau_falcon_context_wr32 _nvkm_falcon_context_wr32
+#define nouveau_falcon_intr nvkm_falcon_intr
+#define nouveau_xtensa nvkm_xtensa
+#define nouveau_xtensa_create nvkm_xtensa_create
+#define nouveau_xtensa_create_ nvkm_xtensa_create_
+#define nouveau_xtensa_destroy nvkm_xtensa_destroy
+#define nouveau_xtensa_init nvkm_xtensa_init
+#define nouveau_xtensa_fini nvkm_xtensa_fini
+#define _nouveau_xtensa_ctor _nvkm_xtensa_ctor
+#define _nouveau_xtensa_dtor _nvkm_xtensa_dtor
+#define _nouveau_xtensa_init _nvkm_xtensa_init
+#define _nouveau_xtensa_fini _nvkm_xtensa_fini
+#define _nouveau_xtensa_rd32 _nvkm_xtensa_rd32
+#define _nouveau_xtensa_wr32 _nvkm_xtensa_wr32
+#define nouveau_xtensa_context nvkm_xtensa_context
+#define nouveau_xtensa_context_create nvkm_xtensa_context_create
+#define nouveau_xtensa_context_create_ nvkm_xtensa_context_create_
+#define nouveau_xtensa_context_destroy nvkm_xtensa_context_destroy
+#define nouveau_xtensa_context_init nvkm_xtensa_context_init
+#define nouveau_xtensa_context_fini nvkm_xtensa_context_fini
+#define _nouveau_xtensa_engctx_ctor _nvkm_xtensa_engctx_ctor
+#define _nouveau_xtensa_context_dtor _nvkm_xtensa_context_dtor
+#define _nouveau_xtensa_context_init _nvkm_xtensa_context_init
+#define _nouveau_xtensa_context_fini _nvkm_xtensa_context_fini
+#define _nouveau_xtensa_context_rd32 _nvkm_xtensa_context_rd32
+#define _nouveau_xtensa_context_wr32 _nvkm_xtensa_context_wr32
+#define nouveau_xtensa_intr nvkm_xtensa_intr
+
 #endif

commit c39f472e9f14e49a9bc091977ced0ec45fc00c57
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Tue Jan 13 22:13:14 2015 +1000

    drm/nouveau: remove symlinks, move core/ to nvkm/ (no code changes)
    
    The symlinks were annoying some people, and they're not used anywhere
    else in the kernel tree.  The include directory structure has been
    changed so that symlinks aren't needed anymore.
    
    NVKM has been moved from core/ to nvkm/ to make it more obvious as to
    what the directory is for, and as some minor prep for when NVKM gets
    split out into its own module (virt) at a later date.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

diff --git a/drivers/gpu/drm/nouveau/include/nvkm/core/os.h b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
new file mode 100644
index 000000000000..cd57e238ddd3
--- /dev/null
+++ b/drivers/gpu/drm/nouveau/include/nvkm/core/os.h
@@ -0,0 +1,4 @@
+#ifndef __NVKM_OS_H__
+#define __NVKM_OS_H__
+#include <nvif/os.h>
+#endif
