commit 2ea2269e296a0c15387b40362410c1569e77502c
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Sun Jun 30 08:18:51 2019 +0200

    drm/xen: drop use of drmP.h
    
    The drmP.h header is deprecated.  Drop all uses.
    Added includes/forwards to the header files and
    then fixed fallout in the .c files.
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Acked-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
    Acked-by: Emil Velikov <emil.velikov@collabora.com>
    Cc: xen-devel@lists.xenproject.org
    Link: https://patchwork.freedesktop.org/patch/msgid/20190630061922.7254-3-sam@ravnborg.org

diff --git a/drivers/gpu/drm/xen/xen_drm_front_cfg.c b/drivers/gpu/drm/xen/xen_drm_front_cfg.c
index 5baf2b9de93c..ec53b9cc9e0e 100644
--- a/drivers/gpu/drm/xen/xen_drm_front_cfg.c
+++ b/drivers/gpu/drm/xen/xen_drm_front_cfg.c
@@ -8,10 +8,10 @@
  * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
  */
 
-#include <drm/drmP.h>
-
 #include <linux/device.h>
 
+#include <drm/drm_print.h>
+
 #include <xen/interface/io/displif.h>
 #include <xen/xenbus.h>
 

commit c575b7eeb89f94356997abd62d6d5a0590e259b7
Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
Date:   Tue Apr 3 14:23:17 2018 +0300

    drm/xen-front: Add support for Xen PV display frontend
    
    Add support for Xen para-virtualized frontend display driver.
    Accompanying backend [1] is implemented as a user-space application
    and its helper library [2], capable of running as a Weston client
    or DRM master.
    Configuration of both backend and frontend is done via
    Xen guest domain configuration options [3].
    
    Driver limitations:
     1. Only primary plane without additional properties is supported.
     2. Only one video mode supported which resolution is configured
        via XenStore.
     3. All CRTCs operate at fixed frequency of 60Hz.
    
    1. Implement Xen bus state machine for the frontend driver according to
    the state diagram and recovery flow from display para-virtualized
    protocol: xen/interface/io/displif.h.
    
    2. Read configuration values from Xen store according
    to xen/interface/io/displif.h protocol:
      - read connector(s) configuration
      - read buffer allocation mode (backend/frontend)
    
    3. Handle Xen event channels:
      - create for all configured connectors and publish
        corresponding ring references and event channels in Xen store,
        so backend can connect
      - implement event channels interrupt handlers
      - create and destroy event channels with respect to Xen bus state
    
    4. Implement shared buffer handling according to the
    para-virtualized display device protocol at xen/interface/io/displif.h:
      - handle page directories according to displif protocol:
        - allocate and share page directories
        - grant references to the required set of pages for the
          page directory
      - allocate xen balllooned pages via Xen balloon driver
        with alloc_xenballooned_pages/free_xenballooned_pages
      - grant references to the required set of pages for the
        shared buffer itself
      - implement pages map/unmap for the buffers allocated by the
        backend (gnttab_map_refs/gnttab_unmap_refs)
    
    5. Implement kernel modesetiing/connector handling using
    DRM simple KMS helper pipeline:
    
    - implement KMS part of the driver with the help of DRM
      simple pipepline helper which is possible due to the fact
      that the para-virtualized driver only supports a single
      (primary) plane:
      - initialize connectors according to XenStore configuration
      - handle frame done events from the backend
      - create and destroy frame buffers and propagate those
        to the backend
      - propagate set/reset mode configuration to the backend on display
        enable/disable callbacks
      - send page flip request to the backend and implement logic for
        reporting backend IO errors on prepare fb callback
    
    - implement virtual connector handling:
      - support only pixel formats suitable for single plane modes
      - make sure the connector is always connected
      - support a single video mode as per para-virtualized driver
        configuration
    
    6. Implement GEM handling depending on driver mode of operation:
    depending on the requirements for the para-virtualized environment,
    namely requirements dictated by the accompanying DRM/(v)GPU drivers
    running in both host and guest environments, number of operating
    modes of para-virtualized display driver are supported:
     - display buffers can be allocated by either
       frontend driver or backend
     - display buffers can be allocated to be contiguous
       in memory or not
    
    Note! Frontend driver itself has no dependency on contiguous memory for
    its operation.
    
    6.1. Buffers allocated by the frontend driver.
    
    The below modes of operation are configured at compile-time via
    frontend driver's kernel configuration.
    
    6.1.1. Front driver configured to use GEM CMA helpers
         This use-case is useful when used with accompanying DRM/vGPU driver
         in guest domain which was designed to only work with contiguous
         buffers, e.g. DRM driver based on GEM CMA helpers: such drivers can
         only import contiguous PRIME buffers, thus requiring frontend driver
         to provide such. In order to implement this mode of operation
         para-virtualized frontend driver can be configured to use
         GEM CMA helpers.
    
    6.1.2. Front driver doesn't use GEM CMA
         If accompanying drivers can cope with non-contiguous memory then, to
         lower pressure on CMA subsystem of the kernel, driver can allocate
         buffers from system memory.
    
    Note! If used with accompanying DRM/(v)GPU drivers this mode of operation
    may require IOMMU support on the platform, so accompanying DRM/vGPU
    hardware can still reach display buffer memory while importing PRIME
    buffers from the frontend driver.
    
    6.2. Buffers allocated by the backend
    
    This mode of operation is run-time configured via guest domain
    configuration through XenStore entries.
    
    For systems which do not provide IOMMU support, but having specific
    requirements for display buffers it is possible to allocate such buffers
    at backend side and share those with the frontend.
    For example, if host domain is 1:1 mapped and has DRM/GPU hardware
    expecting physically contiguous memory, this allows implementing
    zero-copying use-cases.
    
    Note, while using this scenario the following should be considered:
      a) If guest domain dies then pages/grants received from the backend
         cannot be claimed back
      b) Misbehaving guest may send too many requests to the
         backend exhausting its grant references and memory
         (consider this from security POV).
    
    Note! Configuration options 1.1 (contiguous display buffers) and 2
    (backend allocated buffers) are not supported at the same time.
    
    7. Handle communication with the backend:
     - send requests and wait for the responses according
       to the displif protocol
     - serialize access to the communication channel
     - time-out used for backend communication is set to 3000 ms
     - manage display buffers shared with the backend
    
    [1] https://github.com/xen-troops/displ_be
    [2] https://github.com/xen-troops/libxenbe
    [3] https://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=docs/man/xl.cfg.pod.5.in;h=a699367779e2ae1212ff8f638eff0206ec1a1cc9;hb=refs/heads/master#l1257
    
    Signed-off-by: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
    Reviewed-by: Boris Ostrovsky <boris.ostrovsky@oracle.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180403112317.28751-2-andr2000@gmail.com

diff --git a/drivers/gpu/drm/xen/xen_drm_front_cfg.c b/drivers/gpu/drm/xen/xen_drm_front_cfg.c
new file mode 100644
index 000000000000..5baf2b9de93c
--- /dev/null
+++ b/drivers/gpu/drm/xen/xen_drm_front_cfg.c
@@ -0,0 +1,77 @@
+// SPDX-License-Identifier: GPL-2.0 OR MIT
+
+/*
+ *  Xen para-virtual DRM device
+ *
+ * Copyright (C) 2016-2018 EPAM Systems Inc.
+ *
+ * Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
+ */
+
+#include <drm/drmP.h>
+
+#include <linux/device.h>
+
+#include <xen/interface/io/displif.h>
+#include <xen/xenbus.h>
+
+#include "xen_drm_front.h"
+#include "xen_drm_front_cfg.h"
+
+static int cfg_connector(struct xen_drm_front_info *front_info,
+			 struct xen_drm_front_cfg_connector *connector,
+			 const char *path, int index)
+{
+	char *connector_path;
+
+	connector_path = devm_kasprintf(&front_info->xb_dev->dev,
+					GFP_KERNEL, "%s/%d", path, index);
+	if (!connector_path)
+		return -ENOMEM;
+
+	if (xenbus_scanf(XBT_NIL, connector_path, XENDISPL_FIELD_RESOLUTION,
+			 "%d" XENDISPL_RESOLUTION_SEPARATOR "%d",
+			 &connector->width, &connector->height) < 0) {
+		/* either no entry configured or wrong resolution set */
+		connector->width = 0;
+		connector->height = 0;
+		return -EINVAL;
+	}
+
+	connector->xenstore_path = connector_path;
+
+	DRM_INFO("Connector %s: resolution %dx%d\n",
+		 connector_path, connector->width, connector->height);
+	return 0;
+}
+
+int xen_drm_front_cfg_card(struct xen_drm_front_info *front_info,
+			   struct xen_drm_front_cfg *cfg)
+{
+	struct xenbus_device *xb_dev = front_info->xb_dev;
+	int ret, i;
+
+	if (xenbus_read_unsigned(front_info->xb_dev->nodename,
+				 XENDISPL_FIELD_BE_ALLOC, 0)) {
+		DRM_INFO("Backend can provide display buffers\n");
+		cfg->be_alloc = true;
+	}
+
+	cfg->num_connectors = 0;
+	for (i = 0; i < ARRAY_SIZE(cfg->connectors); i++) {
+		ret = cfg_connector(front_info, &cfg->connectors[i],
+				    xb_dev->nodename, i);
+		if (ret < 0)
+			break;
+		cfg->num_connectors++;
+	}
+
+	if (!cfg->num_connectors) {
+		DRM_ERROR("No connector(s) configured at %s\n",
+			  xb_dev->nodename);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
