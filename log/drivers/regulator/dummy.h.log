commit 2874c5fd284268364ece81a7bd936f3c8168e567
Author: Thomas Gleixner <tglx@linutronix.de>
Date:   Mon May 27 08:55:01 2019 +0200

    treewide: Replace GPLv2 boilerplate/reference with SPDX - rule 152
    
    Based on 1 normalized pattern(s):
    
      this program is free software you can redistribute it and or modify
      it under the terms of the gnu general public license as published by
      the free software foundation either version 2 of the license or at
      your option any later version
    
    extracted by the scancode license scanner the SPDX license identifier
    
      GPL-2.0-or-later
    
    has been chosen to replace the boilerplate/reference in 3029 file(s).
    
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Allison Randal <allison@lohutok.net>
    Cc: linux-spdx@vger.kernel.org
    Link: https://lkml.kernel.org/r/20190527070032.746973796@linutronix.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/regulator/dummy.h b/drivers/regulator/dummy.h
index 97a11b7e8882..c79e28209025 100644
--- a/drivers/regulator/dummy.h
+++ b/drivers/regulator/dummy.h
@@ -1,3 +1,4 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  * dummy.h
  *
@@ -5,11 +6,6 @@
  *
  * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation; either version 2 of the
- * License, or (at your option) any later version.
- *
  * This is useful for systems with mixed controllable and
  * non-controllable regulators, as well as for allowing testing on
  * systems with no controllable regulators.

commit f5ee10ab42c76f36eea1bd6f7a35da387635ebf9
Author: Anand Gadiyar <gadiyar@ti.com>
Date:   Mon Oct 11 22:05:55 2010 +0530

    regulator: fix build when CONFIG_REGULATOR_DUMMY=n
    
    Commit f03f91826 (regulator: Add option for machine drivers
    to enable the dummy regulator) in the regulators tree
    seems to have introduced the following build break when
    CONFIG_REGULATOR_DUMMY is disabled. Fix this.
    
      CC      drivers/regulator/dummy.o
    drivers/regulator/dummy.c:41: error: redefinition of 'regulator_dummy_init'
    drivers/regulator/dummy.h:28: note: previous definition of 'regulator_dummy_init' was here
    make[2]: *** [drivers/regulator/dummy.o] Error 1
    make[1]: *** [drivers/regulator] Error 2
    make: *** [drivers] Error 2
    
    Signed-off-by: Anand Gadiyar <gadiyar@ti.com>
    Cc: Liam Girdwood <lrg@slimlogic.co.uk>
    Cc: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Acked-by: Randy Dunlap <randy.dunlap@oracle.com>
    Acked-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/drivers/regulator/dummy.h b/drivers/regulator/dummy.h
index 3921c0e24249..97a11b7e8882 100644
--- a/drivers/regulator/dummy.h
+++ b/drivers/regulator/dummy.h
@@ -22,10 +22,6 @@ struct regulator_dev;
 
 extern struct regulator_dev *dummy_regulator_rdev;
 
-#ifdef CONFIG_REGULATOR_DUMMY
 void __init regulator_dummy_init(void);
-#else
-static inline void regulator_dummy_init(void) { }
-#endif
 
 #endif

commit 34abbd68efe09765465b81dfedeee9994f13302f
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Fri Feb 12 10:18:08 2010 +0000

    regulator: Provide optional dummy regulator for consumers
    
    In order to ease transitions with drivers are boards start using regulators
    provide an option to cause all regulator_get() calls to succeed, with a
    dummy always on regulator being supplied where one has not been configured.
    A warning is printed whenever the dummy regulator is used to aid system
    development.
    
    This regulator does not implement any regulator operations but will allow
    simple consumers which only do enable() and disable() calls to run. It
    is kept separate from the fixed voltage regulator to avoid Kconfig
    confusion on the part of users when it is extended to allow boards to
    explicitly use the dummy regulator to simplify cases where the majority
    of supplies are from fixed regulators without software control.
    
    This option is currently only effective for systems which do not specify
    full constriants. If required an override could also be provided to allow
    these systems to use the dummy regulator, though it is likely that
    unconfigured supplies on such systems will lead to error due to
    regulators being powered down more aggressively when not in use.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Liam Girdwood <lrg@slimlogic.co.uk>

diff --git a/drivers/regulator/dummy.h b/drivers/regulator/dummy.h
new file mode 100644
index 000000000000..3921c0e24249
--- /dev/null
+++ b/drivers/regulator/dummy.h
@@ -0,0 +1,31 @@
+/*
+ * dummy.h
+ *
+ * Copyright 2010 Wolfson Microelectronics PLC.
+ *
+ * Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This is useful for systems with mixed controllable and
+ * non-controllable regulators, as well as for allowing testing on
+ * systems with no controllable regulators.
+ */
+
+#ifndef _DUMMY_H
+#define _DUMMY_H
+
+struct regulator_dev;
+
+extern struct regulator_dev *dummy_regulator_rdev;
+
+#ifdef CONFIG_REGULATOR_DUMMY
+void __init regulator_dummy_init(void);
+#else
+static inline void regulator_dummy_init(void) { }
+#endif
+
+#endif
