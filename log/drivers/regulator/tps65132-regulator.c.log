commit 77e29598ca3fc20314f1acec35ada9706b3ea16b
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Jan 9 23:58:08 2020 +0800

    regulator: Convert i2c drivers to use .probe_new
    
    Use the new .probe_new for i2c drivers.
    These drivers do not use const struct i2c_device_id * argument, so convert
    them to utilise the simplified i2c driver registration.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Link: https://lore.kernel.org/r/20200109155808.22003-1-axel.lin@ingics.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index 7b0e38f8d627..0edc83089ba2 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -220,8 +220,7 @@ static const struct regmap_config tps65132_regmap_config = {
 	.wr_table	= &tps65132_no_reg_table,
 };
 
-static int tps65132_probe(struct i2c_client *client,
-			  const struct i2c_device_id *client_id)
+static int tps65132_probe(struct i2c_client *client)
 {
 	struct device *dev = &client->dev;
 	struct tps65132_regulator *tps;
@@ -272,7 +271,7 @@ static struct i2c_driver tps65132_i2c_driver = {
 	.driver = {
 		.name = "tps65132",
 	},
-	.probe = tps65132_probe,
+	.probe_new = tps65132_probe,
 	.id_table = tps65132_id,
 };
 

commit 22803ca3c56b02e5bb8a4eb14104114009fd1c65
Author: Dmitry Torokhov <dmitry.torokhov@gmail.com>
Date:   Fri Oct 4 16:10:16 2019 -0700

    regulator: tps65132: switch to using devm_fwnode_gpiod_get()
    
    devm_fwnode_get_index_gpiod_from_child() is going away as the name is
    too unwieldy, let's switch to using the new devm_fwnode_gpiod_get().
    
    Note that we no longer need to check for NULL as devm_fwnode_gpiod_get()
    will return -ENOENT if GPIO is missing.
    
    Signed-off-by: Dmitry Torokhov <dmitry.torokhov@gmail.com>
    Link: https://lore.kernel.org/r/20191004231017.130290-7-dmitry.torokhov@gmail.com
    Reviewed-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index e302bd01a084..7b0e38f8d627 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -136,9 +136,10 @@ static int tps65132_of_parse_cb(struct device_node *np,
 	struct tps65132_reg_pdata *rpdata = &tps->reg_pdata[desc->id];
 	int ret;
 
-	rpdata->en_gpiod = devm_fwnode_get_index_gpiod_from_child(tps->dev,
-					"enable", 0, &np->fwnode, 0, "enable");
-	if (IS_ERR_OR_NULL(rpdata->en_gpiod)) {
+	rpdata->en_gpiod = devm_fwnode_gpiod_get(tps->dev, of_fwnode_handle(np),
+						 "enable", GPIOD_ASIS,
+						 "enable");
+	if (IS_ERR(rpdata->en_gpiod)) {
 		ret = PTR_ERR(rpdata->en_gpiod);
 
 		/* Ignore the error other than probe defer */
@@ -147,10 +148,12 @@ static int tps65132_of_parse_cb(struct device_node *np,
 		return 0;
 	}
 
-	rpdata->act_dis_gpiod = devm_fwnode_get_index_gpiod_from_child(
-					tps->dev, "active-discharge", 0,
-					&np->fwnode, 0, "active-discharge");
-	if (IS_ERR_OR_NULL(rpdata->act_dis_gpiod)) {
+	rpdata->act_dis_gpiod = devm_fwnode_gpiod_get(tps->dev,
+						      of_fwnode_handle(np),
+						      "active-discharge",
+						      GPIOD_ASIS,
+						      "active-discharge");
+	if (IS_ERR(rpdata->act_dis_gpiod)) {
 		ret = PTR_ERR(rpdata->act_dis_gpiod);
 
 		/* Ignore the error other than probe defer */

commit a95744670664a8a184eb26049dc7020f221a0979
Author: Guido Günther <agx@sigxcpu.org>
Date:   Wed Sep 4 12:35:00 2019 -0700

    regulator: tps65132: Stop parsing DT when gpio is not found
    
    In case of a missing (optional) gpio don't fall through up to
    "ti,active-discharge-time-us" due to
    devm_fwnode_get_index_gpiod_from_child() returning NULL (since
    gpiod_get_from_of_node() returned NULL) but rather indicate success as
    intended.
    
    This makes the driver probe correctly when e.g. only the enable gpio is
    given.
    
    Signed-off-by: Guido Günther <agx@sigxcpu.org>
    Link: https://lore.kernel.org/r/363bd50cc7c60daa57d614a341d1fd649f05194c.1567625660.git.agx@sigxcpu.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index 6e22f5ebba2e..e302bd01a084 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -138,7 +138,7 @@ static int tps65132_of_parse_cb(struct device_node *np,
 
 	rpdata->en_gpiod = devm_fwnode_get_index_gpiod_from_child(tps->dev,
 					"enable", 0, &np->fwnode, 0, "enable");
-	if (IS_ERR(rpdata->en_gpiod)) {
+	if (IS_ERR_OR_NULL(rpdata->en_gpiod)) {
 		ret = PTR_ERR(rpdata->en_gpiod);
 
 		/* Ignore the error other than probe defer */
@@ -150,7 +150,7 @@ static int tps65132_of_parse_cb(struct device_node *np,
 	rpdata->act_dis_gpiod = devm_fwnode_get_index_gpiod_from_child(
 					tps->dev, "active-discharge", 0,
 					&np->fwnode, 0, "active-discharge");
-	if (IS_ERR(rpdata->act_dis_gpiod)) {
+	if (IS_ERR_OR_NULL(rpdata->act_dis_gpiod)) {
 		ret = PTR_ERR(rpdata->act_dis_gpiod);
 
 		/* Ignore the error other than probe defer */

commit 4e105e3b4bc6a1825aefc56f11951e1496a5bb3c
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Mar 21 20:00:38 2019 +0800

    regulator: tps65132: Constify tps65132_regulator_ops and tps_regs_desc
    
    The tps65132_regulator_ops and tps_regs_desc never need to be modified,
    make them const so compiler can put them to .rodata.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index 1f627e161b99..6e22f5ebba2e 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -117,7 +117,7 @@ static int tps65132_regulator_is_enabled(struct regulator_dev *rdev)
 	return 1;
 }
 
-static struct regulator_ops tps65132_regulator_ops = {
+static const struct regulator_ops tps65132_regulator_ops = {
 	.enable = tps65132_regulator_enable,
 	.disable = tps65132_regulator_disable,
 	.is_enabled = tps65132_regulator_is_enabled,
@@ -193,7 +193,7 @@ static int tps65132_of_parse_cb(struct device_node *np,
 		.owner = THIS_MODULE,			\
 	}
 
-static struct regulator_desc tps_regs_desc[TPS65132_MAX_REGULATORS] = {
+static const struct regulator_desc tps_regs_desc[TPS65132_MAX_REGULATORS] = {
 	TPS65132_REGULATOR_DESC(VPOS, outp),
 	TPS65132_REGULATOR_DESC(VNEG, outn),
 };

commit 2e62e03333bb41277c920844e72bf26a29724b14
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Mar 21 20:00:37 2019 +0800

    regulator: tps65132: Remove unneeded fields from struct tps65132_regulator
    
    These fields are not really need, remove them.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index 73978dd440f7..1f627e161b99 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -55,10 +55,7 @@ struct tps65132_reg_pdata {
 
 struct tps65132_regulator {
 	struct device *dev;
-	struct regmap *rmap;
-	struct regulator_desc *rdesc[TPS65132_MAX_REGULATORS];
 	struct tps65132_reg_pdata reg_pdata[TPS65132_MAX_REGULATORS];
-	struct regulator_dev *rdev[TPS65132_MAX_REGULATORS];
 };
 
 static int tps65132_regulator_enable(struct regulator_dev *rdev)
@@ -225,6 +222,8 @@ static int tps65132_probe(struct i2c_client *client,
 {
 	struct device *dev = &client->dev;
 	struct tps65132_regulator *tps;
+	struct regulator_dev *rdev;
+	struct regmap *rmap;
 	struct regulator_config config = { };
 	int id;
 	int ret;
@@ -233,9 +232,9 @@ static int tps65132_probe(struct i2c_client *client,
 	if (!tps)
 		return -ENOMEM;
 
-	tps->rmap = devm_regmap_init_i2c(client, &tps65132_regmap_config);
-	if (IS_ERR(tps->rmap)) {
-		ret = PTR_ERR(tps->rmap);
+	rmap = devm_regmap_init_i2c(client, &tps65132_regmap_config);
+	if (IS_ERR(rmap)) {
+		ret = PTR_ERR(rmap);
 		dev_err(dev, "regmap init failed: %d\n", ret);
 		return ret;
 	}
@@ -244,18 +243,16 @@ static int tps65132_probe(struct i2c_client *client,
 	tps->dev = dev;
 
 	for (id = 0; id < TPS65132_MAX_REGULATORS; ++id) {
-		tps->rdesc[id] = &tps_regs_desc[id];
-
-		config.regmap = tps->rmap;
+		config.regmap = rmap;
 		config.dev = dev;
 		config.driver_data = tps;
 
-		tps->rdev[id] = devm_regulator_register(dev,
-					tps->rdesc[id], &config);
-		if (IS_ERR(tps->rdev[id])) {
-			ret = PTR_ERR(tps->rdev[id]);
+		rdev = devm_regulator_register(dev, &tps_regs_desc[id],
+					       &config);
+		if (IS_ERR(rdev)) {
+			ret = PTR_ERR(rdev);
 			dev_err(dev, "regulator %s register failed: %d\n",
-				tps->rdesc[id]->name, ret);
+				tps_regs_desc[id].name, ret);
 			return ret;
 		}
 	}

commit 43594dd453f082d36336ea8338cd9c2d28c1691a
Author: kbuild test robot <fengguang.wu@intel.com>
Date:   Fri Apr 14 04:57:35 2017 +0800

    regulator: tps65132: fix platform_no_drv_owner.cocci warnings
    
    drivers/regulator/tps65132-regulator.c:274:3-8: No need to set .owner here. The core will do it.
    
     Remove .owner field if calls are used which set it automatically
    
    Generated by: scripts/coccinelle/api/platform_no_drv_owner.cocci
    
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
    Acked-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index a2fc7322f434..73978dd440f7 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -271,7 +271,6 @@ MODULE_DEVICE_TABLE(i2c, tps65132_id);
 static struct i2c_driver tps65132_i2c_driver = {
 	.driver = {
 		.name = "tps65132",
-		.owner = THIS_MODULE,
 	},
 	.probe = tps65132_probe,
 	.id_table = tps65132_id,

commit 5abca06c21bce9b65c1a9bf8b26d8f1711aca94a
Author: Axel Lin <axel.lin@ingics.com>
Date:   Thu Apr 13 20:55:50 2017 +0800

    regulator: tps65132: Fix off-by-one for .max_register setting
    
    TPS65132_REG_CONTROL(0xFF) is the latest valid register.
    
    Signed-off-by: Axel Lin <axel.lin@ingics.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
index a949206065d4..a2fc7322f434 100644
--- a/drivers/regulator/tps65132-regulator.c
+++ b/drivers/regulator/tps65132-regulator.c
@@ -214,7 +214,7 @@ static const struct regmap_access_table tps65132_no_reg_table = {
 static const struct regmap_config tps65132_regmap_config = {
 	.reg_bits	= 8,
 	.val_bits	= 8,
-	.max_register	= TPS65132_REG_CONTROL + 1,
+	.max_register	= TPS65132_REG_CONTROL,
 	.cache_type	= REGCACHE_NONE,
 	.rd_table	= &tps65132_no_reg_table,
 	.wr_table	= &tps65132_no_reg_table,

commit 77c129bfefc85bae4dbaa655a5d9b75c9c665da9
Author: Venkat Reddy Talla <vreddytalla@nvidia.com>
Date:   Wed Apr 12 15:44:36 2017 +0530

    regulator: tps65132: add regulator driver for TI TPS65132
    
    Add regulator driver for the device TI TPS65132 which is single
    inductor - dual output power supply device. TPS65132 device is
    designed to support general positive/negative driven applications
    like TFT display panels.
    
    TPS65132 regulator driver supports to enable/disable and set voltage
    on its output.
    
    Signed-off-by: Venkat Reddy Talla <vreddytalla@nvidia.com>
    Signed-off-by: Laxman Dewangan <ldewangan@nvidia.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/regulator/tps65132-regulator.c b/drivers/regulator/tps65132-regulator.c
new file mode 100644
index 000000000000..a949206065d4
--- /dev/null
+++ b/drivers/regulator/tps65132-regulator.c
@@ -0,0 +1,285 @@
+/*
+ * TI TPS65132 Regulator driver
+ *
+ * Copyright (C) 2017 NVIDIA CORPORATION. All rights reserved.
+ *
+ * Author: Venkat Reddy Talla <vreddytalla@nvidia.com>
+ *		Laxman Dewangan <ldewangan@nvidia.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed "as is" WITHOUT ANY WARRANTY of any kind,
+ * whether express or implied; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/gpio/consumer.h>
+#include <linux/i2c.h>
+#include <linux/module.h>
+#include <linux/regmap.h>
+#include <linux/regulator/driver.h>
+#include <linux/regulator/machine.h>
+
+#define TPS65132_REG_VPOS		0x00
+#define TPS65132_REG_VNEG		0x01
+#define TPS65132_REG_APPS_DISP_DISN	0x03
+#define TPS65132_REG_CONTROL		0x0FF
+
+#define TPS65132_VOUT_MASK		0x1F
+#define TPS65132_VOUT_N_VOLTAGE		0x15
+#define TPS65132_VOUT_VMIN		4000000
+#define TPS65132_VOUT_VMAX		6000000
+#define TPS65132_VOUT_STEP		100000
+
+#define TPS65132_REG_APPS_DIS_VPOS		BIT(0)
+#define TPS65132_REG_APPS_DIS_VNEG		BIT(1)
+
+#define TPS65132_REGULATOR_ID_VPOS	0
+#define TPS65132_REGULATOR_ID_VNEG	1
+#define TPS65132_MAX_REGULATORS		2
+
+#define TPS65132_ACT_DIS_TIME_SLACK		1000
+
+struct tps65132_reg_pdata {
+	struct gpio_desc *en_gpiod;
+	struct gpio_desc *act_dis_gpiod;
+	unsigned int act_dis_time_us;
+	int ena_gpio_state;
+};
+
+struct tps65132_regulator {
+	struct device *dev;
+	struct regmap *rmap;
+	struct regulator_desc *rdesc[TPS65132_MAX_REGULATORS];
+	struct tps65132_reg_pdata reg_pdata[TPS65132_MAX_REGULATORS];
+	struct regulator_dev *rdev[TPS65132_MAX_REGULATORS];
+};
+
+static int tps65132_regulator_enable(struct regulator_dev *rdev)
+{
+	struct tps65132_regulator *tps = rdev_get_drvdata(rdev);
+	int id = rdev_get_id(rdev);
+	struct tps65132_reg_pdata *rpdata = &tps->reg_pdata[id];
+	int ret;
+
+	if (!IS_ERR(rpdata->en_gpiod)) {
+		gpiod_set_value_cansleep(rpdata->en_gpiod, 1);
+		rpdata->ena_gpio_state = 1;
+	}
+
+	/* Hardware automatically enable discharge bit in enable */
+	if (rdev->constraints->active_discharge ==
+			REGULATOR_ACTIVE_DISCHARGE_DISABLE) {
+		ret = regulator_set_active_discharge_regmap(rdev, false);
+		if (ret < 0) {
+			dev_err(tps->dev, "Failed to disable active discharge: %d\n",
+				ret);
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+static int tps65132_regulator_disable(struct regulator_dev *rdev)
+{
+	struct tps65132_regulator *tps = rdev_get_drvdata(rdev);
+	int id = rdev_get_id(rdev);
+	struct tps65132_reg_pdata *rpdata = &tps->reg_pdata[id];
+
+	if (!IS_ERR(rpdata->en_gpiod)) {
+		gpiod_set_value_cansleep(rpdata->en_gpiod, 0);
+		rpdata->ena_gpio_state = 0;
+	}
+
+	if (!IS_ERR(rpdata->act_dis_gpiod)) {
+		gpiod_set_value_cansleep(rpdata->act_dis_gpiod, 1);
+		usleep_range(rpdata->act_dis_time_us, rpdata->act_dis_time_us +
+			     TPS65132_ACT_DIS_TIME_SLACK);
+		gpiod_set_value_cansleep(rpdata->act_dis_gpiod, 0);
+	}
+
+	return 0;
+}
+
+static int tps65132_regulator_is_enabled(struct regulator_dev *rdev)
+{
+	struct tps65132_regulator *tps = rdev_get_drvdata(rdev);
+	int id = rdev_get_id(rdev);
+	struct tps65132_reg_pdata *rpdata = &tps->reg_pdata[id];
+
+	if (!IS_ERR(rpdata->en_gpiod))
+		return rpdata->ena_gpio_state;
+
+	return 1;
+}
+
+static struct regulator_ops tps65132_regulator_ops = {
+	.enable = tps65132_regulator_enable,
+	.disable = tps65132_regulator_disable,
+	.is_enabled = tps65132_regulator_is_enabled,
+	.list_voltage = regulator_list_voltage_linear,
+	.map_voltage = regulator_map_voltage_linear,
+	.get_voltage_sel = regulator_get_voltage_sel_regmap,
+	.set_voltage_sel = regulator_set_voltage_sel_regmap,
+	.set_active_discharge = regulator_set_active_discharge_regmap,
+};
+
+static int tps65132_of_parse_cb(struct device_node *np,
+				const struct regulator_desc *desc,
+				struct regulator_config *config)
+{
+	struct tps65132_regulator *tps = config->driver_data;
+	struct tps65132_reg_pdata *rpdata = &tps->reg_pdata[desc->id];
+	int ret;
+
+	rpdata->en_gpiod = devm_fwnode_get_index_gpiod_from_child(tps->dev,
+					"enable", 0, &np->fwnode, 0, "enable");
+	if (IS_ERR(rpdata->en_gpiod)) {
+		ret = PTR_ERR(rpdata->en_gpiod);
+
+		/* Ignore the error other than probe defer */
+		if (ret == -EPROBE_DEFER)
+			return ret;
+		return 0;
+	}
+
+	rpdata->act_dis_gpiod = devm_fwnode_get_index_gpiod_from_child(
+					tps->dev, "active-discharge", 0,
+					&np->fwnode, 0, "active-discharge");
+	if (IS_ERR(rpdata->act_dis_gpiod)) {
+		ret = PTR_ERR(rpdata->act_dis_gpiod);
+
+		/* Ignore the error other than probe defer */
+		if (ret == -EPROBE_DEFER)
+			return ret;
+
+		return 0;
+	}
+
+	ret = of_property_read_u32(np, "ti,active-discharge-time-us",
+				   &rpdata->act_dis_time_us);
+	if (ret < 0) {
+		dev_err(tps->dev, "Failed to read active discharge time:%d\n",
+			ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+#define TPS65132_REGULATOR_DESC(_id, _name)		\
+	[TPS65132_REGULATOR_ID_##_id] = {		\
+		.name = "tps65132-"#_name,		\
+		.supply_name = "vin",			\
+		.id = TPS65132_REGULATOR_ID_##_id,	\
+		.of_match = of_match_ptr(#_name),	\
+		.of_parse_cb	= tps65132_of_parse_cb,	\
+		.ops = &tps65132_regulator_ops,		\
+		.n_voltages = TPS65132_VOUT_N_VOLTAGE,	\
+		.min_uV = TPS65132_VOUT_VMIN,		\
+		.uV_step = TPS65132_VOUT_STEP,		\
+		.enable_time = 500,			\
+		.vsel_mask = TPS65132_VOUT_MASK,	\
+		.vsel_reg = TPS65132_REG_##_id,		\
+		.active_discharge_off = 0,			\
+		.active_discharge_on = TPS65132_REG_APPS_DIS_##_id, \
+		.active_discharge_mask = TPS65132_REG_APPS_DIS_##_id, \
+		.active_discharge_reg = TPS65132_REG_APPS_DISP_DISN, \
+		.type = REGULATOR_VOLTAGE,		\
+		.owner = THIS_MODULE,			\
+	}
+
+static struct regulator_desc tps_regs_desc[TPS65132_MAX_REGULATORS] = {
+	TPS65132_REGULATOR_DESC(VPOS, outp),
+	TPS65132_REGULATOR_DESC(VNEG, outn),
+};
+
+static const struct regmap_range tps65132_no_reg_ranges[] = {
+	regmap_reg_range(TPS65132_REG_APPS_DISP_DISN + 1,
+			 TPS65132_REG_CONTROL - 1),
+};
+
+static const struct regmap_access_table tps65132_no_reg_table = {
+	.no_ranges = tps65132_no_reg_ranges,
+	.n_no_ranges = ARRAY_SIZE(tps65132_no_reg_ranges),
+};
+
+static const struct regmap_config tps65132_regmap_config = {
+	.reg_bits	= 8,
+	.val_bits	= 8,
+	.max_register	= TPS65132_REG_CONTROL + 1,
+	.cache_type	= REGCACHE_NONE,
+	.rd_table	= &tps65132_no_reg_table,
+	.wr_table	= &tps65132_no_reg_table,
+};
+
+static int tps65132_probe(struct i2c_client *client,
+			  const struct i2c_device_id *client_id)
+{
+	struct device *dev = &client->dev;
+	struct tps65132_regulator *tps;
+	struct regulator_config config = { };
+	int id;
+	int ret;
+
+	tps = devm_kzalloc(dev, sizeof(*tps), GFP_KERNEL);
+	if (!tps)
+		return -ENOMEM;
+
+	tps->rmap = devm_regmap_init_i2c(client, &tps65132_regmap_config);
+	if (IS_ERR(tps->rmap)) {
+		ret = PTR_ERR(tps->rmap);
+		dev_err(dev, "regmap init failed: %d\n", ret);
+		return ret;
+	}
+
+	i2c_set_clientdata(client, tps);
+	tps->dev = dev;
+
+	for (id = 0; id < TPS65132_MAX_REGULATORS; ++id) {
+		tps->rdesc[id] = &tps_regs_desc[id];
+
+		config.regmap = tps->rmap;
+		config.dev = dev;
+		config.driver_data = tps;
+
+		tps->rdev[id] = devm_regulator_register(dev,
+					tps->rdesc[id], &config);
+		if (IS_ERR(tps->rdev[id])) {
+			ret = PTR_ERR(tps->rdev[id]);
+			dev_err(dev, "regulator %s register failed: %d\n",
+				tps->rdesc[id]->name, ret);
+			return ret;
+		}
+	}
+	return 0;
+}
+
+static const struct i2c_device_id tps65132_id[] = {
+	{.name = "tps65132",},
+	{},
+};
+MODULE_DEVICE_TABLE(i2c, tps65132_id);
+
+static struct i2c_driver tps65132_i2c_driver = {
+	.driver = {
+		.name = "tps65132",
+		.owner = THIS_MODULE,
+	},
+	.probe = tps65132_probe,
+	.id_table = tps65132_id,
+};
+
+module_i2c_driver(tps65132_i2c_driver);
+
+MODULE_DESCRIPTION("tps65132 regulator driver");
+MODULE_AUTHOR("Venkat Reddy Talla <vreddytalla@nvidia.com>");
+MODULE_AUTHOR("Laxman Dewangan <ldewangan@nvidia.com>");
+MODULE_LICENSE("GPL v2");
